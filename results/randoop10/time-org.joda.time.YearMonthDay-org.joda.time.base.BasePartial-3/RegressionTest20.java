import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest20 {

    public static boolean debug = false;

    @Test
    public void test10001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10001");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        int int5 = yearMonthDay4.size();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((int) (byte) 100, 3, (int) (byte) 10, 4, 2022, 6, 12, 1970);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay4.plus((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.minusYears((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay15.withYear((int) (byte) 100);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology23);
        org.joda.time.DateMidnight dateMidnight25 = yearMonthDay24.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((long) (byte) -1);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight30, chronology31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight30.withCenturyOfEra(8);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology39);
        org.joda.time.Interval interval41 = yearMonthDay40.toInterval();
        org.joda.time.DateTime dateTime42 = yearMonthDay40.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property44 = dateTime42.property(dateTimeFieldType43);
        org.joda.time.DateTime.Property property45 = dateTime42.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone47);
        int int49 = dateMidnight48.getEra();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = dateMidnight48.toDateTime(chronology50);
        org.joda.time.DateTime dateTime53 = dateTime51.plusDays(9);
        int int54 = dateTime51.getEra();
        org.joda.time.DateTime dateTime55 = dateTime51.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone56 = dateTime55.getZone();
        java.lang.String str57 = dateTimeZone56.toString();
        org.joda.time.DateTime dateTime58 = dateTime42.toDateTime(dateTimeZone56);
        boolean boolean59 = dateTimeZone56.isFixed();
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) 7, dateTimeZone56);
        org.joda.time.MutableDateTime mutableDateTime61 = dateMidnight34.toMutableDateTime(dateTimeZone56);
        org.joda.time.DateTime dateTime62 = yearMonthDay19.toDateTimeAtMidnight(dateTimeZone56);
        org.joda.time.Interval interval63 = yearMonthDay19.toInterval();
        long long64 = interval63.toDurationMillis();
        boolean boolean66 = interval63.isAfter((-3L));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Etc/UTC" + "'", str57, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 86400000L + "'", long64 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test10002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10002");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime11 = dateTime7.withFieldAdded(durationFieldType9, 5);
        org.joda.time.TimeOfDay timeOfDay12 = dateTime7.toTimeOfDay();
        int int13 = timeOfDay12.getMinuteOfHour();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod18.setMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone22);
        int int24 = dateMidnight23.getEra();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        java.lang.Object obj30 = mutablePeriod29.clone();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone38);
        org.joda.time.Duration duration40 = mutablePeriod29.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight39);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, (org.joda.time.ReadableDuration) duration40);
        mutablePeriod18.add((org.joda.time.ReadableDuration) duration40);
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay12.minus((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.Chronology chronology44 = timeOfDay12.getChronology();
        org.joda.time.TimeOfDay.Property property45 = timeOfDay12.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay47 = property45.setCopy("0");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "PT0.100S");
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(timeOfDay47);
    }

    @Test
    public void test10003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10003");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        int int4 = dateMidnight3.getEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateMidnight3.toDateTime(chronology5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime6.withMillis(100L);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone11);
        int int13 = dateMidnight12.getEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateMidnight12.toDateTime(chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusDays(9);
        int int18 = dateTime15.getEra();
        org.joda.time.DateTime dateTime19 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime19.getZone();
        org.joda.time.DateTime dateTime21 = dateTime6.withZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = dateTime21.withDurationAdded((long) 86399, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone25 = dateTime24.getZone();
        org.joda.time.Chronology chronology26 = dateTime24.getChronology();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(0L, chronology26);
        org.joda.time.Chronology chronology28 = localTime27.getChronology();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(chronology28);
    }

    @Test
    public void test10004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10004");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date1 = new java.util.Date("January");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10005");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Interval interval7 = interval5.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.DateTime.Property property9 = dateTime8.secondOfDay();
        org.joda.time.DateTime dateTime11 = property9.addWrapFieldToCopy(86399);
        org.joda.time.DateTime dateTime13 = property9.addToCopy((long) 7);
        java.lang.String str15 = dateTime13.toString("32");
        int int16 = dateTime13.getMinuteOfHour();
        int int17 = dateTime13.getSecondOfDay();
        org.joda.time.DateTime.Property property18 = dateTime13.weekOfWeekyear();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "32" + "'", str15, "32");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 7 + "'", int17 == 7);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test10006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10006");
        java.util.Date date1 = new java.util.Date((long) 0);
        long long2 = date1.getTime();
        int int3 = date1.getYear();
        date1.setMonth(588);
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Jan 01 00:00:00 GMT 2019");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 70 + "'", int3 == 70);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test10007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10007");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        int int8 = dateTime5.getEra();
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime9.getZone();
        java.lang.String str11 = dateTimeZone10.toString();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = yearMonthDay12.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        int int19 = dateMidnight18.getEra();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateMidnight18.toDateTime(chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusDays(9);
        int int24 = dateTime21.getEra();
        org.joda.time.DateTime dateTime25 = dateTime21.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime25.getZone();
        long long29 = dateTimeZone26.adjustOffset((long) 5, true);
        org.joda.time.LocalDate localDate30 = org.joda.time.LocalDate.now(dateTimeZone26);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone26);
        long long34 = dateTimeZone26.adjustOffset((long) 9, false);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) 1, 434L, dateTimeZone26);
        int int37 = dateTimeZone26.getOffset((long) 25);
        org.joda.time.DateTime dateTime38 = yearMonthDay12.toDateTimeAtCurrentTime(dateTimeZone26);
        int int39 = yearMonthDay12.getMonthOfYear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Etc/UTC" + "'", str11, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 5L + "'", long29 == 5L);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 9L + "'", long34 == 9L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
    }

    @Test
    public void test10008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10008");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        mutableDateTime4.setDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime4.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundHalfFloor();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology12);
        org.joda.time.Interval interval14 = yearMonthDay13.toInterval();
        org.joda.time.Period period15 = interval14.toPeriod();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology19);
        org.joda.time.Interval interval21 = yearMonthDay20.toInterval();
        org.joda.time.Period period22 = interval21.toPeriod();
        long long23 = interval21.getStartMillis();
        org.joda.time.Interval interval24 = interval14.overlap((org.joda.time.ReadableInterval) interval21);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone26);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(0L, 100L, periodType36, chronology37);
        mutablePeriod32.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone41);
        org.joda.time.Duration duration43 = mutablePeriod32.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight27.plus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.LocalDate localDate45 = dateMidnight44.toLocalDate();
        org.joda.time.Chronology chronology46 = localDate45.getChronology();
        java.lang.String str47 = chronology46.toString();
        org.joda.time.DateTimeField dateTimeField48 = chronology46.secondOfDay();
        org.joda.time.Interval interval49 = interval14.withChronology(chronology46);
        org.joda.time.DurationField durationField50 = chronology46.minutes();
        boolean boolean51 = mutableDateTime8.equals((java.lang.Object) durationField50);
        org.joda.time.DateTimeField dateTimeField52 = null;
        mutableDateTime8.setRounding(dateTimeField52, 22);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime8.weekyear();
        org.joda.time.MutableDateTime mutableDateTime56 = property55.roundFloor();
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime56.monthOfYear();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-61038316800000L) + "'", long23 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0.100S");
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[UTC]" + "'", str47, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(property57);
    }

    @Test
    public void test10009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10009");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate.Property property9 = localDate8.weekyear();
        org.joda.time.LocalDate localDate11 = localDate8.withYearOfCentury((int) (byte) 0);
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfCentury();
        org.joda.time.DateTime dateTime13 = localDate11.toDateTimeAtMidnight();
        int int14 = localDate11.size();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
    }

    @Test
    public void test10010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10010");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfYear();
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate24 = localDate20.plusDays(21);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology28);
        java.lang.String str30 = yearMonthDay29.toString();
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay29.minusDays(10);
        int[] intArray33 = yearMonthDay29.getValues();
        boolean boolean34 = localDate24.equals((java.lang.Object) yearMonthDay29);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "0035-10-10" + "'", str30, "0035-10-10");
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[35, 10, 10]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test10011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10011");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(0L, 100L, periodType2, chronology3);
        java.lang.Object obj5 = mutablePeriod4.clone();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        org.joda.time.Duration duration15 = mutablePeriod4.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight14);
        mutablePeriod4.addMillis(0);
        mutablePeriod4.setMonths(0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone36);
        org.joda.time.Duration duration38 = mutablePeriod27.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight22.plus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        java.lang.Object obj47 = mutablePeriod46.clone();
        java.lang.String str48 = mutablePeriod46.toString();
        mutableDateTime41.add((org.joda.time.ReadablePeriod) mutablePeriod46, 2022);
        mutablePeriod4.setPeriod((org.joda.time.ReadableInstant) dateMidnight39, (org.joda.time.ReadableInstant) mutableDateTime41);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone55);
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(0L, 100L, periodType59, chronology60);
        java.lang.Object obj62 = mutablePeriod61.clone();
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(0L, 100L, periodType65, chronology66);
        mutablePeriod61.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod67);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone70);
        org.joda.time.Duration duration72 = mutablePeriod61.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight71);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight56.plus((org.joda.time.ReadableDuration) duration72);
        org.joda.time.LocalDate localDate74 = dateMidnight73.toLocalDate();
        org.joda.time.Chronology chronology75 = localDate74.getChronology();
        java.lang.String str76 = chronology75.toString();
        org.joda.time.DateTimeField dateTimeField77 = chronology75.secondOfDay();
        org.joda.time.Interval interval78 = new org.joda.time.Interval(0L, (long) 1, chronology75);
        org.joda.time.YearMonthDay yearMonthDay80 = new org.joda.time.YearMonthDay(10L);
        long long82 = chronology75.set((org.joda.time.ReadablePartial) yearMonthDay80, (long) 8);
        org.joda.time.DateTimeField dateTimeField83 = chronology75.secondOfDay();
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod4, chronology75);
        org.joda.time.DateTimeField dateTimeField85 = chronology75.yearOfEra();
        org.joda.time.DurationField durationField86 = dateTimeField85.getRangeDurationField();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "P52YT3M22.200S");
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0.100S");
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PT0.100S" + "'", str48, "PT0.100S");
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "PT0.100S");
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "ISOChronology[UTC]" + "'", str76, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 8L + "'", long82 == 8L);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNull(durationField86);
    }

    @Test
    public void test10012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10012");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 53230763, dateTimeZone6);
        int int8 = localDateTime7.size();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusMonths(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.withYearOfEra(53233428);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean13 = strSet4.contains((java.lang.Object) localDateTime7);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: null");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test10013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10013");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology4);
        org.joda.time.Interval interval6 = yearMonthDay5.toInterval();
        org.joda.time.Period period7 = interval6.toPeriod();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType9 = periodType8.withMillisRemoved();
        int int10 = periodType9.size();
        org.joda.time.Period period12 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.hours();
        java.lang.String str14 = durationFieldType13.toString();
        org.joda.time.Period period16 = period12.withField(durationFieldType13, 2);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        java.lang.Object obj25 = mutablePeriod24.clone();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        org.joda.time.Duration duration35 = mutablePeriod24.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight19.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.LocalDate localDate37 = dateMidnight36.toLocalDate();
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        java.lang.Object obj44 = mutablePeriod43.clone();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0L, 100L, periodType47, chronology48);
        mutablePeriod43.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod49);
        int int51 = mutablePeriod49.getMinutes();
        org.joda.time.Period period53 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType54 = org.joda.time.DurationFieldType.hours();
        java.lang.String str55 = durationFieldType54.toString();
        org.joda.time.Period period57 = period53.withField(durationFieldType54, 2);
        boolean boolean58 = mutablePeriod49.isSupported(durationFieldType54);
        long long61 = chronology38.add((org.joda.time.ReadablePeriod) mutablePeriod49, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.Chronology chronology63 = chronology38.withZone(dateTimeZone62);
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate(chronology63);
        org.joda.time.DurationField durationField65 = chronology63.halfdays();
        org.joda.time.DurationField durationField66 = durationFieldType13.getField(chronology63);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((java.lang.Object) interval6, periodType9, chronology63);
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime((long) '#', chronology63);
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime68.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime71 = property69.add((long) 15);
        org.joda.time.MutableDateTime mutableDateTime72 = property69.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime74 = property69.add(0);
        org.joda.time.MutableDateTime.Property property75 = mutableDateTime74.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField76 = mutableDateTime74.getRoundingField();
        mutableDateTime74.setMinuteOfDay(199);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hours" + "'", str14, "hours");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT0.100S");
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "hours" + "'", str55, "hours");
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 53230963L + "'", long61 == 53230963L);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNull(dateTimeField76);
    }

    @Test
    public void test10014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10014");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfYear();
        org.joda.time.LocalDate localDate22 = property21.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate23 = property21.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone25);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone40);
        org.joda.time.Duration duration42 = mutablePeriod31.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight26.plus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.LocalDate localDate44 = dateMidnight43.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Interval interval46 = localDate44.toInterval(dateTimeZone45);
        java.lang.String str47 = interval46.toString();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.YearMonthDay yearMonthDay52 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology51);
        org.joda.time.Interval interval53 = yearMonthDay52.toInterval();
        org.joda.time.Period period54 = interval53.toPeriod();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology58);
        org.joda.time.Interval interval60 = yearMonthDay59.toInterval();
        org.joda.time.Period period61 = interval60.toPeriod();
        long long62 = interval60.getStartMillis();
        org.joda.time.Interval interval63 = interval53.overlap((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.YearMonthDay yearMonthDay68 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology67);
        org.joda.time.Interval interval69 = yearMonthDay68.toInterval();
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.Interval interval71 = interval69.withPeriodBeforeEnd(readablePeriod70);
        boolean boolean72 = interval53.overlaps((org.joda.time.ReadableInterval) interval71);
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.YearMonthDay yearMonthDay77 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology76);
        org.joda.time.Interval interval78 = yearMonthDay77.toInterval();
        org.joda.time.Period period79 = interval78.toPeriod();
        boolean boolean81 = interval78.isAfter(100L);
        boolean boolean82 = interval71.isAfter((org.joda.time.ReadableInterval) interval78);
        boolean boolean83 = interval46.isBefore((org.joda.time.ReadableInterval) interval78);
        org.joda.time.PeriodType periodType86 = null;
        org.joda.time.Chronology chronology87 = null;
        org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod(0L, 100L, periodType86, chronology87);
        mutablePeriod88.setMillis((-1));
        mutablePeriod88.setDays(10);
        org.joda.time.Interval interval93 = interval78.withPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod88);
        org.joda.time.MutablePeriod mutablePeriod94 = mutablePeriod88.copy();
        org.joda.time.LocalDate localDate95 = localDate23.plus((org.joda.time.ReadablePeriod) mutablePeriod94);
        int int96 = localDate95.getYearOfCentury();
        int int97 = localDate95.getDayOfYear();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str47, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-61038316800000L) + "'", long62 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertNotNull(mutablePeriod94);
        org.junit.Assert.assertNotNull(localDate95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 70 + "'", int96 == 70);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 11 + "'", int97 == 11);
    }

    @Test
    public void test10015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10015");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime localTime13 = property12.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField14 = property12.getField();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        int int18 = dateMidnight17.getEra();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = dateMidnight17.toDateTime(chronology19);
        org.joda.time.DateTime dateTime22 = dateTime20.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight23 = dateTime22.toDateMidnight();
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.era();
        int int25 = dateMidnight23.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight23.plusWeeks(70);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.year();
        org.joda.time.DateMidnight dateMidnight29 = property28.withMaximumValue();
        java.util.GregorianCalendar gregorianCalendar30 = dateMidnight29.toGregorianCalendar();
        long long31 = property12.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.MutableDateTime mutableDateTime32 = dateMidnight29.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.yearOfCentury();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(gregorianCalendar30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-153722866606560L) + "'", long31 == (-153722866606560L));
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test10016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10016");
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone8);
        int int10 = dateMidnight9.getEra();
        org.joda.time.DateMidnight.Property property11 = dateMidnight9.monthOfYear();
        org.joda.time.DateMidnight dateMidnight13 = property11.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property11.getFieldType();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.year();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusSeconds((int) (byte) 10);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        boolean boolean23 = dateTimeFieldType14.isSupported(chronology22);
        org.joda.time.DurationField durationField24 = chronology22.hours();
        java.lang.String str25 = chronology22.toString();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone27);
        int int29 = dateMidnight28.getEra();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = dateMidnight28.toDateTime(chronology30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusDays(9);
        int int34 = dateTime31.getEra();
        org.joda.time.DateTime dateTime35 = dateTime31.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime35.getZone();
        long long39 = dateTimeZone36.adjustOffset((long) 5, true);
        boolean boolean41 = dateTimeZone36.isStandardOffset((long) 3);
        org.joda.time.Chronology chronology42 = chronology22.withZone(dateTimeZone36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(52, 0, 947, 50400000, 25, 177, 40, chronology22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 50400000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[UTC]" + "'", str25, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 5L + "'", long39 == 5L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(chronology42);
    }

    @Test
    public void test10017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10017");
        java.util.Date date5 = new java.util.Date(53755266, (-4459672), (int) (short) 100, 3120947, 455376);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Nov 02 16:36:00 GMT 53385883");
    }

    @Test
    public void test10018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10018");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.DateTime dateTime2 = dateTime1.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        org.joda.time.Duration duration21 = mutablePeriod10.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight5.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.LocalDate localDate23 = dateMidnight22.toLocalDate();
        org.joda.time.Period period25 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.hours();
        java.lang.String str27 = durationFieldType26.toString();
        org.joda.time.Period period29 = period25.withField(durationFieldType26, 2);
        org.joda.time.Period period31 = period29.withMillis((int) '#');
        org.joda.time.LocalDate localDate32 = localDate23.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.LocalDate localDate34 = localDate32.minusYears(11);
        int int35 = localDate34.getYear();
        org.joda.time.DateTime dateTime36 = dateTime2.withFields((org.joda.time.ReadablePartial) localDate34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = dateTime36.withDayOfWeek(591);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 591 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "hours" + "'", str27, "hours");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1959 + "'", int35 == 1959);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test10019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10019");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 58553967);
    }

    @Test
    public void test10020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10020");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay10 = property8.addNoWrapToCopy(3);
        org.joda.time.TimeOfDay timeOfDay11 = property8.withMaximumValue();
        org.joda.time.LocalTime localTime12 = timeOfDay11.toLocalTime();
        int int13 = localTime12.getMinuteOfHour();
        org.joda.time.LocalTime.Property property14 = localTime12.millisOfDay();
        java.lang.String str15 = property14.getAsText();
        org.joda.time.LocalTime localTime17 = property14.addCopy(53097298);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        int int21 = dateMidnight20.getEra();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = dateMidnight20.toDateTime(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusWeeks(0);
        org.joda.time.DateTime dateTime26 = dateTime25.withEarlierOffsetAtOverlap();
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime29 = dateTime25.withFieldAdded(durationFieldType27, 5);
        org.joda.time.TimeOfDay timeOfDay30 = dateTime25.toTimeOfDay();
        int int31 = timeOfDay30.getMinuteOfHour();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, 100L, periodType34, chronology35);
        mutablePeriod36.setMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone40);
        int int42 = dateMidnight41.getEra();
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(0L, 100L, periodType45, chronology46);
        java.lang.Object obj48 = mutablePeriod47.clone();
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(0L, 100L, periodType51, chronology52);
        mutablePeriod47.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone56);
        org.joda.time.Duration duration58 = mutablePeriod47.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight57);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight41, (org.joda.time.ReadableDuration) duration58);
        mutablePeriod36.add((org.joda.time.ReadableDuration) duration58);
        org.joda.time.TimeOfDay timeOfDay61 = timeOfDay30.minus((org.joda.time.ReadablePeriod) mutablePeriod36);
        int int62 = mutablePeriod36.getMonths();
        mutablePeriod36.addSeconds(16);
        mutablePeriod36.setYears(2004);
        org.joda.time.Period period67 = mutablePeriod36.toPeriod();
        org.joda.time.Period period69 = period67.plusYears(53395022);
        org.joda.time.LocalTime localTime70 = localTime17.plus((org.joda.time.ReadablePeriod) period69);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "82859000" + "'", str15, "82859000");
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "PT0.100S");
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(timeOfDay61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(localTime70);
    }

    @Test
    public void test10021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10021");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 53230763, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.minusYears(53233428);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay51.year();
        org.joda.time.YearMonthDay yearMonthDay56 = property54.setCopy(21);
        int int57 = property54.getMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay58 = property54.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay60 = property54.setCopy(53255370);
        java.lang.String str61 = property54.getAsText();
        int int62 = property54.getMinimumValueOverall();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 53230963L + "'", long49 == 53230963L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-292275054) + "'", int57 == (-292275054));
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1970" + "'", str61, "1970");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-292275054) + "'", int62 == (-292275054));
    }

    @Test
    public void test10022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10022");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        int int9 = property8.get();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        java.lang.Object obj15 = mutablePeriod14.clone();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(0L, 100L, periodType18, chronology19);
        mutablePeriod14.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone23);
        org.joda.time.Duration duration25 = mutablePeriod14.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight24);
        mutablePeriod14.addMillis(0);
        mutablePeriod14.setMonths(0);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone31);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        java.lang.Object obj38 = mutablePeriod37.clone();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        mutablePeriod37.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone46);
        org.joda.time.Duration duration48 = mutablePeriod37.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight32.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.MutableDateTime mutableDateTime51 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(0L, 100L, periodType54, chronology55);
        java.lang.Object obj57 = mutablePeriod56.clone();
        java.lang.String str58 = mutablePeriod56.toString();
        mutableDateTime51.add((org.joda.time.ReadablePeriod) mutablePeriod56, 2022);
        mutablePeriod14.setPeriod((org.joda.time.ReadableInstant) dateMidnight49, (org.joda.time.ReadableInstant) mutableDateTime51);
        mutableDateTime51.addWeekyears((int) (byte) 0);
        mutableDateTime51.setSecondOfMinute(8);
        int int66 = property8.compareTo((org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.TimeOfDay timeOfDay67 = property8.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay68 = property8.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay70 = property8.addToCopy((int) (short) -1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "P52YT3M22.200S");
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "PT0.100S");
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "PT0.100S" + "'", str58, "PT0.100S");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(timeOfDay67);
        org.junit.Assert.assertNotNull(timeOfDay68);
        org.junit.Assert.assertNotNull(timeOfDay70);
    }

    @Test
    public void test10023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10023");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setWeekDate(14, (int) (byte) 0, 7);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone7);
        int int9 = dateMidnight8.getEra();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateMidnight8.toDateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusDays(9);
        int int14 = dateTime11.getEra();
        org.joda.time.DateTime dateTime15 = dateTime11.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime15.getZone();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone16);
        boolean boolean18 = calendar0.before((java.lang.Object) dateTimeZone16);
        calendar0.clear((int) (byte) 0);
        calendar0.set((int) '#', 2, (-1));
        calendar0.setTimeInMillis(22L);
        java.lang.String str27 = calendar0.getCalendarType();
        long long28 = calendar0.getTimeInMillis();
        calendar0.clear();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "gregory" + "'", str27, "gregory");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 22L + "'", long28 == 22L);
    }

    @Test
    public void test10024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10024");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.time();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getRangeDurationType();
        java.lang.String str5 = durationFieldType4.getName();
        int int6 = periodType2.indexOf(durationFieldType4);
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.millisOfDay();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime10.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = property12.set("0");
        java.util.Date date16 = new java.util.Date((long) 0);
        int int17 = date16.getDay();
        org.joda.time.YearMonthDay yearMonthDay18 = org.joda.time.YearMonthDay.fromDateFields(date16);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone36);
        org.joda.time.Duration duration38 = mutablePeriod27.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight22.plus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.LocalDate localDate40 = dateMidnight39.toLocalDate();
        org.joda.time.Chronology chronology41 = localDate40.getChronology();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        java.lang.Object obj47 = mutablePeriod46.clone();
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(0L, 100L, periodType50, chronology51);
        mutablePeriod46.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod52);
        int int54 = mutablePeriod52.getMinutes();
        org.joda.time.Period period56 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.hours();
        java.lang.String str58 = durationFieldType57.toString();
        org.joda.time.Period period60 = period56.withField(durationFieldType57, 2);
        boolean boolean61 = mutablePeriod52.isSupported(durationFieldType57);
        long long64 = chronology41.add((org.joda.time.ReadablePeriod) mutablePeriod52, (long) 53230763, 2);
        boolean boolean65 = durationFieldType19.isSupported(chronology41);
        org.joda.time.YearMonthDay yearMonthDay66 = yearMonthDay18.withChronologyRetainFields(chronology41);
        mutableDateTime14.setChronology(chronology41);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) 14, (long) 2, chronology41);
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((long) 45, (long) (byte) 100, periodType2, chronology41);
        org.joda.time.DateTimeField dateTimeField70 = chronology41.weekyear();
        org.joda.time.DateTimeField dateTimeField71 = chronology41.year();
        java.lang.String str73 = dateTimeField71.getAsShortText((long) 1022397);
        org.joda.time.DurationField durationField74 = dateTimeField71.getLeapDurationField();
        long long77 = durationField74.subtract(53487L, 53755435);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "days" + "'", str5, "days");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0.100S");
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hours" + "'", str58, "hours");
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 53230963L + "'", long64 == 53230963L);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1970" + "'", str73, "1970");
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-4644469583946513L) + "'", long77 == (-4644469583946513L));
    }

    @Test
    public void test10025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10025");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(0L, 100L, periodType7, chronology8);
        java.lang.Object obj10 = mutablePeriod9.clone();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.Duration duration20 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.LocalDate localDate22 = dateMidnight21.toLocalDate();
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(0L, 100L, periodType26, chronology27);
        java.lang.Object obj29 = mutablePeriod28.clone();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        int int36 = mutablePeriod34.getMinutes();
        org.joda.time.Period period38 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.hours();
        java.lang.String str40 = durationFieldType39.toString();
        org.joda.time.Period period42 = period38.withField(durationFieldType39, 2);
        boolean boolean43 = mutablePeriod34.isSupported(durationFieldType39);
        long long46 = chronology23.add((org.joda.time.ReadablePeriod) mutablePeriod34, (long) 53230763, 2);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 11, chronology23);
        org.joda.time.DateTimeField dateTimeField48 = chronology23.year();
        org.joda.time.DurationField durationField49 = chronology23.millis();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight(0L, dateTimeZone51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone54);
        int int56 = dateMidnight55.getEra();
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(0L, 100L, periodType59, chronology60);
        java.lang.Object obj62 = mutablePeriod61.clone();
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(0L, 100L, periodType65, chronology66);
        mutablePeriod61.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod67);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone70);
        org.joda.time.Duration duration72 = mutablePeriod61.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight71);
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight55, (org.joda.time.ReadableDuration) duration72);
        org.joda.time.PeriodType periodType74 = null;
        org.joda.time.Period period75 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight52, (org.joda.time.ReadableDuration) duration72, periodType74);
        org.joda.time.Period period77 = period75.withDays((-1));
        org.joda.time.Period period79 = period77.minusDays((int) (byte) 0);
        org.joda.time.Duration duration80 = period77.toStandardDuration();
        long long83 = chronology23.add((org.joda.time.ReadablePeriod) period77, (long) 53304145, (-260254));
        org.joda.time.LocalDate localDate84 = new org.joda.time.LocalDate(17536739580101L, chronology23);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT0.100S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hours" + "'", str40, "hours");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 53230963L + "'", long46 == 53230963L);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "PT0.100S");
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 22485972878745L + "'", long83 == 22485972878745L);
    }

    @Test
    public void test10026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10026");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes(5);
        org.joda.time.DateTime.Property property8 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime5.withCenturyOfEra(15);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test10027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10027");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.Period period3 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.hours();
        java.lang.String str5 = durationFieldType4.toString();
        org.joda.time.Period period7 = period3.withField(durationFieldType4, 2);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        java.lang.Object obj16 = mutablePeriod15.clone();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, 100L, periodType19, chronology20);
        mutablePeriod15.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod21);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone24);
        org.joda.time.Duration duration26 = mutablePeriod15.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight10.plus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.LocalDate localDate28 = dateMidnight27.toLocalDate();
        org.joda.time.Chronology chronology29 = localDate28.getChronology();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        java.lang.Object obj35 = mutablePeriod34.clone();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        mutablePeriod34.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod40);
        int int42 = mutablePeriod40.getMinutes();
        org.joda.time.Period period44 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.hours();
        java.lang.String str46 = durationFieldType45.toString();
        org.joda.time.Period period48 = period44.withField(durationFieldType45, 2);
        boolean boolean49 = mutablePeriod40.isSupported(durationFieldType45);
        long long52 = chronology29.add((org.joda.time.ReadablePeriod) mutablePeriod40, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.Chronology chronology54 = chronology29.withZone(dateTimeZone53);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate(chronology54);
        org.joda.time.DurationField durationField56 = chronology54.halfdays();
        org.joda.time.DurationField durationField57 = durationFieldType4.getField(chronology54);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 11, chronology54);
        org.joda.time.DateTimeField dateTimeField59 = chronology54.centuryOfEra();
        boolean boolean60 = dateTimeFieldType0.isSupported(chronology54);
        org.joda.time.DateTimeField dateTimeField61 = chronology54.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "hours" + "'", str5, "hours");
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "PT0.100S");
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hours" + "'", str46, "hours");
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 53230963L + "'", long52 == 53230963L);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTimeField61);
    }

    @Test
    public void test10028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10028");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray2 = strSet1.toArray();
        java.util.stream.Stream<java.lang.String> strStream3 = strSet1.stream();
        java.io.IOException iOException5 = new java.io.IOException("PT0.100S");
        java.io.IOException iOException7 = new java.io.IOException();
        java.io.IOException iOException8 = new java.io.IOException("hi!", (java.lang.Throwable) iOException7);
        iOException5.addSuppressed((java.lang.Throwable) iOException7);
        java.io.IOException iOException11 = new java.io.IOException("PT0.100S");
        java.io.IOException iOException13 = new java.io.IOException();
        java.io.IOException iOException14 = new java.io.IOException("hi!", (java.lang.Throwable) iOException13);
        iOException11.addSuppressed((java.lang.Throwable) iOException13);
        java.io.IOException iOException17 = new java.io.IOException();
        java.io.IOException iOException18 = new java.io.IOException("hi!", (java.lang.Throwable) iOException17);
        java.io.IOException iOException19 = new java.io.IOException();
        java.io.IOException iOException21 = new java.io.IOException("PT0.100S");
        java.io.IOException iOException23 = new java.io.IOException();
        java.io.IOException iOException24 = new java.io.IOException("hi!", (java.lang.Throwable) iOException23);
        iOException21.addSuppressed((java.lang.Throwable) iOException23);
        java.io.IOException iOException27 = new java.io.IOException();
        java.io.IOException iOException28 = new java.io.IOException("hi!", (java.lang.Throwable) iOException27);
        java.io.IOException[] iOExceptionArray29 = new java.io.IOException[] { iOException7, iOException11, iOException17, iOException19, iOException23, iOException28 };
        java.io.IOException[] iOExceptionArray30 = strSet1.toArray(iOExceptionArray29);
        org.joda.time.ReadableDateTime[] readableDateTimeArray31 = new org.joda.time.ReadableDateTime[] {};
        org.joda.time.ReadableDateTime[] readableDateTimeArray32 = strSet1.toArray(readableDateTimeArray31);
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.lang.String[] strArray38 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList39 = new java.util.ArrayList<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList39, strArray38);
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.lang.String>) strList39);
        boolean boolean42 = strSet1.removeAll((java.util.Collection<java.lang.String>) strList39);
        java.util.Iterator<java.lang.String> strItor43 = strSet1.iterator();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray2), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray2), "[]");
        org.junit.Assert.assertNotNull(strStream3);
        org.junit.Assert.assertNotNull(iOExceptionArray29);
        org.junit.Assert.assertNotNull(iOExceptionArray30);
        org.junit.Assert.assertNotNull(readableDateTimeArray31);
        org.junit.Assert.assertNotNull(readableDateTimeArray32);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strItor43);
    }

    @Test
    public void test10029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10029");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        int int34 = mutablePeriod32.getMinutes();
        org.joda.time.Period period36 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        java.lang.String str38 = durationFieldType37.toString();
        org.joda.time.Period period40 = period36.withField(durationFieldType37, 2);
        boolean boolean41 = mutablePeriod32.isSupported(durationFieldType37);
        long long44 = chronology21.add((org.joda.time.ReadablePeriod) mutablePeriod32, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Chronology chronology46 = chronology21.withZone(dateTimeZone45);
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now(chronology21);
        org.joda.time.DurationField durationField48 = chronology21.minutes();
        org.joda.time.DurationField durationField49 = chronology21.weekyears();
        org.joda.time.DateTimeField dateTimeField50 = chronology21.dayOfWeek();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hours" + "'", str38, "hours");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 53230963L + "'", long44 == 53230963L);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test10030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10030");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 53230763, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.minusYears(53233428);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay51.year();
        org.joda.time.YearMonthDay yearMonthDay56 = property54.setCopy(21);
        int int57 = property54.getMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay59 = property54.addWrapFieldToCopy(2);
        org.joda.time.YearMonthDay yearMonthDay60 = property54.withMinimumValue();
        int int61 = yearMonthDay60.size();
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay60.minusDays((-1996092050));
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(dateTimeZone64);
        org.joda.time.DateTime dateTime66 = yearMonthDay60.toDateTimeAtMidnight(dateTimeZone64);
        java.util.TimeZone timeZone67 = dateTimeZone64.toTimeZone();
        int int69 = timeZone67.getOffset(97L);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 53230963L + "'", long49 == 53230963L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-292275054) + "'", int57 == (-292275054));
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(timeZone67);
        org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test10031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10031");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        java.util.Locale locale5 = new java.util.Locale("hi!", "");
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.LocalDateTime localDateTime7 = property2.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYear((-1));
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.centuryOfEra();
        int int11 = localDateTime9.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusYears(1970);
        int int14 = localDateTime13.getSecondOfMinute();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022" + "'", str6, "2022");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 34 + "'", int14 == 34);
    }

    @Test
    public void test10032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10032");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0L, 100L, periodType6, chronology7);
        java.lang.Object obj9 = mutablePeriod8.clone();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.Duration duration19 = mutablePeriod8.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight3.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.LocalDate localDate21 = dateMidnight20.toLocalDate();
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        int int35 = mutablePeriod33.getMinutes();
        org.joda.time.Period period37 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.hours();
        java.lang.String str39 = durationFieldType38.toString();
        org.joda.time.Period period41 = period37.withField(durationFieldType38, 2);
        boolean boolean42 = mutablePeriod33.isSupported(durationFieldType38);
        long long45 = chronology22.add((org.joda.time.ReadablePeriod) mutablePeriod33, (long) 53230763, 2);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 11, chronology22);
        org.joda.time.DateTimeField dateTimeField47 = chronology22.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField48 = chronology22.era();
        org.joda.time.DateTimeField dateTimeField49 = chronology22.weekOfWeekyear();
        long long52 = dateTimeField49.add((long) (short) -1, (int) (short) -1);
        boolean boolean53 = dateTimeField49.isSupported();
        int int56 = dateTimeField49.getDifference((-61725661917851L), (-61725661873986L));
        org.joda.time.DurationField durationField57 = dateTimeField49.getDurationField();
        long long60 = dateTimeField49.getDifferenceAsLong((long) 69840000, (long) ' ');
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT0.100S");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hours" + "'", str39, "hours");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 53230963L + "'", long45 == 53230963L);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-604800001L) + "'", long52 == (-604800001L));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
    }

    @Test
    public void test10033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10033");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        java.lang.String str38 = chronology37.toString();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.secondOfDay();
        org.joda.time.Interval interval40 = interval5.withChronology(chronology37);
        org.joda.time.DateTimeField dateTimeField41 = chronology37.millisOfDay();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(chronology37);
        org.joda.time.DateTimeField dateTimeField43 = chronology37.millisOfDay();
        org.joda.time.DurationField durationField44 = chronology37.halfdays();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
    }

    @Test
    public void test10034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10034");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight6 = property4.addToCopy((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone9);
        int int11 = dateMidnight10.getEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateMidnight10.toDateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusDays(9);
        int int16 = dateTime13.getEra();
        org.joda.time.DateTime dateTime17 = dateTime13.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime17.getZone();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight6.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight6.withWeekOfWeekyear(2);
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight24 = property23.withMaximumValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight24);
    }

    @Test
    public void test10035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10035");
        java.util.Date date3 = new java.util.Date(53233428, 53097298, 2021);
        date3.setDate(5);
        int int6 = date3.getHours();
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromDateFields(date3);
        date3.setMinutes(0);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sat May 05 00:00:00 GMT 57660108");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test10036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10036");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.add((long) 3);
        mutableDateTime13.setDayOfMonth((int) (byte) 10);
        mutableDateTime13.add((long) 6);
        mutableDateTime13.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.monthOfYear();
        mutableDateTime13.setTime((org.joda.time.ReadableInstant) dateMidnight20);
        int int23 = property8.compareTo((org.joda.time.ReadableInstant) mutableDateTime13);
        mutableDateTime13.addMinutes(22);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime13.secondOfMinute();
        mutableDateTime13.addMillis(53);
        org.joda.time.MutableDateTime mutableDateTime29 = mutableDateTime13.toMutableDateTime();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime29);
    }

    @Test
    public void test10037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10037");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight6 = property4.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property4.getFieldType();
        org.joda.time.DateMidnight dateMidnight8 = property4.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight9 = property4.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(0L, 100L, periodType15, chronology16);
        java.lang.Object obj18 = mutablePeriod17.clone();
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        mutablePeriod17.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone26);
        org.joda.time.Duration duration28 = mutablePeriod17.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight12.plus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight9.plus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        int int34 = dateMidnight33.getEra();
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(0L, 100L, periodType37, chronology38);
        java.lang.Object obj40 = mutablePeriod39.clone();
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(0L, 100L, periodType43, chronology44);
        mutablePeriod39.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod45);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone48);
        org.joda.time.Duration duration50 = mutablePeriod39.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight49);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight33, (org.joda.time.ReadableDuration) duration50);
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.seconds();
        org.joda.time.PeriodType periodType53 = periodType52.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateMidnight33, periodType52);
        org.joda.time.PeriodType periodType55 = periodType52.withWeeksRemoved();
        org.joda.time.PeriodType periodType56 = periodType55.withMinutesRemoved();
        org.joda.time.PeriodType periodType57 = periodType55.withMonthsRemoved();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "PT0.100S");
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "PT0.100S");
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(periodType57);
    }

    @Test
    public void test10038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10038");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Period period22 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        java.lang.String str24 = durationFieldType23.toString();
        org.joda.time.Period period26 = period22.withField(durationFieldType23, 2);
        org.joda.time.Period period28 = period26.withMillis((int) '#');
        org.joda.time.LocalDate localDate29 = localDate20.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.LocalDate localDate31 = localDate29.minusYears(11);
        int int32 = localDate29.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        java.lang.Object obj41 = mutablePeriod40.clone();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        mutablePeriod40.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone49);
        org.joda.time.Duration duration51 = mutablePeriod40.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight35.plus((org.joda.time.ReadableDuration) duration51);
        org.joda.time.LocalDate localDate53 = dateMidnight52.toLocalDate();
        org.joda.time.LocalDate.Property property54 = localDate53.dayOfYear();
        org.joda.time.LocalDate localDate55 = property54.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate57 = localDate55.withWeekyear(11);
        org.joda.time.MutableDateTime mutableDateTime59 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime59.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime61 = property60.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime62 = property60.roundFloor();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.YearMonthDay yearMonthDay67 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology66);
        org.joda.time.DateMidnight dateMidnight68 = yearMonthDay67.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight68.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime62, (org.joda.time.ReadableInstant) dateMidnight68, periodType72);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone75);
        int int77 = dateMidnight76.getEra();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = dateMidnight76.toDateTime(chronology78);
        org.joda.time.DateTime dateTime81 = dateTime79.plusDays(9);
        int int82 = dateTime79.getEra();
        org.joda.time.DateTime dateTime83 = dateTime79.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone84 = dateTime83.getZone();
        long long87 = dateTimeZone84.adjustOffset((long) 5, true);
        boolean boolean89 = dateTimeZone84.isStandardOffset((long) 3);
        mutableDateTime62.setZoneRetainFields(dateTimeZone84);
        org.joda.time.DateTime dateTime91 = localDate57.toDateTimeAtCurrentTime(dateTimeZone84);
        org.joda.time.Interval interval92 = localDate29.toInterval(dateTimeZone84);
        boolean boolean94 = interval92.isBefore((-168723889700L));
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hours" + "'", str24, "hours");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "PT0.100S");
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 5L + "'", long87 == 5L);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test10039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10039");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Period period22 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        java.lang.String str24 = durationFieldType23.toString();
        org.joda.time.Period period26 = period22.withField(durationFieldType23, 2);
        org.joda.time.Period period28 = period26.withMillis((int) '#');
        org.joda.time.LocalDate localDate29 = localDate20.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.LocalDate localDate31 = localDate29.minusYears(11);
        int int32 = localDate29.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        java.lang.Object obj41 = mutablePeriod40.clone();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        mutablePeriod40.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone49);
        org.joda.time.Duration duration51 = mutablePeriod40.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight35.plus((org.joda.time.ReadableDuration) duration51);
        org.joda.time.LocalDate localDate53 = dateMidnight52.toLocalDate();
        org.joda.time.LocalDate.Property property54 = localDate53.dayOfYear();
        org.joda.time.LocalDate localDate55 = property54.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate57 = localDate55.withWeekyear(11);
        org.joda.time.MutableDateTime mutableDateTime59 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime59.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime61 = property60.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime62 = property60.roundFloor();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.YearMonthDay yearMonthDay67 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology66);
        org.joda.time.DateMidnight dateMidnight68 = yearMonthDay67.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight68.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime62, (org.joda.time.ReadableInstant) dateMidnight68, periodType72);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone75);
        int int77 = dateMidnight76.getEra();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = dateMidnight76.toDateTime(chronology78);
        org.joda.time.DateTime dateTime81 = dateTime79.plusDays(9);
        int int82 = dateTime79.getEra();
        org.joda.time.DateTime dateTime83 = dateTime79.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone84 = dateTime83.getZone();
        long long87 = dateTimeZone84.adjustOffset((long) 5, true);
        boolean boolean89 = dateTimeZone84.isStandardOffset((long) 3);
        mutableDateTime62.setZoneRetainFields(dateTimeZone84);
        org.joda.time.DateTime dateTime91 = localDate57.toDateTimeAtCurrentTime(dateTimeZone84);
        org.joda.time.Interval interval92 = localDate29.toInterval(dateTimeZone84);
        org.joda.time.LocalDate.Property property93 = localDate29.centuryOfEra();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hours" + "'", str24, "hours");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "PT0.100S");
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 5L + "'", long87 == 5L);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(property93);
    }

    @Test
    public void test10040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10040");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withDayOfMonth((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime7 = dateMidnight6.toMutableDateTimeISO();
        org.joda.time.Period period9 = new org.joda.time.Period(1645454839865L);
        mutableDateTime7.add((org.joda.time.ReadablePeriod) period9);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime7.hourOfDay();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test10041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10041");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withPivotYear(7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter4.withOffsetParsed();
        java.util.Locale locale8 = dateTimeFormatter4.getLocale();
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter4.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter4.withZoneUTC();
        java.lang.StringBuffer stringBuffer11 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter4.printTo(stringBuffer11, (long) 892);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNull(locale8);
        org.junit.Assert.assertNull(dateTimePrinter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test10042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10042");
        java.util.Date date2 = new java.util.Date((long) 0);
        int int3 = date2.getDay();
        org.joda.time.YearMonthDay yearMonthDay4 = org.joda.time.YearMonthDay.fromDateFields(date2);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = yearMonthDay4.getFields();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType15 = periodType14.withMillisRemoved();
        int int16 = periodType15.size();
        org.joda.time.Period period18 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.hours();
        java.lang.String str20 = durationFieldType19.toString();
        org.joda.time.Period period22 = period18.withField(durationFieldType19, 2);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone24);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        java.lang.Object obj31 = mutablePeriod30.clone();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, 100L, periodType34, chronology35);
        mutablePeriod30.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone39);
        org.joda.time.Duration duration41 = mutablePeriod30.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight40);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight25.plus((org.joda.time.ReadableDuration) duration41);
        org.joda.time.LocalDate localDate43 = dateMidnight42.toLocalDate();
        org.joda.time.Chronology chronology44 = localDate43.getChronology();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0L, 100L, periodType47, chronology48);
        java.lang.Object obj50 = mutablePeriod49.clone();
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(0L, 100L, periodType53, chronology54);
        mutablePeriod49.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod55);
        int int57 = mutablePeriod55.getMinutes();
        org.joda.time.Period period59 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.hours();
        java.lang.String str61 = durationFieldType60.toString();
        org.joda.time.Period period63 = period59.withField(durationFieldType60, 2);
        boolean boolean64 = mutablePeriod55.isSupported(durationFieldType60);
        long long67 = chronology44.add((org.joda.time.ReadablePeriod) mutablePeriod55, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.Chronology chronology69 = chronology44.withZone(dateTimeZone68);
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate(chronology69);
        org.joda.time.DurationField durationField71 = chronology69.halfdays();
        org.joda.time.DurationField durationField72 = durationFieldType19.getField(chronology69);
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((java.lang.Object) interval12, periodType15, chronology69);
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime((long) '#', chronology69);
        org.joda.time.DurationField durationField75 = chronology69.centuries();
        org.joda.time.YearMonthDay yearMonthDay76 = yearMonthDay4.withChronologyRetainFields(chronology69);
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((long) 31, chronology69);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hours" + "'", str20, "hours");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "PT0.100S");
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "hours" + "'", str61, "hours");
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 53230963L + "'", long67 == 53230963L);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(yearMonthDay76);
    }

    @Test
    public void test10043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10043");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("T23:05:00.000");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=t23:05:00.000");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10044");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        mutableDateTime4.setDayOfMonth((int) (byte) 10);
        mutableDateTime4.add((long) 6);
        mutableDateTime4.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.monthOfYear();
        mutableDateTime4.setTime((org.joda.time.ReadableInstant) dateMidnight11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone15);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, 100L, periodType19, chronology20);
        java.lang.Object obj22 = mutablePeriod21.clone();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone30);
        org.joda.time.Duration duration32 = mutablePeriod21.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight16.plus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.LocalDate localDate34 = dateMidnight33.toLocalDate();
        org.joda.time.Period period36 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        java.lang.String str38 = durationFieldType37.toString();
        org.joda.time.Period period40 = period36.withField(durationFieldType37, 2);
        org.joda.time.Period period42 = period40.withMillis((int) '#');
        org.joda.time.LocalDate localDate43 = localDate34.minus((org.joda.time.ReadablePeriod) period42);
        int int44 = period42.getMonths();
        org.joda.time.Period period46 = period42.minusMinutes(8);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime4, (org.joda.time.ReadablePeriod) period42);
        org.joda.time.Interval interval48 = interval47.toInterval();
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(0L, 100L, periodType51, chronology52);
        mutablePeriod53.setMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone57);
        int int59 = dateMidnight58.getEra();
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(0L, 100L, periodType62, chronology63);
        java.lang.Object obj65 = mutablePeriod64.clone();
        org.joda.time.PeriodType periodType68 = null;
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(0L, 100L, periodType68, chronology69);
        mutablePeriod64.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod70);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone73);
        org.joda.time.Duration duration75 = mutablePeriod64.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight74);
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight58, (org.joda.time.ReadableDuration) duration75);
        mutablePeriod53.add((org.joda.time.ReadableDuration) duration75);
        org.joda.time.Interval interval78 = interval47.withDurationAfterStart((org.joda.time.ReadableDuration) duration75);
        java.lang.String str79 = interval47.toString();
        boolean boolean80 = interval47.containsNow();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "PT0.100S");
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hours" + "'", str38, "hours");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "PT0.100S");
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "2023-01-09T00:00:00.000Z/2023-01-09T02:00:00.035Z" + "'", str79, "2023-01-09T00:00:00.000Z/2023-01-09T02:00:00.035Z");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test10045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10045");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusSeconds((int) (byte) 10);
        org.joda.time.Chronology chronology10 = localDateTime9.getChronology();
        org.joda.time.Period period11 = new org.joda.time.Period((long) 1, (-59986L), chronology10);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((-22463999900000L), chronology10);
        int int13 = mutablePeriod12.getSeconds();
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-20) + "'", int13 == (-20));
    }

    @Test
    public void test10046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10046");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime.Property property13 = localTime9.millisOfDay();
        org.joda.time.LocalTime localTime15 = property13.addNoWrapToCopy((int) '4');
        org.joda.time.LocalTime localTime16 = property13.withMaximumValue();
        org.joda.time.LocalTime localTime17 = property13.withMaximumValue();
        org.joda.time.LocalTime localTime18 = property13.getLocalTime();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone20);
        int int22 = dateMidnight21.getEra();
        int int23 = dateMidnight21.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight21.withField(dateTimeFieldType24, 3);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight21.minusDays((int) (short) 10);
        org.joda.time.DateTime dateTime29 = dateMidnight28.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime34 = property32.add((long) 3);
        mutableDateTime34.setDayOfMonth((int) (byte) 10);
        mutableDateTime34.add((long) 6);
        mutableDateTime34.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property42 = dateMidnight41.monthOfYear();
        mutableDateTime34.setTime((org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight28, (org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.LocalTime localTime45 = localTime18.plus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.MutablePeriod mutablePeriod46 = period44.toMutablePeriod();
        java.lang.String str47 = period44.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(mutablePeriod46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "P52Y1M4W2D" + "'", str47, "P52Y1M4W2D");
    }

    @Test
    public void test10047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10047");
        org.joda.time.PeriodType periodType3 = null;
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(0L, 100L, periodType3, chronology4);
        java.lang.Object obj6 = mutablePeriod5.clone();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(0L, 100L, periodType9, chronology10);
        mutablePeriod5.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod11);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone14);
        org.joda.time.Duration duration16 = mutablePeriod5.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight15);
        mutablePeriod5.addMillis(0);
        mutablePeriod5.setMonths(0);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(0L, 100L, periodType26, chronology27);
        java.lang.Object obj29 = mutablePeriod28.clone();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone37);
        org.joda.time.Duration duration39 = mutablePeriod28.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight38);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight23.plus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(0L, 100L, periodType45, chronology46);
        java.lang.Object obj48 = mutablePeriod47.clone();
        java.lang.String str49 = mutablePeriod47.toString();
        mutableDateTime42.add((org.joda.time.ReadablePeriod) mutablePeriod47, 2022);
        mutablePeriod5.setPeriod((org.joda.time.ReadableInstant) dateMidnight40, (org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone56);
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(0L, 100L, periodType60, chronology61);
        java.lang.Object obj63 = mutablePeriod62.clone();
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod(0L, 100L, periodType66, chronology67);
        mutablePeriod62.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod68);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone71);
        org.joda.time.Duration duration73 = mutablePeriod62.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight72);
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight57.plus((org.joda.time.ReadableDuration) duration73);
        org.joda.time.LocalDate localDate75 = dateMidnight74.toLocalDate();
        org.joda.time.Chronology chronology76 = localDate75.getChronology();
        java.lang.String str77 = chronology76.toString();
        org.joda.time.DateTimeField dateTimeField78 = chronology76.secondOfDay();
        org.joda.time.Interval interval79 = new org.joda.time.Interval(0L, (long) 1, chronology76);
        org.joda.time.YearMonthDay yearMonthDay81 = new org.joda.time.YearMonthDay(10L);
        long long83 = chronology76.set((org.joda.time.ReadablePartial) yearMonthDay81, (long) 8);
        org.joda.time.DateTimeField dateTimeField84 = chronology76.secondOfDay();
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod5, chronology76);
        org.joda.time.DateTimeField dateTimeField86 = chronology76.dayOfMonth();
        org.joda.time.LocalDate localDate87 = new org.joda.time.LocalDate((long) 588, chronology76);
        org.joda.time.DurationField durationField88 = chronology76.weekyears();
        org.joda.time.DateTimeField dateTimeField89 = chronology76.minuteOfDay();
        long long92 = dateTimeField89.add((-61725661506709L), 96);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "P52YT3M22.200S");
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "PT0.100S");
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT0.100S" + "'", str49, "PT0.100S");
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "PT0.100S");
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "ISOChronology[UTC]" + "'", str77, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 8L + "'", long83 == 8L);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + (-61725655746709L) + "'", long92 == (-61725655746709L));
    }

    @Test
    public void test10048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10048");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("zho");
        java.util.Locale locale3 = java.util.Locale.forLanguageTag("DateTimeField[clockhourOfHalfday]");
        java.lang.String str4 = locale3.getLanguage();
        java.lang.String str5 = locale3.getDisplayCountry();
        java.lang.String str6 = locale1.getDisplayScript(locale3);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zho");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test10049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10049");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        java.lang.String str5 = yearMonthDay4.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.minusDays(10);
        int[] intArray8 = yearMonthDay4.getValues();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight(0L, dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        int int15 = dateMidnight14.getEra();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(0L, 100L, periodType18, chronology19);
        java.lang.Object obj21 = mutablePeriod20.clone();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        mutablePeriod20.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        org.joda.time.Duration duration31 = mutablePeriod20.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight14, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight11, (org.joda.time.ReadableDuration) duration31, periodType33);
        org.joda.time.Period period36 = period34.withMillis(21);
        org.joda.time.PeriodType periodType37 = period36.getPeriodType();
        org.joda.time.Period period39 = period36.withMillis((int) (byte) -1);
        org.joda.time.Period period41 = period39.minusMillis(347);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay4.plus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Hours hours43 = period39.toStandardHours();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0035-10-10" + "'", str5, "0035-10-10");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[35, 10, 10]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "PT0.100S");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(hours43);
    }

    @Test
    public void test10050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10050");
        java.util.Date date5 = new java.util.Date(53328208, 804, 53682033, 179, 53754841);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Thu Aug 21 05:01:00 GMT 53477253");
    }

    @Test
    public void test10051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10051");
        java.util.Date date3 = new java.util.Date(53233428, 53097298, 2021);
        date3.setDate(5);
        int int6 = date3.getTimezoneOffset();
        date3.setMinutes(6);
        java.util.Date date10 = new java.util.Date((-61725661813347L));
        int int11 = date10.getSeconds();
        boolean boolean12 = date3.before(date10);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Sat May 05 00:06:00 GMT 57660108");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Sat Dec 30 14:49:46 GMT 13");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 46 + "'", int11 == 46);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test10052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10052");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        int int4 = dateMidnight3.getEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateMidnight3.toDateTime(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime6.minusWeeks(0);
        org.joda.time.DateTime dateTime9 = dateTime8.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime10 = dateTime8.toLocalTime();
        org.joda.time.LocalTime localTime12 = localTime10.minusMinutes(3);
        org.joda.time.LocalTime localTime14 = localTime10.minusMillis((-1));
        org.joda.time.DateTime dateTime15 = localTime14.toDateTimeToday();
        org.joda.time.LocalTime localTime17 = localTime14.minusMinutes(2022);
        org.joda.time.Chronology chronology18 = localTime14.getChronology();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 9, chronology18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        int int23 = dateMidnight22.getEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = dateMidnight22.toDateTime(chronology24);
        org.joda.time.DateTime dateTime27 = dateTime25.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight28 = dateTime27.toDateMidnight();
        org.joda.time.DateMidnight.Property property29 = dateMidnight28.era();
        int int30 = dateMidnight28.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight28.plusWeeks(70);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 1);
        boolean boolean35 = dateMidnight32.isEqual((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateMidnight.Property property37 = dateMidnight34.property(dateTimeFieldType36);
        org.joda.time.DurationFieldType durationFieldType38 = dateTimeFieldType36.getDurationType();
        org.joda.time.DateTime dateTime40 = dateTime19.withFieldAdded(durationFieldType38, 17);
        org.joda.time.DateTime.Property property41 = dateTime40.centuryOfEra();
        java.util.Date date44 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay45 = org.joda.time.TimeOfDay.fromDateFields(date44);
        int int46 = timeOfDay45.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay48 = timeOfDay45.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay48.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property51 = timeOfDay50.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay53 = property51.addNoWrapToCopy(3);
        org.joda.time.TimeOfDay timeOfDay55 = timeOfDay53.withMinuteOfHour(0);
        org.joda.time.Chronology chronology56 = timeOfDay55.getChronology();
        org.joda.time.TimeOfDay.Property property57 = timeOfDay55.hourOfDay();
        org.joda.time.TimeOfDay.Property property58 = timeOfDay55.secondOfMinute();
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.lang.String str60 = locale59.getScript();
        java.lang.String str61 = locale59.getDisplayCountry();
        java.lang.String str62 = property58.getAsText(locale59);
        java.util.Set<java.lang.Character> charSet63 = locale59.getExtensionKeys();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime64 = property41.setCopy("1964-04-04T07:34:41.743", locale59);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1964-04-04T07:34:41.743\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "3" + "'", str62, "3");
        org.junit.Assert.assertNotNull(charSet63);
    }

    @Test
    public void test10053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10053");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        java.util.Locale locale10 = null;
        org.joda.time.LocalDate localDate11 = property7.setCopy("0", locale10);
        org.joda.time.LocalDate localDate12 = property7.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField13 = property7.getField();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test10054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10054");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.secondOfMinute();
        java.lang.String str6 = localDateTime3.toString();
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.plusMillis(43);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone11);
        int int13 = dateMidnight12.getEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateMidnight12.toDateTime(chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusDays(9);
        int int18 = dateTime15.getEra();
        org.joda.time.DateTime dateTime19 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime19.getZone();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.year();
        java.lang.String str23 = property22.getName();
        org.joda.time.LocalDateTime localDateTime24 = property22.withMaximumValue();
        int int25 = localDateTime24.getYearOfEra();
        org.joda.time.Period period28 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.hours();
        java.lang.String str30 = durationFieldType29.toString();
        org.joda.time.Period period32 = period28.withField(durationFieldType29, 2);
        int int33 = period28.size();
        org.joda.time.MutablePeriod mutablePeriod34 = period28.toMutablePeriod();
        org.joda.time.PeriodType periodType35 = mutablePeriod34.getPeriodType();
        org.joda.time.Period period36 = new org.joda.time.Period((-169257599990L), periodType35);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime9, (org.joda.time.ReadablePartial) localDateTime24, periodType35);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2021-12-13T14:56:34.640" + "'", str6, "2021-12-13T14:56:34.640");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "year" + "'", str23, "year");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 292278993 + "'", int25 == 292278993);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hours" + "'", str30, "hours");
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 8 + "'", int33 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod34);
        org.junit.Assert.assertNotNull(periodType35);
    }

    @Test
    public void test10055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10055");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        long long6 = dateTime5.getMillis();
        org.joda.time.DateTime dateTime8 = dateTime5.withMillis(100L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone10);
        int int12 = dateMidnight11.getEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateMidnight11.toDateTime(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(9);
        int int17 = dateTime14.getEra();
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime18.getZone();
        org.joda.time.DateTime dateTime20 = dateTime5.withZoneRetainFields(dateTimeZone19);
        boolean boolean21 = dateTime5.isBeforeNow();
        org.joda.time.DateTime dateTime22 = dateTime5.toDateTime();
        org.joda.time.DateTime.Property property23 = dateTime5.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime5.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime27 = property25.add(46);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
    }

    @Test
    public void test10056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10056");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setWeekDate(14, (int) (byte) 0, 7);
        int int6 = calendar0.getGreatestMinimum(0);
        int int7 = calendar0.getMinimalDaysInFirstWeek();
        calendar0.roll((int) (short) 0, 53233428);
        java.util.Date date12 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromDateFields(date12);
        int int14 = timeOfDay13.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay13.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay16.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property19 = timeOfDay18.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay20 = property19.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay22 = property19.addNoWrapToCopy(3);
        boolean boolean23 = calendar0.after((java.lang.Object) property19);
        java.util.Locale locale25 = new java.util.Locale("DateTimeField[secondOfDay]");
        int int26 = property19.getMaximumTextLength(locale25);
        int int27 = property19.getMinimumValueOverall();
        org.joda.time.DateTimeField dateTimeField28 = property19.getField();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=13,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=364,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=34,MILLISECOND=699,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals(locale25.toString(), "datetimefield[secondofday]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test10057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10057");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay4.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.plus((long) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight10, chronology11);
        org.joda.time.LocalDate.Property property13 = localDate12.centuryOfEra();
        org.joda.time.LocalDate localDate15 = localDate12.withMonthOfYear(6);
        org.joda.time.LocalDate localDate17 = localDate15.minusYears(53658500);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = localDate17.getFieldType(0);
        org.joda.time.DateTime dateTime20 = localDate17.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate21 = dateTime20.toLocalDate();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test10058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10058");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.LocalTime localTime4 = timeOfDay2.toLocalTime();
        org.joda.time.LocalTime localTime6 = localTime4.withMillisOfSecond(887);
        org.joda.time.LocalTime.Property property7 = localTime6.minuteOfHour();
        org.joda.time.LocalTime localTime8 = property7.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime9 = property7.roundHalfCeilingCopy();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test10059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10059");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate.Property property1 = localDate0.era();
        org.joda.time.LocalDate.Property property2 = localDate0.dayOfYear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test10060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10060");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.years();
        java.lang.String str1 = durationFieldType0.getName();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(chronology2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.year();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusSeconds((int) (byte) 10);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone11);
        int int13 = dateMidnight12.getEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateMidnight12.toDateTime(chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusDays(9);
        int int18 = dateTime15.getEra();
        org.joda.time.DateTime dateTime19 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime19.getZone();
        java.lang.String str21 = dateTimeZone20.toString();
        org.joda.time.Chronology chronology22 = chronology9.withZone(dateTimeZone20);
        boolean boolean23 = durationFieldType0.isSupported(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.hourOfDay();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "years" + "'", str1, "years");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Etc/UTC" + "'", str21, "Etc/UTC");
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test10061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10061");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        int int5 = yearMonthDay4.size();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((int) (byte) 100, 3, (int) (byte) 10, 4, 2022, 6, 12, 1970);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay4.plus((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.minusYears((int) (byte) 1);
        org.joda.time.DateTime dateTime18 = yearMonthDay17.toDateTimeAtMidnight();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test10062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10062");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime localTime2 = localTime0.plusHours(12);
        org.joda.time.LocalTime localTime4 = localTime0.minusHours(3);
        org.joda.time.LocalTime localTime6 = localTime0.minusMillis(36);
        org.joda.time.LocalTime localTime8 = localTime6.minusHours(24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType10 = localTime8.getFieldType(11);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 11");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test10063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10063");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.era();
        int int10 = dateMidnight8.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight8.plusWeeks(70);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.year();
        org.joda.time.DateMidnight dateMidnight14 = property13.withMaximumValue();
        java.util.GregorianCalendar gregorianCalendar15 = dateMidnight14.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = localDateTime16.toString("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(gregorianCalendar15);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test10064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10064");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfFloor();
        mutableDateTime3.setMonthOfYear(11);
        int int6 = mutableDateTime3.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone8);
        int int10 = dateMidnight9.getEra();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = dateMidnight9.toDateTime(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusDays(9);
        org.joda.time.DateTime.Property property15 = dateTime12.monthOfYear();
        org.joda.time.DateTime dateTime16 = property15.roundFloorCopy();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology20);
        org.joda.time.Interval interval22 = yearMonthDay21.toInterval();
        org.joda.time.Interval interval24 = interval22.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime25 = interval24.getEnd();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology29);
        org.joda.time.Interval interval31 = yearMonthDay30.toInterval();
        org.joda.time.DateTime dateTime32 = yearMonthDay30.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property34 = dateTime32.property(dateTimeFieldType33);
        boolean boolean35 = dateTime25.isSupported(dateTimeFieldType33);
        int int36 = dateTime16.get(dateTimeFieldType33);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology40);
        int int42 = yearMonthDay41.size();
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(0L, 100L, periodType45, chronology46);
        java.lang.Object obj48 = mutablePeriod47.clone();
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(0L, 100L, periodType51, chronology52);
        mutablePeriod47.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod53);
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay41.plus((org.joda.time.ReadablePeriod) mutablePeriod53);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone59);
        int int61 = dateMidnight60.getEra();
        org.joda.time.Chronology chronology62 = dateMidnight60.getChronology();
        mutablePeriod53.setPeriod((long) (byte) 100, (long) (byte) -1, chronology62);
        org.joda.time.DurationField durationField64 = chronology62.weekyears();
        org.joda.time.DateTime dateTime65 = dateTime16.withChronology(chronology62);
        org.joda.time.DateTime dateTime67 = dateTime65.plusSeconds((int) 'a');
        mutableDateTime3.setMillis((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime dateTime69 = dateTime67.toDateTime();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 11 + "'", int6 == 11);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test10065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10065");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        java.lang.String str22 = chronology21.toString();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.yearOfEra();
        long long26 = dateTimeField23.addWrapField(0L, (int) '4');
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology30);
        java.lang.String str32 = yearMonthDay31.toString();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = yearMonthDay31.toDateMidnight(dateTimeZone33);
        org.joda.time.YearMonthDay.Property property35 = yearMonthDay31.year();
        org.joda.time.YearMonthDay yearMonthDay37 = property35.addWrapFieldToCopy((int) '#');
        int int38 = dateTimeField23.getMaximumValue((org.joda.time.ReadablePartial) yearMonthDay37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight(0L, dateTimeZone40);
        org.joda.time.LocalDate localDate42 = dateMidnight41.toLocalDate();
        org.joda.time.LocalDate localDate44 = localDate42.minusWeeks(100);
        org.joda.time.Chronology chronology45 = localDate42.getChronology();
        org.joda.time.LocalDate.Property property46 = localDate42.yearOfCentury();
        org.joda.time.LocalDate localDate47 = property46.roundCeilingCopy();
        org.joda.time.LocalDate localDate48 = property46.roundFloorCopy();
        org.joda.time.LocalDate localDate50 = property46.addToCopy(7);
        org.joda.time.LocalDate localDate52 = localDate50.withYear((int) (short) 1);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.YearMonthDay yearMonthDay57 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology56);
        int int58 = yearMonthDay57.size();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone66);
        int int68 = dateMidnight67.getEra();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = dateMidnight67.toDateTime(chronology69);
        org.joda.time.DateTime dateTime72 = dateTime70.plusDays(9);
        int int73 = dateTime70.getEra();
        org.joda.time.DateTime dateTime74 = dateTime70.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone75 = dateTime74.getZone();
        java.lang.String str76 = dateTimeZone75.toString();
        org.joda.time.YearMonthDay yearMonthDay77 = new org.joda.time.YearMonthDay(dateTimeZone75);
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((int) (byte) -1, 1, (int) (short) 1, (int) (short) 10, (int) (short) 0, 8, dateTimeZone75);
        java.lang.String str79 = dateTimeZone75.toString();
        org.joda.time.Interval interval80 = yearMonthDay57.toInterval(dateTimeZone75);
        org.joda.time.DateTime dateTime81 = localDate52.toDateTimeAtMidnight(dateTimeZone75);
        org.joda.time.MutableDateTime mutableDateTime82 = org.joda.time.MutableDateTime.now(dateTimeZone75);
        org.joda.time.DateTime dateTime83 = yearMonthDay37.toDateTimeAtMidnight(dateTimeZone75);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[UTC]" + "'", str22, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1640995200000L + "'", long26 == 1640995200000L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0035-10-10" + "'", str32, "0035-10-10");
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 292278993 + "'", int38 == 292278993);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Etc/UTC" + "'", str76, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "Etc/UTC" + "'", str79, "Etc/UTC");
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(mutableDateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
    }

    @Test
    public void test10066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10066");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        java.util.Locale locale5 = new java.util.Locale("hi!", "");
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.LocalDateTime localDateTime7 = property2.withMaximumValue();
        java.lang.String str8 = property2.toString();
        org.joda.time.DurationField durationField9 = property2.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime10 = property2.getLocalDateTime();
        int int11 = property2.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime12 = property2.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022" + "'", str6, "2022");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[year]" + "'", str8, "Property[year]");
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-292275054) + "'", int11 == (-292275054));
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test10067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10067");
        java.util.Date date1 = new java.util.Date((long) '4');
        date1.setYear(53255370);
        org.joda.time.Period period6 = new org.joda.time.Period((long) 53230763, (long) 15);
        org.joda.time.Hours hours7 = period6.toStandardHours();
        org.joda.time.Period period9 = period6.plusYears(53);
        boolean boolean10 = date1.equals((java.lang.Object) period9);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Wed Jan 01 00:00:00 GMT 53257270");
        org.junit.Assert.assertNotNull(hours7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test10068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10068");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        int int4 = dateMidnight3.getEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateMidnight3.toDateTime(chronology5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime6.withMillis(100L);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone11);
        int int13 = dateMidnight12.getEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateMidnight12.toDateTime(chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusDays(9);
        int int18 = dateTime15.getEra();
        org.joda.time.DateTime dateTime19 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime19.getZone();
        org.joda.time.DateTime dateTime21 = dateTime6.withZoneRetainFields(dateTimeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 11, dateTimeZone20);
        org.joda.time.LocalDate localDate24 = localDate22.withDayOfYear(15);
        java.lang.String str25 = localDate24.toString();
        java.util.Date date27 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay28 = org.joda.time.TimeOfDay.fromDateFields(date27);
        int int29 = timeOfDay28.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay28.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay31.withMinuteOfHour(0);
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay31.minusSeconds((-1));
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay35.plusSeconds(53233428);
        // The following exception was thrown during execution in test generation
        try {
            int int38 = localDate24.compareTo((org.joda.time.ReadablePartial) timeOfDay37);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970-01-15" + "'", str25, "1970-01-15");
// flaky:         org.junit.Assert.assertEquals(date27.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(timeOfDay37);
    }

    @Test
    public void test10069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10069");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone1);
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.util.Date date5 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay6 = org.joda.time.TimeOfDay.fromDateFields(date5);
        int int7 = timeOfDay6.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay6.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.secondOfMinute();
        java.util.Locale locale15 = new java.util.Locale("hi!", "");
        java.lang.String str16 = property12.getAsShortText(locale15);
        java.util.Set<java.lang.String> strSet17 = locale15.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet18 = locale15.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale3.getDisplayName(locale15);
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(timeZone1, locale3);
        calendar20.setMinimalDaysInFirstWeek(245);
        // The following exception was thrown during execution in test generation
        try {
            calendar20.add(90193, 21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645455395033,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=35,MILLISECOND=33,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertEquals(locale15.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0" + "'", str16, "0");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "French (Canada)" + "'", str19, "French (Canada)");
        org.junit.Assert.assertNotNull(calendar20);
// flaky:         org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=1645455395033,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=245,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=3,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=35,MILLISECOND=33,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test10070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10070");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        java.lang.String str2 = timeZone1.getID();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone("Property[year]");
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone5);
        java.util.TimeZone.setDefault(timeZone5);
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone5);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        boolean boolean10 = timeZone1.hasSameRules(timeZone5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        timeZone5.setRawOffset(49);
        java.lang.Object obj14 = timeZone5.clone();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GMT" + "'", str2, "GMT");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645455395051,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=35,MILLISECOND=51,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645455395051,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=35,MILLISECOND=51,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=49,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test10071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10071");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime4 = property2.setCopy("70");
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusMonths((-46800000));
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusSeconds(684);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone10);
        int int12 = dateMidnight11.getEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateMidnight11.toDateTime(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight17 = dateTime16.toDateMidnight();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(0L, 100L, periodType20, chronology21);
        java.lang.Object obj23 = mutablePeriod22.clone();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(0L, 100L, periodType26, chronology27);
        mutablePeriod22.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone31);
        org.joda.time.Duration duration33 = mutablePeriod22.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(0L, dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone38);
        int int40 = dateMidnight39.getEra();
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(0L, 100L, periodType43, chronology44);
        java.lang.Object obj46 = mutablePeriod45.clone();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(0L, 100L, periodType49, chronology50);
        mutablePeriod45.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone54);
        org.joda.time.Duration duration56 = mutablePeriod45.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight55);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight39, (org.joda.time.ReadableDuration) duration56);
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight36, (org.joda.time.ReadableDuration) duration56, periodType58);
        boolean boolean60 = duration33.isLongerThan((org.joda.time.ReadableDuration) duration56);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight17.minus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime8.withDurationAdded((org.joda.time.ReadableDuration) duration33, (-292275054));
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "PT0.100S");
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "PT0.100S");
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(localDateTime63);
    }

    @Test
    public void test10072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10072");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime localTime13 = property12.withMinimumValue();
        org.joda.time.LocalTime localTime15 = localTime13.withMinuteOfHour(47);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getRangeDurationType();
        org.joda.time.LocalTime.Property property18 = localTime15.property(dateTimeFieldType16);
        org.joda.time.LocalTime localTime19 = property18.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime20 = property18.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime22 = property18.addCopy((-61725661916121L));
        org.joda.time.LocalTime localTime24 = property18.addWrapFieldToCopy(53255370);
        org.joda.time.LocalTime localTime25 = property18.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime27 = localTime25.withSecondOfMinute(53255370);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53255370 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
    }

    @Test
    public void test10073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10073");
        java.io.IOException iOException1 = new java.io.IOException("PeriodType[Standard]");
    }

    @Test
    public void test10074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10074");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone4);
        int int6 = dateMidnight5.getEra();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(0L, 100L, periodType9, chronology10);
        java.lang.Object obj12 = mutablePeriod11.clone();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(0L, 100L, periodType15, chronology16);
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone20);
        org.joda.time.Duration duration22 = mutablePeriod11.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableDuration) duration22, periodType24);
        org.joda.time.Period period27 = period25.withMillis(21);
        org.joda.time.PeriodType periodType28 = period27.getPeriodType();
        org.joda.time.Days days29 = period27.toStandardDays();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "PT0.100S");
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(days29);
    }

    @Test
    public void test10075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10075");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 53230763, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.minusYears(53233428);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay51.year();
        org.joda.time.YearMonthDay yearMonthDay56 = property54.setCopy(21);
        int int57 = property54.get();
        org.joda.time.YearMonthDay yearMonthDay58 = property54.withMaximumValue();
        int int59 = property54.getMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay60 = property54.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField61 = property54.getField();
        java.util.Date date67 = new java.util.Date(121, 11, (int) (short) 100, 53243063, 15);
        java.lang.String str68 = date67.toGMTString();
        java.util.Date date72 = new java.util.Date(2021, 8, (-1));
        boolean boolean73 = date67.before(date72);
        org.joda.time.YearMonthDay yearMonthDay74 = org.joda.time.YearMonthDay.fromDateFields(date67);
        int int75 = dateTimeField61.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay74);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 53230963L + "'", long49 == 53230963L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 292278993 + "'", int59 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertEquals(date67.toString(), "Wed Feb 15 23:15:00 GMT 8096");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "15 Feb 8096 23:14:59 GMT" + "'", str68, "15 Feb 8096 23:14:59 GMT");
        org.junit.Assert.assertEquals(date72.toString(), "Tue Aug 30 00:00:00 GMT 3921");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(yearMonthDay74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-292275054) + "'", int75 == (-292275054));
    }

    @Test
    public void test10076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10076");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        int int4 = dateMidnight3.getEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateMidnight3.toDateTime(chronology5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime6.withMillis(100L);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone11);
        int int13 = dateMidnight12.getEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateMidnight12.toDateTime(chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusDays(9);
        int int18 = dateTime15.getEra();
        org.joda.time.DateTime dateTime19 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime19.getZone();
        org.joda.time.DateTime dateTime21 = dateTime6.withZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime21.getZone();
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(1966200000L, dateTimeZone22);
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.weekyear();
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder26 = builder25.clear();
        java.util.Locale.Builder builder28 = builder26.setRegion("");
        java.util.Locale.Builder builder30 = builder26.removeUnicodeLocaleAttribute("120");
        java.util.Locale locale31 = java.util.Locale.US;
        java.lang.String str32 = locale31.getISO3Language();
        java.lang.String str33 = locale31.getScript();
        java.util.Locale.Builder builder34 = builder26.setLocale(locale31);
        java.util.Locale locale35 = builder34.build();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(chronology36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.year();
        java.util.Locale locale41 = new java.util.Locale("hi!", "");
        java.lang.String str42 = property38.getAsText(locale41);
        org.joda.time.LocalDateTime localDateTime43 = property38.withMaximumValue();
        java.lang.String str44 = property38.toString();
        org.joda.time.LocalDateTime localDateTime45 = property38.getLocalDateTime();
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("days");
        int int48 = property38.getMaximumTextLength(locale47);
        java.util.Locale locale49 = locale47.stripExtensions();
        java.util.Locale.Builder builder50 = builder34.setLocale(locale49);
        java.lang.String str51 = property24.getAsText(locale49);
        java.lang.Object obj52 = locale49.clone();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "eng" + "'", str32, "eng");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_US");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertEquals(locale41.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022" + "'", str42, "2022");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Property[year]" + "'", str44, "Property[year]");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "days");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 9 + "'", int48 == 9);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "days");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1970" + "'", str51, "1970");
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "days");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "days");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "days");
    }

    @Test
    public void test10077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10077");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        int int8 = dateMidnight7.getEra();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = dateMidnight7.toDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(9);
        int int13 = dateTime10.getEra();
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime14.getZone();
        java.lang.String str16 = dateTimeZone15.toString();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withZone(dateTimeZone15);
        org.joda.time.format.DateTimeParser dateTimeParser19 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = dateTimeFormatter2.print(1680040023984000035L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Etc/UTC" + "'", str16, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(dateTimeParser19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
    }

    @Test
    public void test10078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10078");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 53230763, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.minusYears(53233428);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay51.year();
        org.joda.time.YearMonthDay yearMonthDay56 = property54.setCopy(21);
        int int57 = property54.get();
        java.lang.String str58 = property54.getAsShortText();
        java.lang.String str59 = property54.getAsString();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 53230963L + "'", long49 == 53230963L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1970" + "'", str58, "1970");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970" + "'", str59, "1970");
    }

    @Test
    public void test10079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10079");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        java.lang.String str2 = timeZone1.getID();
        boolean boolean3 = timeZone1.observesDaylightTime();
        java.util.TimeZone.setDefault(timeZone1);
        java.time.ZoneId zoneId5 = timeZone1.toZoneId();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GMT" + "'", str2, "GMT");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(zoneId5);
    }

    @Test
    public void test10080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10080");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate11 = property7.addToCopy(7);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        int int15 = dateMidnight14.getEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateMidnight14.toDateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight20 = dateTime19.toDateMidnight();
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.era();
        int int22 = dateMidnight20.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight20.plusWeeks(70);
        int int25 = property7.getDifference((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.LocalDate localDate27 = property7.addToCopy((int) 'a');
        org.joda.time.LocalDate.Property property28 = localDate27.era();
        org.joda.time.DateMidnight dateMidnight29 = localDate27.toDateMidnight();
        java.lang.String str30 = localDate27.toString();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2067-01-01" + "'", str30, "2067-01-01");
    }

    @Test
    public void test10081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10081");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder4 = builder2.setLanguageTag("en-GB");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder4.setLanguage("Coordinated Universal Time");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: Coordinated Universal Time [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test10082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10082");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.era();
        int int10 = dateMidnight8.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight8.plusWeeks(70);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight8.plus((-864L));
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.withCenturyOfEra((int) 'x');
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMillisOfDay(100);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.dayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.minusSeconds(0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime20.year();
        org.joda.time.LocalDateTime.Property property27 = localDateTime20.weekyear();
        org.joda.time.LocalDateTime localDateTime28 = property27.withMinimumValue();
        int int29 = localDateTime28.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.millisOfSecond();
        boolean boolean31 = dateMidnight14.equals((java.lang.Object) property30);
        org.joda.time.LocalDateTime localDateTime33 = property30.addToCopy(540);
        boolean boolean34 = property30.isLeap();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 54 + "'", int29 == 54);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test10083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10083");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(0L, 100L, periodType2, chronology3);
        java.lang.Object obj5 = mutablePeriod4.clone();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        org.joda.time.Duration duration15 = mutablePeriod4.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight14);
        mutablePeriod4.addMillis(0);
        mutablePeriod4.setMonths(0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone36);
        org.joda.time.Duration duration38 = mutablePeriod27.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight22.plus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        java.lang.Object obj47 = mutablePeriod46.clone();
        java.lang.String str48 = mutablePeriod46.toString();
        mutableDateTime41.add((org.joda.time.ReadablePeriod) mutablePeriod46, 2022);
        mutablePeriod4.setPeriod((org.joda.time.ReadableInstant) dateMidnight39, (org.joda.time.ReadableInstant) mutableDateTime41);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone55);
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(0L, 100L, periodType59, chronology60);
        java.lang.Object obj62 = mutablePeriod61.clone();
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(0L, 100L, periodType65, chronology66);
        mutablePeriod61.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod67);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone70);
        org.joda.time.Duration duration72 = mutablePeriod61.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight71);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight56.plus((org.joda.time.ReadableDuration) duration72);
        org.joda.time.LocalDate localDate74 = dateMidnight73.toLocalDate();
        org.joda.time.Chronology chronology75 = localDate74.getChronology();
        java.lang.String str76 = chronology75.toString();
        org.joda.time.DateTimeField dateTimeField77 = chronology75.secondOfDay();
        org.joda.time.Interval interval78 = new org.joda.time.Interval(0L, (long) 1, chronology75);
        org.joda.time.YearMonthDay yearMonthDay80 = new org.joda.time.YearMonthDay(10L);
        long long82 = chronology75.set((org.joda.time.ReadablePartial) yearMonthDay80, (long) 8);
        org.joda.time.DateTimeField dateTimeField83 = chronology75.secondOfDay();
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod4, chronology75);
        org.joda.time.DateTimeField dateTimeField85 = chronology75.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField86 = chronology75.weekyearOfCentury();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "P52YT3M22.200S");
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0.100S");
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PT0.100S" + "'", str48, "PT0.100S");
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "PT0.100S");
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "ISOChronology[UTC]" + "'", str76, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 8L + "'", long82 == 8L);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
    }

    @Test
    public void test10084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10084");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight(0L, dateTimeZone3);
        org.joda.time.LocalDate localDate5 = dateMidnight4.toLocalDate();
        org.joda.time.LocalDate localDate7 = localDate5.minusWeeks(100);
        org.joda.time.Chronology chronology8 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.monthOfYear();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology8);
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod((long) 32770, chronology8);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((-967894379785000L), chronology8);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.millisOfSecond();
        org.joda.time.DurationField durationField15 = chronology8.years();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(0L, dateTimeZone17);
        org.joda.time.LocalDate localDate19 = dateMidnight18.toLocalDate();
        org.joda.time.LocalDate localDate21 = localDate19.minusWeeks(100);
        org.joda.time.Chronology chronology22 = localDate19.getChronology();
        org.joda.time.LocalDate.Property property23 = localDate19.yearOfCentury();
        org.joda.time.LocalDate localDate24 = property23.roundCeilingCopy();
        org.joda.time.LocalDate.Property property25 = localDate24.weekyear();
        org.joda.time.LocalDate localDate27 = localDate24.withYearOfCentury((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType28.getRangeDurationType();
        java.lang.String str30 = durationFieldType29.getName();
        org.joda.time.LocalDate localDate32 = localDate27.withFieldAdded(durationFieldType29, 53250029);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        java.lang.Object obj41 = mutablePeriod40.clone();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        mutablePeriod40.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone49);
        org.joda.time.Duration duration51 = mutablePeriod40.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight35.plus((org.joda.time.ReadableDuration) duration51);
        org.joda.time.LocalDate localDate53 = dateMidnight52.toLocalDate();
        org.joda.time.Chronology chronology54 = localDate53.getChronology();
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(0L, 100L, periodType57, chronology58);
        java.lang.Object obj60 = mutablePeriod59.clone();
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(0L, 100L, periodType63, chronology64);
        mutablePeriod59.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod65);
        int int67 = mutablePeriod65.getMinutes();
        org.joda.time.Period period69 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType70 = org.joda.time.DurationFieldType.hours();
        java.lang.String str71 = durationFieldType70.toString();
        org.joda.time.Period period73 = period69.withField(durationFieldType70, 2);
        boolean boolean74 = mutablePeriod65.isSupported(durationFieldType70);
        long long77 = chronology54.add((org.joda.time.ReadablePeriod) mutablePeriod65, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.Chronology chronology79 = chronology54.withZone(dateTimeZone78);
        org.joda.time.DurationField durationField80 = chronology79.centuries();
        org.joda.time.DurationField durationField81 = durationFieldType29.getField(chronology79);
        int int82 = durationField15.compareTo(durationField81);
        long long84 = durationField15.getValueAsLong(0L);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "days" + "'", str30, "days");
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "PT0.100S");
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hours" + "'", str71, "hours");
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 53230963L + "'", long77 == 53230963L);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
    }

    @Test
    public void test10085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10085");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        int int1 = localTime0.getMillisOfDay();
        org.joda.time.LocalTime.Property property2 = localTime0.hourOfDay();
        org.joda.time.LocalTime localTime3 = property2.roundHalfFloorCopy();
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 53795541 + "'", int1 == 53795541);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
    }

    @Test
    public void test10086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10086");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1645454839865L);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        boolean boolean3 = dateTime1.isSupported(dateTimeFieldType2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0L, 100L, periodType6, chronology7);
        mutablePeriod8.setMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone12);
        int int14 = dateMidnight13.getEra();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(0L, 100L, periodType17, chronology18);
        java.lang.Object obj20 = mutablePeriod19.clone();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        mutablePeriod19.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone28);
        org.joda.time.Duration duration30 = mutablePeriod19.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight13, (org.joda.time.ReadableDuration) duration30);
        mutablePeriod8.add((org.joda.time.ReadableDuration) duration30);
        int int33 = mutablePeriod8.getWeeks();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone36);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(0L, 100L, periodType40, chronology41);
        java.lang.Object obj43 = mutablePeriod42.clone();
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(0L, 100L, periodType46, chronology47);
        mutablePeriod42.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod48);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone51);
        org.joda.time.Duration duration53 = mutablePeriod42.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight52);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight37.plus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.LocalDate localDate55 = dateMidnight54.toLocalDate();
        org.joda.time.Chronology chronology56 = localDate55.getChronology();
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(0L, 100L, periodType59, chronology60);
        java.lang.Object obj62 = mutablePeriod61.clone();
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(0L, 100L, periodType65, chronology66);
        mutablePeriod61.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod67);
        int int69 = mutablePeriod67.getMinutes();
        org.joda.time.Period period71 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType72 = org.joda.time.DurationFieldType.hours();
        java.lang.String str73 = durationFieldType72.toString();
        org.joda.time.Period period75 = period71.withField(durationFieldType72, 2);
        boolean boolean76 = mutablePeriod67.isSupported(durationFieldType72);
        long long79 = chronology56.add((org.joda.time.ReadablePeriod) mutablePeriod67, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.Chronology chronology81 = chronology56.withZone(dateTimeZone80);
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((long) 11, chronology81);
        org.joda.time.DurationFieldType durationFieldType83 = org.joda.time.DurationFieldType.hours();
        mutablePeriod82.set(durationFieldType83, (int) '#');
        mutablePeriod8.add(durationFieldType83, 136);
        org.joda.time.DateTime dateTime89 = dateTime1.withFieldAdded(durationFieldType83, 53532665);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "PT0.100S");
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "PT0.100S");
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "hours" + "'", str73, "hours");
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 53230963L + "'", long79 == 53230963L);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(durationFieldType83);
        org.junit.Assert.assertNotNull(dateTime89);
    }

    @Test
    public void test10087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10087");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        int int3 = calendar1.get((int) (byte) 10);
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455395585,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=35,MILLISECOND=585,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
    }

    @Test
    public void test10088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10088");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        int int34 = mutablePeriod32.getMinutes();
        org.joda.time.Period period36 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        java.lang.String str38 = durationFieldType37.toString();
        org.joda.time.Period period40 = period36.withField(durationFieldType37, 2);
        boolean boolean41 = mutablePeriod32.isSupported(durationFieldType37);
        long long44 = chronology21.add((org.joda.time.ReadablePeriod) mutablePeriod32, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Chronology chronology46 = chronology21.withZone(dateTimeZone45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology46);
        org.joda.time.DurationField durationField48 = chronology46.halfdays();
        org.joda.time.DurationField durationField49 = chronology46.months();
        org.joda.time.DateTimeField dateTimeField50 = chronology46.weekOfWeekyear();
        org.joda.time.DurationField durationField51 = dateTimeField50.getRangeDurationField();
        long long54 = dateTimeField50.add(3600000L, 75222);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hours" + "'", str38, "hours");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 53230963L + "'", long44 == 53230963L);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 45494269200000L + "'", long54 == 45494269200000L);
    }

    @Test
    public void test10089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10089");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay10 = property8.addWrapFieldToCopy(887);
        int int11 = property8.getMinimumValue();
        int int12 = property8.getMinimumValueOverall();
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder13.clear();
        java.util.Locale.Builder builder16 = builder14.setRegion("");
        java.util.Locale.Builder builder18 = builder14.removeUnicodeLocaleAttribute("120");
        java.util.Locale locale19 = java.util.Locale.US;
        java.lang.String str20 = locale19.getISO3Language();
        java.lang.String str21 = locale19.getScript();
        java.util.Locale.Builder builder22 = builder14.setLocale(locale19);
        java.util.Locale locale23 = builder22.build();
        java.lang.String str24 = property8.getAsText(locale23);
        java.lang.String str25 = locale23.getDisplayName();
        boolean boolean26 = locale23.hasExtensions();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "eng" + "'", str20, "eng");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "0" + "'", str24, "0");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "English (United States)" + "'", str25, "English (United States)");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test10090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10090");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDate localDate11 = localDate8.withField(dateTimeFieldType9, (int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(0L, 100L, periodType17, chronology18);
        java.lang.Object obj20 = mutablePeriod19.clone();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        mutablePeriod19.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone28);
        org.joda.time.Duration duration30 = mutablePeriod19.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight14.plus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.LocalDate localDate32 = dateMidnight31.toLocalDate();
        org.joda.time.Chronology chronology33 = localDate32.getChronology();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(0L, 100L, periodType36, chronology37);
        java.lang.Object obj39 = mutablePeriod38.clone();
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(0L, 100L, periodType42, chronology43);
        mutablePeriod38.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod44);
        int int46 = mutablePeriod44.getMinutes();
        org.joda.time.Period period48 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.hours();
        java.lang.String str50 = durationFieldType49.toString();
        org.joda.time.Period period52 = period48.withField(durationFieldType49, 2);
        boolean boolean53 = mutablePeriod44.isSupported(durationFieldType49);
        long long56 = chronology33.add((org.joda.time.ReadablePeriod) mutablePeriod44, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.Chronology chronology58 = chronology33.withZone(dateTimeZone57);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate(chronology58);
        org.joda.time.DurationField durationField60 = chronology58.halfdays();
        org.joda.time.DurationField durationField61 = chronology58.months();
        org.joda.time.DateTimeField dateTimeField62 = chronology58.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField63 = dateTimeFieldType9.getField(chronology58);
        org.joda.time.DurationField durationField64 = dateTimeField63.getRangeDurationField();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "PT0.100S");
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hours" + "'", str50, "hours");
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 53230963L + "'", long56 == 53230963L);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNull(durationField64);
    }

    @Test
    public void test10091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10091");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        int int34 = mutablePeriod32.getMinutes();
        org.joda.time.Period period36 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        java.lang.String str38 = durationFieldType37.toString();
        org.joda.time.Period period40 = period36.withField(durationFieldType37, 2);
        boolean boolean41 = mutablePeriod32.isSupported(durationFieldType37);
        long long44 = chronology21.add((org.joda.time.ReadablePeriod) mutablePeriod32, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Chronology chronology46 = chronology21.withZone(dateTimeZone45);
        org.joda.time.DurationField durationField47 = chronology46.hours();
        long long49 = durationField47.getMillis(2021);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hours" + "'", str38, "hours");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 53230963L + "'", long44 == 53230963L);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 7275600000L + "'", long49 == 7275600000L);
    }

    @Test
    public void test10092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10092");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        int int4 = dateMidnight2.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight2.withField(dateTimeFieldType5, 3);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.add((long) 3);
        mutableDateTime12.setDayOfMonth((int) (byte) 10);
        mutableDateTime12.add((long) 6);
        mutableDateTime12.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.monthOfYear();
        mutableDateTime12.setTime((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone23);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        java.lang.Object obj30 = mutablePeriod29.clone();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone38);
        org.joda.time.Duration duration40 = mutablePeriod29.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight39);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight24.plus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.LocalDate localDate42 = dateMidnight41.toLocalDate();
        org.joda.time.Period period44 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.hours();
        java.lang.String str46 = durationFieldType45.toString();
        org.joda.time.Period period48 = period44.withField(durationFieldType45, 2);
        org.joda.time.Period period50 = period48.withMillis((int) '#');
        org.joda.time.LocalDate localDate51 = localDate42.minus((org.joda.time.ReadablePeriod) period50);
        int int52 = period50.getMonths();
        org.joda.time.Period period54 = period50.minusMinutes(8);
        org.joda.time.Interval interval55 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime12, (org.joda.time.ReadablePeriod) period50);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone57);
        int int59 = dateMidnight58.getEra();
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(0L, 100L, periodType62, chronology63);
        java.lang.Object obj65 = mutablePeriod64.clone();
        org.joda.time.PeriodType periodType68 = null;
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(0L, 100L, periodType68, chronology69);
        mutablePeriod64.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod70);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone73);
        org.joda.time.Duration duration75 = mutablePeriod64.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight74);
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight58, (org.joda.time.ReadableDuration) duration75);
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime12, (org.joda.time.ReadableDuration) duration75);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.YearMonthDay yearMonthDay82 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology81);
        org.joda.time.Interval interval83 = yearMonthDay82.toInterval();
        org.joda.time.Period period84 = interval83.toPeriod();
        org.joda.time.Period period86 = period84.withSeconds((int) '#');
        org.joda.time.PeriodType periodType87 = period84.getPeriodType();
        org.joda.time.Period period88 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableDuration) duration75, periodType87);
        org.joda.time.DateMidnight.Property property89 = dateMidnight2.monthOfYear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "PT0.100S");
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "hours" + "'", str46, "hours");
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "PT0.100S");
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(periodType87);
        org.junit.Assert.assertNotNull(property89);
    }

    @Test
    public void test10093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10093");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0L, 100L, periodType6, chronology7);
        java.lang.Object obj9 = mutablePeriod8.clone();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.Duration duration19 = mutablePeriod8.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight3.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.LocalDate localDate21 = dateMidnight20.toLocalDate();
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        int int35 = mutablePeriod33.getMinutes();
        org.joda.time.Period period37 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.hours();
        java.lang.String str39 = durationFieldType38.toString();
        org.joda.time.Period period41 = period37.withField(durationFieldType38, 2);
        boolean boolean42 = mutablePeriod33.isSupported(durationFieldType38);
        long long45 = chronology22.add((org.joda.time.ReadablePeriod) mutablePeriod33, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Chronology chronology47 = chronology22.withZone(dateTimeZone46);
        org.joda.time.DurationField durationField48 = chronology47.centuries();
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(chronology47);
        org.joda.time.DateTimeField dateTimeField50 = chronology47.dayOfYear();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) 31, chronology47);
        mutablePeriod51.setPeriod(0, 53666154, 1971, 32769, 218, 53747243, 10223, 2074);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT0.100S");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hours" + "'", str39, "hours");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 53230963L + "'", long45 == 53230963L);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test10094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10094");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.roundFloorCopy();
        int int10 = property7.getLeapAmount();
        org.joda.time.LocalDate localDate11 = property7.roundCeilingCopy();
        org.joda.time.LocalDate.Property property12 = localDate11.monthOfYear();
        org.joda.time.LocalDate localDate13 = property12.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test10095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10095");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0L, 100L, periodType6, chronology7);
        java.lang.Object obj9 = mutablePeriod8.clone();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.Duration duration19 = mutablePeriod8.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableDuration) duration19);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology24);
        org.joda.time.Interval interval26 = yearMonthDay25.toInterval();
        org.joda.time.Interval interval28 = interval26.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime29 = interval28.getEnd();
        org.joda.time.DateTime.Property property30 = dateTime29.secondOfDay();
        org.joda.time.DateTime dateTime32 = property30.addWrapFieldToCopy(86399);
        org.joda.time.DateTime dateTime34 = property30.addToCopy((long) 7);
        java.lang.String str36 = dateTime34.toString("32");
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod();
        mutablePeriod37.setYears(11);
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        org.joda.time.Period period47 = period45.minusMinutes(21);
        mutablePeriod37.add((org.joda.time.ReadablePeriod) period45);
        org.joda.time.MutablePeriod mutablePeriod49 = period45.toMutablePeriod();
        org.joda.time.PeriodType periodType50 = mutablePeriod49.getPeriodType();
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime34, periodType50);
        org.joda.time.DateTime.Property property52 = dateTime34.yearOfCentury();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT0.100S");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "32" + "'", str36, "32");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(mutablePeriod49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test10096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10096");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        int int8 = dateTime5.getEra();
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.secondOfDay();
        int int11 = dateTime9.getDayOfWeek();
        org.joda.time.DateMidnight dateMidnight12 = dateTime9.toDateMidnight();
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.monthOfYear();
        org.joda.time.Interval interval14 = property13.toInterval();
        org.joda.time.Interval interval16 = interval14.withStartMillis(13L);
        org.joda.time.ReadableInterval readableInterval17 = null;
        boolean boolean18 = interval14.contains(readableInterval17);
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = property21.roundHalfFloor();
        mutableDateTime22.setMonthOfYear(11);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime22.dayOfYear();
        boolean boolean26 = interval14.equals((java.lang.Object) property25);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test10097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10097");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.weekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        int int8 = dateMidnight7.getEra();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = dateMidnight7.toDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(9);
        org.joda.time.DateTime.Property property13 = dateTime10.monthOfYear();
        int int14 = property4.getDifference((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime.Property property15 = dateTime10.dayOfMonth();
        org.joda.time.DateTime dateTime16 = property15.roundHalfFloorCopy();
        int int17 = dateTime16.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test10098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10098");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.minusMonths((int) (short) 0);
        java.util.GregorianCalendar gregorianCalendar5 = dateMidnight4.toGregorianCalendar();
        gregorianCalendar5.set(32769, (int) (byte) 10, 32770, 1900, (-1996092050), 53401884);
        gregorianCalendar5.setMinimalDaysInFirstWeek(283);
        java.util.Calendar.Builder builder17 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder21 = builder17.setDate(53243063, 21, 32769);
        java.util.Calendar.Builder builder23 = builder21.setLenient(true);
        java.util.Locale.Category category24 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale25 = java.util.Locale.getDefault(category24);
        java.util.Locale locale26 = java.util.Locale.getDefault(category24);
        java.util.Calendar.Builder builder27 = builder21.setLocale(locale26);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = gregorianCalendar5.getDisplayName(53097311, 2, locale26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(gregorianCalendar5);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.FORMAT + "'", category24.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale25);
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertNotNull(locale26);
// flaky:         org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test10099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10099");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.millisOfDay();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMaximumValue();
        int int7 = property5.getMaximumValueOverall();
        java.util.Locale locale8 = java.util.Locale.CANADA;
        int int9 = property5.getMaximumTextLength(locale8);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 86399999 + "'", int7 == 86399999);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
    }

    @Test
    public void test10100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10100");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology1 = localTime0.getChronology();
        org.joda.time.DateTime dateTime2 = localTime0.toDateTimeToday();
        org.joda.time.LocalTime localTime4 = localTime0.withMillisOfDay(455376);
        org.joda.time.ReadablePartial readablePartial5 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int6 = localTime4.compareTo(readablePartial5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(chronology1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(localTime4);
    }

    @Test
    public void test10101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10101");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        int int8 = dateMidnight7.getEra();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        java.lang.Object obj14 = mutablePeriod13.clone();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(0L, 100L, periodType17, chronology18);
        mutablePeriod13.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone22);
        org.joda.time.Duration duration24 = mutablePeriod13.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight23);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight7, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone27);
        int int29 = dateMidnight28.getEra();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        java.lang.Object obj35 = mutablePeriod34.clone();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        mutablePeriod34.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone43);
        org.joda.time.Duration duration45 = mutablePeriod34.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight28, (org.joda.time.ReadableDuration) duration45);
        boolean boolean47 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration45);
        java.lang.String str48 = duration45.toString();
        mutableDateTime4.add((org.joda.time.ReadableDuration) duration45);
        mutableDateTime4.add((long) (short) 10);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime4.year();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "PT0.100S");
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "PT0.100S");
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PT0.100S" + "'", str48, "PT0.100S");
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test10102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10102");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 12);
        java.util.Locale locale5 = new java.util.Locale("hi!", "");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.year();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.year();
        java.util.Locale locale14 = new java.util.Locale("hi!", "");
        java.lang.String str15 = property11.getAsText(locale14);
        int int16 = property8.getMaximumShortTextLength(locale14);
        java.lang.String str17 = locale5.getDisplayName(locale14);
        java.util.Calendar.Builder builder18 = builder0.setLocale(locale5);
        java.lang.String str19 = locale5.getVariant();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022" + "'", str15, "2022");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test10103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10103");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime.Property property13 = localTime9.millisOfDay();
        org.joda.time.LocalTime localTime15 = property13.addNoWrapToCopy((int) '4');
        org.joda.time.LocalTime localTime16 = property13.withMaximumValue();
        org.joda.time.LocalTime localTime17 = property13.withMinimumValue();
        org.joda.time.LocalTime localTime18 = property13.getLocalTime();
        boolean boolean20 = property13.equals((java.lang.Object) "\u52a0\u62ff\u5927");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test10104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10104");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay9 = property8.getTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone11);
        int int13 = dateMidnight12.getEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateMidnight12.toDateTime(chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.minusWeeks(0);
        org.joda.time.DateTime dateTime18 = dateTime17.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime19 = dateTime17.toLocalTime();
        org.joda.time.LocalTime localTime21 = localTime19.minusMinutes(3);
        org.joda.time.LocalTime.Property property22 = localTime19.minuteOfHour();
        org.joda.time.LocalTime.Property property23 = localTime19.millisOfDay();
        org.joda.time.LocalTime localTime25 = property23.addNoWrapToCopy((int) '4');
        org.joda.time.LocalTime localTime26 = property23.withMaximumValue();
        org.joda.time.LocalTime localTime27 = property23.withMaximumValue();
        org.joda.time.LocalTime localTime28 = property23.getLocalTime();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone30);
        int int32 = dateMidnight31.getEra();
        int int33 = dateMidnight31.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight31.withField(dateTimeFieldType34, 3);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight31.minusDays((int) (short) 10);
        org.joda.time.DateTime dateTime39 = dateMidnight38.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime44 = property42.add((long) 3);
        mutableDateTime44.setDayOfMonth((int) (byte) 10);
        mutableDateTime44.add((long) 6);
        mutableDateTime44.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property52 = dateMidnight51.monthOfYear();
        mutableDateTime44.setTime((org.joda.time.ReadableInstant) dateMidnight51);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight38, (org.joda.time.ReadableInstant) dateMidnight51);
        org.joda.time.LocalTime localTime55 = localTime28.plus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.Period period56 = period54.toPeriod();
        org.joda.time.TimeOfDay timeOfDay57 = timeOfDay9.minus((org.joda.time.ReadablePeriod) period54);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(timeOfDay57);
    }

    @Test
    public void test10105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10105");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(53693557, 0, 112, 53255370, 245, 5);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53255370 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10106");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfDay(100);
        int int6 = localDateTime5.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = localDateTime5.getFieldType((int) (byte) 1);
        java.util.Date date9 = localDateTime5.toDate();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusWeeks(292278993);
        java.util.Date date14 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay15 = org.joda.time.TimeOfDay.fromDateFields(date14);
        int int16 = timeOfDay15.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay15.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property21 = timeOfDay20.secondOfMinute();
        int int22 = property21.get();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone36);
        org.joda.time.Duration duration38 = mutablePeriod27.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight37);
        mutablePeriod27.addMillis(0);
        mutablePeriod27.setMonths(0);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone44);
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(0L, 100L, periodType48, chronology49);
        java.lang.Object obj51 = mutablePeriod50.clone();
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(0L, 100L, periodType54, chronology55);
        mutablePeriod50.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod56);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone59);
        org.joda.time.Duration duration61 = mutablePeriod50.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight60);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight45.plus((org.joda.time.ReadableDuration) duration61);
        org.joda.time.MutableDateTime mutableDateTime64 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType67 = null;
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod(0L, 100L, periodType67, chronology68);
        java.lang.Object obj70 = mutablePeriod69.clone();
        java.lang.String str71 = mutablePeriod69.toString();
        mutableDateTime64.add((org.joda.time.ReadablePeriod) mutablePeriod69, 2022);
        mutablePeriod27.setPeriod((org.joda.time.ReadableInstant) dateMidnight62, (org.joda.time.ReadableInstant) mutableDateTime64);
        mutableDateTime64.addWeekyears((int) (byte) 0);
        mutableDateTime64.setSecondOfMinute(8);
        int int79 = property21.compareTo((org.joda.time.ReadableInstant) mutableDateTime64);
        java.util.Locale locale82 = new java.util.Locale("", "0035-10-10");
        int int83 = property21.getMaximumShortTextLength(locale82);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str84 = localDateTime5.toString("2022-01-01T00:03:22.200Z", locale82);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 13 + "'", int6 == 13);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Mon Dec 13 00:00:00 GMT 2021");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "P52YT3M22.200S");
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "PT0.100S");
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(obj70);
        org.junit.Assert.assertEquals(obj70.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj70), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj70), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "PT0.100S" + "'", str71, "PT0.100S");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertEquals(locale82.toString(), "_0035-10-10");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
    }

    @Test
    public void test10107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10107");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        java.lang.String str5 = yearMonthDay4.toString();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = yearMonthDay4.toDateMidnight(dateTimeZone6);
        int int8 = yearMonthDay4.getMonthOfYear();
        java.lang.String str9 = yearMonthDay4.toString();
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        java.lang.Object obj17 = mutablePeriod16.clone();
        java.lang.String str18 = mutablePeriod16.toString();
        mutableDateTime11.add((org.joda.time.ReadablePeriod) mutablePeriod16, 2022);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime11.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone23);
        int int25 = dateMidnight24.getEra();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = dateMidnight24.toDateTime(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusDays(9);
        int int30 = dateTime27.getEra();
        org.joda.time.DateTime dateTime31 = dateTime27.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTime31.getZone();
        long long35 = dateTimeZone32.adjustOffset((long) 5, true);
        mutableDateTime11.setZoneRetainFields(dateTimeZone32);
        org.joda.time.DateTime dateTime37 = yearMonthDay4.toDateTime((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.DateTime.Property property38 = dateTime37.dayOfWeek();
        org.joda.time.DateTime dateTime39 = property38.roundFloorCopy();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0035-10-10" + "'", str5, "0035-10-10");
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 10 + "'", int8 == 10);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0035-10-10" + "'", str9, "0035-10-10");
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.100S" + "'", str18, "PT0.100S");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 5L + "'", long35 == 5L);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test10108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10108");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(0L, 100L, periodType2, chronology3);
        java.lang.Object obj5 = mutablePeriod4.clone();
        mutablePeriod4.setSeconds(53243308);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        int int20 = mutablePeriod18.getMinutes();
        org.joda.time.Period period22 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        java.lang.String str24 = durationFieldType23.toString();
        org.joda.time.Period period26 = period22.withField(durationFieldType23, 2);
        boolean boolean27 = mutablePeriod18.isSupported(durationFieldType23);
        java.lang.String str28 = durationFieldType23.getName();
        mutablePeriod4.add(durationFieldType23, (int) (short) -1);
        mutablePeriod4.add((long) 53243308);
        mutablePeriod4.addHours(2740);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "PT2753H47M53243331.408S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "PT2753H47M53243331.408S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "PT2753H47M53243331.408S");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hours" + "'", str24, "hours");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hours" + "'", str28, "hours");
    }

    @Test
    public void test10109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10109");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        java.lang.Object obj17 = mutablePeriod16.clone();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(0L, 100L, periodType20, chronology21);
        mutablePeriod16.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone25);
        org.joda.time.Duration duration27 = mutablePeriod16.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight11.plus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.LocalDate localDate29 = dateMidnight28.toLocalDate();
        org.joda.time.Chronology chronology30 = localDate29.getChronology();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        java.lang.Object obj36 = mutablePeriod35.clone();
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(0L, 100L, periodType39, chronology40);
        mutablePeriod35.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod41);
        int int43 = mutablePeriod41.getMinutes();
        org.joda.time.Period period45 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.hours();
        java.lang.String str47 = durationFieldType46.toString();
        org.joda.time.Period period49 = period45.withField(durationFieldType46, 2);
        boolean boolean50 = mutablePeriod41.isSupported(durationFieldType46);
        long long53 = chronology30.add((org.joda.time.ReadablePeriod) mutablePeriod41, (long) 53230763, 2);
        org.joda.time.LocalDate localDate54 = localDate8.minus((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.LocalDate.Property property55 = localDate8.dayOfWeek();
        org.joda.time.LocalDate localDate57 = localDate8.plusWeeks(86399);
        java.lang.String str59 = localDate57.toString("0");
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "PT0.100S");
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hours" + "'", str47, "hours");
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 53230963L + "'", long53 == 53230963L);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "0" + "'", str59, "0");
    }

    @Test
    public void test10110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10110");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight6 = property4.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property4.getFieldType();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.year();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusSeconds((int) (byte) 10);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        boolean boolean16 = dateTimeFieldType7.isSupported(chronology15);
        org.joda.time.DurationField durationField17 = chronology15.hours();
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(chronology15);
        long long19 = dateMidnight18.getMillis();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1645401600000L + "'", long19 == 1645401600000L);
    }

    @Test
    public void test10111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10111");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Period period22 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        java.lang.String str24 = durationFieldType23.toString();
        org.joda.time.Period period26 = period22.withField(durationFieldType23, 2);
        org.joda.time.Period period28 = period26.withMillis((int) '#');
        org.joda.time.LocalDate localDate29 = localDate20.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.LocalDate localDate31 = localDate29.minusYears(11);
        int int32 = localDate29.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        java.lang.Object obj41 = mutablePeriod40.clone();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        mutablePeriod40.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone49);
        org.joda.time.Duration duration51 = mutablePeriod40.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight35.plus((org.joda.time.ReadableDuration) duration51);
        org.joda.time.LocalDate localDate53 = dateMidnight52.toLocalDate();
        org.joda.time.LocalDate.Property property54 = localDate53.dayOfYear();
        org.joda.time.LocalDate localDate55 = property54.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate57 = localDate55.withWeekyear(11);
        org.joda.time.MutableDateTime mutableDateTime59 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime59.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime61 = property60.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime62 = property60.roundFloor();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.YearMonthDay yearMonthDay67 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology66);
        org.joda.time.DateMidnight dateMidnight68 = yearMonthDay67.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight68.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime62, (org.joda.time.ReadableInstant) dateMidnight68, periodType72);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone75);
        int int77 = dateMidnight76.getEra();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = dateMidnight76.toDateTime(chronology78);
        org.joda.time.DateTime dateTime81 = dateTime79.plusDays(9);
        int int82 = dateTime79.getEra();
        org.joda.time.DateTime dateTime83 = dateTime79.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone84 = dateTime83.getZone();
        long long87 = dateTimeZone84.adjustOffset((long) 5, true);
        boolean boolean89 = dateTimeZone84.isStandardOffset((long) 3);
        mutableDateTime62.setZoneRetainFields(dateTimeZone84);
        org.joda.time.DateTime dateTime91 = localDate57.toDateTimeAtCurrentTime(dateTimeZone84);
        org.joda.time.Interval interval92 = localDate29.toInterval(dateTimeZone84);
        org.joda.time.LocalDate localDate94 = localDate29.plusMonths(53315843);
        org.joda.time.DateTimeFieldType dateTimeFieldType95 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate97 = localDate29.withField(dateTimeFieldType95, 1986);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hours" + "'", str24, "hours");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "PT0.100S");
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 5L + "'", long87 == 5L);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(localDate94);
    }

    @Test
    public void test10112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10112");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay5.minusSeconds((-1));
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone11);
        int int13 = dateMidnight12.getEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateMidnight12.toDateTime(chronology14);
        long long16 = dateTime15.getMillis();
        org.joda.time.DateTime dateTime18 = dateTime15.withMillis(100L);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone20);
        int int22 = dateMidnight21.getEra();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateMidnight21.toDateTime(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusDays(9);
        int int27 = dateTime24.getEra();
        org.joda.time.DateTime dateTime28 = dateTime24.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime28.getZone();
        org.joda.time.DateTime dateTime30 = dateTime15.withZoneRetainFields(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = timeOfDay5.toDateTimeToday(dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime31);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test10113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10113");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(53243063, 21, 32769);
        java.util.Locale locale5 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar.Builder builder6 = builder4.setLocale(locale5);
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        java.lang.Object obj14 = mutablePeriod13.clone();
        java.lang.String str15 = mutablePeriod13.toString();
        mutableDateTime8.add((org.joda.time.ReadablePeriod) mutablePeriod13, 2022);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime8.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone20);
        int int22 = dateMidnight21.getEra();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateMidnight21.toDateTime(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusDays(9);
        int int27 = dateTime24.getEra();
        org.joda.time.DateTime dateTime28 = dateTime24.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime28.getZone();
        long long32 = dateTimeZone29.adjustOffset((long) 5, true);
        mutableDateTime8.setZoneRetainFields(dateTimeZone29);
        java.util.TimeZone timeZone34 = dateTimeZone29.toTimeZone();
        java.util.Calendar.Builder builder35 = builder4.setTimeZone(timeZone34);
        java.util.Calendar.Builder builder39 = builder4.setWeekDate(53233428, 12, (-1));
        java.util.Calendar.Builder builder43 = builder4.setWeekDate(22, 8, 50400000);
        java.util.Date date45 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay46 = org.joda.time.TimeOfDay.fromDateFields(date45);
        int int47 = timeOfDay46.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay49 = timeOfDay46.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay51 = timeOfDay49.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property52 = timeOfDay51.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay54 = property52.addNoWrapToCopy(3);
        org.joda.time.TimeOfDay timeOfDay55 = property52.withMaximumValue();
        org.joda.time.DurationField durationField56 = property52.getRangeDurationField();
        java.util.Locale locale59 = new java.util.Locale("", "0035-10-10");
        java.lang.String str60 = property52.getAsShortText(locale59);
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        java.util.Set<java.lang.String> strSet62 = locale61.getUnicodeLocaleAttributes();
        java.lang.String str63 = property52.getAsText(locale61);
        java.util.Calendar.Builder builder64 = builder43.setLocale(locale61);
        java.lang.Object obj65 = null;
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime(obj65);
        int[] intArray67 = localTime66.getValues();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder68 = builder64.setFields(intArray67);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT0.100S" + "'", str15, "PT0.100S");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 5L + "'", long32 == 5L);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals(date45.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(timeOfDay49);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertEquals(locale59.toString(), "_0035-10-10");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0" + "'", str60, "0");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "0" + "'", str63, "0");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(intArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[14, 56, 36, 257]");
    }

    @Test
    public void test10114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10114");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay9 = property8.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay11 = property8.addNoWrapToCopy(3);
        org.joda.time.TimeOfDay timeOfDay12 = property8.withMaximumValue();
        java.lang.String str13 = property8.getName();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "secondOfMinute" + "'", str13, "secondOfMinute");
    }

    @Test
    public void test10115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10115");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.set(14, 540, 53243434);
        // The following exception was thrown during execution in test generation
        try {
            calendar1.roll(53708, 41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=14,MONTH=540,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=53243434,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=36,MILLISECOND=296,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test10116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10116");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay4.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.plus((long) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight10, chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.withCenturyOfEra(8);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(0L, dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        int int21 = dateMidnight20.getEra();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone35);
        org.joda.time.Duration duration37 = mutablePeriod26.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight17, (org.joda.time.ReadableDuration) duration37, periodType39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone42);
        int int44 = dateMidnight43.getEra();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0L, 100L, periodType47, chronology48);
        java.lang.Object obj50 = mutablePeriod49.clone();
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(0L, 100L, periodType53, chronology54);
        mutablePeriod49.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod55);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone58);
        org.joda.time.Duration duration60 = mutablePeriod49.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight59);
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight43, (org.joda.time.ReadableDuration) duration60);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone63);
        int int65 = dateMidnight64.getEra();
        org.joda.time.PeriodType periodType68 = null;
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(0L, 100L, periodType68, chronology69);
        java.lang.Object obj71 = mutablePeriod70.clone();
        org.joda.time.PeriodType periodType74 = null;
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod(0L, 100L, periodType74, chronology75);
        mutablePeriod70.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod76);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateMidnight dateMidnight80 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone79);
        org.joda.time.Duration duration81 = mutablePeriod70.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight80);
        org.joda.time.Period period82 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight64, (org.joda.time.ReadableDuration) duration81);
        boolean boolean83 = duration60.isLongerThan((org.joda.time.ReadableDuration) duration81);
        java.lang.String str84 = duration81.toString();
        boolean boolean85 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration81);
        org.joda.time.Period period86 = duration37.toPeriod();
        org.joda.time.PeriodType periodType89 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType90 = periodType89.withMillisRemoved();
        org.joda.time.Period period91 = new org.joda.time.Period((long) 10, (long) '#', periodType90);
        org.joda.time.PeriodType periodType92 = periodType90.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod93 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableDuration) duration37, periodType92);
        long long94 = duration37.getMillis();
        org.joda.time.Period period95 = duration37.toPeriod();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0.100S");
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "PT0.100S");
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "PT0.100S");
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "PT0.100S" + "'", str84, "PT0.100S");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(periodType89);
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertNotNull(periodType92);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 100L + "'", long94 == 100L);
        org.junit.Assert.assertNotNull(period95);
    }

    @Test
    public void test10117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10117");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 53230763, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.minusYears(53233428);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay51.year();
        int int55 = yearMonthDay51.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay51.plusDays(53420843);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 53230963L + "'", long49 == 53230963L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay57);
    }

    @Test
    public void test10118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10118");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Period period22 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        java.lang.String str24 = durationFieldType23.toString();
        org.joda.time.Period period26 = period22.withField(durationFieldType23, 2);
        org.joda.time.Period period28 = period26.withMillis((int) '#');
        org.joda.time.LocalDate localDate29 = localDate20.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.LocalDate localDate31 = localDate29.minusYears(11);
        org.joda.time.LocalDate localDate33 = localDate29.withDayOfMonth(13);
        org.joda.time.LocalDate localDate35 = localDate29.minusWeeks(69);
        org.joda.time.LocalDate.Property property36 = localDate29.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone39);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(0L, 100L, periodType43, chronology44);
        java.lang.Object obj46 = mutablePeriod45.clone();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(0L, 100L, periodType49, chronology50);
        mutablePeriod45.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod51);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone54);
        org.joda.time.Duration duration56 = mutablePeriod45.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight55);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight40.plus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.LocalDate localDate58 = dateMidnight57.toLocalDate();
        org.joda.time.Period period60 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.hours();
        java.lang.String str62 = durationFieldType61.toString();
        org.joda.time.Period period64 = period60.withField(durationFieldType61, 2);
        org.joda.time.Period period66 = period64.withMillis((int) '#');
        org.joda.time.LocalDate localDate67 = localDate58.minus((org.joda.time.ReadablePeriod) period66);
        org.joda.time.LocalDate localDate69 = localDate67.withDayOfMonth(11);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone71);
        int int73 = dateMidnight72.getEra();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateTime dateTime75 = dateMidnight72.toDateTime(chronology74);
        long long76 = dateTime75.getMillis();
        org.joda.time.DateTime dateTime78 = dateTime75.withMillis(100L);
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.DateMidnight dateMidnight81 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone80);
        int int82 = dateMidnight81.getEra();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.DateTime dateTime84 = dateMidnight81.toDateTime(chronology83);
        org.joda.time.DateTime dateTime86 = dateTime84.plusDays(9);
        int int87 = dateTime84.getEra();
        org.joda.time.DateTime dateTime88 = dateTime84.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone89 = dateTime88.getZone();
        org.joda.time.DateTime dateTime90 = dateTime75.withZoneRetainFields(dateTimeZone89);
        org.joda.time.DateMidnight dateMidnight91 = localDate67.toDateMidnight(dateTimeZone89);
        boolean boolean92 = dateTimeZone89.isFixed();
        org.joda.time.DateMidnight dateMidnight93 = new org.joda.time.DateMidnight((long) 22, dateTimeZone89);
        org.joda.time.DateTime dateTime94 = localDate29.toDateTimeAtMidnight(dateTimeZone89);
        org.joda.time.DateTimeZone dateTimeZone95 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone96 = dateTimeZone95.toTimeZone();
        org.joda.time.DateTime dateTime97 = dateTime94.toDateTime(dateTimeZone95);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hours" + "'", str24, "hours");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "PT0.100S");
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hours" + "'", str62, "hours");
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateMidnight91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(dateTimeZone95);
        org.junit.Assert.assertNotNull(timeZone96);
        org.junit.Assert.assertEquals(timeZone96.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime97);
    }

    @Test
    public void test10119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10119");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setWeekDate(14, (int) (byte) 0, 7);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone7);
        int int9 = dateMidnight8.getEra();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateMidnight8.toDateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusDays(9);
        int int14 = dateTime11.getEra();
        org.joda.time.DateTime dateTime15 = dateTime11.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime15.getZone();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone16);
        boolean boolean18 = calendar0.before((java.lang.Object) dateTimeZone16);
        calendar0.clear((int) (byte) 0);
        calendar0.add((int) (byte) 0, (int) (short) 1);
        calendar0.clear();
        calendar0.set((int) (byte) 100, 2000, 2022);
        calendar0.set(53363, 53666154, 970);
        int int33 = calendar0.getFirstDayOfWeek();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=53363,MONTH=53666154,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=970,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
    }

    @Test
    public void test10120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10120");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate11 = property7.addToCopy(7);
        java.lang.String str12 = localDate11.toString();
        org.joda.time.LocalDate.Property property13 = localDate11.dayOfMonth();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.standard();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(0L, 100L, periodType40, chronology41);
        java.lang.Object obj43 = mutablePeriod42.clone();
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(0L, 100L, periodType46, chronology47);
        mutablePeriod42.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod48);
        int int50 = mutablePeriod48.getMinutes();
        org.joda.time.Period period52 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.hours();
        java.lang.String str54 = durationFieldType53.toString();
        org.joda.time.Period period56 = period52.withField(durationFieldType53, 2);
        boolean boolean57 = mutablePeriod48.isSupported(durationFieldType53);
        long long60 = chronology37.add((org.joda.time.ReadablePeriod) mutablePeriod48, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.Chronology chronology62 = chronology37.withZone(dateTimeZone61);
        org.joda.time.Period period63 = new org.joda.time.Period((long) 0, periodType15, chronology37);
        org.joda.time.LocalDate localDate64 = localDate11.plus((org.joda.time.ReadablePeriod) period63);
        int int65 = localDate64.getCenturyOfEra();
        org.joda.time.LocalDate.Property property66 = localDate64.weekyear();
        org.joda.time.LocalDate localDate68 = localDate64.minusDays(53359356);
        org.joda.time.LocalDate localDate70 = localDate68.plusMonths(6);
        java.lang.String str71 = localDate70.toString();
        org.joda.time.LocalDate localDate73 = localDate70.minusMonths(53756674);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1977-01-01" + "'", str12, "1977-01-01");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hours" + "'", str54, "hours");
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 53230963L + "'", long60 == 53230963L);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 19 + "'", int65 == 19);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "-144116-07-18" + "'", str71, "-144116-07-18");
        org.junit.Assert.assertNotNull(localDate73);
    }

    @Test
    public void test10121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10121");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        java.util.Locale locale5 = new java.util.Locale("hi!", "");
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.LocalDateTime localDateTime7 = property2.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYear((-1));
        int int10 = localDateTime7.getWeekyear();
        int int11 = localDateTime7.getDayOfWeek();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.year();
        java.util.Locale locale17 = new java.util.Locale("hi!", "");
        java.lang.String str18 = property14.getAsText(locale17);
        org.joda.time.LocalDateTime localDateTime19 = property14.withMaximumValue();
        java.lang.String str20 = property14.toString();
        org.joda.time.LocalDateTime localDateTime21 = property14.getLocalDateTime();
        java.util.Locale locale23 = java.util.Locale.forLanguageTag("days");
        int int24 = property14.getMaximumTextLength(locale23);
        org.joda.time.LocalDateTime localDateTime25 = property14.getLocalDateTime();
        int int26 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withWeekOfWeekyear((int) (short) 10);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022" + "'", str6, "2022");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 292278993 + "'", int10 == 292278993);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals(locale17.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022" + "'", str18, "2022");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[year]" + "'", str20, "Property[year]");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "days");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test10122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10122");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.addWrapField((int) (short) 0);
        org.joda.time.Period period6 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.hours();
        java.lang.String str8 = durationFieldType7.toString();
        org.joda.time.Period period10 = period6.withField(durationFieldType7, 2);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone12);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        java.lang.Object obj19 = mutablePeriod18.clone();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        mutablePeriod18.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone27);
        org.joda.time.Duration duration29 = mutablePeriod18.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight13.plus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.LocalDate localDate31 = dateMidnight30.toLocalDate();
        org.joda.time.Chronology chronology32 = localDate31.getChronology();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        java.lang.Object obj38 = mutablePeriod37.clone();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        mutablePeriod37.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        int int45 = mutablePeriod43.getMinutes();
        org.joda.time.Period period47 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.hours();
        java.lang.String str49 = durationFieldType48.toString();
        org.joda.time.Period period51 = period47.withField(durationFieldType48, 2);
        boolean boolean52 = mutablePeriod43.isSupported(durationFieldType48);
        long long55 = chronology32.add((org.joda.time.ReadablePeriod) mutablePeriod43, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.Chronology chronology57 = chronology32.withZone(dateTimeZone56);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate(chronology57);
        org.joda.time.DurationField durationField59 = chronology57.halfdays();
        org.joda.time.DurationField durationField60 = durationFieldType7.getField(chronology57);
        mutableDateTime4.setChronology(chronology57);
        org.joda.time.DateTimeField dateTimeField62 = chronology57.halfdayOfDay();
        org.joda.time.LocalDate localDate63 = org.joda.time.LocalDate.now(chronology57);
        java.util.Date date64 = localDate63.toDate();
        date64.setSeconds(32770);
        date64.setSeconds(0);
        long long69 = date64.getTime();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hours" + "'", str8, "hours");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "PT0.100S");
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hours" + "'", str49, "hours");
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 53230963L + "'", long55 == 53230963L);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Mon Feb 21 00:00:00 GMT 2022");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1645401600000L + "'", long69 == 1645401600000L);
    }

    @Test
    public void test10123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10123");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.roundFloor();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology8);
        org.joda.time.DateMidnight dateMidnight10 = yearMonthDay9.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime4, (org.joda.time.ReadableInstant) dateMidnight10, periodType14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(0L, 100L, periodType18, chronology19);
        java.lang.Object obj21 = mutablePeriod20.clone();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        mutablePeriod20.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        org.joda.time.Duration duration31 = mutablePeriod20.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(0L, dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone36);
        int int38 = dateMidnight37.getEra();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        java.lang.Object obj44 = mutablePeriod43.clone();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0L, 100L, periodType47, chronology48);
        mutablePeriod43.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone52);
        org.joda.time.Duration duration54 = mutablePeriod43.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight37, (org.joda.time.ReadableDuration) duration54);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight34, (org.joda.time.ReadableDuration) duration54, periodType56);
        boolean boolean58 = duration31.isLongerThan((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime4, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime4.yearOfEra();
        mutableDateTime4.addYears(2470);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime4.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime64 = property63.roundCeiling();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "PT0.100S");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "PT0.100S");
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
    }

    @Test
    public void test10124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10124");
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.time();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getRangeDurationType();
        java.lang.String str11 = durationFieldType10.getName();
        int int12 = periodType8.indexOf(durationFieldType10);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone15);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, 100L, periodType19, chronology20);
        java.lang.Object obj22 = mutablePeriod21.clone();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone30);
        org.joda.time.Duration duration32 = mutablePeriod21.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight16.plus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.LocalDate localDate34 = dateMidnight33.toLocalDate();
        org.joda.time.Chronology chronology35 = localDate34.getChronology();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        java.lang.Object obj41 = mutablePeriod40.clone();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        mutablePeriod40.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        int int48 = mutablePeriod46.getMinutes();
        org.joda.time.Period period50 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.hours();
        java.lang.String str52 = durationFieldType51.toString();
        org.joda.time.Period period54 = period50.withField(durationFieldType51, 2);
        boolean boolean55 = mutablePeriod46.isSupported(durationFieldType51);
        long long58 = chronology35.add((org.joda.time.ReadablePeriod) mutablePeriod46, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.Chronology chronology60 = chronology35.withZone(dateTimeZone59);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 11, chronology60);
        org.joda.time.DateTimeField dateTimeField62 = chronology60.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(100L, periodType8, chronology60);
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType67 = periodType66.withMillisRemoved();
        org.joda.time.Period period68 = new org.joda.time.Period((long) 10, (long) '#', periodType67);
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod(periodType67);
        long long72 = chronology60.add((org.joda.time.ReadablePeriod) mutablePeriod69, (-4550400000L), 32770);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((-1996092050), (-1017303839), 53260798, (int) '#', 53736036, 1329237, 3120000, chronology60);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "days" + "'", str11, "days");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "PT0.100S");
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hours" + "'", str52, "hours");
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 53230963L + "'", long58 == 53230963L);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-4550400000L) + "'", long72 == (-4550400000L));
    }

    @Test
    public void test10125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10125");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(0L, 100L, periodType4, chronology5);
        java.lang.Object obj7 = mutablePeriod6.clone();
        java.lang.String str8 = mutablePeriod6.toString();
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod6, 2022);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        int int15 = dateMidnight14.getEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateMidnight14.toDateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusDays(9);
        int int20 = dateTime17.getEra();
        org.joda.time.DateTime dateTime21 = dateTime17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime21.getZone();
        long long25 = dateTimeZone22.adjustOffset((long) 5, true);
        mutableDateTime1.setZoneRetainFields(dateTimeZone22);
        java.util.TimeZone timeZone27 = dateTimeZone22.toTimeZone();
        boolean boolean28 = timeZone27.observesDaylightTime();
        timeZone27.setID("");
        java.util.TimeZone.setDefault(timeZone27);
        boolean boolean32 = timeZone27.observesDaylightTime();
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone27);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean35 = calendar33.isSet(202200);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 202200");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0.100S" + "'", str8, "PT0.100S");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 5L + "'", long25 == 5L);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645455396949,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=36,MILLISECOND=949,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test10126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10126");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology5);
        org.joda.time.Interval interval7 = yearMonthDay6.toInterval();
        org.joda.time.Period period8 = interval7.toPeriod();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType10 = periodType9.withMillisRemoved();
        int int11 = periodType10.size();
        org.joda.time.Period period13 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.hours();
        java.lang.String str15 = durationFieldType14.toString();
        org.joda.time.Period period17 = period13.withField(durationFieldType14, 2);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        java.lang.Object obj26 = mutablePeriod25.clone();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        mutablePeriod25.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        org.joda.time.Duration duration36 = mutablePeriod25.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight20.plus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.LocalDate localDate38 = dateMidnight37.toLocalDate();
        org.joda.time.Chronology chronology39 = localDate38.getChronology();
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(0L, 100L, periodType42, chronology43);
        java.lang.Object obj45 = mutablePeriod44.clone();
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(0L, 100L, periodType48, chronology49);
        mutablePeriod44.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod50);
        int int52 = mutablePeriod50.getMinutes();
        org.joda.time.Period period54 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.hours();
        java.lang.String str56 = durationFieldType55.toString();
        org.joda.time.Period period58 = period54.withField(durationFieldType55, 2);
        boolean boolean59 = mutablePeriod50.isSupported(durationFieldType55);
        long long62 = chronology39.add((org.joda.time.ReadablePeriod) mutablePeriod50, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.Chronology chronology64 = chronology39.withZone(dateTimeZone63);
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate(chronology64);
        org.joda.time.DurationField durationField66 = chronology64.halfdays();
        org.joda.time.DurationField durationField67 = durationFieldType14.getField(chronology64);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((java.lang.Object) interval7, periodType10, chronology64);
        org.joda.time.PeriodType periodType71 = null;
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod(0L, 100L, periodType71, chronology72);
        java.lang.Object obj74 = mutablePeriod73.clone();
        org.joda.time.Interval interval75 = interval7.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod73);
        boolean boolean76 = interval7.isBeforeNow();
        org.joda.time.Chronology chronology77 = interval7.getChronology();
        org.joda.time.MutableDateTime mutableDateTime78 = new org.joda.time.MutableDateTime(chronology77);
        org.joda.time.Interval interval79 = new org.joda.time.Interval(28L, 1645455280474L, chronology77);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hours" + "'", str15, "hours");
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "PT0.100S");
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hours" + "'", str56, "hours");
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 53230963L + "'", long62 == 53230963L);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "PT0.100S");
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(chronology77);
    }

    @Test
    public void test10127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10127");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        int int34 = mutablePeriod32.getMinutes();
        org.joda.time.Period period36 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        java.lang.String str38 = durationFieldType37.toString();
        org.joda.time.Period period40 = period36.withField(durationFieldType37, 2);
        boolean boolean41 = mutablePeriod32.isSupported(durationFieldType37);
        long long44 = chronology21.add((org.joda.time.ReadablePeriod) mutablePeriod32, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Chronology chronology46 = chronology21.withZone(dateTimeZone45);
        org.joda.time.DurationField durationField47 = chronology46.centuries();
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(chronology46);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime48, readableInstant49);
        org.joda.time.Period period52 = period50.plusMinutes(53305541);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hours" + "'", str38, "hours");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 53230963L + "'", long44 == 53230963L);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(period52);
    }

    @Test
    public void test10128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10128");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        int int34 = mutablePeriod32.getMinutes();
        org.joda.time.Period period36 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        java.lang.String str38 = durationFieldType37.toString();
        org.joda.time.Period period40 = period36.withField(durationFieldType37, 2);
        boolean boolean41 = mutablePeriod32.isSupported(durationFieldType37);
        long long44 = chronology21.add((org.joda.time.ReadablePeriod) mutablePeriod32, (long) 53230763, 2);
        org.joda.time.DurationField durationField45 = chronology21.seconds();
        int int48 = durationField45.getValue((long) (short) 100, (long) (-1996092050));
        boolean boolean49 = durationField45.isSupported();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hours" + "'", str38, "hours");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 53230963L + "'", long44 == 53230963L);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test10129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10129");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfFloor();
        mutableDateTime3.setMonthOfYear(11);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime3.dayOfYear();
        mutableDateTime3.addSeconds(9);
        int int9 = mutableDateTime3.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime3.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutableDateTime3.add(readablePeriod11, 53303564);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime3.weekOfWeekyear();
        int int15 = mutableDateTime3.getSecondOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
    }

    @Test
    public void test10130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10130");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusYears(6);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay2.year();
        int int4 = yearMonthDay2.getDayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay2.plusMonths(218);
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21 + "'", int4 == 21);
        org.junit.Assert.assertNotNull(yearMonthDay6);
    }

    @Test
    public void test10131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10131");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        long long6 = dateTime5.getMillis();
        org.joda.time.DateTime dateTime8 = dateTime5.withMillis(100L);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone10);
        int int12 = dateMidnight11.getEra();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = dateMidnight11.toDateTime(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(9);
        int int17 = dateTime14.getEra();
        org.joda.time.DateTime dateTime18 = dateTime14.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime18.getZone();
        org.joda.time.DateTime dateTime20 = dateTime5.withZoneRetainFields(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.parse("2022");
        int int24 = mutableDateTime23.getSecondOfDay();
        boolean boolean25 = dateTime20.isEqual((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.Period period30 = new org.joda.time.Period(12, 2, (int) ' ', (int) (short) 10);
        org.joda.time.Period period32 = period30.plusDays(1970);
        org.joda.time.Period period34 = period30.plusWeeks((int) '#');
        mutableDateTime23.add((org.joda.time.ReadablePeriod) period30, 2000);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology40);
        org.joda.time.Interval interval42 = yearMonthDay41.toInterval();
        org.joda.time.DateTime dateTime43 = yearMonthDay41.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property45 = dateTime43.property(dateTimeFieldType44);
        org.joda.time.DateTime.Property property46 = dateTime43.minuteOfDay();
        org.joda.time.DateTime dateTime48 = dateTime43.minusYears(70);
        int int49 = dateTime48.getCenturyOfEra();
        mutableDateTime23.setDate((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime52 = dateTime48.minusDays(53773196);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test10132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10132");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        int int8 = dateMidnight7.getEra();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = dateMidnight7.toDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(9);
        int int13 = dateTime10.getEra();
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime14.getZone();
        java.lang.String str16 = dateTimeZone15.toString();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withZone(dateTimeZone15);
        org.joda.time.format.DateTimeParser dateTimeParser19 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 53299420);
        // The following exception was thrown during execution in test generation
        try {
            long long24 = dateTimeFormatter2.parseMillis("2021-12-13T14:55:16.652");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Etc/UTC" + "'", str16, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(dateTimeParser19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
    }

    @Test
    public void test10133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10133");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight6 = property4.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property4.getFieldType();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.year();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusSeconds((int) (byte) 10);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        boolean boolean16 = dateTimeFieldType7.isSupported(chronology15);
        org.joda.time.DurationField durationField17 = chronology15.hours();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.clockhourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long22 = dateTimeField19.set((long) 21, 947);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 947 for clockhourOfHalfday must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test10134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10134");
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.millisOfDay();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime8.secondOfDay();
        java.lang.String str11 = property10.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime13 = property10.add((long) 15);
        java.util.GregorianCalendar gregorianCalendar14 = mutableDateTime13.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone15 = mutableDateTime13.getZone();
        java.lang.String str17 = dateTimeZone15.getName((-46800000L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((int) (byte) 0, 53558619, 1022397, 2023, 53297241, 53395022, 53553757, dateTimeZone15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2023 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "0" + "'", str11, "0");
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(gregorianCalendar14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
    }

    @Test
    public void test10135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10135");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53256551, 23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10136");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Period period22 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        java.lang.String str24 = durationFieldType23.toString();
        org.joda.time.Period period26 = period22.withField(durationFieldType23, 2);
        org.joda.time.Period period28 = period26.withMillis((int) '#');
        org.joda.time.LocalDate localDate29 = localDate20.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.LocalDate localDate31 = localDate29.minusYears(11);
        int int32 = localDate29.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        java.lang.Object obj41 = mutablePeriod40.clone();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        mutablePeriod40.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone49);
        org.joda.time.Duration duration51 = mutablePeriod40.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight35.plus((org.joda.time.ReadableDuration) duration51);
        org.joda.time.LocalDate localDate53 = dateMidnight52.toLocalDate();
        org.joda.time.LocalDate.Property property54 = localDate53.dayOfYear();
        org.joda.time.LocalDate localDate55 = property54.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate57 = localDate55.withWeekyear(11);
        org.joda.time.MutableDateTime mutableDateTime59 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime59.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime61 = property60.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime62 = property60.roundFloor();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.YearMonthDay yearMonthDay67 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology66);
        org.joda.time.DateMidnight dateMidnight68 = yearMonthDay67.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight68.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime62, (org.joda.time.ReadableInstant) dateMidnight68, periodType72);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone75);
        int int77 = dateMidnight76.getEra();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = dateMidnight76.toDateTime(chronology78);
        org.joda.time.DateTime dateTime81 = dateTime79.plusDays(9);
        int int82 = dateTime79.getEra();
        org.joda.time.DateTime dateTime83 = dateTime79.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone84 = dateTime83.getZone();
        long long87 = dateTimeZone84.adjustOffset((long) 5, true);
        boolean boolean89 = dateTimeZone84.isStandardOffset((long) 3);
        mutableDateTime62.setZoneRetainFields(dateTimeZone84);
        org.joda.time.DateTime dateTime91 = localDate57.toDateTimeAtCurrentTime(dateTimeZone84);
        org.joda.time.Interval interval92 = localDate29.toInterval(dateTimeZone84);
        boolean boolean94 = interval92.isBefore((long) 340);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hours" + "'", str24, "hours");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1970 + "'", int32 == 1970);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "PT0.100S");
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 5L + "'", long87 == 5L);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test10137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10137");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        long long6 = dateTime5.getMillis();
        org.joda.time.DateTime dateTime8 = dateTime5.withMillis(100L);
        org.joda.time.DateTime.Property property9 = dateTime8.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.DateTime dateTime11 = dateTime8.plus(readablePeriod10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology15);
        org.joda.time.Interval interval17 = yearMonthDay16.toInterval();
        org.joda.time.Period period18 = interval17.toPeriod();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.YearMonthDay yearMonthDay23 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology22);
        org.joda.time.Interval interval24 = yearMonthDay23.toInterval();
        org.joda.time.Period period25 = interval24.toPeriod();
        long long26 = interval24.getStartMillis();
        org.joda.time.Interval interval27 = interval17.overlap((org.joda.time.ReadableInterval) interval24);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        java.lang.Object obj36 = mutablePeriod35.clone();
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(0L, 100L, periodType39, chronology40);
        mutablePeriod35.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone44);
        org.joda.time.Duration duration46 = mutablePeriod35.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight45);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight30.plus((org.joda.time.ReadableDuration) duration46);
        org.joda.time.LocalDate localDate48 = dateMidnight47.toLocalDate();
        org.joda.time.Chronology chronology49 = localDate48.getChronology();
        java.lang.String str50 = chronology49.toString();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.secondOfDay();
        org.joda.time.Interval interval52 = interval17.withChronology(chronology49);
        org.joda.time.DateMidnight dateMidnight53 = org.joda.time.DateMidnight.now(chronology49);
        org.joda.time.DateTimeField dateTimeField54 = chronology49.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField55 = chronology49.monthOfYear();
        org.joda.time.DateTime dateTime56 = dateTime8.withChronology(chronology49);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-61038316800000L) + "'", long26 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "PT0.100S");
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ISOChronology[UTC]" + "'", str50, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test10138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10138");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight5 = property4.withMinimumValue();
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.year();
        org.joda.time.DateMidnight dateMidnight7 = property6.withMaximumValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight7);
    }

    @Test
    public void test10139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10139");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        org.joda.time.Duration duration21 = mutablePeriod10.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight5.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.LocalDate localDate23 = dateMidnight22.toLocalDate();
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        java.lang.Object obj30 = mutablePeriod29.clone();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        int int37 = mutablePeriod35.getMinutes();
        org.joda.time.Period period39 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.hours();
        java.lang.String str41 = durationFieldType40.toString();
        org.joda.time.Period period43 = period39.withField(durationFieldType40, 2);
        boolean boolean44 = mutablePeriod35.isSupported(durationFieldType40);
        long long47 = chronology24.add((org.joda.time.ReadablePeriod) mutablePeriod35, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Chronology chronology49 = chronology24.withZone(dateTimeZone48);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 11, chronology49);
        org.joda.time.DurationField durationField51 = chronology49.days();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (-1), (long) (short) 0, chronology49);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate(chronology49);
        org.joda.time.MutableDateTime mutableDateTime57 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime57.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime59 = property58.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime60 = property58.roundFloor();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.YearMonthDay yearMonthDay65 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology64);
        org.joda.time.DateMidnight dateMidnight66 = yearMonthDay65.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight66.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime60, (org.joda.time.ReadableInstant) dateMidnight66, periodType70);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone73);
        int int75 = dateMidnight74.getEra();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.DateTime dateTime77 = dateMidnight74.toDateTime(chronology76);
        org.joda.time.DateTime dateTime79 = dateTime77.plusDays(9);
        int int80 = dateTime77.getEra();
        org.joda.time.DateTime dateTime81 = dateTime77.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone82 = dateTime81.getZone();
        long long85 = dateTimeZone82.adjustOffset((long) 5, true);
        boolean boolean87 = dateTimeZone82.isStandardOffset((long) 3);
        mutableDateTime60.setZoneRetainFields(dateTimeZone82);
        org.joda.time.DateMidnight dateMidnight89 = new org.joda.time.DateMidnight(46800035L, dateTimeZone82);
        java.lang.String str90 = dateTimeZone82.toString();
        org.joda.time.DateMidnight dateMidnight91 = new org.joda.time.DateMidnight((long) (byte) 100, dateTimeZone82);
        org.joda.time.DateTime dateTime92 = localDate53.toDateTimeAtMidnight(dateTimeZone82);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hours" + "'", str41, "hours");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 53230963L + "'", long47 == 53230963L);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(periodType70);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 5L + "'", long85 == 5L);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Etc/UTC" + "'", str90, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime92);
    }

    @Test
    public void test10140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10140");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(53624911, 53693557, (-20), 53299420, 0, 532434, 2000, 54);
    }

    @Test
    public void test10141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10141");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType6 = periodType5.withMillisRemoved();
        org.joda.time.Period period7 = new org.joda.time.Period((long) 10, (long) '#', periodType6);
        org.joda.time.Period period8 = new org.joda.time.Period((long) (short) 10, (long) 53233428, periodType6);
        org.joda.time.Duration duration9 = period8.toStandardDuration();
        java.lang.String str10 = duration9.toString();
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration9, 10223);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = property13.getMutableDateTime();
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT0S" + "'", str10, "PT0S");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
    }

    @Test
    public void test10142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10142");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setWeekDate(14, (int) (byte) 0, 7);
        int int6 = calendar0.getGreatestMinimum(0);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone8);
        int int10 = dateMidnight9.getEra();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = dateMidnight9.toDateTime(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight15 = dateTime14.toDateMidnight();
        org.joda.time.DateMidnight.Property property16 = dateMidnight15.era();
        int int17 = dateMidnight15.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        int int21 = dateMidnight20.getEra();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = dateMidnight20.toDateTime(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusWeeks(0);
        org.joda.time.DateTime dateTime26 = dateTime25.withEarlierOffsetAtOverlap();
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime29 = dateTime25.withFieldAdded(durationFieldType27, 5);
        int int30 = dateMidnight15.compareTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime31 = dateTime29.toDateTime();
        int int32 = dateTime31.getDayOfMonth();
        org.joda.time.DateTime dateTime34 = dateTime31.minus((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone36);
        int int38 = dateMidnight37.getEra();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = dateMidnight37.toDateTime(chronology39);
        org.joda.time.DateTime dateTime42 = dateTime40.minusWeeks(0);
        org.joda.time.DateTime dateTime44 = dateTime40.withYear((int) (short) 10);
        org.joda.time.DateTime dateTime46 = dateTime44.plusDays(53230763);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.YearMonthDay yearMonthDay51 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology50);
        int int52 = yearMonthDay51.size();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone60);
        int int62 = dateMidnight61.getEra();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = dateMidnight61.toDateTime(chronology63);
        org.joda.time.DateTime dateTime66 = dateTime64.plusDays(9);
        int int67 = dateTime64.getEra();
        org.joda.time.DateTime dateTime68 = dateTime64.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone69 = dateTime68.getZone();
        java.lang.String str70 = dateTimeZone69.toString();
        org.joda.time.YearMonthDay yearMonthDay71 = new org.joda.time.YearMonthDay(dateTimeZone69);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((int) (byte) -1, 1, (int) (short) 1, (int) (short) 10, (int) (short) 0, 8, dateTimeZone69);
        java.lang.String str73 = dateTimeZone69.toString();
        org.joda.time.Interval interval74 = yearMonthDay51.toInterval(dateTimeZone69);
        org.joda.time.MutableDateTime mutableDateTime75 = dateTime46.toMutableDateTime(dateTimeZone69);
        org.joda.time.MutableDateTime mutableDateTime76 = dateTime31.toMutableDateTime(dateTimeZone69);
        boolean boolean77 = calendar0.before((java.lang.Object) dateTimeZone69);
        org.joda.time.MutableDateTime mutableDateTime78 = new org.joda.time.MutableDateTime(dateTimeZone69);
        mutableDateTime78.setDate((-604800001L));
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime78.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime82 = property81.roundCeiling();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61725661402712,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=13,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=364,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=37,MILLISECOND=288,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Etc/UTC" + "'", str70, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Etc/UTC" + "'", str73, "Etc/UTC");
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertNotNull(mutableDateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(mutableDateTime82);
    }

    @Test
    public void test10143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10143");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(0L, 100L, periodType2, chronology3);
        java.lang.Object obj5 = mutablePeriod4.clone();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        org.joda.time.Duration duration15 = mutablePeriod4.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight14);
        mutablePeriod4.addMillis(0);
        mutablePeriod4.setMonths(0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone36);
        org.joda.time.Duration duration38 = mutablePeriod27.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight22.plus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        java.lang.Object obj47 = mutablePeriod46.clone();
        java.lang.String str48 = mutablePeriod46.toString();
        mutableDateTime41.add((org.joda.time.ReadablePeriod) mutablePeriod46, 2022);
        mutablePeriod4.setPeriod((org.joda.time.ReadableInstant) dateMidnight39, (org.joda.time.ReadableInstant) mutableDateTime41);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone55);
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(0L, 100L, periodType59, chronology60);
        java.lang.Object obj62 = mutablePeriod61.clone();
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(0L, 100L, periodType65, chronology66);
        mutablePeriod61.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod67);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone70);
        org.joda.time.Duration duration72 = mutablePeriod61.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight71);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight56.plus((org.joda.time.ReadableDuration) duration72);
        org.joda.time.LocalDate localDate74 = dateMidnight73.toLocalDate();
        org.joda.time.Chronology chronology75 = localDate74.getChronology();
        java.lang.String str76 = chronology75.toString();
        org.joda.time.DateTimeField dateTimeField77 = chronology75.secondOfDay();
        org.joda.time.Interval interval78 = new org.joda.time.Interval(0L, (long) 1, chronology75);
        org.joda.time.YearMonthDay yearMonthDay80 = new org.joda.time.YearMonthDay(10L);
        long long82 = chronology75.set((org.joda.time.ReadablePartial) yearMonthDay80, (long) 8);
        org.joda.time.DateTimeField dateTimeField83 = chronology75.secondOfDay();
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod4, chronology75);
        mutablePeriod84.setHours(9);
        org.joda.time.Period period88 = org.joda.time.Period.months((int) (short) 100);
        mutablePeriod84.mergePeriod((org.joda.time.ReadablePeriod) period88);
        mutablePeriod84.addYears(53412536);
        mutablePeriod84.setSeconds(53543149);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "P52YT3M22.200S");
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0.100S");
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PT0.100S" + "'", str48, "PT0.100S");
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "PT0.100S");
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "ISOChronology[UTC]" + "'", str76, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 8L + "'", long82 == 8L);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(period88);
    }

    @Test
    public void test10144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10144");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        int int2 = calendar1.getWeekYear();
        java.lang.String str3 = calendar1.getCalendarType();
        java.lang.String str4 = calendar1.getCalendarType();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455397366,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=37,MILLISECOND=366,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "gregory" + "'", str3, "gregory");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "gregory" + "'", str4, "gregory");
    }

    @Test
    public void test10145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10145");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) '#', dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone4);
        int int6 = dateMidnight5.getEra();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateMidnight5.toDateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusDays(9);
        int int11 = dateTime8.getEra();
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.DateTime.Property property13 = dateTime12.secondOfDay();
        org.joda.time.DateTime dateTime14 = property13.roundCeilingCopy();
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(0L, 100L, periodType18, chronology19);
        java.lang.Object obj21 = mutablePeriod20.clone();
        org.joda.time.Chronology chronology24 = null;
        mutablePeriod20.setPeriod((long) 0, (long) 12, chronology24);
        mutableDateTime2.add((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime2.minuteOfDay();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(chronology28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.year();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusSeconds((int) (byte) 10);
        org.joda.time.Chronology chronology35 = localDateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.monthOfYear();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.year();
        mutableDateTime2.setRounding(dateTimeField37);
        int int39 = mutableDateTime2.getRoundingMode();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime2.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime42 = property40.set(55996);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 55996 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "PT0.012S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "PT0.012S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "PT0.012S");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(property40);
    }

    @Test
    public void test10146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10146");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        org.joda.time.Duration duration21 = mutablePeriod10.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight5.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.LocalDate localDate23 = dateMidnight22.toLocalDate();
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        java.lang.Object obj30 = mutablePeriod29.clone();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        int int37 = mutablePeriod35.getMinutes();
        org.joda.time.Period period39 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.hours();
        java.lang.String str41 = durationFieldType40.toString();
        org.joda.time.Period period43 = period39.withField(durationFieldType40, 2);
        boolean boolean44 = mutablePeriod35.isSupported(durationFieldType40);
        long long47 = chronology24.add((org.joda.time.ReadablePeriod) mutablePeriod35, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Chronology chronology49 = chronology24.withZone(dateTimeZone48);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 11, chronology49);
        org.joda.time.DurationField durationField51 = chronology49.days();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (-1), (long) (short) 0, chronology49);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.YearMonthDay yearMonthDay57 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology56);
        org.joda.time.Interval interval58 = yearMonthDay57.toInterval();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        org.joda.time.Interval interval60 = interval58.withPeriodBeforeEnd(readablePeriod59);
        boolean boolean61 = interval52.contains((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.YearMonthDay yearMonthDay66 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology65);
        int int67 = yearMonthDay66.size();
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod(0L, 100L, periodType70, chronology71);
        java.lang.Object obj73 = mutablePeriod72.clone();
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod(0L, 100L, periodType76, chronology77);
        mutablePeriod72.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod78);
        org.joda.time.YearMonthDay yearMonthDay80 = yearMonthDay66.plus((org.joda.time.ReadablePeriod) mutablePeriod78);
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.DateMidnight dateMidnight85 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone84);
        int int86 = dateMidnight85.getEra();
        org.joda.time.Chronology chronology87 = dateMidnight85.getChronology();
        mutablePeriod78.setPeriod((long) (byte) 100, (long) (byte) -1, chronology87);
        org.joda.time.DurationField durationField89 = chronology87.seconds();
        org.joda.time.Interval interval90 = interval52.withChronology(chronology87);
        org.joda.time.LocalDate localDate91 = new org.joda.time.LocalDate(chronology87);
        int int92 = localDate91.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate94 = localDate91.withYearOfCentury(101);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 101 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hours" + "'", str41, "hours");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 53230963L + "'", long47 == 53230963L);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay80);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 21 + "'", int92 == 21);
    }

    @Test
    public void test10147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10147");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        int int8 = timeOfDay5.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay5.minusMinutes(53250029);
        int int11 = timeOfDay10.size();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
    }

    @Test
    public void test10148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10148");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        calendar1.set(448, 1959, 31);
        // The following exception was thrown during execution in test generation
        try {
            int int8 = calendar1.getMinimum(892);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 892");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=448,MONTH=1959,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=31,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=37,MILLISECOND=451,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
    }

    @Test
    public void test10149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10149");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(0L, 100L, periodType7, chronology8);
        java.lang.Object obj10 = mutablePeriod9.clone();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.Duration duration20 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.LocalDate localDate22 = dateMidnight21.toLocalDate();
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(0L, 100L, periodType26, chronology27);
        java.lang.Object obj29 = mutablePeriod28.clone();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        int int36 = mutablePeriod34.getMinutes();
        org.joda.time.Period period38 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.hours();
        java.lang.String str40 = durationFieldType39.toString();
        org.joda.time.Period period42 = period38.withField(durationFieldType39, 2);
        boolean boolean43 = mutablePeriod34.isSupported(durationFieldType39);
        long long46 = chronology23.add((org.joda.time.ReadablePeriod) mutablePeriod34, (long) 53230763, 2);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 11, chronology23);
        org.joda.time.DateTimeField dateTimeField48 = chronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField49 = chronology23.era();
        org.joda.time.DateTimeField dateTimeField50 = chronology23.weekOfWeekyear();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate(0L, chronology23);
        org.joda.time.LocalDate localDate52 = org.joda.time.LocalDate.now(chronology23);
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(chronology23);
        org.joda.time.DateTimeField dateTimeField54 = chronology23.dayOfMonth();
        org.joda.time.DurationField durationField55 = chronology23.eras();
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT0.100S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hours" + "'", str40, "hours");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 53230963L + "'", long46 == 53230963L);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
    }

    @Test
    public void test10150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10150");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        mutableDateTime4.setDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime4.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundHalfFloor();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology12);
        org.joda.time.Interval interval14 = yearMonthDay13.toInterval();
        org.joda.time.Period period15 = interval14.toPeriod();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology19);
        org.joda.time.Interval interval21 = yearMonthDay20.toInterval();
        org.joda.time.Period period22 = interval21.toPeriod();
        long long23 = interval21.getStartMillis();
        org.joda.time.Interval interval24 = interval14.overlap((org.joda.time.ReadableInterval) interval21);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone26);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(0L, 100L, periodType36, chronology37);
        mutablePeriod32.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone41);
        org.joda.time.Duration duration43 = mutablePeriod32.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight27.plus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.LocalDate localDate45 = dateMidnight44.toLocalDate();
        org.joda.time.Chronology chronology46 = localDate45.getChronology();
        java.lang.String str47 = chronology46.toString();
        org.joda.time.DateTimeField dateTimeField48 = chronology46.secondOfDay();
        org.joda.time.Interval interval49 = interval14.withChronology(chronology46);
        org.joda.time.DurationField durationField50 = chronology46.minutes();
        boolean boolean51 = mutableDateTime8.equals((java.lang.Object) durationField50);
        org.joda.time.DateTimeField dateTimeField52 = null;
        mutableDateTime8.setRounding(dateTimeField52, 22);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime8.weekyear();
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime8.hourOfDay();
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime8.dayOfMonth();
        mutableDateTime8.addMinutes(86399999);
        int int60 = mutableDateTime8.getDayOfWeek();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-61038316800000L) + "'", long23 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0.100S");
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[UTC]" + "'", str47, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
    }

    @Test
    public void test10151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10151");
        org.joda.time.Period period4 = new org.joda.time.Period(455376, 53532665, 43, 53755796);
    }

    @Test
    public void test10152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10152");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Period period22 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        java.lang.String str24 = durationFieldType23.toString();
        org.joda.time.Period period26 = period22.withField(durationFieldType23, 2);
        org.joda.time.Period period28 = period26.withMillis((int) '#');
        org.joda.time.LocalDate localDate29 = localDate20.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.LocalDate localDate31 = localDate29.minusYears(11);
        org.joda.time.LocalDate localDate33 = localDate29.withDayOfMonth(13);
        org.joda.time.LocalDate localDate35 = localDate29.minusWeeks(69);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType36.getRangeDurationType();
        java.lang.String str38 = durationFieldType37.getName();
        org.joda.time.LocalDate localDate40 = localDate35.withFieldAdded(durationFieldType37, 2004);
        int int41 = localDate40.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property42 = localDate40.yearOfCentury();
        org.joda.time.LocalDate.Property property43 = localDate40.weekyear();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hours" + "'", str24, "hours");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "days" + "'", str38, "days");
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test10153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10153");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1645454839865L);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        boolean boolean3 = dateTime1.isSupported(dateTimeFieldType2);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMillisOfDay(100);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.minusSeconds(0);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(0L, dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        int int19 = dateMidnight18.getEra();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        java.lang.Object obj25 = mutablePeriod24.clone();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        org.joda.time.Duration duration35 = mutablePeriod24.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight18, (org.joda.time.ReadableDuration) duration35);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight15, (org.joda.time.ReadableDuration) duration35, periodType37);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime12.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Period period42 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.hours();
        java.lang.String str44 = durationFieldType43.toString();
        org.joda.time.Period period46 = period42.withField(durationFieldType43, 2);
        int int47 = period42.size();
        org.joda.time.MutablePeriod mutablePeriod48 = period42.toMutablePeriod();
        org.joda.time.PeriodType periodType49 = mutablePeriod48.getPeriodType();
        org.joda.time.Period period50 = new org.joda.time.Period((-169257599990L), periodType49);
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration35, periodType49);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone54);
        int int56 = dateMidnight55.getEra();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = dateMidnight55.toDateTime(chronology57);
        long long59 = dateTime58.getMillis();
        org.joda.time.DateTime dateTime61 = dateTime58.withMillis(100L);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone63);
        int int65 = dateMidnight64.getEra();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = dateMidnight64.toDateTime(chronology66);
        org.joda.time.DateTime dateTime69 = dateTime67.plusDays(9);
        int int70 = dateTime67.getEra();
        org.joda.time.DateTime dateTime71 = dateTime67.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone72 = dateTime71.getZone();
        org.joda.time.DateTime dateTime73 = dateTime58.withZoneRetainFields(dateTimeZone72);
        org.joda.time.DateTime dateTime76 = dateTime73.withDurationAdded((long) 86399, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone77 = dateTime76.getZone();
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) (byte) 1, dateTimeZone77);
        org.joda.time.DateTime dateTime79 = dateTime1.withZoneRetainFields(dateTimeZone77);
        int int80 = dateTime79.getMillisOfDay();
        org.joda.time.DateTime.Property property81 = dateTime79.dayOfYear();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT0.100S");
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hours" + "'", str44, "hours");
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 8 + "'", int47 == 8);
        org.junit.Assert.assertNotNull(mutablePeriod48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 53239865 + "'", int80 == 53239865);
        org.junit.Assert.assertNotNull(property81);
    }

    @Test
    public void test10154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10154");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.addWrapField((int) (short) 0);
        org.joda.time.Period period6 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.hours();
        java.lang.String str8 = durationFieldType7.toString();
        org.joda.time.Period period10 = period6.withField(durationFieldType7, 2);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone12);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        java.lang.Object obj19 = mutablePeriod18.clone();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        mutablePeriod18.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone27);
        org.joda.time.Duration duration29 = mutablePeriod18.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight13.plus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.LocalDate localDate31 = dateMidnight30.toLocalDate();
        org.joda.time.Chronology chronology32 = localDate31.getChronology();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        java.lang.Object obj38 = mutablePeriod37.clone();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        mutablePeriod37.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        int int45 = mutablePeriod43.getMinutes();
        org.joda.time.Period period47 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.hours();
        java.lang.String str49 = durationFieldType48.toString();
        org.joda.time.Period period51 = period47.withField(durationFieldType48, 2);
        boolean boolean52 = mutablePeriod43.isSupported(durationFieldType48);
        long long55 = chronology32.add((org.joda.time.ReadablePeriod) mutablePeriod43, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.Chronology chronology57 = chronology32.withZone(dateTimeZone56);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate(chronology57);
        org.joda.time.DurationField durationField59 = chronology57.halfdays();
        org.joda.time.DurationField durationField60 = durationFieldType7.getField(chronology57);
        mutableDateTime4.setChronology(chronology57);
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(chronology57);
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(chronology57);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) 12);
        long long68 = chronology57.add((org.joda.time.ReadablePeriod) mutablePeriod65, (long) 53443776, 575);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hours" + "'", str8, "hours");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "PT0.100S");
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hours" + "'", str49, "hours");
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 53230963L + "'", long55 == 53230963L);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 53450676L + "'", long68 == 53450676L);
    }

    @Test
    public void test10155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10155");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 53230763, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.minusYears(53233428);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay51.year();
        org.joda.time.YearMonthDay yearMonthDay56 = property54.setCopy(21);
        int int57 = property54.getMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay58 = property54.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay60 = property54.setCopy(53255370);
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay60.minusYears((int) (short) 1);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.YearMonthDay yearMonthDay67 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology66);
        org.joda.time.Interval interval68 = yearMonthDay67.toInterval();
        org.joda.time.DateTime dateTime69 = yearMonthDay67.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property71 = dateTime69.property(dateTimeFieldType70);
        org.joda.time.DateTime.Property property72 = dateTime69.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone74);
        int int76 = dateMidnight75.getEra();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTime dateTime78 = dateMidnight75.toDateTime(chronology77);
        org.joda.time.DateTime dateTime80 = dateTime78.plusDays(9);
        int int81 = dateTime78.getEra();
        org.joda.time.DateTime dateTime82 = dateTime78.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone83 = dateTime82.getZone();
        java.lang.String str84 = dateTimeZone83.toString();
        org.joda.time.DateTime dateTime85 = dateTime69.toDateTime(dateTimeZone83);
        boolean boolean86 = dateTimeZone83.isFixed();
        org.joda.time.DateTime dateTime87 = org.joda.time.DateTime.now(dateTimeZone83);
        org.joda.time.DateMidnight dateMidnight88 = new org.joda.time.DateMidnight(dateTimeZone83);
        org.joda.time.DateTime dateTime89 = yearMonthDay60.toDateTimeAtCurrentTime(dateTimeZone83);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType91 = yearMonthDay60.getFieldType(53282437);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53282437");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 53230963L + "'", long49 == 53230963L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-292275054) + "'", int57 == (-292275054));
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Etc/UTC" + "'", str84, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime89);
    }

    @Test
    public void test10156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10156");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Interval interval7 = interval5.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology12);
        org.joda.time.Interval interval14 = yearMonthDay13.toInterval();
        org.joda.time.DateTime dateTime15 = yearMonthDay13.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime15.property(dateTimeFieldType16);
        boolean boolean18 = dateTime8.isSupported(dateTimeFieldType16);
        org.joda.time.DateTime dateTime20 = dateTime8.plusHours(1969);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test10157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10157");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder1.setRegion("");
        java.util.Locale.Builder builder5 = builder1.removeUnicodeLocaleAttribute("120");
        java.util.Locale locale6 = java.util.Locale.US;
        java.lang.String str7 = locale6.getISO3Language();
        java.lang.String str8 = locale6.getScript();
        java.util.Locale.Builder builder9 = builder1.setLocale(locale6);
        java.util.Locale locale10 = builder9.build();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.year();
        java.util.Locale locale16 = new java.util.Locale("hi!", "");
        java.lang.String str17 = property13.getAsText(locale16);
        org.joda.time.LocalDateTime localDateTime18 = property13.withMaximumValue();
        java.lang.String str19 = property13.toString();
        org.joda.time.LocalDateTime localDateTime20 = property13.getLocalDateTime();
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("days");
        int int23 = property13.getMaximumTextLength(locale22);
        java.util.Locale locale24 = locale22.stripExtensions();
        java.util.Locale.Builder builder25 = builder9.setLocale(locale24);
        java.util.Locale.Builder builder26 = builder9.clearExtensions();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "eng" + "'", str7, "eng");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_US");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022" + "'", str17, "2022");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Property[year]" + "'", str19, "Property[year]");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "days");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "days");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test10158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10158");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 53230763, dateTimeZone1);
        int int3 = localDateTime2.size();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusMonths(0);
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plusDays(53250029);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withYear(0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test10159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10159");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Period period22 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        java.lang.String str24 = durationFieldType23.toString();
        org.joda.time.Period period26 = period22.withField(durationFieldType23, 2);
        org.joda.time.Period period28 = period26.withMillis((int) '#');
        org.joda.time.LocalDate localDate29 = localDate20.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.LocalDate localDate31 = localDate29.minusYears(11);
        org.joda.time.LocalDate localDate33 = localDate29.withDayOfMonth(13);
        org.joda.time.LocalDate localDate35 = localDate29.minusWeeks(69);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType36.getRangeDurationType();
        java.lang.String str38 = durationFieldType37.getName();
        org.joda.time.LocalDate localDate40 = localDate35.withFieldAdded(durationFieldType37, 2004);
        int int41 = localDate40.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime42 = localDate40.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate44 = localDate40.withYearOfCentury(39);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hours" + "'", str24, "hours");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "days" + "'", str38, "days");
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDate44);
    }

    @Test
    public void test10160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10160");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay4.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.plus((long) (byte) -1);
        org.joda.time.DateMidnight.Property property11 = dateMidnight8.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight13 = property11.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.DateMidnight dateMidnight14 = property11.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.plusYears(53361675);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight.Property property18 = dateMidnight16.property(dateTimeFieldType17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
    }

    @Test
    public void test10161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10161");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.monthOfYear();
        org.joda.time.DateMidnight dateMidnight2 = property1.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight3 = property1.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField4 = property1.getField();
        org.joda.time.DateMidnight dateMidnight5 = property1.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight7 = property1.addToCopy(53610000);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
    }

    @Test
    public void test10162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10162");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusYears(6);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay2.year();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfFloor();
        mutableDateTime7.setMonthOfYear(11);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(0L, 100L, periodType15, chronology16);
        java.lang.Object obj18 = mutablePeriod17.clone();
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        mutablePeriod17.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone26);
        org.joda.time.Duration duration28 = mutablePeriod17.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight12.plus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.LocalDate localDate30 = dateMidnight29.toLocalDate();
        org.joda.time.Chronology chronology31 = localDate30.getChronology();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, 100L, periodType34, chronology35);
        java.lang.Object obj37 = mutablePeriod36.clone();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(0L, 100L, periodType40, chronology41);
        mutablePeriod36.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod42);
        int int44 = mutablePeriod42.getMinutes();
        org.joda.time.Period period46 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.hours();
        java.lang.String str48 = durationFieldType47.toString();
        org.joda.time.Period period50 = period46.withField(durationFieldType47, 2);
        boolean boolean51 = mutablePeriod42.isSupported(durationFieldType47);
        long long54 = chronology31.add((org.joda.time.ReadablePeriod) mutablePeriod42, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.Chronology chronology56 = chronology31.withZone(dateTimeZone55);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate(chronology56);
        org.joda.time.DurationField durationField58 = chronology56.halfdays();
        org.joda.time.DateTimeField dateTimeField59 = chronology56.secondOfMinute();
        int int60 = mutableDateTime7.get(dateTimeField59);
        mutableDateTime7.addMinutes(5);
        int int63 = mutableDateTime7.getCenturyOfEra();
        int int64 = property3.compareTo((org.joda.time.ReadableInstant) mutableDateTime7);
        mutableDateTime7.setTime(53234315L);
        int int67 = mutableDateTime7.getDayOfWeek();
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime7.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime7.setMinuteOfHour(53233428);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53233428 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "PT0.100S");
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hours" + "'", str48, "hours");
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 53230963L + "'", long54 == 53230963L);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 20 + "'", int63 == 20);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertNotNull(property68);
    }

    @Test
    public void test10163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10163");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfYear();
        org.joda.time.LocalDate localDate22 = property21.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate24 = localDate22.withWeekyear(11);
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime26.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime28 = property27.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime29 = property27.roundFloor();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology33);
        org.joda.time.DateMidnight dateMidnight35 = yearMonthDay34.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight35.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime29, (org.joda.time.ReadableInstant) dateMidnight35, periodType39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone42);
        int int44 = dateMidnight43.getEra();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = dateMidnight43.toDateTime(chronology45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusDays(9);
        int int49 = dateTime46.getEra();
        org.joda.time.DateTime dateTime50 = dateTime46.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone51 = dateTime50.getZone();
        long long54 = dateTimeZone51.adjustOffset((long) 5, true);
        boolean boolean56 = dateTimeZone51.isStandardOffset((long) 3);
        mutableDateTime29.setZoneRetainFields(dateTimeZone51);
        org.joda.time.DateTime dateTime58 = localDate24.toDateTimeAtCurrentTime(dateTimeZone51);
        int int59 = localDate24.getDayOfWeek();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 5L + "'", long54 == 5L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 4 + "'", int59 == 4);
    }

    @Test
    public void test10164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10164");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) 1);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime4 = property2.addWrapFieldToCopy(120052);
        org.joda.time.LocalDateTime localDateTime5 = property2.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test10165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10165");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        org.joda.time.Duration duration21 = mutablePeriod10.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight5.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.LocalDate localDate23 = dateMidnight22.toLocalDate();
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        java.lang.Object obj30 = mutablePeriod29.clone();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        int int37 = mutablePeriod35.getMinutes();
        org.joda.time.Period period39 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.hours();
        java.lang.String str41 = durationFieldType40.toString();
        org.joda.time.Period period43 = period39.withField(durationFieldType40, 2);
        boolean boolean44 = mutablePeriod35.isSupported(durationFieldType40);
        long long47 = chronology24.add((org.joda.time.ReadablePeriod) mutablePeriod35, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Chronology chronology49 = chronology24.withZone(dateTimeZone48);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate(chronology49);
        org.joda.time.DurationField durationField51 = chronology49.halfdays();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 70, (long) 2740, chronology49);
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(chronology49);
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay((-61725661896250948L), chronology49);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hours" + "'", str41, "hours");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 53230963L + "'", long47 == 53230963L);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField51);
    }

    @Test
    public void test10166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10166");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Period period22 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        java.lang.String str24 = durationFieldType23.toString();
        org.joda.time.Period period26 = period22.withField(durationFieldType23, 2);
        org.joda.time.Period period28 = period26.withMillis((int) '#');
        org.joda.time.LocalDate localDate29 = localDate20.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.LocalDate localDate31 = localDate29.minusYears(11);
        org.joda.time.LocalDate localDate33 = localDate29.withDayOfMonth(13);
        org.joda.time.LocalDate localDate35 = localDate29.minusWeeks(69);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType36.getRangeDurationType();
        java.lang.String str38 = durationFieldType37.getName();
        org.joda.time.LocalDate localDate40 = localDate35.withFieldAdded(durationFieldType37, 2004);
        org.joda.time.LocalDate.Property property41 = localDate40.dayOfWeek();
        java.lang.String str42 = localDate40.toString();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hours" + "'", str24, "hours");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "days" + "'", str38, "days");
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1974-03-02" + "'", str42, "1974-03-02");
    }

    @Test
    public void test10167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10167");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 53230763, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.minusYears(53233428);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay51.year();
        int int55 = property54.get();
        int int56 = property54.getMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay57 = property54.withMinimumValue();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 53230963L + "'", long49 == 53230963L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1970 + "'", int55 == 1970);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-292275054) + "'", int56 == (-292275054));
        org.junit.Assert.assertNotNull(yearMonthDay57);
    }

    @Test
    public void test10168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10168");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.year();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMillis((int) (short) 10);
        org.joda.time.DateTime dateTime16 = dateTime7.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDateTime15.toDateTime(readableInstant17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.weekyear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.plusDays(53243308);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withYear(3277270);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withCenturyOfEra(53239865);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53239865 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test10169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10169");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        int int1 = localTime0.getMillisOfDay();
        org.joda.time.LocalTime localTime3 = localTime0.minusMillis(53287595);
        org.joda.time.DateTime dateTime4 = localTime3.toDateTimeToday();
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 53797887 + "'", int1 == 53797887);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(dateTime4);
    }

    @Test
    public void test10170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10170");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 53230763, dateTimeZone1);
        int int3 = localDateTime2.size();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusMonths(0);
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plusDays(53250029);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.minusWeeks((int) (byte) 1);
        java.lang.String str11 = localDateTime10.toString();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withMillisOfDay(53637845);
        java.lang.String str14 = localDateTime13.toString();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1969-12-25T14:47:10.763" + "'", str11, "1969-12-25T14:47:10.763");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1969-12-25T14:53:57.845" + "'", str14, "1969-12-25T14:53:57.845");
    }

    @Test
    public void test10171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10171");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        int int1 = localTime0.getMillisOfDay();
        org.joda.time.LocalTime.Property property2 = localTime0.hourOfDay();
        org.joda.time.LocalTime localTime4 = property2.addCopy(0L);
        org.joda.time.LocalTime localTime5 = property2.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            int int7 = localTime5.getValue(20);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 20");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 53797916 + "'", int1 == 53797916);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
    }

    @Test
    public void test10172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10172");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.secondOfDay();
        java.lang.String str4 = property3.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime6 = property3.add((long) 15);
        java.util.GregorianCalendar gregorianCalendar7 = mutableDateTime6.toGregorianCalendar();
        mutableDateTime6.addMillis(2004);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.dayOfMonth();
        mutableDateTime6.setYear((-292275054));
        mutableDateTime6.setWeekyear(53750276);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0" + "'", str4, "0");
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(gregorianCalendar7);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test10173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10173");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.hours();
        java.lang.String str3 = durationFieldType2.toString();
        org.joda.time.Period period5 = period1.withField(durationFieldType2, 2);
        org.joda.time.format.PeriodFormatter periodFormatter6 = null;
        java.lang.String str7 = period1.toString(periodFormatter6);
        org.joda.time.Period period9 = period1.withHours(53256552);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType12 = periodType11.withMillisRemoved();
        int int13 = periodType11.size();
        org.joda.time.PeriodType periodType14 = periodType11.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(1667L, periodType11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period16 = period9.withPeriodType(periodType11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'hours'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hours" + "'", str3, "hours");
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT0.100S" + "'", str7, "PT0.100S");
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(periodType14);
    }

    @Test
    public void test10174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10174");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(0L, 100L, periodType2, chronology3);
        java.lang.Object obj5 = mutablePeriod4.clone();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod10);
        mutablePeriod4.setPeriod(455376, 53384083, 887, 1970, (-1996092050), 53347509, 53355320, 10196);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        mutablePeriod4.mergePeriod(readablePeriod21);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "P455376Y53384083M887W1970DT-1996092050H53347509M53355330.196S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "P455376Y53384083M887W1970DT-1996092050H53347509M53355330.196S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "P455376Y53384083M887W1970DT-1996092050H53347509M53355330.196S");
    }

    @Test
    public void test10175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10175");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay9 = property8.getTimeOfDay();
        int[] intArray10 = timeOfDay9.getValues();
        int int11 = timeOfDay9.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        int int15 = dateMidnight14.getEra();
        org.joda.time.Chronology chronology16 = dateMidnight14.getChronology();
        org.joda.time.Period period18 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.hours();
        java.lang.String str20 = durationFieldType19.toString();
        org.joda.time.Period period22 = period18.withField(durationFieldType19, 2);
        org.joda.time.Period period27 = new org.joda.time.Period(12, 2, (int) ' ', (int) (short) 10);
        org.joda.time.Period period29 = period27.plusDays(1970);
        org.joda.time.Period period30 = period22.minus((org.joda.time.ReadablePeriod) period27);
        int[] intArray32 = chronology16.get((org.joda.time.ReadablePeriod) period30, (long) 7);
        org.joda.time.Period period34 = period30.minusMonths(31);
        org.joda.time.Period period36 = period34.withSeconds(36);
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay9.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.TimeOfDay timeOfDay39 = timeOfDay37.plusMillis((int) (short) 100);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[23, 0, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hours" + "'", str20, "hours");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0, 0, 0, 0, 7]");
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(timeOfDay39);
    }

    @Test
    public void test10176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10176");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.roundFloorCopy();
        org.joda.time.LocalDate localDate11 = property7.addToCopy(7);
        java.lang.String str12 = localDate11.toString();
        org.joda.time.LocalDate.Property property13 = localDate11.dayOfMonth();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.standard();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(0L, 100L, periodType40, chronology41);
        java.lang.Object obj43 = mutablePeriod42.clone();
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(0L, 100L, periodType46, chronology47);
        mutablePeriod42.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod48);
        int int50 = mutablePeriod48.getMinutes();
        org.joda.time.Period period52 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.hours();
        java.lang.String str54 = durationFieldType53.toString();
        org.joda.time.Period period56 = period52.withField(durationFieldType53, 2);
        boolean boolean57 = mutablePeriod48.isSupported(durationFieldType53);
        long long60 = chronology37.add((org.joda.time.ReadablePeriod) mutablePeriod48, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.Chronology chronology62 = chronology37.withZone(dateTimeZone61);
        org.joda.time.Period period63 = new org.joda.time.Period((long) 0, periodType15, chronology37);
        org.joda.time.LocalDate localDate64 = localDate11.plus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.Period period66 = period63.minusMonths((-46800000));
        org.joda.time.Period period68 = period63.minusMillis(14);
        org.joda.time.Period period70 = period63.minusMinutes(44);
        org.joda.time.Period period75 = new org.joda.time.Period(12, 2, (int) ' ', (int) (short) 10);
        org.joda.time.Period period77 = period75.plusDays(1970);
        org.joda.time.Period period79 = period75.plusSeconds(70);
        org.joda.time.PeriodType periodType82 = null;
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod(0L, 100L, periodType82, chronology83);
        java.lang.Object obj85 = mutablePeriod84.clone();
        org.joda.time.Chronology chronology88 = null;
        mutablePeriod84.setPeriod((long) 0, (long) 12, chronology88);
        org.joda.time.PeriodType periodType90 = mutablePeriod84.getPeriodType();
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.lang.String str92 = dateTimeFieldType91.getName();
        org.joda.time.DurationFieldType durationFieldType93 = dateTimeFieldType91.getDurationType();
        int int94 = periodType90.indexOf(durationFieldType93);
        boolean boolean95 = period79.isSupported(durationFieldType93);
        boolean boolean96 = period70.isSupported(durationFieldType93);
        org.joda.time.Period period98 = period70.withSeconds(200);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1977-01-01" + "'", str12, "1977-01-01");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hours" + "'", str54, "hours");
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 53230963L + "'", long60 == 53230963L);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(obj85);
        org.junit.Assert.assertEquals(obj85.toString(), "PT0.012S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj85), "PT0.012S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj85), "PT0.012S");
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "secondOfDay" + "'", str92, "secondOfDay");
        org.junit.Assert.assertNotNull(durationFieldType93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 6 + "'", int94 == 6);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(period98);
    }

    @Test
    public void test10177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10177");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        long long6 = dateTime5.getMillis();
        org.joda.time.DateTime dateTime8 = dateTime5.withMillis(100L);
        org.joda.time.DateTime dateTime10 = dateTime8.plusHours(35);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        org.joda.time.DateTime dateTime13 = property11.addWrapFieldToCopy(292278993);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime15 = property11.setCopy("2022-01-01T00:00:00.000");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-01-01T00:00:00.000\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test10178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10178");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfDay(0);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((int) ' ', (int) (short) 100, 7, 1970, 7, 21, 3, 100);
        int[] intArray15 = mutablePeriod14.getValues();
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType21 = periodType20.withMillisRemoved();
        org.joda.time.Period period22 = new org.joda.time.Period((long) 10, (long) '#', periodType21);
        org.joda.time.Period period23 = new org.joda.time.Period((long) (short) 10, (long) 53233428, periodType21);
        mutablePeriod14.add((org.joda.time.ReadablePeriod) period23);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime5.minus((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.LocalDateTime.Property property26 = localDateTime5.weekOfWeekyear();
        int int27 = localDateTime5.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            int int29 = localDateTime5.getValue(260254);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 260254");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[32, 100, 7, 1970, 7, 21, 3, 100]");
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
    }

    @Test
    public void test10179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10179");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.yearOfEra();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight6 = property4.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight7 = property4.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight7);
    }

    @Test
    public void test10180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10180");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime6.property(dateTimeFieldType7);
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight(0L, dateTimeZone11);
        org.joda.time.LocalDate localDate13 = dateMidnight12.toLocalDate();
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks(100);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getRangeDurationType();
        java.lang.String str18 = durationFieldType17.getName();
        org.joda.time.LocalDate localDate20 = localDate13.withFieldAdded(durationFieldType17, 2022);
        int[] intArray23 = new int[] { 14 };
        int[] intArray25 = dateTimeField9.add((org.joda.time.ReadablePartial) localDate13, (int) '#', intArray23, 0);
        org.joda.time.LocalDate localDate27 = localDate13.minusDays(9);
        org.joda.time.LocalDate localDate29 = localDate27.withWeekyear(69);
        org.joda.time.LocalDate localDate31 = localDate27.plusYears(53543149);
        org.joda.time.LocalDate.Property property32 = localDate31.dayOfWeek();
        org.joda.time.LocalDate localDate33 = property32.getLocalDate();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "days" + "'", str18, "days");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[14]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[14]");
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate33);
    }

    @Test
    public void test10181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10181");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(53243063, 21, 32769);
        java.util.Calendar calendar5 = builder0.build();
        java.util.Locale locale8 = new java.util.Locale("hi!", "");
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology12);
        org.joda.time.Interval interval14 = yearMonthDay13.toInterval();
        org.joda.time.DateTime dateTime15 = yearMonthDay13.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime15.property(dateTimeFieldType16);
        org.joda.time.DateTime dateTime18 = property17.getDateTime();
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale20 = locale19.stripExtensions();
        int int21 = property17.getMaximumShortTextLength(locale19);
        java.lang.String str22 = locale8.getDisplayScript(locale19);
        java.util.Locale.setDefault(locale19);
        java.util.Calendar.Builder builder24 = builder0.setLocale(locale19);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(calendar5);
        org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1680129502588800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=53243154,MONTH=5,WEEK_OF_YEAR=26,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=171,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test10182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10182");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.roundFloor();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology8);
        org.joda.time.DateMidnight dateMidnight10 = yearMonthDay9.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime4, (org.joda.time.ReadableInstant) dateMidnight10, periodType14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(0L, 100L, periodType18, chronology19);
        java.lang.Object obj21 = mutablePeriod20.clone();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        mutablePeriod20.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        org.joda.time.Duration duration31 = mutablePeriod20.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(0L, dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone36);
        int int38 = dateMidnight37.getEra();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        java.lang.Object obj44 = mutablePeriod43.clone();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0L, 100L, periodType47, chronology48);
        mutablePeriod43.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone52);
        org.joda.time.Duration duration54 = mutablePeriod43.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight37, (org.joda.time.ReadableDuration) duration54);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight34, (org.joda.time.ReadableDuration) duration54, periodType56);
        boolean boolean58 = duration31.isLongerThan((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime4, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime4.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime61 = property60.getMutableDateTime();
        java.util.Locale locale64 = java.util.Locale.forLanguageTag("1970-01-01T00:00:00.000Z");
        org.joda.time.MutableDateTime mutableDateTime65 = property60.set("120", locale64);
        org.joda.time.MutableDateTime mutableDateTime67 = property60.set(53480);
        org.joda.time.Period period69 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType70 = org.joda.time.DurationFieldType.hours();
        java.lang.String str71 = durationFieldType70.toString();
        org.joda.time.Period period73 = period69.withField(durationFieldType70, 2);
        org.joda.time.DurationFieldType durationFieldType74 = org.joda.time.DurationFieldType.hours();
        java.lang.String str75 = durationFieldType74.toString();
        boolean boolean76 = period69.isSupported(durationFieldType74);
        org.joda.time.Period period78 = period69.plusMinutes((int) '#');
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.Duration duration80 = period69.toDurationTo(readableInstant79);
        mutableDateTime67.add((org.joda.time.ReadablePeriod) period69);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "PT0.100S");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "PT0.100S");
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(mutableDateTime67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hours" + "'", str71, "hours");
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "hours" + "'", str75, "hours");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(duration80);
    }

    @Test
    public void test10183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10183");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        int int7 = localDate3.size();
        org.joda.time.LocalDate localDate9 = localDate3.withCenturyOfEra(22);
        org.joda.time.Period period11 = org.joda.time.Period.months(2);
        org.joda.time.LocalDate localDate12 = localDate9.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateMidnight dateMidnight13 = localDate9.toDateMidnight();
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = localDate9.getFields();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
    }

    @Test
    public void test10184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10184");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime6.property(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = property8.getDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime11 = property10.roundCeilingCopy();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test10185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10185");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        org.joda.time.Duration duration21 = mutablePeriod10.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight5.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.LocalDate localDate23 = dateMidnight22.toLocalDate();
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        java.lang.String str25 = chronology24.toString();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.secondOfDay();
        org.joda.time.Interval interval27 = new org.joda.time.Interval(0L, (long) 1, chronology24);
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay(10L);
        long long31 = chronology24.set((org.joda.time.ReadablePartial) yearMonthDay29, (long) 8);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 12, chronology24);
        org.joda.time.DateTimeField dateTimeField33 = chronology24.secondOfMinute();
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[UTC]" + "'", str25, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 8L + "'", long31 == 8L);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test10186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10186");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 53230763, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.minusYears(53233428);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay51.year();
        org.joda.time.YearMonthDay yearMonthDay56 = property54.setCopy(21);
        int int57 = property54.get();
        org.joda.time.YearMonthDay yearMonthDay58 = property54.withMaximumValue();
        int int59 = property54.getMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay60 = property54.getYearMonthDay();
        java.lang.String str61 = yearMonthDay60.toString();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 53230963L + "'", long49 == 53230963L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 292278993 + "'", int59 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1970-01-01" + "'", str61, "1970-01-01");
    }

    @Test
    public void test10187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10187");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight6 = property4.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property4.getFieldType();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.year();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusSeconds((int) (byte) 10);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        boolean boolean16 = dateTimeFieldType7.isSupported(chronology15);
        org.joda.time.DurationField durationField17 = chronology15.hours();
        java.lang.String str18 = chronology15.toString();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone20);
        int int22 = dateMidnight21.getEra();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateMidnight21.toDateTime(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusDays(9);
        int int27 = dateTime24.getEra();
        org.joda.time.DateTime dateTime28 = dateTime24.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime28.getZone();
        long long32 = dateTimeZone29.adjustOffset((long) 5, true);
        boolean boolean34 = dateTimeZone29.isStandardOffset((long) 3);
        org.joda.time.Chronology chronology35 = chronology15.withZone(dateTimeZone29);
        org.joda.time.DurationField durationField36 = chronology15.minutes();
        long long38 = durationField36.getMillis(202971);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[UTC]" + "'", str18, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 5L + "'", long32 == 5L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 12178260000L + "'", long38 == 12178260000L);
    }

    @Test
    public void test10188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10188");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType3 = periodType2.withMillisRemoved();
        org.joda.time.Period period4 = new org.joda.time.Period((long) 10, (long) '#', periodType3);
        org.joda.time.PeriodType periodType5 = periodType3.withSecondsRemoved();
        org.joda.time.Period period7 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.hours();
        java.lang.String str9 = durationFieldType8.toString();
        org.joda.time.Period period11 = period7.withField(durationFieldType8, 2);
        boolean boolean12 = periodType3.isSupported(durationFieldType8);
        org.joda.time.PeriodType periodType13 = periodType3.withHoursRemoved();
        org.joda.time.PeriodType periodType14 = periodType3.withDaysRemoved();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hours" + "'", str9, "hours");
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
    }

    @Test
    public void test10189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10189");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("0035-10-10T00:00:00.000Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"0035-10-10T00:00:00.000Z\" is malformed at \"35-10-10T00:00:00.000Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10190");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withYearOfCentury(4);
        int int9 = localDateTime4.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.withMonthOfYear((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.withYearOfEra(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.year();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusSeconds((int) (byte) 10);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int23 = localDateTime20.get(dateTimeFieldType22);
        boolean boolean24 = localDateTime4.isSupported(dateTimeFieldType22);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone26);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(0L, 100L, periodType36, chronology37);
        mutablePeriod32.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone41);
        org.joda.time.Duration duration43 = mutablePeriod32.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight27.plus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone46);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(0L, 100L, periodType50, chronology51);
        java.lang.Object obj53 = mutablePeriod52.clone();
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(0L, 100L, periodType56, chronology57);
        mutablePeriod52.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod58);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone61);
        org.joda.time.Duration duration63 = mutablePeriod52.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight62);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight47.plus((org.joda.time.ReadableDuration) duration63);
        int int65 = dateMidnight44.compareTo((org.joda.time.ReadableInstant) dateMidnight64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight44, readableInstant66);
        org.joda.time.Period period69 = period67.plusMinutes((int) (byte) 0);
        org.joda.time.Period period71 = period69.withMinutes(32772);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime4.plus((org.joda.time.ReadablePeriod) period71);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 45 + "'", int9 == 45);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 896 + "'", int23 == 896);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0.100S");
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(obj53);
        org.junit.Assert.assertEquals(obj53.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj53), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj53), "PT0.100S");
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(localDateTime72);
    }

    @Test
    public void test10191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10191");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.monthOfYear();
        org.joda.time.DateMidnight dateMidnight2 = property1.getDateMidnight();
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = property3.roundCeilingCopy();
        org.joda.time.YearMonthDay yearMonthDay5 = dateMidnight4.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone7);
        int int9 = dateMidnight8.getEra();
        int int10 = dateMidnight8.getMillisOfSecond();
        org.joda.time.Period period12 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.hours();
        java.lang.String str14 = durationFieldType13.toString();
        org.joda.time.Period period16 = period12.withField(durationFieldType13, 2);
        org.joda.time.Period period18 = period16.minusMinutes(21);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight8, (org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period21 = period18.withWeeks(0);
        org.joda.time.Period period23 = period21.minusMillis((-9));
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight4.minus((org.joda.time.ReadablePeriod) period23);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hours" + "'", str14, "hours");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(dateMidnight24);
    }

    @Test
    public void test10192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10192");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        int int34 = mutablePeriod32.getMinutes();
        org.joda.time.Period period36 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        java.lang.String str38 = durationFieldType37.toString();
        org.joda.time.Period period40 = period36.withField(durationFieldType37, 2);
        boolean boolean41 = mutablePeriod32.isSupported(durationFieldType37);
        long long44 = chronology21.add((org.joda.time.ReadablePeriod) mutablePeriod32, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Chronology chronology46 = chronology21.withZone(dateTimeZone45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate(chronology46);
        org.joda.time.DurationField durationField48 = chronology46.halfdays();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.clockhourOfDay();
        boolean boolean51 = dateTimeField49.isLeap((long) 2022);
        int int52 = dateTimeField49.getMinimumValue();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hours" + "'", str38, "hours");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 53230963L + "'", long44 == 53230963L);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test10193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10193");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) ' ', (int) ' ');
        long long4 = dateTimeZone2.nextTransition((long) 45);
        int int6 = dateTimeZone2.getOffsetFromLocal((-61725661905877L));
        java.util.Date date8 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay9 = org.joda.time.TimeOfDay.fromDateFields(date8);
        int int10 = timeOfDay9.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay9.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.withMinuteOfHour(0);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay12.minusSeconds((-1));
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay16.plusSeconds(53233428);
        org.joda.time.Chronology chronology19 = timeOfDay16.getChronology();
        boolean boolean20 = dateTimeZone2.equals((java.lang.Object) timeOfDay16);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 45L + "'", long4 == 45L);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 117120000 + "'", int6 == 117120000);
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test10194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10194");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale4 = dateTimeFormatter3.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withZoneUTC();
        java.lang.Object obj6 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(0L, 100L, periodType9, chronology10);
        java.lang.Object obj12 = mutablePeriod11.clone();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(0L, 100L, periodType15, chronology16);
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone20);
        org.joda.time.Duration duration22 = mutablePeriod11.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight21);
        mutablePeriod11.addMillis(0);
        mutablePeriod11.setMonths(0);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone28);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        java.lang.Object obj35 = mutablePeriod34.clone();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        mutablePeriod34.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone43);
        org.joda.time.Duration duration45 = mutablePeriod34.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight29.plus((org.joda.time.ReadableDuration) duration45);
        org.joda.time.MutableDateTime mutableDateTime48 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(0L, 100L, periodType51, chronology52);
        java.lang.Object obj54 = mutablePeriod53.clone();
        java.lang.String str55 = mutablePeriod53.toString();
        mutableDateTime48.add((org.joda.time.ReadablePeriod) mutablePeriod53, 2022);
        mutablePeriod11.setPeriod((org.joda.time.ReadableInstant) dateMidnight46, (org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone60);
        int int62 = dateMidnight61.getEra();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = dateMidnight61.toDateTime(chronology63);
        org.joda.time.DateTime dateTime66 = dateTime64.plusDays(9);
        int int67 = dateTime64.getEra();
        org.joda.time.DateTime dateTime68 = dateTime64.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone69 = dateTime68.getZone();
        org.joda.time.LocalDateTime localDateTime70 = org.joda.time.LocalDateTime.now(dateTimeZone69);
        mutableDateTime48.setZone(dateTimeZone69);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(obj6, dateTimeZone69);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter3.withZone(dateTimeZone69);
        org.joda.time.Chronology chronology74 = dateTimeFormatter3.getChronology();
        java.lang.StringBuffer stringBuffer75 = null;
        org.joda.time.ReadableInstant readableInstant76 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter3.printTo(stringBuffer75, readableInstant76);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "P52YT3M22.200S");
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertEquals(obj35.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj35), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj35), "PT0.100S");
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(obj54);
        org.junit.Assert.assertEquals(obj54.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "PT0.100S" + "'", str55, "PT0.100S");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertNull(chronology74);
    }

    @Test
    public void test10195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10195");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMillis((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minusMillis(9);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.minusHours(53744616);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test10196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10196");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.era();
        int int10 = dateMidnight8.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight8.plusWeeks(70);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1);
        boolean boolean15 = dateMidnight12.isEqual((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateMidnight.Property property17 = dateMidnight14.property(dateTimeFieldType16);
        org.joda.time.DateMidnight dateMidnight19 = property17.setCopy(48);
        org.joda.time.DateMidnight dateMidnight21 = property17.addToCopy((long) 53304145);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
    }

    @Test
    public void test10197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10197");
        java.util.Date date1 = new java.util.Date((long) 0);
        long long2 = date1.getTime();
        int int3 = date1.getYear();
        long long4 = date1.getTime();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 70 + "'", int3 == 70);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test10198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10198");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        int int8 = dateMidnight7.getEra();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = dateMidnight7.toDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(9);
        int int13 = dateTime10.getEra();
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime14.getZone();
        java.lang.String str16 = dateTimeZone15.toString();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withZone(dateTimeZone15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter18.withPivotYear((java.lang.Integer) 887);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology24);
        org.joda.time.DateMidnight dateMidnight26 = yearMonthDay25.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.plus((long) (byte) -1);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight31, chronology32);
        org.joda.time.LocalDate.Property property34 = localDate33.centuryOfEra();
        org.joda.time.LocalDate localDate36 = localDate33.withMonthOfYear(6);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology40);
        int int42 = yearMonthDay41.size();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone50);
        int int52 = dateMidnight51.getEra();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = dateMidnight51.toDateTime(chronology53);
        org.joda.time.DateTime dateTime56 = dateTime54.plusDays(9);
        int int57 = dateTime54.getEra();
        org.joda.time.DateTime dateTime58 = dateTime54.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone59 = dateTime58.getZone();
        java.lang.String str60 = dateTimeZone59.toString();
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay(dateTimeZone59);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((int) (byte) -1, 1, (int) (short) 1, (int) (short) 10, (int) (short) 0, 8, dateTimeZone59);
        java.lang.String str63 = dateTimeZone59.toString();
        org.joda.time.Interval interval64 = yearMonthDay41.toInterval(dateTimeZone59);
        org.joda.time.DateTime dateTime65 = localDate36.toDateTimeAtStartOfDay(dateTimeZone59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter20.withZone(dateTimeZone59);
        java.util.Date date68 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay69 = org.joda.time.TimeOfDay.fromDateFields(date68);
        int int70 = timeOfDay69.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay72 = timeOfDay69.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay74 = timeOfDay72.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property75 = timeOfDay74.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay76 = property75.getTimeOfDay();
        int[] intArray77 = timeOfDay76.getValues();
        org.joda.time.DateTime dateTime78 = timeOfDay76.toDateTimeToday();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str79 = dateTimeFormatter66.print((org.joda.time.ReadableInstant) dateTime78);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Etc/UTC" + "'", str16, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Etc/UTC" + "'", str60, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Etc/UTC" + "'", str63, "Etc/UTC");
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertEquals(date68.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(timeOfDay69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(timeOfDay72);
        org.junit.Assert.assertNotNull(timeOfDay74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(timeOfDay76);
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[23, 0, 0, 0]");
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    public void test10199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10199");
        long long6 = java.util.Date.UTC(53311722, 53358873, 21, 53452430, 53742401, (int) (short) -1);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1822869181039259000L + "'", long6 == 1822869181039259000L);
    }

    @Test
    public void test10200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10200");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(53304145L);
        org.joda.time.TimeOfDay.Property property2 = timeOfDay1.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay3 = property2.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay4 = property2.withMaximumValue();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay4);
    }

    @Test
    public void test10201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10201");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfDay(100);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusSeconds(0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.year();
        org.joda.time.LocalDateTime.Property property10 = localDateTime3.weekyear();
        int int11 = localDateTime3.getYearOfEra();
        org.joda.time.LocalDateTime.Property property12 = localDateTime3.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime14 = property12.addToCopy((long) 53304562);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2021 + "'", int11 == 2021);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test10202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10202");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(9, 0, 53230763, (int) (byte) 1, 3, 7, (int) (short) 0, 21);
        java.lang.String str9 = mutablePeriod8.toString();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.hours();
        java.lang.String str11 = durationFieldType10.toString();
        boolean boolean12 = mutablePeriod8.isSupported(durationFieldType10);
        mutablePeriod8.addMillis((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        int int19 = dateMidnight18.getEra();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateMidnight18.toDateTime(chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.minusWeeks(0);
        org.joda.time.DateTime dateTime24 = dateTime23.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime25 = dateTime23.toLocalTime();
        org.joda.time.LocalTime localTime27 = localTime25.minusMinutes(3);
        org.joda.time.LocalTime localTime29 = localTime25.minusMillis((-1));
        org.joda.time.DateTime dateTime30 = localTime29.toDateTimeToday();
        org.joda.time.LocalTime localTime32 = localTime29.minusMinutes(2022);
        org.joda.time.Chronology chronology33 = localTime29.getChronology();
        mutablePeriod8.add((long) 13, chronology33);
        org.joda.time.DurationField durationField35 = chronology33.seconds();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.millisOfDay();
        long long39 = dateTimeField36.addWrapField((-62103887999953L), 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "P9Y53230763W1DT3H7M0.021S" + "'", str9, "P9Y53230763W1DT3H7M0.021S");
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hours" + "'", str11, "hours");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-62103887999953L) + "'", long39 == (-62103887999953L));
    }

    @Test
    public void test10203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10203");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime localTime13 = localTime9.minusMillis((-1));
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType19 = periodType18.withMillisRemoved();
        org.joda.time.Period period20 = new org.joda.time.Period((long) 10, (long) '#', periodType19);
        org.joda.time.Period period21 = new org.joda.time.Period((long) (short) 10, (long) 53233428, periodType19);
        org.joda.time.LocalTime localTime22 = localTime13.plus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.LocalTime localTime24 = localTime22.minusSeconds((int) '#');
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray25 = localTime22.getFieldTypes();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray25);
    }

    @Test
    public void test10204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10204");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        mutableDateTime4.setDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime4.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime10 = property7.set(10);
        int int11 = mutableDateTime10.getEra();
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((java.lang.Object) mutableDateTime10);
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.time();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getRangeDurationType();
        java.lang.String str18 = durationFieldType17.getName();
        int int19 = periodType15.indexOf(durationFieldType17);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.millisOfDay();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime23.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime27 = property25.set("0");
        java.util.Date date29 = new java.util.Date((long) 0);
        int int30 = date29.getDay();
        org.joda.time.YearMonthDay yearMonthDay31 = org.joda.time.YearMonthDay.fromDateFields(date29);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        java.lang.Object obj41 = mutablePeriod40.clone();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        mutablePeriod40.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone49);
        org.joda.time.Duration duration51 = mutablePeriod40.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight35.plus((org.joda.time.ReadableDuration) duration51);
        org.joda.time.LocalDate localDate53 = dateMidnight52.toLocalDate();
        org.joda.time.Chronology chronology54 = localDate53.getChronology();
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(0L, 100L, periodType57, chronology58);
        java.lang.Object obj60 = mutablePeriod59.clone();
        org.joda.time.PeriodType periodType63 = null;
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(0L, 100L, periodType63, chronology64);
        mutablePeriod59.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod65);
        int int67 = mutablePeriod65.getMinutes();
        org.joda.time.Period period69 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType70 = org.joda.time.DurationFieldType.hours();
        java.lang.String str71 = durationFieldType70.toString();
        org.joda.time.Period period73 = period69.withField(durationFieldType70, 2);
        boolean boolean74 = mutablePeriod65.isSupported(durationFieldType70);
        long long77 = chronology54.add((org.joda.time.ReadablePeriod) mutablePeriod65, (long) 53230763, 2);
        boolean boolean78 = durationFieldType32.isSupported(chronology54);
        org.joda.time.YearMonthDay yearMonthDay79 = yearMonthDay31.withChronologyRetainFields(chronology54);
        mutableDateTime27.setChronology(chronology54);
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((long) 14, (long) 2, chronology54);
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((long) 45, (long) (byte) 100, periodType15, chronology54);
        org.joda.time.DateTimeField dateTimeField83 = chronology54.weekyear();
        boolean boolean84 = dateTimeField83.isLenient();
        mutableDateTime10.setRounding(dateTimeField83);
        long long86 = mutableDateTime10.getMillis();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "days" + "'", str18, "days");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "PT0.100S");
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "hours" + "'", str71, "hours");
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 53230963L + "'", long77 == 53230963L);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(yearMonthDay79);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1641168000000L + "'", long86 == 1641168000000L);
    }

    @Test
    public void test10205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10205");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay4.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withYear((int) '#');
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay7.monthOfYear();
        org.joda.time.LocalDate localDate9 = yearMonthDay7.toLocalDate();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test10206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10206");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(0L, 100L, periodType4, chronology5);
        java.lang.Object obj7 = mutablePeriod6.clone();
        java.lang.String str8 = mutablePeriod6.toString();
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod6, 2022);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        int int15 = dateMidnight14.getEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateMidnight14.toDateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusDays(9);
        int int20 = dateTime17.getEra();
        org.joda.time.DateTime dateTime21 = dateTime17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime21.getZone();
        long long25 = dateTimeZone22.adjustOffset((long) 5, true);
        mutableDateTime1.setZoneRetainFields(dateTimeZone22);
        java.util.TimeZone timeZone27 = dateTimeZone22.toTimeZone();
        boolean boolean28 = timeZone27.observesDaylightTime();
        java.util.Locale locale29 = java.util.Locale.JAPANESE;
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone31);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        java.lang.Object obj38 = mutablePeriod37.clone();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        mutablePeriod37.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone46);
        org.joda.time.Duration duration48 = mutablePeriod37.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight32.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.LocalDate localDate50 = dateMidnight49.toLocalDate();
        org.joda.time.Chronology chronology51 = localDate50.getChronology();
        java.lang.String str52 = chronology51.toString();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.secondOfDay();
        long long55 = dateTimeField53.roundHalfFloor(100L);
        java.util.Locale locale59 = new java.util.Locale("hi!", "");
        java.lang.String str60 = locale59.getDisplayVariant();
        java.lang.String str61 = locale59.getCountry();
        java.lang.String str62 = dateTimeField53.getAsShortText((long) 14, locale59);
        java.lang.String str63 = locale29.getDisplayLanguage(locale59);
        java.util.Calendar calendar64 = java.util.Calendar.getInstance(timeZone27, locale59);
        java.lang.String str65 = timeZone27.getID();
        org.joda.time.MutableDateTime mutableDateTime67 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod(0L, 100L, periodType70, chronology71);
        java.lang.Object obj73 = mutablePeriod72.clone();
        java.lang.String str74 = mutablePeriod72.toString();
        mutableDateTime67.add((org.joda.time.ReadablePeriod) mutablePeriod72, 2022);
        org.joda.time.MutableDateTime.Property property77 = mutableDateTime67.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateMidnight dateMidnight80 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone79);
        int int81 = dateMidnight80.getEra();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.DateTime dateTime83 = dateMidnight80.toDateTime(chronology82);
        org.joda.time.DateTime dateTime85 = dateTime83.plusDays(9);
        int int86 = dateTime83.getEra();
        org.joda.time.DateTime dateTime87 = dateTime83.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone88 = dateTime87.getZone();
        long long91 = dateTimeZone88.adjustOffset((long) 5, true);
        mutableDateTime67.setZoneRetainFields(dateTimeZone88);
        java.util.TimeZone timeZone93 = dateTimeZone88.toTimeZone();
        boolean boolean94 = timeZone27.hasSameRules(timeZone93);
        timeZone27.setRawOffset(365);
        int int98 = timeZone27.getOffset((long) 455376);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0.100S" + "'", str8, "PT0.100S");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 5L + "'", long25 == 5L);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja");
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "PT0.100S");
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ISOChronology[UTC]" + "'", str52, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertEquals(locale59.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "0" + "'", str62, "0");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Japanese" + "'", str63, "Japanese");
        org.junit.Assert.assertNotNull(calendar64);
// flaky:         org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=1645455398554,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=365,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=38,MILLISECOND=554,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Etc/UTC" + "'", str65, "Etc/UTC");
        org.junit.Assert.assertNotNull(mutableDateTime67);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "PT0.100S" + "'", str74, "PT0.100S");
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 1 + "'", int86 == 1);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 5L + "'", long91 == 5L);
        org.junit.Assert.assertNotNull(timeZone93);
        org.junit.Assert.assertEquals(timeZone93.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 365 + "'", int98 == 365);
    }

    @Test
    public void test10207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10207");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        int int5 = yearMonthDay4.size();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay4.plus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime20 = yearMonthDay18.toDateTimeAtCurrentTime(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(0L, 100L, periodType26, chronology27);
        java.lang.Object obj29 = mutablePeriod28.clone();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone37);
        org.joda.time.Duration duration39 = mutablePeriod28.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight38);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight23.plus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.LocalDate localDate41 = dateMidnight40.toLocalDate();
        org.joda.time.Chronology chronology42 = localDate41.getChronology();
        java.lang.String str43 = chronology42.toString();
        org.joda.time.DateTimeField dateTimeField44 = chronology42.minuteOfHour();
        java.lang.String str45 = chronology42.toString();
        org.joda.time.DurationField durationField46 = chronology42.eras();
        org.joda.time.DateTime dateTime47 = dateTime20.toDateTime(chronology42);
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(0L, 100L, periodType52, chronology53);
        java.lang.Object obj55 = mutablePeriod54.clone();
        java.lang.String str56 = mutablePeriod54.toString();
        mutableDateTime49.add((org.joda.time.ReadablePeriod) mutablePeriod54, 2022);
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime49.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone61);
        int int63 = dateMidnight62.getEra();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = dateMidnight62.toDateTime(chronology64);
        org.joda.time.DateTime dateTime67 = dateTime65.plusDays(9);
        int int68 = dateTime65.getEra();
        org.joda.time.DateTime dateTime69 = dateTime65.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone70 = dateTime69.getZone();
        long long73 = dateTimeZone70.adjustOffset((long) 5, true);
        mutableDateTime49.setZoneRetainFields(dateTimeZone70);
        java.util.TimeZone timeZone75 = dateTimeZone70.toTimeZone();
        int int77 = dateTimeZone70.getOffset((long) (short) 0);
        java.lang.String str78 = dateTimeZone70.getID();
        org.joda.time.DateTime dateTime79 = dateTime47.toDateTime(dateTimeZone70);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime81 = dateTime79.withDayOfMonth(53329);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53329 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "PT0.100S");
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ISOChronology[UTC]" + "'", str43, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ISOChronology[UTC]" + "'", str45, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT0.100S" + "'", str56, "PT0.100S");
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 5L + "'", long73 == 5L);
        org.junit.Assert.assertNotNull(timeZone75);
        org.junit.Assert.assertEquals(timeZone75.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Etc/UTC" + "'", str78, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime79);
    }

    @Test
    public void test10208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10208");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.era();
        int int10 = dateMidnight8.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight8.plusWeeks(70);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight8.minusWeeks((int) ' ');
        int int15 = dateMidnight8.getYearOfEra();
        int int16 = dateMidnight8.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime17 = dateMidnight8.toMutableDateTime();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 19 + "'", int16 == 19);
        org.junit.Assert.assertNotNull(mutableDateTime17);
    }

    @Test
    public void test10209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10209");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.hours();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        int int8 = dateMidnight7.getEra();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = dateMidnight7.toDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.minusWeeks(0);
        org.joda.time.DateTime dateTime13 = dateTime12.withEarlierOffsetAtOverlap();
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.years();
        java.lang.String str15 = durationFieldType14.getName();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.year();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusSeconds((int) (byte) 10);
        org.joda.time.Chronology chronology23 = localDateTime22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone25);
        int int27 = dateMidnight26.getEra();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = dateMidnight26.toDateTime(chronology28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusDays(9);
        int int32 = dateTime29.getEra();
        org.joda.time.DateTime dateTime33 = dateTime29.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone34 = dateTime33.getZone();
        java.lang.String str35 = dateTimeZone34.toString();
        org.joda.time.Chronology chronology36 = chronology23.withZone(dateTimeZone34);
        boolean boolean37 = durationFieldType14.isSupported(chronology36);
        org.joda.time.DateTime dateTime38 = dateTime12.toDateTime(chronology36);
        org.joda.time.Period period39 = new org.joda.time.Period((long) 53286779, (long) 136, periodType4, chronology36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay40 = new org.joda.time.TimeOfDay(53230763, 1020248, chronology36);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53230763 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "years" + "'", str15, "years");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Etc/UTC" + "'", str35, "Etc/UTC");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test10210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10210");
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone("");
        java.lang.String str4 = timeZone3.getID();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.Interval interval6 = new org.joda.time.Interval(0L, (long) 53708, dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GMT" + "'", str4, "GMT");
        org.junit.Assert.assertNotNull(dateTimeZone5);
    }

    @Test
    public void test10211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10211");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        int int8 = dateTime5.getEra();
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.secondOfDay();
        org.joda.time.DateTime dateTime11 = property10.roundCeilingCopy();
        org.joda.time.DateTime dateTime12 = property10.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfHour();
        org.joda.time.DateTime dateTime15 = property13.addToCopy((long) 47);
        org.joda.time.DateTime dateTime16 = property13.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime18 = dateTime16.minusMillis(16);
        int int19 = dateTime18.getCenturyOfEra();
        org.joda.time.DateTime dateTime21 = dateTime18.minusMonths(53677735);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 19 + "'", int19 == 19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test10212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10212");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("java.io.IOException: PT0.100S");
        int int11 = property8.getMaximumShortTextLength(locale10);
        java.lang.String str12 = property8.getName();
        org.joda.time.TimeOfDay timeOfDay13 = property8.withMinimumValue();
        int int14 = timeOfDay13.size();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay16 = timeOfDay13.withMillisOfSecond(32772);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32772 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "secondOfMinute" + "'", str12, "secondOfMinute");
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
    }

    @Test
    public void test10213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10213");
        java.io.IOException iOException3 = new java.io.IOException("PT0.100S");
        java.io.IOException iOException5 = new java.io.IOException();
        java.io.IOException iOException6 = new java.io.IOException("hi!", (java.lang.Throwable) iOException5);
        iOException3.addSuppressed((java.lang.Throwable) iOException5);
        java.io.IOException iOException8 = new java.io.IOException("PT2H0.035S", (java.lang.Throwable) iOException5);
        java.io.IOException iOException9 = new java.io.IOException("fran\347ais (Canada)", (java.lang.Throwable) iOException5);
        java.io.IOException iOException10 = new java.io.IOException((java.lang.Throwable) iOException5);
    }

    @Test
    public void test10214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10214");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Period period22 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        java.lang.String str24 = durationFieldType23.toString();
        org.joda.time.Period period26 = period22.withField(durationFieldType23, 2);
        org.joda.time.Period period28 = period26.withMillis((int) '#');
        org.joda.time.LocalDate localDate29 = localDate20.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone31);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        java.lang.Object obj38 = mutablePeriod37.clone();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        mutablePeriod37.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone46);
        org.joda.time.Duration duration48 = mutablePeriod37.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight32.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.LocalDate localDate50 = dateMidnight49.toLocalDate();
        org.joda.time.Period period52 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.hours();
        java.lang.String str54 = durationFieldType53.toString();
        org.joda.time.Period period56 = period52.withField(durationFieldType53, 2);
        org.joda.time.Period period58 = period56.withMillis((int) '#');
        org.joda.time.LocalDate localDate59 = localDate50.minus((org.joda.time.ReadablePeriod) period58);
        int int60 = period58.getMonths();
        org.joda.time.Period period62 = period58.minusMinutes(8);
        org.joda.time.Period period63 = period28.minus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.Period period65 = period63.plusHours(22);
        int int66 = period65.getWeeks();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hours" + "'", str24, "hours");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "PT0.100S");
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hours" + "'", str54, "hours");
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test10215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10215");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.year();
        java.util.Locale locale8 = new java.util.Locale("hi!", "");
        java.lang.String str9 = property5.getAsText(locale8);
        int int10 = property2.getMaximumShortTextLength(locale8);
        org.joda.time.LocalDateTime localDateTime11 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusHours(136);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022" + "'", str9, "2022");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 9 + "'", int10 == 9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test10216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10216");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime9 = dateTime5.withYear((int) (short) 10);
        org.joda.time.DateTime dateTime11 = dateTime9.plusDays(53230763);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear((int) (byte) 100);
        java.lang.String str15 = dateTime13.toString("70");
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        java.lang.Object obj25 = mutablePeriod24.clone();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        mutablePeriod24.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone33);
        org.joda.time.Duration duration35 = mutablePeriod24.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight34);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight19.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.LocalDate localDate37 = dateMidnight36.toLocalDate();
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        java.lang.String str39 = chronology38.toString();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 14, chronology38);
        org.joda.time.DateTime dateTime41 = dateTime13.plus((org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean43 = dateTime13.isSupported(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "70" + "'", str15, "70");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "PT0.100S");
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[UTC]" + "'", str39, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test10217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10217");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale4 = dateTimeFormatter3.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withPivotYear((-1956));
        boolean boolean8 = dateTimeFormatter3.isOffsetParsed();
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test10218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10218");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        int int1 = period0.getSeconds();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test10219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10219");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay4.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.plus((long) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight10, chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.withCenturyOfEra(8);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight(0L, dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        int int21 = dateMidnight20.getEra();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone35);
        org.joda.time.Duration duration37 = mutablePeriod26.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight17, (org.joda.time.ReadableDuration) duration37, periodType39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone42);
        int int44 = dateMidnight43.getEra();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0L, 100L, periodType47, chronology48);
        java.lang.Object obj50 = mutablePeriod49.clone();
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(0L, 100L, periodType53, chronology54);
        mutablePeriod49.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod55);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone58);
        org.joda.time.Duration duration60 = mutablePeriod49.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight59);
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight43, (org.joda.time.ReadableDuration) duration60);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone63);
        int int65 = dateMidnight64.getEra();
        org.joda.time.PeriodType periodType68 = null;
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(0L, 100L, periodType68, chronology69);
        java.lang.Object obj71 = mutablePeriod70.clone();
        org.joda.time.PeriodType periodType74 = null;
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod(0L, 100L, periodType74, chronology75);
        mutablePeriod70.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod76);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateMidnight dateMidnight80 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone79);
        org.joda.time.Duration duration81 = mutablePeriod70.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight80);
        org.joda.time.Period period82 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight64, (org.joda.time.ReadableDuration) duration81);
        boolean boolean83 = duration60.isLongerThan((org.joda.time.ReadableDuration) duration81);
        java.lang.String str84 = duration81.toString();
        boolean boolean85 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration81);
        org.joda.time.Period period86 = duration37.toPeriod();
        org.joda.time.PeriodType periodType89 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType90 = periodType89.withMillisRemoved();
        org.joda.time.Period period91 = new org.joda.time.Period((long) 10, (long) '#', periodType90);
        org.joda.time.PeriodType periodType92 = periodType90.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod93 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableDuration) duration37, periodType92);
        org.joda.time.PeriodType periodType94 = periodType92.withDaysRemoved();
        org.joda.time.PeriodType periodType95 = periodType92.withYearsRemoved();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0.100S");
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(obj50);
        org.junit.Assert.assertEquals(obj50.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj50), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj50), "PT0.100S");
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(obj71);
        org.junit.Assert.assertEquals(obj71.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "PT0.100S");
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "PT0.100S" + "'", str84, "PT0.100S");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(periodType89);
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertNotNull(periodType92);
        org.junit.Assert.assertNotNull(periodType94);
        org.junit.Assert.assertNotNull(periodType95);
    }

    @Test
    public void test10220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10220");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.add((long) 3);
        mutableDateTime13.setDayOfMonth((int) (byte) 10);
        mutableDateTime13.add((long) 6);
        mutableDateTime13.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.monthOfYear();
        mutableDateTime13.setTime((org.joda.time.ReadableInstant) dateMidnight20);
        int int23 = property8.compareTo((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.TimeOfDay timeOfDay25 = property8.addNoWrapToCopy(5);
        org.joda.time.TimeOfDay timeOfDay27 = timeOfDay25.plusHours((-1));
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay25.plusMillis(5);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray30 = timeOfDay29.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay32 = timeOfDay29.withSecondOfMinute(53633204);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53633204 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray30);
    }

    @Test
    public void test10221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10221");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        org.joda.time.DateTime.Property property8 = dateTime5.monthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime5.plusDays(0);
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime13 = dateTime11.plusHours((int) 'x');
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int15 = dateTime13.get(dateTimeFieldType14);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        int int20 = dateMidnight19.getEra();
        org.joda.time.DateMidnight.Property property21 = dateMidnight19.monthOfYear();
        org.joda.time.DateMidnight dateMidnight23 = property21.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property21.getFieldType();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.year();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusSeconds((int) (byte) 10);
        org.joda.time.Chronology chronology32 = localDateTime31.getChronology();
        boolean boolean33 = dateTimeFieldType24.isSupported(chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.weekyearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(53260798000L, chronology32);
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType14.getField(chronology32);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test10222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10222");
        java.lang.Object obj2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(obj2);
        int[] intArray4 = localTime3.getValues();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        int int8 = dateMidnight7.getEra();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = dateMidnight7.toDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(9);
        org.joda.time.DateTime.Property property13 = dateTime10.monthOfYear();
        org.joda.time.DateTime dateTime15 = dateTime10.plusDays(0);
        org.joda.time.Period period20 = new org.joda.time.Period(12, 2, (int) ' ', (int) (short) 10);
        org.joda.time.Period period22 = period20.plusDays(1970);
        org.joda.time.Period period24 = period20.plusWeeks((int) '#');
        org.joda.time.DateTime dateTime26 = dateTime10.withPeriodAdded((org.joda.time.ReadablePeriod) period24, (-292275054));
        org.joda.time.Period period28 = period24.plusWeeks(32769);
        org.joda.time.LocalTime localTime29 = localTime3.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Chronology chronology30 = localTime3.getChronology();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 2074, (long) 53756674, chronology30);
        org.junit.Assert.assertNotNull(intArray4);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[14, 56, 38, 827]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(chronology30);
    }

    @Test
    public void test10223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10223");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0L, 100L, periodType6, chronology7);
        java.lang.Object obj9 = mutablePeriod8.clone();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.Duration duration19 = mutablePeriod8.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight3.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.LocalDate localDate21 = dateMidnight20.toLocalDate();
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        int int35 = mutablePeriod33.getMinutes();
        org.joda.time.Period period37 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.hours();
        java.lang.String str39 = durationFieldType38.toString();
        org.joda.time.Period period41 = period37.withField(durationFieldType38, 2);
        boolean boolean42 = mutablePeriod33.isSupported(durationFieldType38);
        long long45 = chronology22.add((org.joda.time.ReadablePeriod) mutablePeriod33, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Chronology chronology47 = chronology22.withZone(dateTimeZone46);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate(chronology47);
        org.joda.time.DurationField durationField49 = chronology47.halfdays();
        org.joda.time.MutableDateTime mutableDateTime50 = org.joda.time.MutableDateTime.now(chronology47);
        org.joda.time.MutableDateTime mutableDateTime51 = org.joda.time.MutableDateTime.now(chronology47);
        org.joda.time.Period period52 = new org.joda.time.Period((-604800001L), chronology47);
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(chronology47);
        org.joda.time.DurationField durationField54 = chronology47.centuries();
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT0.100S");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hours" + "'", str39, "hours");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 53230963L + "'", long45 == 53230963L);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(durationField54);
    }

    @Test
    public void test10224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10224");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.withCenturyOfEra(0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology11);
        int int13 = yearMonthDay12.size();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((int) (byte) 100, 3, (int) (byte) 10, 4, 2022, 6, 12, 1970);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay12.plus((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay23.minusYears((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay23.withYear((int) (byte) 100);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology31);
        org.joda.time.DateMidnight dateMidnight33 = yearMonthDay32.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight33.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight36.plus((long) (byte) -1);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight38, chronology39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight38.withCenturyOfEra(8);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology47);
        org.joda.time.Interval interval49 = yearMonthDay48.toInterval();
        org.joda.time.DateTime dateTime50 = yearMonthDay48.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property52 = dateTime50.property(dateTimeFieldType51);
        org.joda.time.DateTime.Property property53 = dateTime50.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone55);
        int int57 = dateMidnight56.getEra();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = dateMidnight56.toDateTime(chronology58);
        org.joda.time.DateTime dateTime61 = dateTime59.plusDays(9);
        int int62 = dateTime59.getEra();
        org.joda.time.DateTime dateTime63 = dateTime59.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone64 = dateTime63.getZone();
        java.lang.String str65 = dateTimeZone64.toString();
        org.joda.time.DateTime dateTime66 = dateTime50.toDateTime(dateTimeZone64);
        boolean boolean67 = dateTimeZone64.isFixed();
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight((long) 7, dateTimeZone64);
        org.joda.time.MutableDateTime mutableDateTime69 = dateMidnight42.toMutableDateTime(dateTimeZone64);
        org.joda.time.DateTime dateTime70 = yearMonthDay27.toDateTimeAtMidnight(dateTimeZone64);
        int int72 = dateTimeZone64.getStandardOffset(172817988L);
        org.joda.time.DateTime dateTime73 = dateTime7.toDateTime(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Etc/UTC" + "'", str65, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(dateTime73);
    }

    @Test
    public void test10225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10225");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Interval interval7 = interval5.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime8 = interval7.getEnd();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology12);
        org.joda.time.Interval interval14 = yearMonthDay13.toInterval();
        org.joda.time.DateTime dateTime15 = yearMonthDay13.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property17 = dateTime15.property(dateTimeFieldType16);
        boolean boolean18 = dateTime8.isSupported(dateTimeFieldType16);
        int int19 = dateTime8.getYearOfEra();
        org.joda.time.DateTime.Property property20 = dateTime8.secondOfDay();
        org.joda.time.DateTime dateTime21 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology23 = localTime22.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = chronology23.getZone();
        org.joda.time.DurationField durationField25 = chronology23.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval26 = new org.joda.time.Interval((java.lang.Object) dateTime21, chronology23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.DateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test10226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10226");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray5 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList6 = new java.util.ArrayList<java.lang.String>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList6, strArray5);
        java.util.List<java.lang.String> strList8 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList6);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strList15);
        java.lang.String str18 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList17);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap19);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList22 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap21);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, strMap26);
        java.util.Collection<java.util.Locale> localeCollection28 = null;
        java.util.Locale.FilteringMode filteringMode29 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList30 = java.util.Locale.filter(languageRangeList27, localeCollection28, filteringMode29);
        java.util.Locale locale31 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection28);
        java.lang.String[] strArray33 = new java.lang.String[] { "" };
        java.util.ArrayList<java.lang.String> strList34 = new java.util.ArrayList<java.lang.String>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList34, strArray33);
        java.util.stream.Stream<java.lang.String> strStream36 = strList34.stream();
        java.util.stream.Stream<java.lang.String> strStream37 = strList34.parallelStream();
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList34);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap39 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList40 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap39);
        java.util.Locale.LanguageRange[] languageRangeArray41 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList42 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList42, languageRangeArray41);
        java.lang.String[] strArray46 = new java.lang.String[] { "hi!", "" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        java.util.List<java.lang.String> strList49 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, (java.util.Collection<java.lang.String>) strList47);
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleAttributes();
        java.io.IOException iOException53 = new java.io.IOException("PT0.100S");
        java.io.IOException iOException55 = new java.io.IOException("PT0.100S");
        java.lang.Exception[] exceptionArray56 = new java.lang.Exception[] { iOException53, iOException55 };
        java.lang.Exception[] exceptionArray57 = strSet51.toArray(exceptionArray56);
        strSet51.clear();
        strSet51.clear();
        java.util.List<java.lang.String> strList60 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, (java.util.Collection<java.lang.String>) strSet51);
        boolean boolean61 = strSet51.isEmpty();
        java.lang.String str62 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet51);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strList8);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(languageRangeList22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertTrue("'" + filteringMode29 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode29.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList30);
        org.junit.Assert.assertNull(locale31);
        org.junit.Assert.assertNotNull(strArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(strStream36);
        org.junit.Assert.assertNotNull(strStream37);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(languageRangeList40);
        org.junit.Assert.assertNotNull(languageRangeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(exceptionArray56);
        org.junit.Assert.assertNotNull(exceptionArray57);
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNull(str62);
    }

    @Test
    public void test10227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10227");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.roundFloor();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.weekOfWeekyear();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        mutableDateTime4.add((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime4.millisOfDay();
        mutableDateTime4.setMillis((long) 894);
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime4.add(readableDuration22);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test10228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10228");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(0L, 100L, periodType4, chronology5);
        java.lang.Object obj7 = mutablePeriod6.clone();
        java.lang.String str8 = mutablePeriod6.toString();
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod6, 2022);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        int int15 = dateMidnight14.getEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateMidnight14.toDateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusDays(9);
        int int20 = dateTime17.getEra();
        org.joda.time.DateTime dateTime21 = dateTime17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime21.getZone();
        long long25 = dateTimeZone22.adjustOffset((long) 5, true);
        mutableDateTime1.setZoneRetainFields(dateTimeZone22);
        java.util.TimeZone timeZone27 = dateTimeZone22.toTimeZone();
        int int29 = dateTimeZone22.getOffset((long) (short) 0);
        java.lang.String str30 = dateTimeZone22.getID();
        java.util.TimeZone timeZone31 = dateTimeZone22.toTimeZone();
        org.joda.time.tz.NameProvider nameProvider34 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale37 = new java.util.Locale("hi!", "");
        java.lang.String str40 = nameProvider34.getName(locale37, "days", "years");
        java.lang.String str41 = locale37.getVariant();
        java.lang.String str42 = locale37.getScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = timeZone31.getDisplayName(true, 179, locale37);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 179");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0.100S" + "'", str8, "PT0.100S");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 5L + "'", long25 == 5L);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Etc/UTC" + "'", str30, "Etc/UTC");
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(nameProvider34);
        org.junit.Assert.assertEquals(locale37.toString(), "hi!");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test10229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10229");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        int int8 = dateTime5.getEra();
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfYear();
        org.joda.time.DateTime dateTime11 = property10.roundCeilingCopy();
        org.joda.time.DateTime dateTime13 = dateTime11.plus(7100314243200000L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test10230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10230");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        int int5 = yearMonthDay4.size();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((int) (byte) 100, 3, (int) (byte) 10, 4, 2022, 6, 12, 1970);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay4.plus((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.minusYears((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay15.withYear((int) (byte) 100);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology23);
        org.joda.time.DateMidnight dateMidnight25 = yearMonthDay24.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.plus((long) (byte) -1);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight30, chronology31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight30.withCenturyOfEra(8);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology39);
        org.joda.time.Interval interval41 = yearMonthDay40.toInterval();
        org.joda.time.DateTime dateTime42 = yearMonthDay40.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property44 = dateTime42.property(dateTimeFieldType43);
        org.joda.time.DateTime.Property property45 = dateTime42.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone47);
        int int49 = dateMidnight48.getEra();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = dateMidnight48.toDateTime(chronology50);
        org.joda.time.DateTime dateTime53 = dateTime51.plusDays(9);
        int int54 = dateTime51.getEra();
        org.joda.time.DateTime dateTime55 = dateTime51.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone56 = dateTime55.getZone();
        java.lang.String str57 = dateTimeZone56.toString();
        org.joda.time.DateTime dateTime58 = dateTime42.toDateTime(dateTimeZone56);
        boolean boolean59 = dateTimeZone56.isFixed();
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) 7, dateTimeZone56);
        org.joda.time.MutableDateTime mutableDateTime61 = dateMidnight34.toMutableDateTime(dateTimeZone56);
        org.joda.time.DateTime dateTime62 = yearMonthDay19.toDateTimeAtMidnight(dateTimeZone56);
        int int64 = dateTimeZone56.getStandardOffset(172817988L);
        org.joda.time.YearMonthDay yearMonthDay65 = new org.joda.time.YearMonthDay(dateTimeZone56);
        org.joda.time.Period period67 = org.joda.time.Period.days(1);
        org.joda.time.Period period69 = period67.minusSeconds(5);
        org.joda.time.Period period71 = period67.minusMinutes(53255370);
        org.joda.time.Period period73 = period67.plusMillis(21);
        org.joda.time.YearMonthDay yearMonthDay75 = yearMonthDay65.withPeriodAdded((org.joda.time.ReadablePeriod) period73, 889);
        org.joda.time.DateMidnight dateMidnight76 = yearMonthDay75.toDateMidnight();
        org.joda.time.LocalDate localDate77 = yearMonthDay75.toLocalDate();
        java.lang.String str78 = localDate77.toString();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Etc/UTC" + "'", str57, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(yearMonthDay75);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "2024-07-29" + "'", str78, "2024-07-29");
    }

    @Test
    public void test10231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10231");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.hours();
        java.lang.String str3 = durationFieldType2.toString();
        org.joda.time.Period period5 = period1.withField(durationFieldType2, 2);
        org.joda.time.Period period7 = period5.withWeeks((int) (byte) 1);
        int int8 = period5.getDays();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hours" + "'", str3, "hours");
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test10232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10232");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        int int34 = mutablePeriod32.getMinutes();
        org.joda.time.Period period36 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        java.lang.String str38 = durationFieldType37.toString();
        org.joda.time.Period period40 = period36.withField(durationFieldType37, 2);
        boolean boolean41 = mutablePeriod32.isSupported(durationFieldType37);
        long long44 = chronology21.add((org.joda.time.ReadablePeriod) mutablePeriod32, (long) 53230763, 2);
        org.joda.time.DateTimeField dateTimeField45 = chronology21.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone46 = chronology21.getZone();
        org.joda.time.DateTimeField dateTimeField47 = chronology21.dayOfYear();
        org.joda.time.DurationField durationField48 = dateTimeField47.getDurationField();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hours" + "'", str38, "hours");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 53230963L + "'", long44 == 53230963L);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
    }

    @Test
    public void test10233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10233");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime5 = property2.getMutableDateTime();
        java.lang.String str6 = mutableDateTime5.toString();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        int int12 = yearMonthDay11.size();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(0L, 100L, periodType15, chronology16);
        java.lang.Object obj18 = mutablePeriod17.clone();
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        mutablePeriod17.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay11.plus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime27 = yearMonthDay25.toDateTimeAtCurrentTime(dateTimeZone26);
        mutableDateTime5.setDate((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime30 = dateTime27.minusWeeks(887);
        org.joda.time.DateTime dateTime32 = dateTime30.plusWeeks(0);
        boolean boolean33 = dateTime32.isAfterNow();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-01-01T00:00:00.003Z" + "'", str6, "2022-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test10234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10234");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        int int4 = dateMidnight2.getMillisOfSecond();
        org.joda.time.Period period6 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.hours();
        java.lang.String str8 = durationFieldType7.toString();
        org.joda.time.Period period10 = period6.withField(durationFieldType7, 2);
        org.joda.time.Period period12 = period10.minusMinutes(21);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period15 = period12.withWeeks(0);
        int int16 = period12.getSeconds();
        org.joda.time.MutablePeriod mutablePeriod17 = period12.toMutablePeriod();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hours" + "'", str8, "hours");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod17);
    }

    @Test
    public void test10235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10235");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(0L, 100L, periodType7, chronology8);
        java.lang.Object obj10 = mutablePeriod9.clone();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.Duration duration20 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.LocalDate localDate22 = dateMidnight21.toLocalDate();
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        java.lang.String str24 = chronology23.toString();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.secondOfDay();
        org.joda.time.Interval interval26 = new org.joda.time.Interval(0L, (long) 1, chronology23);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(10L);
        long long30 = chronology23.set((org.joda.time.ReadablePartial) yearMonthDay28, (long) 8);
        org.joda.time.DateTimeField dateTimeField31 = chronology23.secondOfDay();
        org.joda.time.DurationField durationField32 = chronology23.minutes();
        org.joda.time.DateTimeField dateTimeField33 = chronology23.dayOfYear();
        java.lang.String str34 = chronology23.toString();
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT0.100S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[UTC]" + "'", str24, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 8L + "'", long30 == 8L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ISOChronology[UTC]" + "'", str34, "ISOChronology[UTC]");
    }

    @Test
    public void test10236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10236");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay10 = property8.addWrapFieldToCopy(887);
        java.util.Date date12 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromDateFields(date12);
        int int14 = timeOfDay13.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay13.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay16.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property19 = timeOfDay18.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime24 = property22.add((long) 3);
        mutableDateTime24.setDayOfMonth((int) (byte) 10);
        mutableDateTime24.add((long) 6);
        mutableDateTime24.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.monthOfYear();
        mutableDateTime24.setTime((org.joda.time.ReadableInstant) dateMidnight31);
        int int34 = property19.compareTo((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.TimeOfDay timeOfDay36 = property19.addNoWrapToCopy(5);
        org.joda.time.TimeOfDay timeOfDay38 = timeOfDay36.plusHours((-1));
        org.joda.time.TimeOfDay timeOfDay40 = timeOfDay38.minusHours(53243308);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone42);
        int int44 = dateMidnight43.getEra();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = dateMidnight43.toDateTime(chronology45);
        org.joda.time.DateTime dateTime48 = dateTime46.minusWeeks(0);
        org.joda.time.DateTime dateTime50 = dateTime46.withYear((int) (short) 10);
        org.joda.time.DateTime dateTime52 = dateTime50.withCenturyOfEra(70);
        org.joda.time.DateTime dateTime53 = timeOfDay40.toDateTime((org.joda.time.ReadableInstant) dateTime52);
        int int54 = property8.compareTo((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.TimeOfDay timeOfDay56 = property8.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.DateTimeField dateTimeField57 = property8.getField();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertNotNull(dateTimeField57);
    }

    @Test
    public void test10237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10237");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder1.setRegion("");
        java.util.Locale.Builder builder5 = builder1.removeUnicodeLocaleAttribute("120");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.setLanguageTag("53256552-01-01T00:00:17.004Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 53256552 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test10238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10238");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.hours();
        java.lang.String str3 = durationFieldType2.toString();
        org.joda.time.Period period5 = period1.withField(durationFieldType2, 2);
        org.joda.time.Period period7 = period5.minusMinutes(21);
        org.joda.time.Hours hours8 = period5.toStandardHours();
        org.joda.time.Period period10 = period5.minusWeeks(16);
        org.joda.time.Period period12 = period10.plusMillis(196);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hours" + "'", str3, "hours");
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(hours8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    public void test10239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10239");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        java.util.Locale locale5 = new java.util.Locale("hi!", "");
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.LocalDateTime localDateTime7 = property2.withMaximumValue();
        java.lang.String str8 = property2.toString();
        org.joda.time.DateTimeField dateTimeField9 = property2.getField();
        org.joda.time.LocalDateTime localDateTime10 = property2.withMinimumValue();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusHours(53);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.minusSeconds(200);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022" + "'", str6, "2022");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[year]" + "'", str8, "Property[year]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test10240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10240");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 53230763, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        java.lang.String str52 = chronology26.toString();
        org.joda.time.DateTimeField dateTimeField53 = chronology26.dayOfMonth();
        int int56 = dateTimeField53.getDifference((-61038230400000L), 1000L);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 53230963L + "'", long49 == 53230963L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ISOChronology[UTC]" + "'", str52, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-706461) + "'", int56 == (-706461));
    }

    @Test
    public void test10241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10241");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(10);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay0.millisOfSecond();
        int int4 = property3.get();
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getDisplayVariant();
        java.util.Date date8 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay9 = org.joda.time.TimeOfDay.fromDateFields(date8);
        int int10 = timeOfDay9.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay9.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property15 = timeOfDay14.secondOfMinute();
        java.util.Locale locale18 = new java.util.Locale("hi!", "");
        java.lang.String str19 = property15.getAsShortText(locale18);
        java.lang.String str20 = locale5.getDisplayScript(locale18);
        int int21 = property3.getMaximumShortTextLength(locale5);
        org.joda.time.tz.NameProvider nameProvider22 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale23 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str26 = nameProvider22.getName(locale23, "", "0035-10-10");
        java.lang.String str27 = locale23.getCountry();
        java.lang.String str28 = property3.getAsText(locale23);
        org.joda.time.TimeOfDay timeOfDay29 = property3.withMinimumValue();
        int int30 = property3.getMinimumValue();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(nameProvider22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "CA" + "'", str27, "CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0" + "'", str28, "0");
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test10242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10242");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime localTime13 = property12.withMinimumValue();
        org.joda.time.LocalTime localTime15 = localTime13.withMinuteOfHour(47);
        org.joda.time.LocalTime localTime17 = localTime13.plusMillis(25);
        org.joda.time.LocalTime localTime19 = localTime13.withMillisOfSecond(37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime21 = localTime19.withSecondOfMinute(147693);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 147693 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test10243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10243");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime.Property property13 = localTime9.millisOfDay();
        org.joda.time.LocalTime localTime15 = property13.addNoWrapToCopy((int) '4');
        org.joda.time.Chronology chronology16 = localTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        int int20 = dateMidnight19.getEra();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = dateMidnight19.toDateTime(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime22.minusWeeks(0);
        org.joda.time.DateTime dateTime25 = dateTime24.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime26 = dateTime24.toLocalTime();
        org.joda.time.LocalTime localTime28 = localTime26.minusMinutes(3);
        org.joda.time.LocalTime.Property property29 = localTime26.minuteOfHour();
        org.joda.time.LocalTime.Property property30 = localTime26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField31 = property30.getField();
        org.joda.time.LocalTime localTime32 = property30.getLocalTime();
        org.joda.time.LocalTime localTime33 = property30.withMaximumValue();
        org.joda.time.LocalTime localTime34 = property30.getLocalTime();
        long long35 = property30.remainder();
        org.joda.time.LocalTime localTime36 = property30.getLocalTime();
        java.util.Date date38 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay39 = org.joda.time.TimeOfDay.fromDateFields(date38);
        int int40 = timeOfDay39.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay42 = timeOfDay39.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay44 = timeOfDay42.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property45 = timeOfDay44.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime47.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime50 = property48.add((long) 3);
        mutableDateTime50.setDayOfMonth((int) (byte) 10);
        mutableDateTime50.add((long) 6);
        mutableDateTime50.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property58 = dateMidnight57.monthOfYear();
        mutableDateTime50.setTime((org.joda.time.ReadableInstant) dateMidnight57);
        int int60 = property45.compareTo((org.joda.time.ReadableInstant) mutableDateTime50);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = property45.getFieldType();
        int int62 = localTime36.indexOf(dateTimeFieldType61);
        boolean boolean63 = localTime15.isSupported(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test10244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10244");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.era();
        int int10 = dateMidnight8.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone12);
        int int14 = dateMidnight13.getEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateMidnight13.toDateTime(chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusWeeks(0);
        org.joda.time.DateTime dateTime19 = dateTime18.withEarlierOffsetAtOverlap();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime22 = dateTime18.withFieldAdded(durationFieldType20, 5);
        int int23 = dateMidnight8.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        org.joda.time.DateTime dateTime27 = dateTime24.withDurationAdded((long) (short) 0, 0);
        org.joda.time.DateTime.Property property28 = dateTime24.hourOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test10245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10245");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.DateTime dateTime9 = localDate8.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property10 = localDate8.year();
        org.joda.time.LocalDate.Property property11 = localDate8.year();
        org.joda.time.LocalDate localDate12 = property11.getLocalDate();
        int int13 = localDate12.getDayOfYear();
        org.joda.time.Interval interval14 = localDate12.toInterval();
        org.joda.time.Chronology chronology15 = interval14.getChronology();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(chronology15);
    }

    @Test
    public void test10246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10246");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0L, 100L, periodType6, chronology7);
        java.lang.Object obj9 = mutablePeriod8.clone();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.Duration duration19 = mutablePeriod8.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight3.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.LocalDate localDate21 = dateMidnight20.toLocalDate();
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        java.lang.String str23 = chronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(obj0, chronology22);
        org.joda.time.DateTimeField dateTimeField26 = chronology22.hourOfHalfday();
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT0.100S");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[UTC]" + "'", str23, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField26);
    }

    @Test
    public void test10247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10247");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        int int4 = dateMidnight3.getEra();
        org.joda.time.DateMidnight.Property property5 = dateMidnight3.monthOfYear();
        org.joda.time.DateMidnight dateMidnight7 = property5.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property5.getFieldType();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.year();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusSeconds((int) (byte) 10);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        boolean boolean17 = dateTimeFieldType8.isSupported(chronology16);
        org.joda.time.DurationField durationField18 = chronology16.hours();
        java.lang.String str19 = chronology16.toString();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        int int23 = dateMidnight22.getEra();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = dateMidnight22.toDateTime(chronology24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusDays(9);
        int int28 = dateTime25.getEra();
        org.joda.time.DateTime dateTime29 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime29.getZone();
        long long33 = dateTimeZone30.adjustOffset((long) 5, true);
        boolean boolean35 = dateTimeZone30.isStandardOffset((long) 3);
        org.joda.time.Chronology chronology36 = chronology16.withZone(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField37 = chronology16.weekyear();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone39);
        int int41 = dateMidnight40.getEra();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = dateMidnight40.toDateTime(chronology42);
        org.joda.time.DateTime dateTime45 = dateTime43.plusDays(9);
        int int46 = dateTime43.getEra();
        org.joda.time.DateTime dateTime47 = dateTime43.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone48 = dateTime47.getZone();
        long long51 = dateTimeZone48.adjustOffset((long) 5, true);
        boolean boolean53 = dateTimeZone48.isStandardOffset((long) 3);
        org.joda.time.Chronology chronology54 = chronology16.withZone(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField55 = chronology16.weekOfWeekyear();
        org.joda.time.Period period56 = new org.joda.time.Period((long) 53282437, chronology16);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[UTC]" + "'", str19, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 5L + "'", long33 == 5L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 5L + "'", long51 == 5L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
    }

    @Test
    public void test10248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10248");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone4);
        int int6 = dateMidnight5.getEra();
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(0L, 100L, periodType9, chronology10);
        java.lang.Object obj12 = mutablePeriod11.clone();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(0L, 100L, periodType15, chronology16);
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone20);
        org.joda.time.Duration duration22 = mutablePeriod11.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight5, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadableDuration) duration22, periodType24);
        org.joda.time.Period period27 = period25.withMillis(21);
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime33 = property32.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime34 = property32.roundFloor();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology38);
        org.joda.time.DateMidnight dateMidnight40 = yearMonthDay39.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight40.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime34, (org.joda.time.ReadableInstant) dateMidnight40, periodType44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone47);
        int int49 = dateMidnight48.getEra();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = dateMidnight48.toDateTime(chronology50);
        org.joda.time.DateTime dateTime53 = dateTime51.plusDays(9);
        int int54 = dateTime51.getEra();
        org.joda.time.DateTime dateTime55 = dateTime51.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone56 = dateTime55.getZone();
        long long59 = dateTimeZone56.adjustOffset((long) 5, true);
        boolean boolean61 = dateTimeZone56.isStandardOffset((long) 3);
        mutableDateTime34.setZoneRetainFields(dateTimeZone56);
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight(46800035L, dateTimeZone56);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone65);
        int int67 = dateMidnight66.getEra();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = dateMidnight66.toDateTime(chronology68);
        org.joda.time.DateTime dateTime71 = dateTime69.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight72 = dateTime71.toDateMidnight();
        org.joda.time.DateMidnight.Property property73 = dateMidnight72.era();
        int int74 = dateMidnight72.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone76);
        int int78 = dateMidnight77.getEra();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.DateTime dateTime80 = dateMidnight77.toDateTime(chronology79);
        org.joda.time.DateTime dateTime82 = dateTime80.minusWeeks(0);
        org.joda.time.DateTime dateTime83 = dateTime82.withEarlierOffsetAtOverlap();
        org.joda.time.DurationFieldType durationFieldType84 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime86 = dateTime82.withFieldAdded(durationFieldType84, 5);
        int int87 = dateMidnight72.compareTo((org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.DateTime dateTime88 = dateTime86.toDateTime();
        int int89 = dateTimeZone56.getOffset((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.DateTime dateTime90 = new org.joda.time.DateTime((long) 53299420, dateTimeZone56);
        org.joda.time.Duration duration91 = period27.toDurationTo((org.joda.time.ReadableInstant) dateTime90);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "PT0.100S");
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 5L + "'", long59 == 5L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(durationFieldType84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1) + "'", int87 == (-1));
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(duration91);
    }

    @Test
    public void test10249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10249");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        java.util.Locale locale5 = new java.util.Locale("hi!", "");
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.LocalDateTime localDateTime7 = property2.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMillisOfDay(3);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.plusYears(25);
        int int12 = localDateTime11.getMonthOfYear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022" + "'", str6, "2022");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test10250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10250");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay10 = property8.addNoWrapToCopy(3);
        org.joda.time.TimeOfDay timeOfDay11 = property8.getTimeOfDay();
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.monthOfYear();
        org.joda.time.DateMidnight dateMidnight14 = property13.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight15 = property13.roundHalfEvenCopy();
        org.joda.time.DurationField durationField16 = property13.getLeapDurationField();
        org.joda.time.DateMidnight dateMidnight17 = property13.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight18 = property13.withMinimumValue();
        int int19 = property8.compareTo((org.joda.time.ReadableInstant) dateMidnight18);
        java.util.Locale locale22 = new java.util.Locale("zho", "");
        int int23 = property8.getMaximumShortTextLength(locale22);
        org.joda.time.TimeOfDay timeOfDay25 = property8.addNoWrapToCopy(12);
        org.joda.time.Period period27 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.hours();
        java.lang.String str29 = durationFieldType28.toString();
        org.joda.time.Period period31 = period27.withField(durationFieldType28, 2);
        org.joda.time.TimeOfDay timeOfDay33 = timeOfDay25.withFieldAdded(durationFieldType28, 53355320);
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay33.minusHours(10223);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals(locale22.toString(), "zho");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hours" + "'", str29, "hours");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(timeOfDay35);
    }

    @Test
    public void test10251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10251");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight6 = property4.addToCopy((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone9);
        int int11 = dateMidnight10.getEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateMidnight10.toDateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusDays(9);
        int int16 = dateTime13.getEra();
        org.joda.time.DateTime dateTime17 = dateTime13.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime17.getZone();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight6.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone22);
        int int24 = dateMidnight23.getEra();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        java.lang.Object obj30 = mutablePeriod29.clone();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone38);
        org.joda.time.Duration duration40 = mutablePeriod29.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight39);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight23, (org.joda.time.ReadableDuration) duration40);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone43);
        int int45 = dateMidnight44.getEra();
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(0L, 100L, periodType48, chronology49);
        java.lang.Object obj51 = mutablePeriod50.clone();
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(0L, 100L, periodType54, chronology55);
        mutablePeriod50.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod56);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone59);
        org.joda.time.Duration duration61 = mutablePeriod50.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight60);
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight44, (org.joda.time.ReadableDuration) duration61);
        boolean boolean63 = duration40.isLongerThan((org.joda.time.ReadableDuration) duration61);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight6.withDurationAdded((org.joda.time.ReadableDuration) duration61, (int) (short) 1);
        java.util.Locale locale66 = java.util.Locale.JAPAN;
        java.util.Set<java.lang.String> strSet67 = locale66.getUnicodeLocaleAttributes();
        java.lang.String str69 = locale66.getExtension('a');
        boolean boolean70 = duration61.equals((java.lang.Object) 'a');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "PT0.100S");
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "PT0.100S");
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test10252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10252");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime localTime13 = property12.withMinimumValue();
        org.joda.time.LocalTime localTime15 = property12.addCopy((int) ' ');
        org.joda.time.LocalTime localTime16 = property12.withMinimumValue();
        org.joda.time.LocalTime.Property property17 = localTime16.millisOfDay();
        org.joda.time.DateTime dateTime18 = localTime16.toDateTimeToday();
        org.joda.time.DateTime.Property property19 = dateTime18.weekyear();
        org.joda.time.DateTime dateTime21 = dateTime18.minusWeeks(39);
        org.joda.time.DateTime dateTime23 = dateTime21.plusYears(53697795);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test10253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10253");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter4.withOffsetParsed();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.YearMonthDay yearMonthDay10 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology9);
        int int11 = yearMonthDay10.size();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((int) (byte) 100, 3, (int) (byte) 10, 4, 2022, 6, 12, 1970);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay10.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay21.minusYears((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay21.withYear((int) (byte) 100);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology29);
        org.joda.time.DateMidnight dateMidnight31 = yearMonthDay30.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight31.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.plus((long) (byte) -1);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight36, chronology37);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight36.withCenturyOfEra(8);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.YearMonthDay yearMonthDay46 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology45);
        org.joda.time.Interval interval47 = yearMonthDay46.toInterval();
        org.joda.time.DateTime dateTime48 = yearMonthDay46.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property50 = dateTime48.property(dateTimeFieldType49);
        org.joda.time.DateTime.Property property51 = dateTime48.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone53);
        int int55 = dateMidnight54.getEra();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = dateMidnight54.toDateTime(chronology56);
        org.joda.time.DateTime dateTime59 = dateTime57.plusDays(9);
        int int60 = dateTime57.getEra();
        org.joda.time.DateTime dateTime61 = dateTime57.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone62 = dateTime61.getZone();
        java.lang.String str63 = dateTimeZone62.toString();
        org.joda.time.DateTime dateTime64 = dateTime48.toDateTime(dateTimeZone62);
        boolean boolean65 = dateTimeZone62.isFixed();
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight((long) 7, dateTimeZone62);
        org.joda.time.MutableDateTime mutableDateTime67 = dateMidnight40.toMutableDateTime(dateTimeZone62);
        org.joda.time.DateTime dateTime68 = yearMonthDay25.toDateTimeAtMidnight(dateTimeZone62);
        long long70 = dateTimeZone62.nextTransition((long) 101);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter4.withZone(dateTimeZone62);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str73 = dateTimeFormatter71.print((-46800000L));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Etc/UTC" + "'", str63, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(mutableDateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 101L + "'", long70 == 101L);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
    }

    @Test
    public void test10254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10254");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology10);
        org.joda.time.Interval interval12 = yearMonthDay11.toInterval();
        org.joda.time.Period period13 = interval12.toPeriod();
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval15 = interval5.overlap((org.joda.time.ReadableInterval) interval12);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = property18.add((long) 3);
        mutableDateTime20.setDayOfMonth((int) (byte) 10);
        mutableDateTime20.add((long) 6);
        mutableDateTime20.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.monthOfYear();
        mutableDateTime20.setTime((org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone31);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        java.lang.Object obj38 = mutablePeriod37.clone();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        mutablePeriod37.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone46);
        org.joda.time.Duration duration48 = mutablePeriod37.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight32.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.LocalDate localDate50 = dateMidnight49.toLocalDate();
        org.joda.time.Period period52 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.hours();
        java.lang.String str54 = durationFieldType53.toString();
        org.joda.time.Period period56 = period52.withField(durationFieldType53, 2);
        org.joda.time.Period period58 = period56.withMillis((int) '#');
        org.joda.time.LocalDate localDate59 = localDate50.minus((org.joda.time.ReadablePeriod) period58);
        int int60 = period58.getMonths();
        org.joda.time.Period period62 = period58.minusMinutes(8);
        org.joda.time.Interval interval63 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime20, (org.joda.time.ReadablePeriod) period58);
        org.joda.time.Interval interval64 = interval63.toInterval();
        boolean boolean66 = interval63.contains((long) 53243308);
        boolean boolean67 = interval15.overlaps((org.joda.time.ReadableInterval) interval63);
        org.joda.time.Interval interval69 = interval15.withEndMillis((long) 100);
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.YearMonthDay yearMonthDay74 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology73);
        org.joda.time.Interval interval75 = yearMonthDay74.toInterval();
        org.joda.time.Period period76 = interval75.toPeriod();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.YearMonthDay yearMonthDay81 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology80);
        org.joda.time.Interval interval82 = yearMonthDay81.toInterval();
        org.joda.time.Period period83 = interval82.toPeriod();
        long long84 = interval82.getStartMillis();
        org.joda.time.Interval interval85 = interval75.overlap((org.joda.time.ReadableInterval) interval82);
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.YearMonthDay yearMonthDay90 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology89);
        org.joda.time.Interval interval91 = yearMonthDay90.toInterval();
        org.joda.time.Interval interval93 = interval91.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime94 = interval93.getEnd();
        boolean boolean95 = interval82.contains((org.joda.time.ReadableInterval) interval93);
        boolean boolean96 = interval69.equals((java.lang.Object) interval82);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval98 = interval82.withStartMillis((long) 194);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-61038316800000L) + "'", long14 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "PT0.100S");
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hours" + "'", str54, "hours");
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + (-61038316800000L) + "'", long84 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test10255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10255");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.monthOfYear();
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight0.plusMonths(22);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.addWrapField((int) (short) 0);
        org.joda.time.DateTime dateTime9 = mutableDateTime8.toDateTime();
        int int10 = dateMidnight3.compareTo((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight3.plusMonths(887);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight12);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateMidnight12);
    }

    @Test
    public void test10256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10256");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        java.lang.String str22 = chronology21.toString();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone25);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone40);
        org.joda.time.Duration duration42 = mutablePeriod31.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight26.plus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.LocalDate localDate44 = dateMidnight43.toLocalDate();
        org.joda.time.Period period46 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.hours();
        java.lang.String str48 = durationFieldType47.toString();
        org.joda.time.Period period50 = period46.withField(durationFieldType47, 2);
        org.joda.time.Period period52 = period50.withMillis((int) '#');
        org.joda.time.LocalDate localDate53 = localDate44.minus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.LocalDate localDate55 = localDate53.minusYears(11);
        int int56 = localDate53.getYearOfEra();
        int int57 = dateTimeField23.getMinimumValue((org.joda.time.ReadablePartial) localDate53);
        int int58 = localDate53.getYearOfCentury();
        int int59 = localDate53.getCenturyOfEra();
        org.joda.time.DateTime dateTime60 = localDate53.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate62 = localDate53.withYearOfEra(53097298);
        int int63 = localDate53.size();
        int int64 = localDate53.getYear();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight(0L, dateTimeZone66);
        org.joda.time.LocalDate localDate68 = dateMidnight67.toLocalDate();
        org.joda.time.DateMidnight.Property property69 = dateMidnight67.yearOfEra();
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight67.minusDays(0);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight71.minusWeeks(27);
        org.joda.time.DateTime dateTime74 = localDate53.toDateTime((org.joda.time.ReadableInstant) dateMidnight73);
        org.joda.time.DateTime.Property property75 = dateTime74.dayOfYear();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[UTC]" + "'", str22, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hours" + "'", str48, "hours");
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1970 + "'", int56 == 1970);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 70 + "'", int58 == 70);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 19 + "'", int59 == 19);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3 + "'", int63 == 3);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1970 + "'", int64 == 1970);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(property75);
    }

    @Test
    public void test10257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10257");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(100, 48, 53576961);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10258");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay10 = property8.addNoWrapToCopy(3);
        org.joda.time.TimeOfDay timeOfDay11 = property8.withMaximumValue();
        org.joda.time.DurationField durationField12 = property8.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay13 = property8.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField14 = property8.getField();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = dateTimeField14.set(0L, 53455652);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53455652 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test10259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10259");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        int int8 = dateMidnight7.getEra();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = dateMidnight7.toDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(9);
        int int13 = dateTime10.getEra();
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime14.getZone();
        java.lang.String str16 = dateTimeZone15.toString();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withZone(dateTimeZone15);
        org.joda.time.format.DateTimeParser dateTimeParser19 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter20.withPivotYear((java.lang.Integer) 35);
        boolean boolean23 = dateTimeFormatter22.isParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = dateTimeFormatter22.parseDateTime("java.io.IOException: PT2H0.035S");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Etc/UTC" + "'", str16, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(dateTimeParser19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test10260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10260");
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((int) (byte) -1, 10, 14);
        org.joda.time.DateMidnight.Property property4 = dateMidnight3.year();
        org.joda.time.DateMidnight.Property property5 = dateMidnight3.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight3.withMillis((long) 11);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateMidnight7);
    }

    @Test
    public void test10261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10261");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        java.lang.String str5 = yearMonthDay4.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.minusDays(10);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay4.monthOfYear();
        int int9 = yearMonthDay4.getMonthOfYear();
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0035-10-10" + "'", str5, "0035-10-10");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
    }

    @Test
    public void test10262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10262");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.LocalTime localTime4 = timeOfDay2.toLocalTime();
        org.joda.time.LocalTime localTime6 = localTime4.withHourOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology7 = localTime6.getChronology();
        int int8 = localTime6.getHourOfDay();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test10263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10263");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.DateTime dateTime7 = localDate3.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate9 = localDate3.withWeekyear(100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = localDate9.withDayOfMonth(53747243);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53747243 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test10264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10264");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("years");
        java.util.TimeZone.setDefault(timeZone1);
        java.util.TimeZone timeZone4 = java.util.TimeZone.getTimeZone("");
        java.lang.String str5 = timeZone4.getID();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone("Property[year]");
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone8);
        java.util.TimeZone.setDefault(timeZone8);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        boolean boolean13 = timeZone4.hasSameRules(timeZone8);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        boolean boolean15 = timeZone1.hasSameRules(timeZone8);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GMT" + "'", str5, "GMT");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645455399673,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=39,MILLISECOND=673,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645455399673,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=39,MILLISECOND=673,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test10265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10265");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale4 = dateTimeFormatter3.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withPivotYear((-1956));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withPivotYear(53323082);
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = dateTimeFormatter9.getPrinter();
        java.lang.Appendable appendable11 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter9.printTo(appendable11, (long) 35);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNull(locale4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(dateTimePrinter10);
    }

    @Test
    public void test10266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10266");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        int int9 = property8.get();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        java.lang.Object obj15 = mutablePeriod14.clone();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(0L, 100L, periodType18, chronology19);
        mutablePeriod14.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone23);
        org.joda.time.Duration duration25 = mutablePeriod14.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight24);
        mutablePeriod14.addMillis(0);
        mutablePeriod14.setMonths(0);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone31);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        java.lang.Object obj38 = mutablePeriod37.clone();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        mutablePeriod37.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone46);
        org.joda.time.Duration duration48 = mutablePeriod37.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight47);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight32.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.MutableDateTime mutableDateTime51 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(0L, 100L, periodType54, chronology55);
        java.lang.Object obj57 = mutablePeriod56.clone();
        java.lang.String str58 = mutablePeriod56.toString();
        mutableDateTime51.add((org.joda.time.ReadablePeriod) mutablePeriod56, 2022);
        mutablePeriod14.setPeriod((org.joda.time.ReadableInstant) dateMidnight49, (org.joda.time.ReadableInstant) mutableDateTime51);
        mutableDateTime51.addWeekyears((int) (byte) 0);
        mutableDateTime51.setSecondOfMinute(8);
        int int66 = property8.compareTo((org.joda.time.ReadableInstant) mutableDateTime51);
        java.lang.String str67 = property8.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay69 = property8.addToCopy(852);
        int int70 = timeOfDay69.getSecondOfMinute();
        java.lang.String str71 = timeOfDay69.toString();
        org.joda.time.TimeOfDay timeOfDay73 = timeOfDay69.plusMillis(9);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone75);
        int int77 = dateMidnight76.getEra();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = dateMidnight76.toDateTime(chronology78);
        org.joda.time.DateTime dateTime81 = dateTime79.plusDays(9);
        int int82 = dateTime79.getEra();
        org.joda.time.DateTime dateTime83 = dateTime79.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone84 = dateTime83.getZone();
        long long87 = dateTimeZone84.adjustOffset((long) 5, true);
        int int89 = dateTimeZone84.getOffset((long) (byte) -1);
        boolean boolean91 = dateTimeZone84.isStandardOffset((long) 588);
        org.joda.time.DateMidnight dateMidnight92 = org.joda.time.DateMidnight.now(dateTimeZone84);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone84);
        long long95 = dateTimeZone84.previousTransition((-777600864L));
        org.joda.time.DateTime dateTime96 = timeOfDay69.toDateTimeToday(dateTimeZone84);
        org.joda.time.DateTime dateTime98 = dateTime96.minusHours(96);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "P52YT3M22.200S");
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "PT0.100S");
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "PT0.100S" + "'", str58, "PT0.100S");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "0" + "'", str67, "0");
        org.junit.Assert.assertNotNull(timeOfDay69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 12 + "'", int70 == 12);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "T23:14:12.000" + "'", str71, "T23:14:12.000");
        org.junit.Assert.assertNotNull(timeOfDay73);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 5L + "'", long87 == 5L);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(dateMidnight92);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + (-777600864L) + "'", long95 == (-777600864L));
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertNotNull(dateTime98);
    }

    @Test
    public void test10267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10267");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        java.lang.String str5 = dateTimeZone3.getNameKey((long) '4');
        java.lang.String str7 = dateTimeZone3.getName(5L);
        java.util.Locale locale9 = java.util.Locale.ROOT;
        java.lang.String str11 = locale9.getExtension('x');
        java.lang.String str12 = locale9.getScript();
        java.util.Locale locale15 = new java.util.Locale("dayOfMonth", "Greenwich Mean Time");
        java.lang.String str16 = locale9.getDisplayLanguage(locale15);
        java.lang.String str17 = dateTimeZone3.getShortName(140386578732918000L, locale15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight(2000, 53292560, 53489781, dateTimeZone3);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53292560 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "UTC" + "'", str5, "UTC");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals(locale15.toString(), "dayofmonth_GREENWICH MEAN TIME");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
    }

    @Test
    public void test10268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10268");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        int int6 = timeOfDay2.size();
        org.joda.time.DateTime dateTime7 = timeOfDay2.toDateTimeToday();
        org.joda.time.DateTime dateTime9 = dateTime7.plusWeeks(21);
        org.joda.time.DateTime dateTime11 = dateTime7.plusDays(53250029);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        int int15 = dateMidnight14.getEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateMidnight14.toDateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.minusWeeks(0);
        org.joda.time.DateTime dateTime21 = dateTime17.withYear((int) (short) 10);
        org.joda.time.DateTime dateTime23 = dateTime21.plusDays(53230763);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.dayTime();
        int int25 = periodType24.size();
        org.joda.time.PeriodType periodType26 = periodType24.withMillisRemoved();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime23, periodType24);
        org.joda.time.Period period28 = period27.normalizedStandard();
        int int29 = period27.getYears();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone31);
        int int33 = dateMidnight32.getEra();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = dateMidnight32.toDateTime(chronology34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight38 = dateTime37.toDateMidnight();
        org.joda.time.DateMidnight.Property property39 = dateMidnight38.era();
        int int40 = dateMidnight38.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight38.plusWeeks(70);
        org.joda.time.DateMidnight.Property property43 = dateMidnight42.year();
        org.joda.time.DateMidnight dateMidnight44 = property43.withMaximumValue();
        java.util.GregorianCalendar gregorianCalendar45 = dateMidnight44.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone47);
        int int49 = dateMidnight48.getEra();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = dateMidnight48.toDateTime(chronology50);
        org.joda.time.DateTime dateTime53 = dateTime51.minusWeeks(0);
        org.joda.time.DateTime dateTime54 = dateTime53.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime55 = dateTime53.toLocalTime();
        org.joda.time.LocalTime localTime57 = localTime55.minusMinutes(3);
        org.joda.time.LocalTime.Property property58 = localTime55.minuteOfHour();
        org.joda.time.LocalTime localTime59 = property58.withMinimumValue();
        org.joda.time.LocalTime localTime61 = localTime59.withMinuteOfHour(47);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType63 = dateTimeFieldType62.getRangeDurationType();
        org.joda.time.LocalTime.Property property64 = localTime61.property(dateTimeFieldType62);
        java.lang.String str65 = dateTimeFieldType62.getName();
        org.joda.time.DurationFieldType durationFieldType66 = dateTimeFieldType62.getDurationType();
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight44.withField(dateTimeFieldType62, 113);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration69 = period27.toDurationTo((org.joda.time.ReadableInstant) dateMidnight44);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 9223371996393600000 + 65161584000000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 5 + "'", int25 == 5);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(gregorianCalendar45);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "secondOfDay" + "'", str65, "secondOfDay");
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertNotNull(dateMidnight68);
    }

    @Test
    public void test10269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10269");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfDay(0);
        java.util.Date date6 = localDateTime5.toDate();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.year();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(date6);
        org.junit.Assert.assertEquals(date6.toString(), "Mon Feb 21 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test10270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10270");
        java.lang.Object obj0 = null;
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(obj0);
        org.joda.time.MutableDateTime mutableDateTime2 = dateMidnight1.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        org.joda.time.Duration duration21 = mutablePeriod10.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight5.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.year();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusSeconds((int) (byte) 10);
        org.joda.time.Chronology chronology30 = localDateTime29.getChronology();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        int int34 = dateMidnight33.getEra();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = dateMidnight33.toDateTime(chronology35);
        org.joda.time.DateTime dateTime38 = dateTime36.plusDays(9);
        int int39 = dateTime36.getEra();
        org.joda.time.DateTime dateTime40 = dateTime36.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone41 = dateTime40.getZone();
        java.lang.String str42 = dateTimeZone41.toString();
        org.joda.time.Chronology chronology43 = chronology30.withZone(dateTimeZone41);
        org.joda.time.DateTimeZone dateTimeZone44 = chronology43.getZone();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(chronology45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.year();
        java.util.Locale locale50 = new java.util.Locale("hi!", "");
        java.lang.String str51 = property47.getAsText(locale50);
        org.joda.time.LocalDateTime localDateTime52 = property47.withMaximumValue();
        int int54 = localDateTime52.getValue(3);
        boolean boolean55 = dateTimeZone44.isLocalDateTimeGap(localDateTime52);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight5.withZoneRetainFields(dateTimeZone44);
        mutableDateTime2.setZone(dateTimeZone44);
        int int58 = mutableDateTime2.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setDayOfMonth(49);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Etc/UTC" + "'", str42, "Etc/UTC");
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertEquals(locale50.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022" + "'", str51, "2022");
        org.junit.Assert.assertNotNull(localDateTime52);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 53799826 + "'", int54 == 53799826);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
    }

    @Test
    public void test10271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10271");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0L, 100L, periodType6, chronology7);
        java.lang.Object obj9 = mutablePeriod8.clone();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.Duration duration19 = mutablePeriod8.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight3.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.LocalDate localDate21 = dateMidnight20.toLocalDate();
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        int int35 = mutablePeriod33.getMinutes();
        org.joda.time.Period period37 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.hours();
        java.lang.String str39 = durationFieldType38.toString();
        org.joda.time.Period period41 = period37.withField(durationFieldType38, 2);
        boolean boolean42 = mutablePeriod33.isSupported(durationFieldType38);
        long long45 = chronology22.add((org.joda.time.ReadablePeriod) mutablePeriod33, (long) 53230763, 2);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 11, chronology22);
        org.joda.time.DateTimeField dateTimeField47 = chronology22.era();
        java.lang.String str48 = dateTimeField47.getName();
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT0.100S");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hours" + "'", str39, "hours");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 53230963L + "'", long45 == 53230963L);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "era" + "'", str48, "era");
    }

    @Test
    public void test10272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10272");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        org.joda.time.Duration duration21 = mutablePeriod10.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight5.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.LocalDate localDate23 = dateMidnight22.toLocalDate();
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        java.lang.Object obj30 = mutablePeriod29.clone();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        int int37 = mutablePeriod35.getMinutes();
        org.joda.time.Period period39 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.hours();
        java.lang.String str41 = durationFieldType40.toString();
        org.joda.time.Period period43 = period39.withField(durationFieldType40, 2);
        boolean boolean44 = mutablePeriod35.isSupported(durationFieldType40);
        long long47 = chronology24.add((org.joda.time.ReadablePeriod) mutablePeriod35, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Chronology chronology49 = chronology24.withZone(dateTimeZone48);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 11, chronology49);
        org.joda.time.DurationField durationField51 = chronology49.days();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (-1), (long) (short) 0, chronology49);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone54);
        int int56 = dateMidnight55.getEra();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = dateMidnight55.toDateTime(chronology57);
        org.joda.time.DateTime dateTime60 = dateTime58.minusWeeks(0);
        org.joda.time.Interval interval61 = interval52.withStart((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Chronology chronology62 = interval52.getChronology();
        java.lang.String str63 = interval52.toString();
        org.joda.time.ReadableInstant readableInstant64 = null;
        boolean boolean65 = interval52.isAfter(readableInstant64);
        long long66 = interval52.toDurationMillis();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone68);
        int int70 = dateMidnight69.getEra();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = dateMidnight69.toDateTime(chronology71);
        org.joda.time.DateTime dateTime74 = dateTime72.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight75 = dateTime74.toDateMidnight();
        org.joda.time.DateMidnight.Property property76 = dateMidnight75.era();
        int int77 = dateMidnight75.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight75.plusWeeks(70);
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight75.plus((-864L));
        org.joda.time.DateMidnight dateMidnight83 = dateMidnight81.withCenturyOfEra((int) 'x');
        org.joda.time.DateMidnight dateMidnight85 = dateMidnight81.plusDays(890);
        org.joda.time.Period period87 = org.joda.time.Period.seconds(50);
        org.joda.time.Interval interval88 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight85, (org.joda.time.ReadablePeriod) period87);
        org.joda.time.Interval interval89 = interval52.gap((org.joda.time.ReadableInterval) interval88);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hours" + "'", str41, "hours");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 53230963L + "'", long47 == 53230963L);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z" + "'", str63, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 1L + "'", long66 == 1L);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateMidnight75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(interval89);
    }

    @Test
    public void test10273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10273");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.MutableInterval mutableInterval7 = interval5.toMutableInterval();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(mutableInterval7);
    }

    @Test
    public void test10274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10274");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight6 = property4.addToCopy((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone9);
        int int11 = dateMidnight10.getEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateMidnight10.toDateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusDays(9);
        int int16 = dateTime13.getEra();
        org.joda.time.DateTime dateTime17 = dateTime13.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime17.getZone();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight6.withZoneRetainFields(dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight6.withWeekOfWeekyear(2);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight6.minusMonths(17);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight6.plusYears((-102059));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight26);
    }

    @Test
    public void test10275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10275");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfDay(0);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.yearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.plusMillis(53390189);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test10276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10276");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Date date3 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay4 = org.joda.time.TimeOfDay.fromDateFields(date3);
        int int5 = timeOfDay4.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property10 = timeOfDay9.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay12 = property10.addNoWrapToCopy(3);
        org.joda.time.TimeOfDay timeOfDay13 = property10.withMaximumValue();
        org.joda.time.DurationField durationField14 = property10.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay15 = property10.withMaximumValue();
        java.util.Locale locale18 = new java.util.Locale("hi!", "");
        java.lang.String str19 = locale18.getDisplayVariant();
        boolean boolean20 = locale18.hasExtensions();
        int int21 = property10.getMaximumShortTextLength(locale18);
        java.lang.String str22 = locale1.getDisplayCountry(locale18);
        java.util.Locale locale26 = new java.util.Locale("PT2H0.035S", "UTC", "PT0S");
        java.lang.String str27 = locale1.getDisplayLanguage(locale26);
        java.util.Calendar calendar28 = java.util.Calendar.getInstance(locale26);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean30 = calendar28.isSet(199);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 199");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertEquals(date3.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "China" + "'", str22, "China");
        org.junit.Assert.assertEquals(locale26.toString(), "pt2h0.035s_UTC_PT0S");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Chinese" + "'", str27, "Chinese");
        org.junit.Assert.assertNotNull(calendar28);
// flaky:         org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1645455400015,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=40,MILLISECOND=15,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test10277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10277");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.add((long) 3);
        mutableDateTime13.setDayOfMonth((int) (byte) 10);
        mutableDateTime13.add((long) 6);
        mutableDateTime13.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.monthOfYear();
        mutableDateTime13.setTime((org.joda.time.ReadableInstant) dateMidnight20);
        int int23 = property8.compareTo((org.joda.time.ReadableInstant) mutableDateTime13);
        mutableDateTime13.setDayOfYear(13);
        mutableDateTime13.setMillisOfDay(53337603);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime13.dayOfMonth();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime13.monthOfYear();
        mutableDateTime13.setWeekyear(101);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test10278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10278");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Interval interval7 = interval5.withEndMillis((long) 2);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.add((long) 3);
        org.joda.time.Interval interval13 = interval5.withEnd((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime18 = property16.add((long) 3);
        mutableDateTime18.setDayOfMonth((int) (byte) 10);
        mutableDateTime18.add((long) 6);
        mutableDateTime18.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property26 = dateMidnight25.monthOfYear();
        mutableDateTime18.setTime((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        java.lang.Object obj36 = mutablePeriod35.clone();
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(0L, 100L, periodType39, chronology40);
        mutablePeriod35.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone44);
        org.joda.time.Duration duration46 = mutablePeriod35.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight45);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight30.plus((org.joda.time.ReadableDuration) duration46);
        org.joda.time.LocalDate localDate48 = dateMidnight47.toLocalDate();
        org.joda.time.Period period50 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.hours();
        java.lang.String str52 = durationFieldType51.toString();
        org.joda.time.Period period54 = period50.withField(durationFieldType51, 2);
        org.joda.time.Period period56 = period54.withMillis((int) '#');
        org.joda.time.LocalDate localDate57 = localDate48.minus((org.joda.time.ReadablePeriod) period56);
        int int58 = period56.getMonths();
        org.joda.time.Period period60 = period56.minusMinutes(8);
        org.joda.time.Interval interval61 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime18, (org.joda.time.ReadablePeriod) period56);
        org.joda.time.Interval interval62 = interval61.toInterval();
        boolean boolean63 = interval13.isAfter((org.joda.time.ReadableInterval) interval62);
        boolean boolean65 = interval13.equals((java.lang.Object) 213410700000L);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "PT0.100S");
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hours" + "'", str52, "hours");
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test10279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10279");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        int int6 = timeOfDay2.size();
        org.joda.time.DateTime dateTime7 = timeOfDay2.toDateTimeToday();
        org.joda.time.DateTime dateTime9 = dateTime7.plusWeeks(21);
        org.joda.time.DateTime.Property property10 = dateTime9.hourOfDay();
        int int11 = dateTime9.getMillisOfSecond();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test10280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10280");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withYearOfCentury(4);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone10);
        int int12 = dateMidnight11.getEra();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(0L, 100L, periodType15, chronology16);
        java.lang.Object obj18 = mutablePeriod17.clone();
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        mutablePeriod17.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone26);
        org.joda.time.Duration duration28 = mutablePeriod17.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight11, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone31);
        int int33 = dateMidnight32.getEra();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(0L, 100L, periodType36, chronology37);
        java.lang.Object obj39 = mutablePeriod38.clone();
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(0L, 100L, periodType42, chronology43);
        mutablePeriod38.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod44);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone47);
        org.joda.time.Duration duration49 = mutablePeriod38.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight48);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight32, (org.joda.time.ReadableDuration) duration49);
        boolean boolean51 = duration28.isLongerThan((org.joda.time.ReadableDuration) duration49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime8.plus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.LocalDateTime.Property property53 = localDateTime8.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime54 = property53.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusSeconds(2000);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "PT0.100S");
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "PT0.100S");
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
    }

    @Test
    public void test10281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10281");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology4);
        org.joda.time.Interval interval6 = yearMonthDay5.toInterval();
        org.joda.time.DateTime dateTime7 = yearMonthDay5.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property9 = dateTime7.property(dateTimeFieldType8);
        org.joda.time.DateTime.Property property10 = dateTime7.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone12);
        int int14 = dateMidnight13.getEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateMidnight13.toDateTime(chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusDays(9);
        int int19 = dateTime16.getEra();
        org.joda.time.DateTime dateTime20 = dateTime16.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime20.getZone();
        java.lang.String str22 = dateTimeZone21.toString();
        org.joda.time.DateTime dateTime23 = dateTime7.toDateTime(dateTimeZone21);
        boolean boolean24 = dateTimeZone21.isFixed();
        int int26 = dateTimeZone21.getOffset(0L);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone21);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 55, dateTimeZone21);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Etc/UTC" + "'", str22, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test10282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10282");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        mutableDateTime4.setDayOfMonth((int) (byte) 10);
        mutableDateTime4.add((long) 6);
        mutableDateTime4.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.monthOfYear();
        mutableDateTime4.setTime((org.joda.time.ReadableInstant) dateMidnight11);
        java.util.GregorianCalendar gregorianCalendar14 = dateMidnight11.toGregorianCalendar();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight11.withYearOfEra((int) (short) 10);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight11.minus((-86377001L));
        int int19 = dateMidnight18.getMinuteOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(gregorianCalendar14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test10283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10283");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight5 = property4.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight6 = property4.roundFloorCopy();
        org.joda.time.DateMidnight dateMidnight7 = property4.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.withWeekOfWeekyear(2023);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2023 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight7);
    }

    @Test
    public void test10284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10284");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        java.util.Locale locale5 = new java.util.Locale("hi!", "");
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.LocalDateTime localDateTime7 = property2.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYear((-1));
        int int10 = localDateTime7.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusDays(12);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusMonths(53359356);
        org.joda.time.Chronology chronology15 = localDateTime12.getChronology();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022" + "'", str6, "2022");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology15);
    }

    @Test
    public void test10285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10285");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(53243063, 21, 32769);
        java.util.Locale locale5 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar.Builder builder6 = builder4.setLocale(locale5);
        java.util.Calendar.Builder builder8 = builder4.setLenient(true);
        java.util.Locale locale9 = java.util.Locale.CHINESE;
        java.lang.String str10 = locale9.getDisplayVariant();
        java.lang.String str11 = locale9.getDisplayCountry();
        java.util.Calendar.Builder builder12 = builder8.setLocale(locale9);
        java.util.Calendar.Builder builder16 = builder8.setWeekDate(12, 57, 57);
        java.util.Calendar.Builder builder18 = builder8.setLenient(false);
        java.util.Calendar.Builder builder21 = builder18.set(3, 53322289);
        java.util.Calendar.Builder builder25 = builder21.setTimeOfDay(53455652, 53303564, 0);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test10286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10286");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(0L, 100L, periodType2, chronology3);
        java.lang.Object obj5 = mutablePeriod4.clone();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        org.joda.time.Duration duration15 = mutablePeriod4.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight14);
        mutablePeriod4.addMillis(0);
        mutablePeriod4.setMonths(0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone36);
        org.joda.time.Duration duration38 = mutablePeriod27.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight22.plus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        java.lang.Object obj47 = mutablePeriod46.clone();
        java.lang.String str48 = mutablePeriod46.toString();
        mutableDateTime41.add((org.joda.time.ReadablePeriod) mutablePeriod46, 2022);
        mutablePeriod4.setPeriod((org.joda.time.ReadableInstant) dateMidnight39, (org.joda.time.ReadableInstant) mutableDateTime41);
        org.joda.time.MutableDateTime mutableDateTime52 = mutableDateTime41.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime52.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime54 = property53.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime55 = property53.roundCeiling();
        mutableDateTime55.setYear((int) '4');
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "P52YT3M22.200S");
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0.100S");
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PT0.100S" + "'", str48, "PT0.100S");
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
    }

    @Test
    public void test10287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10287");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 86399);
        org.joda.time.DateTime dateTime3 = dateTime1.withYearOfEra(1329237);
        org.junit.Assert.assertNotNull(dateTime3);
    }

    @Test
    public void test10288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10288");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter3.withPivotYear((int) (byte) 10);
        boolean boolean6 = dateTimeFormatter5.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter5.withPivotYear(2000);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withPivotYear(53255370);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone12);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        java.lang.Object obj19 = mutablePeriod18.clone();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        mutablePeriod18.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone27);
        org.joda.time.Duration duration29 = mutablePeriod18.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight13.plus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.LocalDate localDate31 = dateMidnight30.toLocalDate();
        org.joda.time.Chronology chronology32 = localDate31.getChronology();
        java.lang.String str33 = chronology32.toString();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.weekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter10.withChronology(chronology32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter10.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight37 = org.joda.time.DateMidnight.parse("1969-02-21T14:50:15.966", dateTimeFormatter36);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "PT0.100S");
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ISOChronology[UTC]" + "'", str33, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
    }

    @Test
    public void test10289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10289");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        mutableDateTime4.setDayOfMonth((int) (byte) 10);
        mutableDateTime4.add((long) 6);
        mutableDateTime4.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.monthOfYear();
        mutableDateTime4.setTime((org.joda.time.ReadableInstant) dateMidnight11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone15);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, 100L, periodType19, chronology20);
        java.lang.Object obj22 = mutablePeriod21.clone();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone30);
        org.joda.time.Duration duration32 = mutablePeriod21.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight16.plus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.LocalDate localDate34 = dateMidnight33.toLocalDate();
        org.joda.time.Period period36 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        java.lang.String str38 = durationFieldType37.toString();
        org.joda.time.Period period40 = period36.withField(durationFieldType37, 2);
        org.joda.time.Period period42 = period40.withMillis((int) '#');
        org.joda.time.LocalDate localDate43 = localDate34.minus((org.joda.time.ReadablePeriod) period42);
        int int44 = period42.getMonths();
        org.joda.time.Period period46 = period42.minusMinutes(8);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime4, (org.joda.time.ReadablePeriod) period42);
        org.joda.time.Interval interval48 = interval47.toInterval();
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(0L, 100L, periodType51, chronology52);
        mutablePeriod53.setMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone57);
        int int59 = dateMidnight58.getEra();
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(0L, 100L, periodType62, chronology63);
        java.lang.Object obj65 = mutablePeriod64.clone();
        org.joda.time.PeriodType periodType68 = null;
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(0L, 100L, periodType68, chronology69);
        mutablePeriod64.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod70);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateMidnight dateMidnight74 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone73);
        org.joda.time.Duration duration75 = mutablePeriod64.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight74);
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight58, (org.joda.time.ReadableDuration) duration75);
        mutablePeriod53.add((org.joda.time.ReadableDuration) duration75);
        org.joda.time.Interval interval78 = interval47.withDurationAfterStart((org.joda.time.ReadableDuration) duration75);
        org.joda.time.DateTime dateTime79 = interval47.getStart();
        org.joda.time.DateTime dateTime80 = interval47.getStart();
        org.joda.time.DateTime dateTime81 = interval47.getStart();
        org.joda.time.DateTime dateTime83 = dateTime81.plusDays(69);
        org.joda.time.DateTime dateTime85 = dateTime83.withMillis((long) 292278994);
        int int86 = dateTime83.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "PT0.100S");
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hours" + "'", str38, "hours");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "PT0.100S");
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 11 + "'", int86 == 11);
    }

    @Test
    public void test10290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10290");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime localTime13 = property12.withMinimumValue();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.Period period16 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.hours();
        java.lang.String str18 = durationFieldType17.toString();
        org.joda.time.Period period20 = period16.withField(durationFieldType17, 2);
        org.joda.time.Period period22 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        java.lang.String str24 = durationFieldType23.toString();
        org.joda.time.Period period26 = period22.withField(durationFieldType23, 2);
        org.joda.time.Period period27 = period20.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Weeks weeks28 = period20.toStandardWeeks();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadablePeriod) period20);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType36 = periodType35.withMillisRemoved();
        org.joda.time.Period period37 = new org.joda.time.Period((long) 10, (long) '#', periodType36);
        org.joda.time.Period period38 = new org.joda.time.Period((long) (short) 10, (long) 53233428, periodType36);
        org.joda.time.Period period39 = new org.joda.time.Period((long) 2, periodType36);
        org.joda.time.Period period40 = interval29.toPeriod(periodType36);
        org.joda.time.LocalTime localTime41 = localTime13.minus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(0L, 100L, periodType46, chronology47);
        java.lang.Object obj49 = mutablePeriod48.clone();
        java.lang.String str50 = mutablePeriod48.toString();
        mutableDateTime43.add((org.joda.time.ReadablePeriod) mutablePeriod48, 2022);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime43.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone55);
        int int57 = dateMidnight56.getEra();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = dateMidnight56.toDateTime(chronology58);
        org.joda.time.DateTime dateTime61 = dateTime59.plusDays(9);
        int int62 = dateTime59.getEra();
        org.joda.time.DateTime dateTime63 = dateTime59.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone64 = dateTime63.getZone();
        long long67 = dateTimeZone64.adjustOffset((long) 5, true);
        mutableDateTime43.setZoneRetainFields(dateTimeZone64);
        java.util.TimeZone timeZone69 = dateTimeZone64.toTimeZone();
        boolean boolean70 = timeZone69.observesDaylightTime();
        boolean boolean71 = timeZone69.observesDaylightTime();
        java.lang.String str72 = timeZone69.getID();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.forTimeZone(timeZone69);
        org.joda.time.DateTime dateTime74 = localTime13.toDateTimeToday(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hours" + "'", str18, "hours");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hours" + "'", str24, "hours");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(weeks28);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "PT0.100S" + "'", str50, "PT0.100S");
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 5L + "'", long67 == 5L);
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Etc/UTC" + "'", str72, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateTime74);
    }

    @Test
    public void test10291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10291");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(53243063, 21, 32769);
        java.util.Calendar.Builder builder6 = builder4.setLenient(true);
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.getDefault(category7);
        java.util.Locale locale9 = java.util.Locale.getDefault(category7);
        java.util.Calendar.Builder builder10 = builder4.setLocale(locale9);
        java.util.Calendar calendar11 = builder4.build();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(0L, 100L, periodType18, chronology19);
        java.lang.Object obj21 = mutablePeriod20.clone();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        mutablePeriod20.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        org.joda.time.Duration duration31 = mutablePeriod20.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight15.plus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.LocalDate localDate33 = dateMidnight32.toLocalDate();
        org.joda.time.Chronology chronology34 = localDate33.getChronology();
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(0L, 100L, periodType37, chronology38);
        java.lang.Object obj40 = mutablePeriod39.clone();
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(0L, 100L, periodType43, chronology44);
        mutablePeriod39.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod45);
        int int47 = mutablePeriod45.getMinutes();
        org.joda.time.Period period49 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.hours();
        java.lang.String str51 = durationFieldType50.toString();
        org.joda.time.Period period53 = period49.withField(durationFieldType50, 2);
        boolean boolean54 = mutablePeriod45.isSupported(durationFieldType50);
        long long57 = chronology34.add((org.joda.time.ReadablePeriod) mutablePeriod45, (long) 53230763, 2);
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 11, chronology34);
        org.joda.time.DateTimeField dateTimeField59 = chronology34.year();
        org.joda.time.DurationField durationField60 = chronology34.millis();
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight(0L, dateTimeZone62);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone65);
        int int67 = dateMidnight66.getEra();
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod(0L, 100L, periodType70, chronology71);
        java.lang.Object obj73 = mutablePeriod72.clone();
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod(0L, 100L, periodType76, chronology77);
        mutablePeriod72.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod78);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateMidnight dateMidnight82 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone81);
        org.joda.time.Duration duration83 = mutablePeriod72.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight82);
        org.joda.time.Period period84 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight66, (org.joda.time.ReadableDuration) duration83);
        org.joda.time.PeriodType periodType85 = null;
        org.joda.time.Period period86 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight63, (org.joda.time.ReadableDuration) duration83, periodType85);
        org.joda.time.Period period88 = period86.withDays((-1));
        org.joda.time.Period period90 = period88.minusDays((int) (byte) 0);
        org.joda.time.Duration duration91 = period88.toStandardDuration();
        long long94 = chronology34.add((org.joda.time.ReadablePeriod) period88, (long) 53304145, (-260254));
        org.joda.time.Period period96 = period88.plusYears(70);
        boolean boolean97 = calendar11.before((java.lang.Object) period88);
        int int98 = period88.getYears();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1680129502588800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=53243154,MONTH=5,WEEK_OF_YEAR=26,WEEK_OF_MONTH=4,DAY_OF_MONTH=20,DAY_OF_YEAR=171,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "PT0.100S");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertEquals(obj40.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hours" + "'", str51, "hours");
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 53230963L + "'", long57 == 53230963L);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "PT0.100S");
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 22485972878745L + "'", long94 == 22485972878745L);
        org.junit.Assert.assertNotNull(period96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
    }

    @Test
    public void test10292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10292");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        int int5 = yearMonthDay4.size();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        int int15 = dateMidnight14.getEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateMidnight14.toDateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusDays(9);
        int int20 = dateTime17.getEra();
        org.joda.time.DateTime dateTime21 = dateTime17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime21.getZone();
        java.lang.String str23 = dateTimeZone22.toString();
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((int) (byte) -1, 1, (int) (short) 1, (int) (short) 10, (int) (short) 0, 8, dateTimeZone22);
        java.lang.String str26 = dateTimeZone22.toString();
        org.joda.time.Interval interval27 = yearMonthDay4.toInterval(dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone30);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, 100L, periodType34, chronology35);
        java.lang.Object obj37 = mutablePeriod36.clone();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(0L, 100L, periodType40, chronology41);
        mutablePeriod36.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone45);
        org.joda.time.Duration duration47 = mutablePeriod36.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight31.plus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.LocalDate localDate49 = dateMidnight48.toLocalDate();
        org.joda.time.Chronology chronology50 = localDate49.getChronology();
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(0L, 100L, periodType53, chronology54);
        java.lang.Object obj56 = mutablePeriod55.clone();
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(0L, 100L, periodType59, chronology60);
        mutablePeriod55.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod61);
        int int63 = mutablePeriod61.getMinutes();
        org.joda.time.Period period65 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType66 = org.joda.time.DurationFieldType.hours();
        java.lang.String str67 = durationFieldType66.toString();
        org.joda.time.Period period69 = period65.withField(durationFieldType66, 2);
        boolean boolean70 = mutablePeriod61.isSupported(durationFieldType66);
        long long73 = chronology50.add((org.joda.time.ReadablePeriod) mutablePeriod61, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.Chronology chronology75 = chronology50.withZone(dateTimeZone74);
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((long) 11, chronology75);
        org.joda.time.DateTimeField dateTimeField77 = chronology75.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = dateTimeField77.getType();
        int int79 = yearMonthDay4.indexOf(dateTimeFieldType78);
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateMidnight dateMidnight82 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone81);
        int int83 = dateMidnight82.getEra();
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.DateTime dateTime85 = dateMidnight82.toDateTime(chronology84);
        org.joda.time.DateTime dateTime87 = dateTime85.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight88 = dateTime87.toDateMidnight();
        org.joda.time.DateMidnight.Property property89 = dateMidnight88.era();
        int int90 = dateMidnight88.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight92 = dateMidnight88.plusWeeks(70);
        org.joda.time.DateMidnight dateMidnight94 = new org.joda.time.DateMidnight((long) (byte) 1);
        boolean boolean95 = dateMidnight92.isEqual((org.joda.time.ReadableInstant) dateMidnight94);
        org.joda.time.DateTime dateTime96 = yearMonthDay4.toDateTime((org.joda.time.ReadableInstant) dateMidnight92);
        org.joda.time.DateMidnight.Property property97 = dateMidnight92.weekyear();
        org.joda.time.DateMidnight dateMidnight98 = property97.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight99 = property97.withMinimumValue();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Etc/UTC" + "'", str23, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Etc/UTC" + "'", str26, "Etc/UTC");
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "PT0.100S");
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "hours" + "'", str67, "hours");
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 53230963L + "'", long73 == 53230963L);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateMidnight88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(dateMidnight92);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(dateTime96);
        org.junit.Assert.assertNotNull(property97);
        org.junit.Assert.assertNotNull(dateMidnight98);
        org.junit.Assert.assertNotNull(dateMidnight99);
    }

    @Test
    public void test10293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10293");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(1959, (-4459672), 3277270, 57, 37, 57, 53614730);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 57 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10294");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        int int4 = dateMidnight3.getEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateMidnight3.toDateTime(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusDays(9);
        org.joda.time.DateTime.Property property9 = dateTime6.monthOfYear();
        org.joda.time.DateTime dateTime10 = property9.roundFloorCopy();
        org.joda.time.DateTime dateTime12 = property9.setCopy(9);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMillis(121);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = property18.addWrapField((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone28);
        int int30 = dateMidnight29.getEra();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateMidnight29.toDateTime(chronology31);
        org.joda.time.DateTime dateTime34 = dateTime32.plusDays(9);
        int int35 = dateTime32.getEra();
        org.joda.time.DateTime dateTime36 = dateTime32.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = dateTime36.getZone();
        java.lang.String str38 = dateTimeZone37.toString();
        org.joda.time.YearMonthDay yearMonthDay39 = new org.joda.time.YearMonthDay(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((int) (byte) -1, 1, (int) (short) 1, (int) (short) 10, (int) (short) 0, 8, dateTimeZone37);
        java.lang.String str41 = dateTimeZone37.toString();
        mutableDateTime20.setZoneRetainFields(dateTimeZone37);
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) 36, dateTimeZone37);
        org.joda.time.DateTime dateTime44 = dateTime12.toDateTime(dateTimeZone37);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(0L, dateTimeZone37);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Etc/UTC" + "'", str38, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Etc/UTC" + "'", str41, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test10295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10295");
        java.io.IOException iOException1 = new java.io.IOException("Feb 21, 2022 2:49:17 PM");
    }

    @Test
    public void test10296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10296");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(0L, 100L, periodType7, chronology8);
        java.lang.Object obj10 = mutablePeriod9.clone();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.Duration duration20 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.LocalDate localDate22 = dateMidnight21.toLocalDate();
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        java.lang.String str24 = chronology23.toString();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.secondOfDay();
        org.joda.time.Interval interval26 = new org.joda.time.Interval(0L, (long) 1, chronology23);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(10L);
        long long30 = chronology23.set((org.joda.time.ReadablePartial) yearMonthDay28, (long) 8);
        org.joda.time.YearMonthDay.Property property31 = yearMonthDay28.year();
        org.joda.time.YearMonthDay yearMonthDay33 = property31.setCopy(16);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT0.100S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[UTC]" + "'", str24, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 8L + "'", long30 == 8L);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
    }

    @Test
    public void test10297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10297");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        java.util.Locale locale5 = new java.util.Locale("hi!", "");
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.LocalDateTime localDateTime7 = property2.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYear((-1));
        int int10 = localDateTime7.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusDays(12);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.era();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withYearOfCentury(52);
        org.joda.time.Period period18 = org.joda.time.Period.months((-260254));
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withPeriodAdded((org.joda.time.ReadablePeriod) period18, 51);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022" + "'", str6, "2022");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test10298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10298");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0L, 100L, periodType6, chronology7);
        java.lang.Object obj9 = mutablePeriod8.clone();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.Duration duration19 = mutablePeriod8.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight3.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.LocalDate localDate21 = dateMidnight20.toLocalDate();
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        int int35 = mutablePeriod33.getMinutes();
        org.joda.time.Period period37 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.hours();
        java.lang.String str39 = durationFieldType38.toString();
        org.joda.time.Period period41 = period37.withField(durationFieldType38, 2);
        boolean boolean42 = mutablePeriod33.isSupported(durationFieldType38);
        long long45 = chronology22.add((org.joda.time.ReadablePeriod) mutablePeriod33, (long) 53230763, 2);
        boolean boolean46 = durationFieldType0.isSupported(chronology22);
        org.joda.time.DateTimeField dateTimeField47 = chronology22.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField48 = chronology22.yearOfEra();
        org.joda.time.DateTimeField dateTimeField49 = chronology22.hourOfDay();
        org.joda.time.YearMonthDay yearMonthDay50 = new org.joda.time.YearMonthDay(chronology22);
        long long54 = chronology22.add(0L, (long) (short) 1, 200);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT0.100S");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hours" + "'", str39, "hours");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 53230963L + "'", long45 == 53230963L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 200L + "'", long54 == 200L);
    }

    @Test
    public void test10299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10299");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight6 = property4.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property4.getFieldType();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.year();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusSeconds((int) (byte) 10);
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        boolean boolean16 = dateTimeFieldType7.isSupported(chronology15);
        org.joda.time.DurationField durationField17 = chronology15.hours();
        java.lang.String str18 = chronology15.toString();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone20);
        int int22 = dateMidnight21.getEra();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateMidnight21.toDateTime(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusDays(9);
        int int27 = dateTime24.getEra();
        org.joda.time.DateTime dateTime28 = dateTime24.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime28.getZone();
        long long32 = dateTimeZone29.adjustOffset((long) 5, true);
        boolean boolean34 = dateTimeZone29.isStandardOffset((long) 3);
        org.joda.time.Chronology chronology35 = chronology15.withZone(dateTimeZone29);
        org.joda.time.DurationField durationField36 = chronology15.minutes();
        // The following exception was thrown during execution in test generation
        try {
            long long44 = chronology15.getDateTimeMillis(0, 10196, 82800100, 90193, 53292560, 260254, 53532665);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 90193 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[UTC]" + "'", str18, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 5L + "'", long32 == 5L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test10300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10300");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime localTime13 = property12.withMinimumValue();
        org.joda.time.LocalTime localTime15 = property12.addCopy((int) ' ');
        org.joda.time.LocalTime.Property property16 = localTime15.secondOfMinute();
        org.joda.time.LocalTime localTime18 = localTime15.minusMinutes(0);
        int[] intArray19 = localTime15.getValues();
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.monthOfYear();
        org.joda.time.DateMidnight dateMidnight22 = property21.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight23 = property21.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight25 = property21.addToCopy((long) 6);
        int int26 = dateMidnight25.getMinuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType27.getRangeDurationType();
        org.joda.time.DateMidnight.Property property29 = dateMidnight25.property(dateTimeFieldType27);
        boolean boolean30 = localTime15.isSupported(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 32, 0, 0]");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test10301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10301");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.DateTime dateTime1 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate3 = localDate0.withCenturyOfEra(1986);
        org.joda.time.LocalDate localDate5 = localDate0.minusMonths(455376);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    public void test10302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10302");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.hours();
        java.lang.String str3 = durationFieldType2.toString();
        org.joda.time.Period period5 = period1.withField(durationFieldType2, 2);
        org.joda.time.Period period7 = period5.withWeeks((int) (byte) 1);
        int int8 = period7.getDays();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType10 = period7.getFieldType(53230763);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hours" + "'", str3, "hours");
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test10303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10303");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Interval interval7 = interval5.withEndMillis((long) 2);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.add((long) 3);
        org.joda.time.Interval interval13 = interval5.withEnd((org.joda.time.ReadableInstant) mutableDateTime12);
        long long14 = interval13.getEndMillis();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1640995200003L + "'", long14 == 1640995200003L);
    }

    @Test
    public void test10304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10304");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusMinutes(5);
        org.joda.time.DateTime.Property property8 = dateTime5.dayOfYear();
        org.joda.time.DateTime dateTime9 = property8.roundFloorCopy();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test10305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10305");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(53307551, 365, 1970, 0);
        org.joda.time.Period period6 = org.joda.time.Period.hours(2);
        org.joda.time.Minutes minutes7 = period6.toStandardMinutes();
        org.joda.time.Period period9 = period6.withSeconds(147693);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) period6);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(period9);
    }

    @Test
    public void test10306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10306");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        java.util.Locale locale5 = new java.util.Locale("hi!", "");
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.LocalDateTime localDateTime7 = property2.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYear((-1));
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minusMinutes(3);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withDayOfWeek(53638496);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53638496 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022" + "'", str6, "2022");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test10307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10307");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay10 = property8.addNoWrapToCopy(3);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.minusMillis(14);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay10.plusHours(45);
        org.joda.time.TimeOfDay.Property property15 = timeOfDay14.hourOfDay();
        int int16 = timeOfDay14.getMillisOfSecond();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test10308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10308");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(887, 588);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 887 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10309");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfDay(0);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone8);
        int int10 = dateMidnight9.getEra();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = dateMidnight9.toDateTime(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusWeeks(0);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear((int) (short) 10);
        org.joda.time.DateTime dateTime18 = dateTime16.withCenturyOfEra(70);
        int int19 = property6.getDifference((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = dateTime18.toDateTime();
        org.joda.time.DateTime dateTime22 = dateTime18.minusMillis(53579);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-260254) + "'", int19 == (-260254));
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test10310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10310");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay10 = property8.addNoWrapToCopy(3);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.withMinuteOfHour(0);
        org.joda.time.Chronology chronology13 = timeOfDay12.getChronology();
        org.joda.time.TimeOfDay.Property property14 = timeOfDay12.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay16 = property14.setCopy(19);
        org.joda.time.TimeOfDay timeOfDay17 = property14.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay19 = property14.addToCopy(52);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
    }

    @Test
    public void test10311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10311");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(10);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay0.millisOfSecond();
        int int4 = property3.get();
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = locale5.getDisplayVariant();
        java.util.Date date8 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay9 = org.joda.time.TimeOfDay.fromDateFields(date8);
        int int10 = timeOfDay9.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay9.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property15 = timeOfDay14.secondOfMinute();
        java.util.Locale locale18 = new java.util.Locale("hi!", "");
        java.lang.String str19 = property15.getAsShortText(locale18);
        java.lang.String str20 = locale5.getDisplayScript(locale18);
        int int21 = property3.getMaximumShortTextLength(locale5);
        org.joda.time.tz.NameProvider nameProvider22 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale23 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str26 = nameProvider22.getName(locale23, "", "0035-10-10");
        java.lang.String str27 = locale23.getCountry();
        java.lang.String str28 = property3.getAsText(locale23);
        java.util.Locale locale32 = new java.util.Locale("1970-01-01 00:00:00", "Mon Feb 21 14:48:23 GMT 2022", "0035-10-10");
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleKeys();
        java.lang.String str34 = property3.getAsShortText(locale32);
        java.util.Locale.Category category35 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale36 = java.util.Locale.CANADA_FRENCH;
        java.util.Date date38 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay39 = org.joda.time.TimeOfDay.fromDateFields(date38);
        int int40 = timeOfDay39.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay42 = timeOfDay39.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay44 = timeOfDay42.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property45 = timeOfDay44.secondOfMinute();
        java.util.Locale locale48 = new java.util.Locale("hi!", "");
        java.lang.String str49 = property45.getAsShortText(locale48);
        java.util.Set<java.lang.String> strSet50 = locale48.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet51 = locale48.getUnicodeLocaleAttributes();
        java.lang.String str52 = locale36.getDisplayName(locale48);
        java.util.Locale.setDefault(category35, locale36);
        java.lang.String str54 = locale32.getDisplayLanguage(locale36);
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(nameProvider22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr_CA");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "CA" + "'", str27, "CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "0" + "'", str28, "0");
        org.junit.Assert.assertEquals(locale32.toString(), "1970-01-01 00:00:00_MON FEB 21 14:48:23 GMT 2022_0035-10-10");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "0" + "'", str34, "0");
        org.junit.Assert.assertTrue("'" + category35 + "' != '" + java.util.Locale.Category.FORMAT + "'", category35.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr_CA");
        org.junit.Assert.assertEquals(date38.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertEquals(locale48.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "0" + "'", str49, "0");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "French (Canada)" + "'", str52, "French (Canada)");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1970-01-01 00:00:00" + "'", str54, "1970-01-01 00:00:00");
    }

    @Test
    public void test10312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10312");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        java.lang.String str3 = dateTimeZone1.getName((-61725661916121L));
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(dateTimeZone1);
        int int5 = timeOfDay4.size();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:00.010" + "'", str3, "+00:00:00.010");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
    }

    @Test
    public void test10313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10313");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0L, 100L, periodType6, chronology7);
        java.lang.Object obj9 = mutablePeriod8.clone();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.Duration duration19 = mutablePeriod8.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight3.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.LocalDate localDate21 = dateMidnight20.toLocalDate();
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        int int35 = mutablePeriod33.getMinutes();
        org.joda.time.Period period37 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.hours();
        java.lang.String str39 = durationFieldType38.toString();
        org.joda.time.Period period41 = period37.withField(durationFieldType38, 2);
        boolean boolean42 = mutablePeriod33.isSupported(durationFieldType38);
        long long45 = chronology22.add((org.joda.time.ReadablePeriod) mutablePeriod33, (long) 53230763, 2);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 11, chronology22);
        org.joda.time.DateTimeField dateTimeField47 = chronology22.era();
        org.joda.time.LocalDate localDate48 = org.joda.time.LocalDate.now(chronology22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate50 = localDate48.withYearOfCentury(53097311);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53097311 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT0.100S");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hours" + "'", str39, "hours");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 53230963L + "'", long45 == 53230963L);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDate48);
    }

    @Test
    public void test10314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10314");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime24 = property22.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime25 = property22.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone27);
        int int29 = dateMidnight28.getEra();
        org.joda.time.DateMidnight.Property property30 = dateMidnight28.monthOfYear();
        org.joda.time.DateMidnight dateMidnight32 = property30.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property30.getFieldType();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime25.property(dateTimeFieldType33);
        boolean boolean35 = dateMidnight2.isSupported(dateTimeFieldType33);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight2.minusWeeks(14);
        int int38 = dateMidnight37.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime43 = property41.add((long) 3);
        mutableDateTime43.setDayOfMonth((int) (byte) 10);
        mutableDateTime43.add((long) 6);
        mutableDateTime43.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property51 = dateMidnight50.monthOfYear();
        mutableDateTime43.setTime((org.joda.time.ReadableInstant) dateMidnight50);
        java.util.GregorianCalendar gregorianCalendar53 = dateMidnight50.toGregorianCalendar();
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight50.withYearOfEra((int) (short) 10);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight50.minus((-86377001L));
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight50.plusYears((-260254));
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) 4, (long) (-1));
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight(0L, dateTimeZone64);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone67);
        int int69 = dateMidnight68.getEra();
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(0L, 100L, periodType72, chronology73);
        java.lang.Object obj75 = mutablePeriod74.clone();
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod(0L, 100L, periodType78, chronology79);
        mutablePeriod74.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod80);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.DateMidnight dateMidnight84 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone83);
        org.joda.time.Duration duration85 = mutablePeriod74.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight84);
        org.joda.time.Period period86 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight68, (org.joda.time.ReadableDuration) duration85);
        org.joda.time.PeriodType periodType87 = null;
        org.joda.time.Period period88 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight65, (org.joda.time.ReadableDuration) duration85, periodType87);
        mutablePeriod62.add((org.joda.time.ReadableDuration) duration85);
        org.joda.time.DateMidnight dateMidnight90 = dateMidnight59.plus((org.joda.time.ReadableDuration) duration85);
        org.joda.time.Period period91 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight37, (org.joda.time.ReadableDuration) duration85);
        org.joda.time.DateMidnight.Property property92 = dateMidnight37.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight94 = dateMidnight37.withYearOfEra((int) (byte) 1);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 25 + "'", int38 == 25);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(gregorianCalendar53);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "PT0.100S");
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(dateMidnight90);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(dateMidnight94);
    }

    @Test
    public void test10315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10315");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-890), 866);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 866");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10316");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.seconds();
        org.joda.time.PeriodType periodType1 = periodType0.withSecondsRemoved();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology5);
        org.joda.time.Interval interval7 = yearMonthDay6.toInterval();
        org.joda.time.Period period8 = interval7.toPeriod();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology12);
        org.joda.time.Interval interval14 = yearMonthDay13.toInterval();
        org.joda.time.Period period15 = interval14.toPeriod();
        long long16 = interval14.getStartMillis();
        org.joda.time.Interval interval17 = interval7.overlap((org.joda.time.ReadableInterval) interval14);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        java.lang.Object obj26 = mutablePeriod25.clone();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        mutablePeriod25.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        org.joda.time.Duration duration36 = mutablePeriod25.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight20.plus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.LocalDate localDate38 = dateMidnight37.toLocalDate();
        org.joda.time.Chronology chronology39 = localDate38.getChronology();
        java.lang.String str40 = chronology39.toString();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.secondOfDay();
        org.joda.time.Interval interval42 = interval7.withChronology(chronology39);
        boolean boolean43 = periodType1.equals((java.lang.Object) interval42);
        org.joda.time.PeriodType periodType44 = periodType1.withMinutesRemoved();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-61038316800000L) + "'", long16 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "PT0.100S");
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "ISOChronology[UTC]" + "'", str40, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(periodType44);
    }

    @Test
    public void test10317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10317");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.withHourOfDay(53633204);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53633204 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
    }

    @Test
    public void test10318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10318");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight5 = property4.roundHalfFloorCopy();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        int int8 = dateTimeField6.getMaximumValue((-169257599990L));
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
    }

    @Test
    public void test10319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10319");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.add((long) 3);
        mutableDateTime13.setDayOfMonth((int) (byte) 10);
        mutableDateTime13.add((long) 6);
        mutableDateTime13.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.monthOfYear();
        mutableDateTime13.setTime((org.joda.time.ReadableInstant) dateMidnight20);
        int int23 = property8.compareTo((org.joda.time.ReadableInstant) mutableDateTime13);
        mutableDateTime13.setDayOfYear(13);
        mutableDateTime13.setMillisOfDay(53337603);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime13.dayOfMonth();
        mutableDateTime13.addMillis(25);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test10320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10320");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withYearOfCentury(4);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMinutes(11);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfYear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime14 = property12.addWrapFieldToCopy(53243063);
        org.joda.time.Interval interval15 = property12.toInterval();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(interval15);
    }

    @Test
    public void test10321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10321");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 53230763, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.minusYears(53233428);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay51.year();
        org.joda.time.YearMonthDay yearMonthDay56 = property54.setCopy(21);
        int int57 = property54.get();
        org.joda.time.YearMonthDay yearMonthDay58 = property54.withMaximumValue();
        int int59 = property54.getMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay60 = property54.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay61 = property54.withMaximumValue();
        int int62 = property54.get();
        org.joda.time.YearMonthDay yearMonthDay63 = property54.withMaximumValue();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 53230963L + "'", long49 == 53230963L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 292278993 + "'", int59 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1970 + "'", int62 == 1970);
        org.junit.Assert.assertNotNull(yearMonthDay63);
    }

    @Test
    public void test10322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10322");
        org.joda.time.Period period1 = org.joda.time.Period.days(3277270);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test10323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10323");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.DateTime dateTime9 = localDate8.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property10 = localDate8.year();
        org.joda.time.LocalDate.Property property11 = localDate8.year();
        org.joda.time.LocalDate localDate12 = property11.getLocalDate();
        int int13 = localDate12.getDayOfYear();
        org.joda.time.LocalDate localDate15 = localDate12.withWeekyear(27);
        org.joda.time.DateTime dateTime16 = localDate15.toDateTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test10324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10324");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.add((long) 3);
        mutableDateTime13.setDayOfMonth((int) (byte) 10);
        mutableDateTime13.add((long) 6);
        mutableDateTime13.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.monthOfYear();
        mutableDateTime13.setTime((org.joda.time.ReadableInstant) dateMidnight20);
        int int23 = property8.compareTo((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.TimeOfDay timeOfDay25 = property8.addNoWrapToCopy(5);
        org.joda.time.TimeOfDay timeOfDay27 = property8.setCopy(8);
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay27.minusMinutes(53361675);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(timeOfDay29);
    }

    @Test
    public void test10325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10325");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0L, 100L, periodType6, chronology7);
        java.lang.Object obj9 = mutablePeriod8.clone();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.Duration duration19 = mutablePeriod8.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight3.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.LocalDate localDate21 = dateMidnight20.toLocalDate();
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        int int35 = mutablePeriod33.getMinutes();
        org.joda.time.Period period37 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.hours();
        java.lang.String str39 = durationFieldType38.toString();
        org.joda.time.Period period41 = period37.withField(durationFieldType38, 2);
        boolean boolean42 = mutablePeriod33.isSupported(durationFieldType38);
        long long45 = chronology22.add((org.joda.time.ReadablePeriod) mutablePeriod33, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Chronology chronology47 = chronology22.withZone(dateTimeZone46);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 11, chronology47);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone50);
        int int52 = dateMidnight51.getEra();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = dateMidnight51.toDateTime(chronology53);
        org.joda.time.DateTime dateTime56 = dateTime54.plusDays(9);
        org.joda.time.DateTime dateTime57 = dateTime54.toDateTimeISO();
        org.joda.time.DateTime.Property property58 = dateTime54.yearOfCentury();
        org.joda.time.DateTime dateTime60 = dateTime54.withWeekOfWeekyear(35);
        org.joda.time.Duration duration61 = mutablePeriod48.toDurationFrom((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime63 = dateTime54.withYear(51);
        int int64 = dateTime54.getYearOfCentury();
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT0.100S");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hours" + "'", str39, "hours");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 53230963L + "'", long45 == 53230963L);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 70 + "'", int64 == 70);
    }

    @Test
    public void test10326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10326");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("752");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test10327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10327");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate9 = localDate3.plusDays((int) (short) 100);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.year();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMillis((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYear((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.plusMillis(0);
        org.joda.time.Chronology chronology21 = localDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((java.lang.Object) localDate3, chronology21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'hourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test10328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10328");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Period period22 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        java.lang.String str24 = durationFieldType23.toString();
        org.joda.time.Period period26 = period22.withField(durationFieldType23, 2);
        org.joda.time.Period period28 = period26.withMillis((int) '#');
        org.joda.time.LocalDate localDate29 = localDate20.minus((org.joda.time.ReadablePeriod) period28);
        int int30 = period28.getMonths();
        int int31 = period28.getMinutes();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hours" + "'", str24, "hours");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test10329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10329");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime.Property property13 = localTime9.millisOfDay();
        org.joda.time.LocalTime localTime14 = property13.withMaximumValue();
        org.joda.time.LocalTime localTime15 = property13.roundCeilingCopy();
        org.joda.time.LocalTime localTime17 = property13.addNoWrapToCopy(53335569);
        org.joda.time.LocalTime localTime19 = property13.addCopy(50400000);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test10330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10330");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfYear();
        org.joda.time.LocalDate localDate22 = property21.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate23 = property21.getLocalDate();
        org.joda.time.LocalDate localDate25 = localDate23.minusDays(53097298);
        // The following exception was thrown during execution in test generation
        try {
            int int27 = localDate25.getValue(53755796);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 53755796");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
    }

    @Test
    public void test10331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10331");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.add((long) 3);
        mutableDateTime13.setDayOfMonth((int) (byte) 10);
        mutableDateTime13.add((long) 6);
        mutableDateTime13.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.monthOfYear();
        mutableDateTime13.setTime((org.joda.time.ReadableInstant) dateMidnight20);
        int int23 = property8.compareTo((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.TimeOfDay timeOfDay25 = property8.addWrapFieldToCopy(53286779);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getTimeZone("");
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        long long32 = dateTimeZone29.adjustOffset((long) 53233428, true);
        org.joda.time.DateTime dateTime33 = timeOfDay25.toDateTimeToday(dateTimeZone29);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 53233428L + "'", long32 == 53233428L);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test10332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10332");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType4 = periodType3.withMillisRemoved();
        org.joda.time.Period period5 = new org.joda.time.Period((long) 10, (long) '#', periodType4);
        org.joda.time.PeriodType periodType6 = periodType4.withSecondsRemoved();
        org.joda.time.PeriodType periodType7 = periodType6.withHoursRemoved();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology11);
        org.joda.time.Interval interval13 = yearMonthDay12.toInterval();
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType16 = periodType15.withMillisRemoved();
        int int17 = periodType16.size();
        org.joda.time.Period period19 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.hours();
        java.lang.String str21 = durationFieldType20.toString();
        org.joda.time.Period period23 = period19.withField(durationFieldType20, 2);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone25);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone40);
        org.joda.time.Duration duration42 = mutablePeriod31.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight26.plus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.LocalDate localDate44 = dateMidnight43.toLocalDate();
        org.joda.time.Chronology chronology45 = localDate44.getChronology();
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(0L, 100L, periodType48, chronology49);
        java.lang.Object obj51 = mutablePeriod50.clone();
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(0L, 100L, periodType54, chronology55);
        mutablePeriod50.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod56);
        int int58 = mutablePeriod56.getMinutes();
        org.joda.time.Period period60 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.hours();
        java.lang.String str62 = durationFieldType61.toString();
        org.joda.time.Period period64 = period60.withField(durationFieldType61, 2);
        boolean boolean65 = mutablePeriod56.isSupported(durationFieldType61);
        long long68 = chronology45.add((org.joda.time.ReadablePeriod) mutablePeriod56, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.Chronology chronology70 = chronology45.withZone(dateTimeZone69);
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate(chronology70);
        org.joda.time.DurationField durationField72 = chronology70.halfdays();
        org.joda.time.DurationField durationField73 = durationFieldType20.getField(chronology70);
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((java.lang.Object) interval13, periodType16, chronology70);
        org.joda.time.PeriodType periodType77 = null;
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod(0L, 100L, periodType77, chronology78);
        java.lang.Object obj80 = mutablePeriod79.clone();
        org.joda.time.Interval interval81 = interval13.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod79);
        boolean boolean82 = interval13.isBeforeNow();
        org.joda.time.Chronology chronology83 = interval13.getChronology();
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod(0L, periodType7, chronology83);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod84.setHours(53349265);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'hours'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hours" + "'", str21, "hours");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "hours" + "'", str62, "hours");
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 53230963L + "'", long68 == 53230963L);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(obj80);
        org.junit.Assert.assertEquals(obj80.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj80), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj80), "PT0.100S");
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(chronology83);
    }

    @Test
    public void test10333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10333");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime localTime14 = localTime9.plusMillis((-292275054));
        org.joda.time.LocalTime localTime16 = localTime9.minusHours(13);
        org.joda.time.LocalTime.Property property17 = localTime9.minuteOfHour();
        org.joda.time.LocalTime localTime18 = property17.roundCeilingCopy();
        org.joda.time.LocalTime localTime20 = property17.addCopy((-260254));
        org.joda.time.LocalTime localTime22 = localTime20.plusSeconds(121);
        org.joda.time.LocalTime localTime24 = localTime22.plusMillis((int) (byte) -1);
        int int25 = localTime22.size();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone27);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        java.lang.Object obj34 = mutablePeriod33.clone();
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(0L, 100L, periodType37, chronology38);
        mutablePeriod33.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone42);
        org.joda.time.Duration duration44 = mutablePeriod33.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight43);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight28.plus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.LocalDate localDate46 = dateMidnight45.toLocalDate();
        org.joda.time.Period period48 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.hours();
        java.lang.String str50 = durationFieldType49.toString();
        org.joda.time.Period period52 = period48.withField(durationFieldType49, 2);
        org.joda.time.Period period54 = period52.withMillis((int) '#');
        org.joda.time.LocalDate localDate55 = localDate46.minus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.LocalDate localDate57 = localDate55.minusYears(11);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.era();
        boolean boolean59 = localDate57.isSupported(dateTimeFieldType58);
        org.joda.time.LocalDate localDate61 = localDate57.withMonthOfYear(6);
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.time();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType64 = dateTimeFieldType63.getRangeDurationType();
        java.lang.String str65 = durationFieldType64.getName();
        int int66 = periodType62.indexOf(durationFieldType64);
        org.joda.time.PeriodType periodType67 = periodType62.withSecondsRemoved();
        org.joda.time.PeriodType periodType68 = periodType62.withMonthsRemoved();
        org.joda.time.PeriodType periodType69 = periodType62.withHoursRemoved();
        org.joda.time.PeriodType periodType70 = periodType69.withYearsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period71 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime22, (org.joda.time.ReadablePartial) localDate61, periodType69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "PT0.100S");
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hours" + "'", str50, "hours");
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "days" + "'", str65, "days");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(periodType70);
    }

    @Test
    public void test10334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10334");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(53243063, 21, 32769);
        java.util.Locale locale5 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar.Builder builder6 = builder4.setLocale(locale5);
        java.util.Calendar.Builder builder11 = builder6.setTimeOfDay((int) (byte) 10, 53256552, (int) '#', 53243308);
        java.util.Calendar.Builder builder13 = builder6.setLenient(true);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test10335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10335");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfDay(100);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusSeconds(0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.year();
        org.joda.time.LocalDateTime.Property property10 = localDateTime3.weekyear();
        int int11 = localDateTime3.getYearOfEra();
        org.joda.time.LocalDateTime.Property property12 = localDateTime3.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone15);
        int int17 = dateMidnight16.getEra();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = dateMidnight16.toDateTime(chronology18);
        org.joda.time.DateTime dateTime21 = dateTime19.minusWeeks(0);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.year();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusMillis((int) (short) 10);
        org.joda.time.DateTime dateTime30 = dateTime21.withFields((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        int int34 = dateMidnight33.getEra();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = dateMidnight33.toDateTime(chronology35);
        org.joda.time.DateTime dateTime38 = dateTime36.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight39 = dateTime38.toDateMidnight();
        org.joda.time.DateMidnight.Property property40 = dateMidnight39.era();
        int int41 = dateMidnight39.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight39.plusWeeks(70);
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 1);
        boolean boolean46 = dateMidnight43.isEqual((org.joda.time.ReadableInstant) dateMidnight45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DateMidnight.Property property48 = dateMidnight45.property(dateTimeFieldType47);
        boolean boolean49 = localDateTime29.isSupported(dateTimeFieldType47);
        int int50 = localDateTime13.get(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2021 + "'", int11 == 2021);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 347 + "'", int50 == 347);
    }

    @Test
    public void test10336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10336");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.DateTime dateTime9 = localDate8.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property10 = localDate8.year();
        org.joda.time.LocalDate.Property property11 = localDate8.year();
        org.joda.time.LocalDate localDate12 = property11.getLocalDate();
        org.joda.time.LocalDate localDate13 = property11.roundHalfFloorCopy();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getScript();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate17 = property11.setCopy("Italian", locale15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Italian\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test10337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10337");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime localTime13 = property12.withMinimumValue();
        org.joda.time.LocalTime localTime15 = localTime13.withMinuteOfHour(47);
        org.joda.time.LocalTime localTime17 = localTime13.plusMillis(25);
        org.joda.time.LocalTime.Property property18 = localTime13.millisOfDay();
        org.joda.time.LocalTime localTime20 = property18.addCopy(53243434);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.weekyear();
        java.lang.String str23 = dateTimeField22.getName();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "weekyear" + "'", str23, "weekyear");
    }

    @Test
    public void test10338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10338");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(0L, 100L, periodType4, chronology5);
        java.lang.Object obj7 = mutablePeriod6.clone();
        java.lang.String str8 = mutablePeriod6.toString();
        mutableDateTime1.add((org.joda.time.ReadablePeriod) mutablePeriod6, 2022);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        int int15 = dateMidnight14.getEra();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = dateMidnight14.toDateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusDays(9);
        int int20 = dateTime17.getEra();
        org.joda.time.DateTime dateTime21 = dateTime17.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime21.getZone();
        long long25 = dateTimeZone22.adjustOffset((long) 5, true);
        mutableDateTime1.setZoneRetainFields(dateTimeZone22);
        java.util.TimeZone timeZone27 = dateTimeZone22.toTimeZone();
        boolean boolean28 = timeZone27.observesDaylightTime();
        timeZone27.setID("");
        java.util.TimeZone.setDefault(timeZone27);
        java.util.TimeZone.setDefault(timeZone27);
        // The following exception was thrown during execution in test generation
        try {
            int int39 = timeZone27.getOffset(1977, 10, (-20), 53443241, (-4104), 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era 1977");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0.100S" + "'", str8, "PT0.100S");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 5L + "'", long25 == 5L);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test10339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10339");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime.Property property13 = localTime9.millisOfDay();
        org.joda.time.LocalTime localTime15 = property13.addNoWrapToCopy((int) '4');
        org.joda.time.LocalTime localTime16 = property13.withMaximumValue();
        org.joda.time.LocalTime localTime17 = property13.withMaximumValue();
        org.joda.time.LocalTime localTime18 = property13.getLocalTime();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone20);
        int int22 = dateMidnight21.getEra();
        int int23 = dateMidnight21.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight21.withField(dateTimeFieldType24, 3);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight21.minusDays((int) (short) 10);
        org.joda.time.DateTime dateTime29 = dateMidnight28.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime34 = property32.add((long) 3);
        mutableDateTime34.setDayOfMonth((int) (byte) 10);
        mutableDateTime34.add((long) 6);
        mutableDateTime34.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property42 = dateMidnight41.monthOfYear();
        mutableDateTime34.setTime((org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight28, (org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.LocalTime localTime45 = localTime18.plus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period46 = period44.toPeriod();
        org.joda.time.Period period48 = period44.minusYears(35);
        org.joda.time.Period period50 = period48.plusYears(667);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
    }

    @Test
    public void test10340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10340");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay10 = property8.addNoWrapToCopy(3);
        org.joda.time.TimeOfDay timeOfDay11 = property8.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay13 = property8.addToCopy(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType15 = timeOfDay13.getFieldType(3120000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3120000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
    }

    @Test
    public void test10341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10341");
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone5);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(0L, 100L, periodType9, chronology10);
        java.lang.Object obj12 = mutablePeriod11.clone();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(0L, 100L, periodType15, chronology16);
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone20);
        org.joda.time.Duration duration22 = mutablePeriod11.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight6.plus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.LocalDate localDate24 = dateMidnight23.toLocalDate();
        org.joda.time.Chronology chronology25 = localDate24.getChronology();
        java.lang.String str26 = chronology25.toString();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.secondOfDay();
        org.joda.time.Interval interval28 = new org.joda.time.Interval(0L, (long) 1, chronology25);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(10L);
        long long32 = chronology25.set((org.joda.time.ReadablePartial) yearMonthDay30, (long) 8);
        org.joda.time.DateTimeField dateTimeField33 = chronology25.secondOfDay();
        org.joda.time.YearMonthDay yearMonthDay34 = new org.joda.time.YearMonthDay(chronology25);
        org.joda.time.DateTimeField dateTimeField35 = chronology25.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone37);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        java.lang.Object obj44 = mutablePeriod43.clone();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0L, 100L, periodType47, chronology48);
        mutablePeriod43.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone52);
        org.joda.time.Duration duration54 = mutablePeriod43.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight38.plus((org.joda.time.ReadableDuration) duration54);
        org.joda.time.LocalDate localDate56 = dateMidnight55.toLocalDate();
        org.joda.time.Period period58 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.hours();
        java.lang.String str60 = durationFieldType59.toString();
        org.joda.time.Period period62 = period58.withField(durationFieldType59, 2);
        org.joda.time.Period period64 = period62.withMillis((int) '#');
        org.joda.time.LocalDate localDate65 = localDate56.minus((org.joda.time.ReadablePeriod) period64);
        int int66 = localDate56.getWeekyear();
        int[] intArray68 = chronology25.get((org.joda.time.ReadablePartial) localDate56, (long) 36);
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((-61725661886402L), 172817988L, chronology25);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone71);
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight72.minusMonths((int) (short) 0);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight74.withChronology(chronology75);
        int int77 = dateMidnight76.getMinuteOfHour();
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight76.withCenturyOfEra(2);
        org.joda.time.DurationFieldType durationFieldType80 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateMidnight dateMidnight82 = dateMidnight79.withFieldAdded(durationFieldType80, 22);
        mutablePeriod69.set(durationFieldType80, 53756674);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "PT0.100S");
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[UTC]" + "'", str26, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 8L + "'", long32 == 8L);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "PT0.100S");
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hours" + "'", str60, "hours");
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1970 + "'", int66 == 1970);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[1970, 1, 1]");
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(durationFieldType80);
        org.junit.Assert.assertNotNull(dateMidnight82);
    }

    @Test
    public void test10342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10342");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(53243063, 21, 32769);
        java.util.Locale locale5 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar.Builder builder6 = builder4.setLocale(locale5);
        java.util.Calendar.Builder builder11 = builder6.setTimeOfDay((int) (byte) 10, 53256552, (int) '#', 53243308);
        java.util.Calendar.Builder builder15 = builder11.setWeekDate((int) (byte) 1, 70, (int) 'a');
        java.util.TimeZone timeZone17 = java.util.TimeZone.getTimeZone("");
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forTimeZone(timeZone17);
        java.util.Calendar.Builder builder19 = builder11.setTimeZone(timeZone17);
        java.util.Calendar.Builder builder24 = builder11.setTimeOfDay(0, 53363, 60000, 53256552);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType28 = periodType27.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(4000L, (long) (byte) 100, periodType27);
        int[] intArray30 = mutablePeriod29.getValues();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder31 = builder11.setFields(intArray30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0, 0]");
    }

    @Test
    public void test10343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10343");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.seconds();
        org.joda.time.PeriodType periodType2 = periodType1.withSecondsRemoved();
        org.joda.time.PeriodType periodType3 = periodType1.withDaysRemoved();
        org.joda.time.Period period4 = new org.joda.time.Period((long) 758, periodType3);
        org.joda.time.format.PeriodFormatter periodFormatter5 = null;
        java.lang.String str6 = period4.toString(periodFormatter5);
        java.lang.String str7 = period4.toString();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT0S" + "'", str7, "PT0S");
    }

    @Test
    public void test10344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10344");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.year();
        org.joda.time.DurationField durationField8 = chronology6.halfdays();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test10345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10345");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay4.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.plus((long) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight10, chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.withCenturyOfEra(8);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology19);
        org.joda.time.Interval interval21 = yearMonthDay20.toInterval();
        org.joda.time.DateTime dateTime22 = yearMonthDay20.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property24 = dateTime22.property(dateTimeFieldType23);
        org.joda.time.DateTime.Property property25 = dateTime22.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone27);
        int int29 = dateMidnight28.getEra();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = dateMidnight28.toDateTime(chronology30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusDays(9);
        int int34 = dateTime31.getEra();
        org.joda.time.DateTime dateTime35 = dateTime31.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime35.getZone();
        java.lang.String str37 = dateTimeZone36.toString();
        org.joda.time.DateTime dateTime38 = dateTime22.toDateTime(dateTimeZone36);
        boolean boolean39 = dateTimeZone36.isFixed();
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) 7, dateTimeZone36);
        org.joda.time.MutableDateTime mutableDateTime41 = dateMidnight14.toMutableDateTime(dateTimeZone36);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.secondOfMinute();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime41.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField44 = property43.getField();
        org.joda.time.ReadablePartial readablePartial45 = null;
        int int46 = dateTimeField44.getMaximumValue(readablePartial45);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Etc/UTC" + "'", str37, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 59 + "'", int46 == 59);
    }

    @Test
    public void test10346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10346");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime.Property property13 = localTime9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.LocalTime localTime16 = property13.addNoWrapToCopy((int) '#');
        org.joda.time.LocalTime localTime18 = property13.addCopy(23);
        org.joda.time.LocalTime localTime19 = property13.withMaximumValue();
        int int20 = localTime19.getMillisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.millisOfDay();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime22.secondOfDay();
        java.lang.String str25 = property24.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime27 = property24.add((long) 15);
        java.util.GregorianCalendar gregorianCalendar28 = mutableDateTime27.toGregorianCalendar();
        mutableDateTime27.addMillis(2004);
        mutableDateTime27.addWeekyears(19);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime27.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField34 = property33.getField();
        boolean boolean35 = localTime19.equals((java.lang.Object) property33);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 999 + "'", int20 == 999);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(gregorianCalendar28);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test10347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10347");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        java.util.Locale locale5 = new java.util.Locale("hi!", "");
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.LocalDateTime localDateTime7 = property2.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYear((-1));
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.minusMinutes(3);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusMonths(2525);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022" + "'", str6, "2022");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test10348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10348");
        org.joda.time.Period period2 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType3 = org.joda.time.DurationFieldType.hours();
        java.lang.String str4 = durationFieldType3.toString();
        org.joda.time.Period period6 = period2.withField(durationFieldType3, 2);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone8);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        java.lang.Object obj15 = mutablePeriod14.clone();
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(0L, 100L, periodType18, chronology19);
        mutablePeriod14.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone23);
        org.joda.time.Duration duration25 = mutablePeriod14.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight9.plus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.LocalDate localDate27 = dateMidnight26.toLocalDate();
        org.joda.time.Chronology chronology28 = localDate27.getChronology();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        java.lang.Object obj34 = mutablePeriod33.clone();
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(0L, 100L, periodType37, chronology38);
        mutablePeriod33.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod39);
        int int41 = mutablePeriod39.getMinutes();
        org.joda.time.Period period43 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.hours();
        java.lang.String str45 = durationFieldType44.toString();
        org.joda.time.Period period47 = period43.withField(durationFieldType44, 2);
        boolean boolean48 = mutablePeriod39.isSupported(durationFieldType44);
        long long51 = chronology28.add((org.joda.time.ReadablePeriod) mutablePeriod39, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.Chronology chronology53 = chronology28.withZone(dateTimeZone52);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate(chronology53);
        org.joda.time.DurationField durationField55 = chronology53.halfdays();
        org.joda.time.DurationField durationField56 = durationFieldType3.getField(chronology53);
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 11, chronology53);
        org.joda.time.DateTimeField dateTimeField58 = chronology53.centuryOfEra();
        org.joda.time.Period period60 = org.joda.time.Period.millis(7);
        org.joda.time.Period period62 = period60.minusDays(35);
        org.joda.time.MutablePeriod mutablePeriod63 = period60.toMutablePeriod();
        int[] intArray65 = chronology53.get((org.joda.time.ReadablePeriod) period60, 5L);
        org.joda.time.format.PeriodFormatter periodFormatter66 = null;
        java.lang.String str67 = period60.toString(periodFormatter66);
        org.joda.time.Period period69 = period60.minusYears(21);
        org.joda.time.Period period71 = period69.plusYears(12);
        org.joda.time.Period period73 = period71.minusMillis(53736392);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hours" + "'", str4, "hours");
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "PT0.100S");
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hours" + "'", str45, "hours");
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 53230963L + "'", long51 == 53230963L);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(mutablePeriod63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[0, 0, 0, 0, 0, 0, 0, 5]");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "PT0.007S" + "'", str67, "PT0.007S");
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(period73);
    }

    @Test
    public void test10349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10349");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        org.joda.time.Duration duration21 = mutablePeriod10.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight5.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.LocalDate localDate23 = dateMidnight22.toLocalDate();
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        java.lang.Object obj30 = mutablePeriod29.clone();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        int int37 = mutablePeriod35.getMinutes();
        org.joda.time.Period period39 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.hours();
        java.lang.String str41 = durationFieldType40.toString();
        org.joda.time.Period period43 = period39.withField(durationFieldType40, 2);
        boolean boolean44 = mutablePeriod35.isSupported(durationFieldType40);
        long long47 = chronology24.add((org.joda.time.ReadablePeriod) mutablePeriod35, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Chronology chronology49 = chronology24.withZone(dateTimeZone48);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 11, chronology49);
        org.joda.time.DurationField durationField51 = chronology49.days();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (-1), (long) (short) 0, chronology49);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone54);
        int int56 = dateMidnight55.getEra();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = dateMidnight55.toDateTime(chronology57);
        org.joda.time.DateTime dateTime60 = dateTime58.minusWeeks(0);
        org.joda.time.Interval interval61 = interval52.withStart((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTime.Property property62 = dateTime58.hourOfDay();
        org.joda.time.DateTime dateTime64 = dateTime58.withWeekyear(427);
        org.joda.time.DateTime dateTime66 = dateTime64.plusDays(3682080);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hours" + "'", str41, "hours");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 53230963L + "'", long47 == 53230963L);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
    }

    @Test
    public void test10350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10350");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.era();
        int int10 = dateMidnight8.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight8.plusWeeks(70);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight8.minusWeeks((int) ' ');
        java.util.GregorianCalendar gregorianCalendar15 = dateMidnight14.toGregorianCalendar();
        gregorianCalendar15.setFirstDayOfWeek(53243063);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((java.lang.Object) gregorianCalendar15);
        // The following exception was thrown during execution in test generation
        try {
            int int20 = gregorianCalendar15.get(57);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 57");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(gregorianCalendar15);
    }

    @Test
    public void test10351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10351");
        org.joda.time.Period period4 = new org.joda.time.Period(12, 2, (int) ' ', (int) (short) 10);
        org.joda.time.Period period6 = period4.plusDays(1970);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone8);
        int int10 = dateMidnight9.getEra();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = dateMidnight9.toDateTime(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusWeeks(0);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear((int) (short) 10);
        org.joda.time.Duration duration17 = period4.toDurationTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property18 = dateTime16.weekOfWeekyear();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) dateTime16);
        org.joda.time.DateTime dateTime21 = dateTime16.withMillis((long) 35);
        org.joda.time.DateTime.Property property22 = dateTime21.yearOfCentury();
        org.joda.time.DurationField durationField23 = property22.getRangeDurationField();
        org.joda.time.DateTime dateTime24 = property22.getDateTime();
        org.joda.time.DateTime dateTime26 = property22.addToCopy(50400000);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test10352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10352");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        int int4 = dateMidnight3.getEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateMidnight3.toDateTime(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusDays(9);
        int int9 = dateTime6.getEra();
        org.joda.time.DateTime dateTime10 = dateTime6.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime10.getZone();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        boolean boolean14 = dateTimeZone11.isStandardOffset(53230963L);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 19, dateTimeZone11);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusMonths((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight19.withDayOfMonth((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime24 = dateMidnight23.toMutableDateTimeISO();
        org.joda.time.Period period26 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.hours();
        java.lang.String str28 = durationFieldType27.toString();
        org.joda.time.Period period30 = period26.withField(durationFieldType27, 2);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.millis();
        int int32 = period26.get(durationFieldType31);
        mutableDateTime24.add(durationFieldType31, 0);
        boolean boolean35 = localDateTime15.isSupported(durationFieldType31);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hours" + "'", str28, "hours");
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test10353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10353");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusYears(6);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        org.joda.time.Duration duration21 = mutablePeriod10.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight5.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.LocalDate localDate23 = dateMidnight22.toLocalDate();
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        java.lang.Object obj30 = mutablePeriod29.clone();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        int int37 = mutablePeriod35.getMinutes();
        org.joda.time.Period period39 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.hours();
        java.lang.String str41 = durationFieldType40.toString();
        org.joda.time.Period period43 = period39.withField(durationFieldType40, 2);
        boolean boolean44 = mutablePeriod35.isSupported(durationFieldType40);
        long long47 = chronology24.add((org.joda.time.ReadablePeriod) mutablePeriod35, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Chronology chronology49 = chronology24.withZone(dateTimeZone48);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate(chronology49);
        org.joda.time.DurationField durationField51 = chronology49.halfdays();
        org.joda.time.DateTimeField dateTimeField52 = chronology49.secondOfMinute();
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay0.withChronologyRetainFields(chronology49);
        org.joda.time.LocalDate localDate54 = yearMonthDay0.toLocalDate();
        org.joda.time.DateMidnight dateMidnight55 = yearMonthDay0.toDateMidnight();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(chronology56);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.year();
        java.util.Locale locale61 = new java.util.Locale("hi!", "");
        java.lang.String str62 = property58.getAsText(locale61);
        org.joda.time.LocalDateTime localDateTime63 = property58.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.withYear((-1));
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.minusMinutes(3);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.dayOfMonth();
        int int69 = localDateTime67.getSecondOfMinute();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime(chronology70);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.withMillisOfDay(100);
        int int76 = localDateTime75.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = localDateTime75.getFieldType((int) (byte) 1);
        java.util.Date date79 = localDateTime75.toDate();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime75.minusWeeks(292278993);
        int int82 = localDateTime67.compareTo((org.joda.time.ReadablePartial) localDateTime81);
        // The following exception was thrown during execution in test generation
        try {
            int int83 = yearMonthDay0.compareTo((org.joda.time.ReadablePartial) localDateTime81);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hours" + "'", str41, "hours");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 53230963L + "'", long47 == 53230963L);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertEquals(locale61.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "2022" + "'", str62, "2022");
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(property68);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 41 + "'", int69 == 41);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 13 + "'", int76 == 13);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(date79);
        org.junit.Assert.assertEquals(date79.toString(), "Mon Dec 13 00:00:00 GMT+00:00 2021");
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
    }

    @Test
    public void test10354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10354");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.add((long) 3);
        mutableDateTime13.setDayOfMonth((int) (byte) 10);
        mutableDateTime13.add((long) 6);
        mutableDateTime13.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.monthOfYear();
        mutableDateTime13.setTime((org.joda.time.ReadableInstant) dateMidnight20);
        int int23 = property8.compareTo((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.TimeOfDay timeOfDay25 = property8.addNoWrapToCopy(5);
        org.joda.time.TimeOfDay timeOfDay27 = property8.setCopy(8);
        org.joda.time.DateTimeField dateTimeField28 = property8.getField();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        java.lang.Object obj34 = mutablePeriod33.clone();
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(0L, 100L, periodType37, chronology38);
        mutablePeriod33.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod39);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone42);
        org.joda.time.Duration duration44 = mutablePeriod33.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight43);
        mutablePeriod33.addMillis(0);
        mutablePeriod33.setMonths(0);
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone50);
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(0L, 100L, periodType54, chronology55);
        java.lang.Object obj57 = mutablePeriod56.clone();
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(0L, 100L, periodType60, chronology61);
        mutablePeriod56.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod62);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone65);
        org.joda.time.Duration duration67 = mutablePeriod56.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight66);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight51.plus((org.joda.time.ReadableDuration) duration67);
        org.joda.time.MutableDateTime mutableDateTime70 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod(0L, 100L, periodType73, chronology74);
        java.lang.Object obj76 = mutablePeriod75.clone();
        java.lang.String str77 = mutablePeriod75.toString();
        mutableDateTime70.add((org.joda.time.ReadablePeriod) mutablePeriod75, 2022);
        mutablePeriod33.setPeriod((org.joda.time.ReadableInstant) dateMidnight68, (org.joda.time.ReadableInstant) mutableDateTime70);
        mutableDateTime70.addWeekyears((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property83 = mutableDateTime70.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime84 = property83.roundFloor();
        int int85 = property8.compareTo((org.joda.time.ReadableInstant) mutableDateTime84);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "P52YT3M22.200S");
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(obj57);
        org.junit.Assert.assertEquals(obj57.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj57), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj57), "PT0.100S");
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(mutableDateTime70);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "PT0.100S" + "'", str77, "PT0.100S");
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(mutableDateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
    }

    @Test
    public void test10355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10355");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        int int4 = dateMidnight3.getEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateMidnight3.toDateTime(chronology5);
        long long7 = dateTime6.getMillis();
        org.joda.time.DateTime dateTime9 = dateTime6.withMillis(100L);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone11);
        int int13 = dateMidnight12.getEra();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateMidnight12.toDateTime(chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusDays(9);
        int int18 = dateTime15.getEra();
        org.joda.time.DateTime dateTime19 = dateTime15.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime19.getZone();
        org.joda.time.DateTime dateTime21 = dateTime6.withZoneRetainFields(dateTimeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 11, dateTimeZone20);
        org.joda.time.LocalDate localDate24 = localDate22.withDayOfYear(15);
        org.joda.time.LocalDate localDate26 = localDate22.withDayOfYear(10);
        org.joda.time.LocalDate.Property property27 = localDate26.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone30);
        int int32 = dateMidnight31.getEra();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = dateMidnight31.toDateTime(chronology33);
        long long35 = dateTime34.getMillis();
        org.joda.time.DateTime dateTime37 = dateTime34.withMillis(100L);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone39);
        int int41 = dateMidnight40.getEra();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = dateMidnight40.toDateTime(chronology42);
        org.joda.time.DateTime dateTime45 = dateTime43.plusDays(9);
        int int46 = dateTime43.getEra();
        org.joda.time.DateTime dateTime47 = dateTime43.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone48 = dateTime47.getZone();
        org.joda.time.DateTime dateTime49 = dateTime34.withZoneRetainFields(dateTimeZone48);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 11, dateTimeZone48);
        boolean boolean52 = dateTimeZone48.equals((java.lang.Object) 11);
        org.joda.time.DateTime dateTime53 = localDate26.toDateTimeAtMidnight(dateTimeZone48);
        int int54 = dateTime53.getMinuteOfDay();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test10356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10356");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(0L, 100L, periodType2, chronology3);
        java.lang.Object obj5 = mutablePeriod4.clone();
        mutablePeriod4.addHours(5);
        mutablePeriod4.addMillis(100);
        mutablePeriod4.setYears(448);
        int int12 = mutablePeriod4.getMillis();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "P448YT5H0.200S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "P448YT5H0.200S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "P448YT5H0.200S");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 200 + "'", int12 == 200);
    }

    @Test
    public void test10357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10357");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        mutableDateTime4.setDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime4.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime10 = property7.set(10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(0L, 100L, periodType17, chronology18);
        java.lang.Object obj20 = mutablePeriod19.clone();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        mutablePeriod19.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone28);
        org.joda.time.Duration duration30 = mutablePeriod19.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight14.plus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.LocalDate localDate32 = dateMidnight31.toLocalDate();
        org.joda.time.Chronology chronology33 = localDate32.getChronology();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(0L, 100L, periodType36, chronology37);
        java.lang.Object obj39 = mutablePeriod38.clone();
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(0L, 100L, periodType42, chronology43);
        mutablePeriod38.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod44);
        int int46 = mutablePeriod44.getMinutes();
        org.joda.time.Period period48 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.hours();
        java.lang.String str50 = durationFieldType49.toString();
        org.joda.time.Period period52 = period48.withField(durationFieldType49, 2);
        boolean boolean53 = mutablePeriod44.isSupported(durationFieldType49);
        long long56 = chronology33.add((org.joda.time.ReadablePeriod) mutablePeriod44, (long) 53230763, 2);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 11, chronology33);
        org.joda.time.DateTimeField dateTimeField58 = chronology33.year();
        mutableDateTime10.setChronology(chronology33);
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime10.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime62 = property60.addWrapField((int) (byte) 0);
        mutableDateTime62.addMillis(16);
        mutableDateTime62.setMillis((long) 53292560);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "PT0.100S");
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "hours" + "'", str50, "hours");
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 53230963L + "'", long56 == 53230963L);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(mutableDateTime62);
    }

    @Test
    public void test10358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10358");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.add((long) 3);
        mutableDateTime13.setDayOfMonth((int) (byte) 10);
        mutableDateTime13.add((long) 6);
        mutableDateTime13.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.monthOfYear();
        mutableDateTime13.setTime((org.joda.time.ReadableInstant) dateMidnight20);
        int int23 = property8.compareTo((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.TimeOfDay timeOfDay25 = property8.addNoWrapToCopy(5);
        org.joda.time.TimeOfDay timeOfDay27 = property8.setCopy(8);
        org.joda.time.TimeOfDay timeOfDay28 = property8.getTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone30);
        int int32 = dateMidnight31.getEra();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = dateMidnight31.toDateTime(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusDays(9);
        int int37 = dateTime34.getEra();
        org.joda.time.DateTime dateTime38 = dateTime34.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone39 = dateTime38.getZone();
        java.lang.String str40 = dateTimeZone39.toString();
        org.joda.time.DateTime dateTime41 = timeOfDay28.toDateTimeToday(dateTimeZone39);
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime41.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime43 = dateTime41.toDateTimeISO();
        org.joda.time.DateTime dateTime44 = dateTime41.withLaterOffsetAtOverlap();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Etc/UTC" + "'", str40, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test10359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10359");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis(6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.year();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusSeconds((int) (byte) 10);
        org.joda.time.Chronology chronology17 = localDateTime16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        int int21 = dateMidnight20.getEra();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = dateMidnight20.toDateTime(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusDays(9);
        int int26 = dateTime23.getEra();
        org.joda.time.DateTime dateTime27 = dateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime27.getZone();
        java.lang.String str29 = dateTimeZone28.toString();
        org.joda.time.Chronology chronology30 = chronology17.withZone(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime5.toDateTime(chronology30);
        org.joda.time.Period period33 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.hours();
        java.lang.String str35 = durationFieldType34.toString();
        org.joda.time.Period period37 = period33.withField(durationFieldType34, 2);
        org.joda.time.Period period39 = period37.minusMinutes(21);
        org.joda.time.Days days40 = period37.toStandardDays();
        org.joda.time.Period period41 = period37.toPeriod();
        org.joda.time.DateTime dateTime43 = dateTime31.withPeriodAdded((org.joda.time.ReadablePeriod) period41, 53690396);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Etc/UTC" + "'", str29, "Etc/UTC");
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hours" + "'", str35, "hours");
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(days40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test10360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10360");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime4 = dateTime3.toDateTime();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.year();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusSeconds((int) (byte) 10);
        org.joda.time.Chronology chronology12 = localDateTime11.getChronology();
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(chronology12);
        org.joda.time.DateTime dateTime14 = dateTime3.toDateTime(chronology12);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(35, 53558619, chronology12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for hourOfDay must not be larger than 23");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test10361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10361");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("secondOfMinute");
        java.time.ZoneId zoneId2 = timeZone1.toZoneId();
        java.util.TimeZone timeZone3 = java.util.TimeZone.getTimeZone(zoneId2);
        int int4 = timeZone3.getRawOffset();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(zoneId2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test10362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10362");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setWeekDate(14, (int) (byte) 0, 7);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone7);
        int int9 = dateMidnight8.getEra();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateMidnight8.toDateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusDays(9);
        int int14 = dateTime11.getEra();
        org.joda.time.DateTime dateTime15 = dateTime11.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime15.getZone();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone16);
        boolean boolean18 = calendar0.before((java.lang.Object) dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.era();
        int int21 = localDateTime19.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.minusMonths(52);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfDay();
        int int30 = localDateTime28.getYearOfCentury();
        int int31 = localDateTime28.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.plusHours(3120000);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime24.withFields((org.joda.time.ReadablePartial) localDateTime28);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61725661398311,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=13,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=364,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=41,MILLISECOND=689,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 21 + "'", int30 == 21);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 689 + "'", int31 == 689);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
    }

    @Test
    public void test10363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10363");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType2 = periodType1.withMillisRemoved();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone5);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(0L, 100L, periodType9, chronology10);
        java.lang.Object obj12 = mutablePeriod11.clone();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(0L, 100L, periodType15, chronology16);
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone20);
        org.joda.time.Duration duration22 = mutablePeriod11.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight6.plus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.LocalDate localDate24 = dateMidnight23.toLocalDate();
        org.joda.time.Chronology chronology25 = localDate24.getChronology();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        java.lang.Object obj31 = mutablePeriod30.clone();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, 100L, periodType34, chronology35);
        mutablePeriod30.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod36);
        int int38 = mutablePeriod36.getMinutes();
        org.joda.time.Period period40 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.hours();
        java.lang.String str42 = durationFieldType41.toString();
        org.joda.time.Period period44 = period40.withField(durationFieldType41, 2);
        boolean boolean45 = mutablePeriod36.isSupported(durationFieldType41);
        long long48 = chronology25.add((org.joda.time.ReadablePeriod) mutablePeriod36, (long) 53230763, 2);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) 11, chronology25);
        org.joda.time.Period period50 = new org.joda.time.Period((-59930L), periodType1, chronology25);
        org.joda.time.DateTimeField dateTimeField51 = chronology25.weekOfWeekyear();
        org.joda.time.DurationField durationField52 = chronology25.weekyears();
        org.joda.time.LocalDate localDate53 = org.joda.time.LocalDate.now(chronology25);
        org.joda.time.LocalDate.Property property54 = localDate53.yearOfEra();
        org.joda.time.LocalDate.Property property55 = localDate53.era();
        org.joda.time.LocalDate localDate57 = localDate53.plusYears(43352);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str59 = localDate53.toString("Wed Oct 01 00:00:00 GMT 1975");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: W");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "PT0.100S");
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hours" + "'", str42, "hours");
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 53230963L + "'", long48 == 53230963L);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDate57);
    }

    @Test
    public void test10364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10364");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfDay(100);
        int int6 = localDateTime5.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = localDateTime5.getFieldType((int) (byte) 1);
        java.util.Date date9 = localDateTime5.toDate();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusWeeks(292278993);
        // The following exception was thrown during execution in test generation
        try {
            int int13 = localDateTime11.getValue(44);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 44");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 13 + "'", int6 == 13);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Mon Dec 13 00:00:00 GMT+00:00 2021");
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test10365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10365");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        mutableDateTime4.setDayOfMonth((int) (byte) 10);
        mutableDateTime4.add((long) 6);
        mutableDateTime4.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.monthOfYear();
        mutableDateTime4.setTime((org.joda.time.ReadableInstant) dateMidnight11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone15);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, 100L, periodType19, chronology20);
        java.lang.Object obj22 = mutablePeriod21.clone();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone30);
        org.joda.time.Duration duration32 = mutablePeriod21.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight16.plus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.LocalDate localDate34 = dateMidnight33.toLocalDate();
        org.joda.time.Period period36 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        java.lang.String str38 = durationFieldType37.toString();
        org.joda.time.Period period40 = period36.withField(durationFieldType37, 2);
        org.joda.time.Period period42 = period40.withMillis((int) '#');
        org.joda.time.LocalDate localDate43 = localDate34.minus((org.joda.time.ReadablePeriod) period42);
        int int44 = period42.getMonths();
        org.joda.time.Period period46 = period42.minusMinutes(8);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime4, (org.joda.time.ReadablePeriod) period42);
        org.joda.time.Interval interval48 = interval47.toInterval();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology52);
        org.joda.time.Interval interval54 = yearMonthDay53.toInterval();
        org.joda.time.Period period55 = interval54.toPeriod();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.YearMonthDay yearMonthDay60 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology59);
        org.joda.time.Interval interval61 = yearMonthDay60.toInterval();
        org.joda.time.Period period62 = interval61.toPeriod();
        long long63 = interval61.getStartMillis();
        org.joda.time.Interval interval64 = interval54.overlap((org.joda.time.ReadableInterval) interval61);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.YearMonthDay yearMonthDay69 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology68);
        org.joda.time.Interval interval70 = yearMonthDay69.toInterval();
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.Interval interval72 = interval70.withPeriodBeforeEnd(readablePeriod71);
        boolean boolean73 = interval54.overlaps((org.joda.time.ReadableInterval) interval72);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.YearMonthDay yearMonthDay78 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology77);
        org.joda.time.Interval interval79 = yearMonthDay78.toInterval();
        org.joda.time.Period period80 = interval79.toPeriod();
        boolean boolean82 = interval79.isAfter(100L);
        boolean boolean83 = interval72.isAfter((org.joda.time.ReadableInterval) interval79);
        org.joda.time.Interval interval84 = interval72.toInterval();
        boolean boolean85 = interval48.abuts((org.joda.time.ReadableInterval) interval84);
        long long86 = interval48.getStartMillis();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "PT0.100S");
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hours" + "'", str38, "hours");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-61038316800000L) + "'", long63 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 1673222400000L + "'", long86 == 1673222400000L);
    }

    @Test
    public void test10366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10366");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.millis();
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod(periodType0);
        int int2 = mutablePeriod1.getWeeks();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone5);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(0L, 100L, periodType9, chronology10);
        java.lang.Object obj12 = mutablePeriod11.clone();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(0L, 100L, periodType15, chronology16);
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone20);
        org.joda.time.Duration duration22 = mutablePeriod11.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight6.plus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.LocalDate localDate24 = dateMidnight23.toLocalDate();
        org.joda.time.Chronology chronology25 = localDate24.getChronology();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        java.lang.Object obj31 = mutablePeriod30.clone();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, 100L, periodType34, chronology35);
        mutablePeriod30.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod36);
        int int38 = mutablePeriod36.getMinutes();
        org.joda.time.Period period40 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.hours();
        java.lang.String str42 = durationFieldType41.toString();
        org.joda.time.Period period44 = period40.withField(durationFieldType41, 2);
        boolean boolean45 = mutablePeriod36.isSupported(durationFieldType41);
        long long48 = chronology25.add((org.joda.time.ReadablePeriod) mutablePeriod36, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.Chronology chronology50 = chronology25.withZone(dateTimeZone49);
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) 11, chronology50);
        org.joda.time.DurationField durationField52 = chronology50.days();
        org.joda.time.DurationFieldType durationFieldType53 = durationField52.getType();
        boolean boolean54 = mutablePeriod1.isSupported(durationFieldType53);
        org.joda.time.format.PeriodFormatter periodFormatter55 = null;
        java.lang.String str56 = mutablePeriod1.toString(periodFormatter55);
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "PT0.100S");
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hours" + "'", str42, "hours");
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 53230963L + "'", long48 == 53230963L);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT0S" + "'", str56, "PT0S");
    }

    @Test
    public void test10367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10367");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 17);
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(0L, 100L, periodType4, chronology5);
        java.lang.Object obj7 = mutablePeriod6.clone();
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        mutablePeriod6.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod12);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone15);
        org.joda.time.Duration duration17 = mutablePeriod6.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight16);
        long long18 = duration17.getMillis();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime1.withDurationAdded((org.joda.time.ReadableDuration) duration17, 53576961);
        java.lang.String str21 = localDateTime1.toString();
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "PT0.100S");
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01T00:00:00.017" + "'", str21, "1970-01-01T00:00:00.017");
    }

    @Test
    public void test10368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10368");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("3921-08-30 00:00:00");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test10369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10369");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((-61725661715084L));
    }

    @Test
    public void test10370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10370");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime localTime13 = property12.withMinimumValue();
        org.joda.time.LocalTime localTime15 = property12.addCopy((int) ' ');
        org.joda.time.LocalTime.Property property16 = localTime15.secondOfMinute();
        org.joda.time.LocalTime.Property property17 = localTime15.hourOfDay();
        java.lang.String str18 = property17.getName();
        org.joda.time.LocalTime localTime19 = property17.roundHalfFloorCopy();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology24);
        org.joda.time.Interval interval26 = yearMonthDay25.toInterval();
        org.joda.time.DateTime dateTime27 = yearMonthDay25.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property29 = dateTime27.property(dateTimeFieldType28);
        org.joda.time.DateTime.Property property30 = dateTime27.minuteOfDay();
        org.joda.time.DateTime.Property property31 = dateTime27.monthOfYear();
        org.joda.time.DateTime.Property property32 = dateTime27.centuryOfEra();
        org.joda.time.LocalDate localDate33 = dateTime27.toLocalDate();
        org.joda.time.DateTimeField dateTimeField35 = localDate33.getField(0);
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("1970-01-01T00:00:00.000Z");
        java.lang.String str39 = dateTimeField35.getAsText(172817988L, locale38);
        java.lang.String str40 = locale38.getDisplayName();
        java.lang.String str41 = locale38.getDisplayVariant();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime42 = property17.setCopy("3921-08-30 00:00:00", locale38);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"3921-08-30 00:00:00\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hourOfDay" + "'", str18, "hourOfDay");
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970" + "'", str39, "1970");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
    }

    @Test
    public void test10371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10371");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology4);
        int int6 = yearMonthDay5.size();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((int) (byte) 100, 3, (int) (byte) 10, 4, 2022, 6, 12, 1970);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay5.plus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay16.minusYears((int) (byte) 1);
        org.joda.time.Chronology chronology19 = yearMonthDay16.getChronology();
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now(chronology19);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) 53347509, chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.year();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test10372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10372");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(0L, 100L, periodType2, chronology3);
        java.lang.Object obj5 = mutablePeriod4.clone();
        mutablePeriod4.addHours(5);
        org.joda.time.MutablePeriod mutablePeriod8 = mutablePeriod4.copy();
        org.joda.time.MutablePeriod mutablePeriod9 = mutablePeriod4.copy();
        mutablePeriod9.setMinutes(14);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(0L, 100L, periodType15, chronology16);
        java.lang.Object obj18 = mutablePeriod17.clone();
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        mutablePeriod17.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone26);
        org.joda.time.Duration duration28 = mutablePeriod17.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight27);
        mutablePeriod17.addMillis(0);
        mutablePeriod17.setMonths(0);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        java.lang.Object obj41 = mutablePeriod40.clone();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        mutablePeriod40.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone49);
        org.joda.time.Duration duration51 = mutablePeriod40.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight35.plus((org.joda.time.ReadableDuration) duration51);
        org.joda.time.MutableDateTime mutableDateTime54 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(0L, 100L, periodType57, chronology58);
        java.lang.Object obj60 = mutablePeriod59.clone();
        java.lang.String str61 = mutablePeriod59.toString();
        mutableDateTime54.add((org.joda.time.ReadablePeriod) mutablePeriod59, 2022);
        mutablePeriod17.setPeriod((org.joda.time.ReadableInstant) dateMidnight52, (org.joda.time.ReadableInstant) mutableDateTime54);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone68);
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(0L, 100L, periodType72, chronology73);
        java.lang.Object obj75 = mutablePeriod74.clone();
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod(0L, 100L, periodType78, chronology79);
        mutablePeriod74.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod80);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.DateMidnight dateMidnight84 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone83);
        org.joda.time.Duration duration85 = mutablePeriod74.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight84);
        org.joda.time.DateMidnight dateMidnight86 = dateMidnight69.plus((org.joda.time.ReadableDuration) duration85);
        org.joda.time.LocalDate localDate87 = dateMidnight86.toLocalDate();
        org.joda.time.Chronology chronology88 = localDate87.getChronology();
        java.lang.String str89 = chronology88.toString();
        org.joda.time.DateTimeField dateTimeField90 = chronology88.secondOfDay();
        org.joda.time.Interval interval91 = new org.joda.time.Interval(0L, (long) 1, chronology88);
        org.joda.time.YearMonthDay yearMonthDay93 = new org.joda.time.YearMonthDay(10L);
        long long95 = chronology88.set((org.joda.time.ReadablePartial) yearMonthDay93, (long) 8);
        org.joda.time.DateTimeField dateTimeField96 = chronology88.secondOfDay();
        org.joda.time.MutablePeriod mutablePeriod97 = new org.joda.time.MutablePeriod((java.lang.Object) mutablePeriod17, chronology88);
        org.joda.time.DateTimeField dateTimeField98 = chronology88.dayOfMonth();
        mutablePeriod9.setPeriod((-59958143999948L), chronology88);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "P-99137WT-23H-59M-59.948S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "P-99137WT-23H-59M-59.948S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "P-99137WT-23H-59M-59.948S");
        org.junit.Assert.assertNotNull(mutablePeriod8);
        org.junit.Assert.assertNotNull(mutablePeriod9);
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "P52YT3M22.200S");
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "PT0.100S");
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(obj60);
        org.junit.Assert.assertEquals(obj60.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj60), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj60), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "PT0.100S" + "'", str61, "PT0.100S");
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertEquals(obj75.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj75), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj75), "PT0.100S");
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertNotNull(localDate87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "ISOChronology[UTC]" + "'", str89, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 8L + "'", long95 == 8L);
        org.junit.Assert.assertNotNull(dateTimeField96);
        org.junit.Assert.assertNotNull(dateTimeField98);
    }

    @Test
    public void test10373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10373");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfDay(100);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.hourOfDay();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property9.getFieldType();
        org.joda.time.LocalDateTime localDateTime11 = property9.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test10374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10374");
        java.util.Date date1 = new java.util.Date((long) 0);
        int int2 = date1.getDay();
        org.joda.time.YearMonthDay yearMonthDay3 = org.joda.time.YearMonthDay.fromDateFields(date1);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 53230763, 2);
        boolean boolean50 = durationFieldType4.isSupported(chronology26);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay3.withChronologyRetainFields(chronology26);
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay51.minusYears(53233428);
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay51.year();
        org.joda.time.YearMonthDay yearMonthDay56 = property54.setCopy(21);
        org.joda.time.DateMidnight dateMidnight57 = yearMonthDay56.toDateMidnight();
        int int58 = yearMonthDay56.size();
        org.joda.time.DateTime dateTime59 = yearMonthDay56.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime61 = dateTime59.minusYears(2020);
        java.util.Date date62 = dateTime61.toDate();
        org.joda.time.LocalDate localDate63 = dateTime61.toLocalDate();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.YearMonthDay yearMonthDay68 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology67);
        org.joda.time.Interval interval69 = yearMonthDay68.toInterval();
        org.joda.time.DateTime dateTime70 = yearMonthDay68.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property72 = dateTime70.property(dateTimeFieldType71);
        org.joda.time.DateTime dateTime73 = property72.getDateTime();
        java.util.Locale locale74 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale75 = locale74.stripExtensions();
        int int76 = property72.getMaximumShortTextLength(locale74);
        org.joda.time.DateTime dateTime77 = property72.roundFloorCopy();
        int int78 = dateTime77.getYear();
        boolean boolean80 = dateTime77.isBefore((-61725661719549L));
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.dayOfWeek();
        boolean boolean82 = dateTime77.isSupported(dateTimeFieldType81);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate84 = localDate63.withField(dateTimeFieldType81, 540);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 540 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 53230963L + "'", long49 == 53230963L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 3 + "'", int58 == 3);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(date62);
// flaky:         org.junit.Assert.assertEquals(date62.toString(), "Mon Jan 18 14:56:41 GMT+00:00 2000");
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 5 + "'", int76 == 5);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 35 + "'", int78 == 35);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test10375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10375");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getHours();
        date0.setTime(0L);
        org.joda.time.TimeOfDay timeOfDay4 = org.joda.time.TimeOfDay.fromDateFields(date0);
        java.lang.String str5 = timeOfDay4.toString();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.minusSeconds(53097298);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay4.secondOfMinute();
        org.junit.Assert.assertEquals(date0.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 14 + "'", int1 == 14);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "T00:00:00.000" + "'", str5, "T00:00:00.000");
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test10376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10376");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0L, 100L, periodType6, chronology7);
        java.lang.Object obj9 = mutablePeriod8.clone();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.Duration duration19 = mutablePeriod8.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight3.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.LocalDate localDate21 = dateMidnight20.toLocalDate();
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        java.lang.String str23 = chronology22.toString();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone26);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(0L, 100L, periodType36, chronology37);
        mutablePeriod32.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone41);
        org.joda.time.Duration duration43 = mutablePeriod32.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight27.plus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.LocalDate localDate45 = dateMidnight44.toLocalDate();
        org.joda.time.Period period47 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.hours();
        java.lang.String str49 = durationFieldType48.toString();
        org.joda.time.Period period51 = period47.withField(durationFieldType48, 2);
        org.joda.time.Period period53 = period51.withMillis((int) '#');
        org.joda.time.LocalDate localDate54 = localDate45.minus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.LocalDate localDate56 = localDate54.minusYears(11);
        int int57 = localDate54.getYearOfEra();
        int int58 = dateTimeField24.getMinimumValue((org.joda.time.ReadablePartial) localDate54);
        int int59 = localDate54.getYearOfCentury();
        int int60 = localDate54.getCenturyOfEra();
        org.joda.time.DateTime dateTime61 = localDate54.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate63 = localDate54.withYearOfEra(53097298);
        int int64 = localDate54.size();
        int int65 = localDate54.getYear();
        java.util.TimeZone timeZone67 = java.util.TimeZone.getTimeZone("");
        java.lang.String str68 = timeZone67.getID();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        org.joda.time.Interval interval70 = localDate54.toInterval(dateTimeZone69);
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight((-61725661717443L), dateTimeZone69);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT0.100S");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ISOChronology[UTC]" + "'", str23, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0.100S");
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hours" + "'", str49, "hours");
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 70 + "'", int59 == 70);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 19 + "'", int60 == 19);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1970 + "'", int65 == 1970);
        org.junit.Assert.assertNotNull(timeZone67);
        org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "GMT" + "'", str68, "GMT");
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(interval70);
    }

    @Test
    public void test10377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10377");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        int int8 = dateTime7.getYearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.add((long) 3);
        mutableDateTime13.setDayOfMonth((int) (byte) 10);
        mutableDateTime13.add((long) 6);
        mutableDateTime13.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.monthOfYear();
        mutableDateTime13.setTime((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone24);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        java.lang.Object obj31 = mutablePeriod30.clone();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, 100L, periodType34, chronology35);
        mutablePeriod30.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone39);
        org.joda.time.Duration duration41 = mutablePeriod30.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight40);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight25.plus((org.joda.time.ReadableDuration) duration41);
        org.joda.time.LocalDate localDate43 = dateMidnight42.toLocalDate();
        org.joda.time.Period period45 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.hours();
        java.lang.String str47 = durationFieldType46.toString();
        org.joda.time.Period period49 = period45.withField(durationFieldType46, 2);
        org.joda.time.Period period51 = period49.withMillis((int) '#');
        org.joda.time.LocalDate localDate52 = localDate43.minus((org.joda.time.ReadablePeriod) period51);
        int int53 = period51.getMonths();
        org.joda.time.Period period55 = period51.minusMinutes(8);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime13, (org.joda.time.ReadablePeriod) period51);
        org.joda.time.Interval interval57 = interval56.toInterval();
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(0L, 100L, periodType60, chronology61);
        mutablePeriod62.setMillis((-1));
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone66);
        int int68 = dateMidnight67.getEra();
        org.joda.time.PeriodType periodType71 = null;
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod(0L, 100L, periodType71, chronology72);
        java.lang.Object obj74 = mutablePeriod73.clone();
        org.joda.time.PeriodType periodType77 = null;
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod(0L, 100L, periodType77, chronology78);
        mutablePeriod73.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod79);
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.DateMidnight dateMidnight83 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone82);
        org.joda.time.Duration duration84 = mutablePeriod73.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight83);
        org.joda.time.Period period85 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight67, (org.joda.time.ReadableDuration) duration84);
        mutablePeriod62.add((org.joda.time.ReadableDuration) duration84);
        org.joda.time.Interval interval87 = interval56.withDurationAfterStart((org.joda.time.ReadableDuration) duration84);
        org.joda.time.DateTime dateTime88 = dateTime7.minus((org.joda.time.ReadableDuration) duration84);
        org.joda.time.DateTime dateTime89 = dateTime88.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property90 = dateTime88.hourOfDay();
        int int91 = property90.getMinimumValueOverall();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 70 + "'", int8 == 70);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "PT0.100S");
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hours" + "'", str47, "hours");
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "PT0.100S");
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 0 + "'", int91 == 0);
    }

    @Test
    public void test10378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10378");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.era();
        int int10 = dateMidnight8.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone12);
        int int14 = dateMidnight13.getEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = dateMidnight13.toDateTime(chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.minusWeeks(0);
        org.joda.time.DateTime dateTime19 = dateTime18.withEarlierOffsetAtOverlap();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime22 = dateTime18.withFieldAdded(durationFieldType20, 5);
        int int23 = dateMidnight8.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime24 = dateTime22.toDateTime();
        int int25 = dateTime24.getDayOfMonth();
        org.joda.time.DateTime dateTime27 = dateTime24.minus((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        int int31 = dateMidnight30.getEra();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = dateMidnight30.toDateTime(chronology32);
        org.joda.time.DateTime dateTime35 = dateTime33.minusWeeks(0);
        org.joda.time.DateTime dateTime37 = dateTime33.withYear((int) (short) 10);
        org.joda.time.DateTime dateTime39 = dateTime37.plusDays(53230763);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.YearMonthDay yearMonthDay44 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology43);
        int int45 = yearMonthDay44.size();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone53);
        int int55 = dateMidnight54.getEra();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = dateMidnight54.toDateTime(chronology56);
        org.joda.time.DateTime dateTime59 = dateTime57.plusDays(9);
        int int60 = dateTime57.getEra();
        org.joda.time.DateTime dateTime61 = dateTime57.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone62 = dateTime61.getZone();
        java.lang.String str63 = dateTimeZone62.toString();
        org.joda.time.YearMonthDay yearMonthDay64 = new org.joda.time.YearMonthDay(dateTimeZone62);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((int) (byte) -1, 1, (int) (short) 1, (int) (short) 10, (int) (short) 0, 8, dateTimeZone62);
        java.lang.String str66 = dateTimeZone62.toString();
        org.joda.time.Interval interval67 = yearMonthDay44.toInterval(dateTimeZone62);
        org.joda.time.MutableDateTime mutableDateTime68 = dateTime39.toMutableDateTime(dateTimeZone62);
        org.joda.time.MutableDateTime mutableDateTime69 = dateTime24.toMutableDateTime(dateTimeZone62);
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime69.dayOfWeek();
        mutableDateTime69.setMillis((-102059L));
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime69.weekyear();
        mutableDateTime69.setMillis((long) 721);
        mutableDateTime69.addDays(147693);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime69.setDayOfYear(888);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 888 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Etc/UTC" + "'", str63, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Etc/UTC" + "'", str66, "Etc/UTC");
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(property73);
    }

    @Test
    public void test10379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10379");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        java.lang.Object obj14 = mutablePeriod13.clone();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(0L, 100L, periodType17, chronology18);
        mutablePeriod13.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone22);
        org.joda.time.Duration duration24 = mutablePeriod13.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight23);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight(0L, dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        int int31 = dateMidnight30.getEra();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, 100L, periodType34, chronology35);
        java.lang.Object obj37 = mutablePeriod36.clone();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(0L, 100L, periodType40, chronology41);
        mutablePeriod36.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone45);
        org.joda.time.Duration duration47 = mutablePeriod36.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight30, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight27, (org.joda.time.ReadableDuration) duration47, periodType49);
        boolean boolean51 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight8.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateMidnight.Property property53 = dateMidnight52.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight54 = property53.roundFloorCopy();
        int int55 = dateMidnight54.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight57 = dateMidnight54.withWeekOfWeekyear(53579);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53579 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "PT0.100S");
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "PT0.100S");
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1969 + "'", int55 == 1969);
    }

    @Test
    public void test10380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10380");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime.Property property13 = localTime9.millisOfDay();
        org.joda.time.LocalTime localTime15 = property13.addNoWrapToCopy((int) '4');
        org.joda.time.LocalTime localTime16 = property13.withMaximumValue();
        org.joda.time.LocalTime localTime17 = property13.withMinimumValue();
        org.joda.time.LocalTime localTime19 = property13.setCopy(1900);
        org.joda.time.LocalTime localTime21 = property13.addWrapFieldToCopy(53230763);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone23);
        int int25 = dateMidnight24.getEra();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = dateMidnight24.toDateTime(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.minusWeeks(0);
        org.joda.time.DateTime dateTime30 = dateTime29.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime31 = dateTime29.toLocalTime();
        org.joda.time.LocalTime localTime33 = localTime31.minusMinutes(3);
        org.joda.time.LocalTime.Property property34 = localTime31.minuteOfHour();
        org.joda.time.LocalTime.Property property35 = localTime31.millisOfDay();
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        org.joda.time.LocalTime localTime37 = property35.getLocalTime();
        org.joda.time.LocalTime localTime38 = property35.withMaximumValue();
        org.joda.time.LocalTime localTime40 = localTime38.plusMillis(52688553);
        org.joda.time.LocalTime localTime42 = localTime38.withMillisOfDay(2740);
        int int43 = localTime21.compareTo((org.joda.time.ReadablePartial) localTime42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone45);
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(0L, 100L, periodType49, chronology50);
        java.lang.Object obj52 = mutablePeriod51.clone();
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(0L, 100L, periodType55, chronology56);
        mutablePeriod51.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod57);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone60);
        org.joda.time.Duration duration62 = mutablePeriod51.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight61);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight46.plus((org.joda.time.ReadableDuration) duration62);
        org.joda.time.MutableDateTime mutableDateTime65 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime65.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime68 = property66.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime69 = property66.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone71);
        int int73 = dateMidnight72.getEra();
        org.joda.time.DateMidnight.Property property74 = dateMidnight72.monthOfYear();
        org.joda.time.DateMidnight dateMidnight76 = property74.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = property74.getFieldType();
        org.joda.time.MutableDateTime.Property property78 = mutableDateTime69.property(dateTimeFieldType77);
        boolean boolean79 = dateMidnight46.isSupported(dateTimeFieldType77);
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight46.minusWeeks(14);
        long long82 = dateMidnight46.getMillis();
        org.joda.time.DateMidnight.Property property83 = dateMidnight46.year();
        org.joda.time.DateMidnight dateMidnight84 = property83.roundHalfEvenCopy();
        boolean boolean85 = localTime21.equals((java.lang.Object) property83);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "PT0.100S");
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateMidnight84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test10381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10381");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        int int4 = dateMidnight2.getMillisOfSecond();
        org.joda.time.Period period6 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.hours();
        java.lang.String str8 = durationFieldType7.toString();
        org.joda.time.Period period10 = period6.withField(durationFieldType7, 2);
        org.joda.time.Period period12 = period10.minusMinutes(21);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight2, (org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period15 = period12.withWeeks(0);
        int int16 = period12.getSeconds();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone36);
        org.joda.time.Duration duration38 = mutablePeriod27.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight22.plus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.LocalDate localDate40 = dateMidnight39.toLocalDate();
        org.joda.time.Chronology chronology41 = localDate40.getChronology();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        java.lang.Object obj47 = mutablePeriod46.clone();
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(0L, 100L, periodType50, chronology51);
        mutablePeriod46.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod52);
        int int54 = mutablePeriod52.getMinutes();
        org.joda.time.Period period56 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.hours();
        java.lang.String str58 = durationFieldType57.toString();
        org.joda.time.Period period60 = period56.withField(durationFieldType57, 2);
        boolean boolean61 = mutablePeriod52.isSupported(durationFieldType57);
        long long64 = chronology41.add((org.joda.time.ReadablePeriod) mutablePeriod52, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.Chronology chronology66 = chronology41.withZone(dateTimeZone65);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) 11, chronology66);
        org.joda.time.DurationField durationField68 = chronology66.days();
        org.joda.time.Interval interval69 = new org.joda.time.Interval((long) (-1), (long) (short) 0, chronology66);
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone71);
        int int73 = dateMidnight72.getEra();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateTime dateTime75 = dateMidnight72.toDateTime(chronology74);
        org.joda.time.DateTime dateTime77 = dateTime75.minusWeeks(0);
        org.joda.time.Interval interval78 = interval69.withStart((org.joda.time.ReadableInstant) dateTime75);
        long long79 = interval69.getEndMillis();
        org.joda.time.PeriodType periodType84 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType85 = periodType84.withMillisRemoved();
        org.joda.time.Period period86 = new org.joda.time.Period((long) 10, (long) '#', periodType85);
        org.joda.time.Period period87 = new org.joda.time.Period((long) (short) 10, (long) 53233428, periodType85);
        org.joda.time.Period period88 = interval69.toPeriod(periodType85);
        org.joda.time.Period period89 = period12.normalizedStandard(periodType85);
        org.joda.time.PeriodType periodType90 = period89.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType92 = periodType90.getFieldType(2922789);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2922789");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hours" + "'", str8, "hours");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0.100S");
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hours" + "'", str58, "hours");
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 53230963L + "'", long64 == 53230963L);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(periodType90);
    }

    @Test
    public void test10382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10382");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra(3);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundHalfFloor();
        int int14 = dateTime7.compareTo((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.DateTime dateTime16 = dateTime7.plus(24L);
        org.joda.time.DateTime.Property property17 = dateTime16.secondOfMinute();
        org.joda.time.DateTime dateTime19 = property17.addWrapFieldToCopy(591);
        org.joda.time.DateTime dateTime20 = property17.withMinimumValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test10383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10383");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter2.withOffsetParsed();
        java.lang.Appendable appendable4 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight(0L, dateTimeZone6);
        org.joda.time.LocalDate localDate8 = dateMidnight7.toLocalDate();
        org.joda.time.LocalDate localDate10 = localDate8.minusWeeks(100);
        org.joda.time.Chronology chronology11 = localDate8.getChronology();
        org.joda.time.LocalDate.Property property12 = localDate8.yearOfCentury();
        org.joda.time.LocalDate localDate13 = property12.roundCeilingCopy();
        org.joda.time.LocalDate.Property property14 = localDate13.weekyear();
        org.joda.time.LocalDate localDate16 = localDate13.withYearOfCentury((int) (byte) 0);
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfCentury();
        org.joda.time.LocalDate localDate19 = localDate16.withCenturyOfEra(28);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray20 = localDate16.getFieldTypes();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology24);
        org.joda.time.DateMidnight dateMidnight26 = yearMonthDay25.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.plus((long) (byte) -1);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight31, chronology32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight31.withCenturyOfEra(8);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology40);
        org.joda.time.Interval interval42 = yearMonthDay41.toInterval();
        org.joda.time.DateTime dateTime43 = yearMonthDay41.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property45 = dateTime43.property(dateTimeFieldType44);
        org.joda.time.DateTime.Property property46 = dateTime43.minuteOfDay();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone48);
        int int50 = dateMidnight49.getEra();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = dateMidnight49.toDateTime(chronology51);
        org.joda.time.DateTime dateTime54 = dateTime52.plusDays(9);
        int int55 = dateTime52.getEra();
        org.joda.time.DateTime dateTime56 = dateTime52.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone57 = dateTime56.getZone();
        java.lang.String str58 = dateTimeZone57.toString();
        org.joda.time.DateTime dateTime59 = dateTime43.toDateTime(dateTimeZone57);
        boolean boolean60 = dateTimeZone57.isFixed();
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight((long) 7, dateTimeZone57);
        org.joda.time.MutableDateTime mutableDateTime62 = dateMidnight35.toMutableDateTime(dateTimeZone57);
        org.joda.time.DateTime dateTime63 = localDate16.toDateTimeAtStartOfDay(dateTimeZone57);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable4, (org.joda.time.ReadablePartial) localDate16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray20);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Etc/UTC" + "'", str58, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test10384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10384");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(53243063, 21, 32769);
        java.util.Calendar.Builder builder8 = builder4.setWeekDate(59, 136, (-1956));
        java.util.Date date10 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromDateFields(date10);
        int int12 = date10.getHours();
        java.util.Date date19 = new java.util.Date(2, 22, 9, 14, (int) 'x', 53243308);
        date19.setTime(100L);
        boolean boolean22 = date10.before(date19);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder23 = builder8.setInstant(date19);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals(date10.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals(date19.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test10385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10385");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Period period22 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        java.lang.String str24 = durationFieldType23.toString();
        org.joda.time.Period period26 = period22.withField(durationFieldType23, 2);
        org.joda.time.Period period28 = period26.withMillis((int) '#');
        org.joda.time.LocalDate localDate29 = localDate20.minus((org.joda.time.ReadablePeriod) period28);
        int int30 = period28.getMonths();
        org.joda.time.Period period32 = period28.minusMinutes(8);
        int int33 = period32.getMillis();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hours" + "'", str24, "hours");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 35 + "'", int33 == 35);
    }

    @Test
    public void test10386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10386");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("Property[year]");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone1);
        java.util.TimeZone.setDefault(timeZone1);
        java.util.Calendar calendar4 = java.util.Calendar.getInstance(timeZone1);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone1);
        calendar5.set(53328208, 53328208, 53243063);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = calendar5.getLeastMaximum(53541);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 53541");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645455402364,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=42,MILLISECOND=364,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar4);
// flaky:         org.junit.Assert.assertEquals(calendar4.toString(), "java.util.GregorianCalendar[time=1645455402364,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=42,MILLISECOND=364,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=53328208,MONTH=53328208,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=53243063,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=42,MILLISECOND=364,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test10387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10387");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusSeconds(5);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusSeconds(35);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.minusMinutes(53637845);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test10388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10388");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        mutableDateTime4.setDayOfMonth((int) (byte) 10);
        mutableDateTime4.add((long) 6);
        mutableDateTime4.addWeeks((int) '4');
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime4.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.add((long) 199);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(0L, 100L, periodType20, chronology21);
        java.lang.Object obj23 = mutablePeriod22.clone();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(0L, 100L, periodType26, chronology27);
        mutablePeriod22.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone31);
        org.joda.time.Duration duration33 = mutablePeriod22.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight17.plus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.LocalDate localDate35 = dateMidnight34.toLocalDate();
        org.joda.time.Chronology chronology36 = localDate35.getChronology();
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(0L, 100L, periodType39, chronology40);
        java.lang.Object obj42 = mutablePeriod41.clone();
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(0L, 100L, periodType45, chronology46);
        mutablePeriod41.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod47);
        int int49 = mutablePeriod47.getMinutes();
        org.joda.time.Period period51 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType52 = org.joda.time.DurationFieldType.hours();
        java.lang.String str53 = durationFieldType52.toString();
        org.joda.time.Period period55 = period51.withField(durationFieldType52, 2);
        boolean boolean56 = mutablePeriod47.isSupported(durationFieldType52);
        long long59 = chronology36.add((org.joda.time.ReadablePeriod) mutablePeriod47, (long) 53230763, 2);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) 11, chronology36);
        org.joda.time.DateTimeField dateTimeField61 = chronology36.secondOfMinute();
        int int63 = dateTimeField61.getMaximumValue((long) 9);
        int int64 = dateTimeField61.getMinimumValue();
        mutableDateTime13.setRounding(dateTimeField61);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "PT0.100S");
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(obj42);
        org.junit.Assert.assertEquals(obj42.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "hours" + "'", str53, "hours");
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 53230963L + "'", long59 == 53230963L);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 59 + "'", int63 == 59);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test10389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10389");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        org.joda.time.Duration duration21 = mutablePeriod10.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight5.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.LocalDate localDate23 = dateMidnight22.toLocalDate();
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        java.lang.Object obj30 = mutablePeriod29.clone();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        int int37 = mutablePeriod35.getMinutes();
        org.joda.time.Period period39 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.hours();
        java.lang.String str41 = durationFieldType40.toString();
        org.joda.time.Period period43 = period39.withField(durationFieldType40, 2);
        boolean boolean44 = mutablePeriod35.isSupported(durationFieldType40);
        long long47 = chronology24.add((org.joda.time.ReadablePeriod) mutablePeriod35, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Chronology chronology49 = chronology24.withZone(dateTimeZone48);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 11, chronology49);
        org.joda.time.DurationField durationField51 = chronology49.days();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (-1), (long) (short) 0, chronology49);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone54);
        int int56 = dateMidnight55.getEra();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = dateMidnight55.toDateTime(chronology57);
        org.joda.time.DateTime dateTime60 = dateTime58.minusWeeks(0);
        org.joda.time.Interval interval61 = interval52.withStart((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Chronology chronology62 = interval52.getChronology();
        java.lang.String str63 = interval52.toString();
        java.lang.String str64 = interval52.toString();
        org.joda.time.DateTime dateTime65 = interval52.getStart();
        boolean boolean67 = interval52.isBefore((long) '#');
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hours" + "'", str41, "hours");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 53230963L + "'", long47 == 53230963L);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z" + "'", str63, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z" + "'", str64, "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test10390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10390");
        org.joda.time.Period period4 = new org.joda.time.Period(12, 2, (int) ' ', (int) (short) 10);
        org.joda.time.Period period6 = period4.plusDays(1970);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone8);
        int int10 = dateMidnight9.getEra();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = dateMidnight9.toDateTime(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusWeeks(0);
        org.joda.time.DateTime dateTime16 = dateTime12.withYear((int) (short) 10);
        org.joda.time.Duration duration17 = period4.toDurationTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property18 = dateTime16.weekOfWeekyear();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) dateTime16);
        org.joda.time.YearMonthDay yearMonthDay20 = dateTime19.toYearMonthDay();
        org.joda.time.DateTime dateTime22 = dateTime19.plusDays((int) (short) 10);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test10391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10391");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateTime dateTime5 = yearMonthDay4.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours(11);
        org.joda.time.DateMidnight dateMidnight8 = yearMonthDay4.toDateMidnight(dateTimeZone7);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.year();
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = property12.add((long) 3);
        mutableDateTime14.setDayOfMonth((int) (byte) 10);
        mutableDateTime14.add((long) 6);
        int int19 = dateMidnight8.compareTo((org.joda.time.ReadableInstant) mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test10392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10392");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.hourOfDay();
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.Chronology chronology11 = null;
        mutablePeriod7.setPeriod((long) 0, (long) 12, chronology11);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.plus((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMinuteOfHour(9);
        int int16 = localDateTime15.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusMillis(53390189);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusSeconds(53230763);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusSeconds(10);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.years();
        boolean boolean26 = localDateTime24.isSupported(durationFieldType25);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone28);
        int int30 = dateMidnight29.getEra();
        org.joda.time.DateMidnight.Property property31 = dateMidnight29.monthOfYear();
        org.joda.time.DateMidnight dateMidnight33 = property31.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = property31.getFieldType();
        int int35 = localDateTime24.indexOf(dateTimeFieldType34);
        boolean boolean36 = localDateTime18.isSupported(dateTimeFieldType34);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime18.withMillisOfDay(53230763);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime18.withDayOfYear(68);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.012S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.012S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.012S");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 9 + "'", int16 == 9);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
    }

    @Test
    public void test10393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10393");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        int int5 = yearMonthDay4.getDayOfMonth();
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(periodType6);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay4.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod7, 53230763);
        org.joda.time.DateTime dateTime10 = yearMonthDay9.toDateTimeAtMidnight();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test10394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10394");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay4.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.plus((long) (byte) -1);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plusYears(3682080);
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder13.clear();
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.util.Locale.Builder builder16 = builder13.setLocale(locale15);
        java.util.Locale locale17 = builder13.build();
        java.util.Locale locale18 = builder13.build();
        java.lang.String str19 = locale18.getScript();
        java.util.Calendar calendar20 = dateMidnight10.toCalendar(locale18);
        // The following exception was thrown during execution in test generation
        try {
            int int22 = calendar20.getGreatestMinimum(292278994);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 292278994");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(calendar20);
        org.junit.Assert.assertEquals(calendar20.toString(), "java.util.GregorianCalendar[time=-61038403200000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=35,MONTH=9,WEEK_OF_YEAR=42,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=284,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test10395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10395");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.now();
        org.joda.time.DateTime dateTime2 = localDate1.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone4);
        int int6 = dateMidnight5.getEra();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateMidnight5.toDateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusDays(9);
        int int11 = dateTime8.getEra();
        org.joda.time.DateTime dateTime12 = dateTime8.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = dateTime12.getZone();
        java.lang.String str15 = dateTimeZone13.getNameKey((long) '4');
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        int int19 = dateMidnight18.getEra();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateMidnight18.toDateTime(chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusDays(9);
        int int24 = dateTime21.getEra();
        org.joda.time.DateTime dateTime25 = dateTime21.toDateTime();
        int int26 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Period period28 = org.joda.time.Period.days(1);
        org.joda.time.Period period30 = period28.minusSeconds(5);
        org.joda.time.DateTime dateTime31 = dateTime25.plus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DateTime.Property property33 = dateTime25.property(dateTimeFieldType32);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.YearMonthDay yearMonthDay38 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology37);
        org.joda.time.Interval interval39 = yearMonthDay38.toInterval();
        org.joda.time.Interval interval41 = interval39.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime42 = interval41.getEnd();
        org.joda.time.DateTime.Property property43 = dateTime42.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(0L, 100L, periodType48, chronology49);
        java.lang.Object obj51 = mutablePeriod50.clone();
        java.lang.String str52 = mutablePeriod50.toString();
        mutableDateTime45.add((org.joda.time.ReadablePeriod) mutablePeriod50, 2022);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime45.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone57);
        int int59 = dateMidnight58.getEra();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = dateMidnight58.toDateTime(chronology60);
        org.joda.time.DateTime dateTime63 = dateTime61.plusDays(9);
        int int64 = dateTime61.getEra();
        org.joda.time.DateTime dateTime65 = dateTime61.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone66 = dateTime65.getZone();
        long long69 = dateTimeZone66.adjustOffset((long) 5, true);
        mutableDateTime45.setZoneRetainFields(dateTimeZone66);
        java.util.TimeZone timeZone71 = dateTimeZone66.toTimeZone();
        long long73 = dateTimeZone66.convertUTCToLocal(53230963L);
        java.util.Locale locale75 = java.util.Locale.CHINA;
        java.lang.String str76 = dateTimeZone66.getName((long) 53243308, locale75);
        org.joda.time.DateTime dateTime77 = dateTime42.withZoneRetainFields(dateTimeZone66);
        org.joda.time.DateTime dateTime78 = dateTime25.withZone(dateTimeZone66);
        org.joda.time.DateTime dateTime79 = dateTime2.toDateTime(dateTimeZone66);
        org.joda.time.LocalDate localDate80 = new org.joda.time.LocalDate(dateTimeZone66);
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate((long) 366, dateTimeZone66);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PT0.100S" + "'", str52, "PT0.100S");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 5L + "'", long69 == 5L);
        org.junit.Assert.assertNotNull(timeZone71);
        org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 53230963L + "'", long73 == 53230963L);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00" + "'", str76, "+00:00");
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime79);
    }

    @Test
    public void test10396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10396");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 48);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.withHourOfDay(21);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(0L, 100L, periodType10, chronology11);
        java.lang.Object obj13 = mutablePeriod12.clone();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        mutablePeriod12.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.Duration duration23 = mutablePeriod12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight22);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight7.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate25 = dateMidnight24.toLocalDate();
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        java.lang.Object obj32 = mutablePeriod31.clone();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(0L, 100L, periodType35, chronology36);
        mutablePeriod31.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod37);
        int int39 = mutablePeriod37.getMinutes();
        org.joda.time.Period period41 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        java.lang.String str43 = durationFieldType42.toString();
        org.joda.time.Period period45 = period41.withField(durationFieldType42, 2);
        boolean boolean46 = mutablePeriod37.isSupported(durationFieldType42);
        long long49 = chronology26.add((org.joda.time.ReadablePeriod) mutablePeriod37, (long) 53230763, 2);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 11, chronology26);
        org.joda.time.LocalDate.Property property51 = localDate50.era();
        // The following exception was thrown during execution in test generation
        try {
            int int52 = timeOfDay3.compareTo((org.joda.time.ReadablePartial) localDate50);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "PT0.100S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(obj32);
        org.junit.Assert.assertEquals(obj32.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj32), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj32), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hours" + "'", str43, "hours");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 53230963L + "'", long49 == 53230963L);
        org.junit.Assert.assertNotNull(property51);
    }

    @Test
    public void test10397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10397");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone36);
        org.joda.time.Duration duration38 = mutablePeriod27.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight22.plus((org.joda.time.ReadableDuration) duration38);
        int int40 = dateMidnight19.compareTo((org.joda.time.ReadableInstant) dateMidnight39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight19, readableInstant41);
        org.joda.time.DateMidnight.Property property43 = dateMidnight19.monthOfYear();
        org.joda.time.DateMidnight dateMidnight44 = property43.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime45 = dateMidnight44.toDateTimeISO();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0.100S");
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test10398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10398");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale.setDefault(locale1);
        java.lang.String str3 = locale1.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test10399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10399");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        mutableDateTime4.setDayOfMonth((int) (byte) 10);
        mutableDateTime4.add((long) 6);
        mutableDateTime4.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.monthOfYear();
        mutableDateTime4.setTime((org.joda.time.ReadableInstant) dateMidnight11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = dateMidnight11.toString("1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.000Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test10400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10400");
        org.joda.time.Period period1 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.Period period3 = period1.plusMonths((int) 'a');
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.millisOfSecond();
        boolean boolean8 = period1.equals((java.lang.Object) localDateTime5);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = localDateTime5.getValue((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 52");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test10401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10401");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        int int8 = dateMidnight7.getEra();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = dateMidnight7.toDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(9);
        int int13 = dateTime10.getEra();
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime14.getZone();
        java.lang.String str16 = dateTimeZone15.toString();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withZone(dateTimeZone15);
        org.joda.time.format.DateTimeParser dateTimeParser19 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter20.withPivotYear((java.lang.Integer) 35);
        org.joda.time.format.DateTimeParser dateTimeParser23 = dateTimeFormatter22.getParser();
        boolean boolean24 = dateTimeFormatter22.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeFormatter22.getZone();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        java.lang.Object obj36 = mutablePeriod35.clone();
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(0L, 100L, periodType39, chronology40);
        mutablePeriod35.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone44);
        org.joda.time.Duration duration46 = mutablePeriod35.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight45);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight30.plus((org.joda.time.ReadableDuration) duration46);
        org.joda.time.LocalDate localDate48 = dateMidnight47.toLocalDate();
        org.joda.time.Chronology chronology49 = localDate48.getChronology();
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(0L, 100L, periodType52, chronology53);
        java.lang.Object obj55 = mutablePeriod54.clone();
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(0L, 100L, periodType58, chronology59);
        mutablePeriod54.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod60);
        int int62 = mutablePeriod60.getMinutes();
        org.joda.time.Period period64 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType65 = org.joda.time.DurationFieldType.hours();
        java.lang.String str66 = durationFieldType65.toString();
        org.joda.time.Period period68 = period64.withField(durationFieldType65, 2);
        boolean boolean69 = mutablePeriod60.isSupported(durationFieldType65);
        long long72 = chronology49.add((org.joda.time.ReadablePeriod) mutablePeriod60, (long) 53230763, 2);
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate((long) 11, chronology49);
        org.joda.time.DateTimeField dateTimeField74 = chronology49.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField75 = chronology49.era();
        org.joda.time.DateTimeField dateTimeField76 = chronology49.weekOfWeekyear();
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate(0L, chronology49);
        org.joda.time.LocalDate localDate78 = org.joda.time.LocalDate.now(chronology49);
        boolean boolean79 = dateTimeZone25.equals((java.lang.Object) chronology49);
        boolean boolean80 = dateTimeZone25.isFixed();
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Etc/UTC" + "'", str16, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(dateTimeParser19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNull(dateTimeParser23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "PT0.100S");
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "hours" + "'", str66, "hours");
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 53230963L + "'", long72 == 53230963L);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test10402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10402");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusYears(6);
        org.joda.time.YearMonthDay.Property property3 = yearMonthDay2.year();
        int int4 = yearMonthDay2.getDayOfMonth();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.year();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusSeconds((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withYearOfCentury(4);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone15);
        int int17 = dateMidnight16.getEra();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(0L, 100L, periodType20, chronology21);
        java.lang.Object obj23 = mutablePeriod22.clone();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(0L, 100L, periodType26, chronology27);
        mutablePeriod22.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone31);
        org.joda.time.Duration duration33 = mutablePeriod22.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight32);
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight16, (org.joda.time.ReadableDuration) duration33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone36);
        int int38 = dateMidnight37.getEra();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        java.lang.Object obj44 = mutablePeriod43.clone();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0L, 100L, periodType47, chronology48);
        mutablePeriod43.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone52);
        org.joda.time.Duration duration54 = mutablePeriod43.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight37, (org.joda.time.ReadableDuration) duration54);
        boolean boolean56 = duration33.isLongerThan((org.joda.time.ReadableDuration) duration54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime13.plus((org.joda.time.ReadableDuration) duration54);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime13.withYearOfCentury(6);
        org.joda.time.DateTime dateTime60 = localDateTime59.toDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        int int62 = localDateTime59.get(dateTimeFieldType61);
        // The following exception was thrown during execution in test generation
        try {
            int int63 = yearMonthDay2.get(dateTimeFieldType61);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'clockhourOfHalfday' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21 + "'", int4 == 21);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(obj23);
        org.junit.Assert.assertEquals(obj23.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "PT0.100S");
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "PT0.100S");
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
    }

    @Test
    public void test10403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10403");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 1970);
        mutablePeriod1.addDays(53243308);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        java.lang.Object obj14 = mutablePeriod13.clone();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(0L, 100L, periodType17, chronology18);
        mutablePeriod13.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone22);
        org.joda.time.Duration duration24 = mutablePeriod13.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight23);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight8.plus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.LocalDate localDate26 = dateMidnight25.toLocalDate();
        org.joda.time.Chronology chronology27 = localDate26.getChronology();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(0L, 100L, periodType36, chronology37);
        mutablePeriod32.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod38);
        int int40 = mutablePeriod38.getMinutes();
        org.joda.time.Period period42 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.hours();
        java.lang.String str44 = durationFieldType43.toString();
        org.joda.time.Period period46 = period42.withField(durationFieldType43, 2);
        boolean boolean47 = mutablePeriod38.isSupported(durationFieldType43);
        long long50 = chronology27.add((org.joda.time.ReadablePeriod) mutablePeriod38, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.Chronology chronology52 = chronology27.withZone(dateTimeZone51);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate(chronology52);
        org.joda.time.DurationField durationField54 = chronology52.halfdays();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.clockhourOfDay();
        mutablePeriod1.setPeriod((long) 12, (long) 53250029, chronology52);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology60);
        org.joda.time.Interval interval62 = yearMonthDay61.toInterval();
        org.joda.time.Interval interval64 = interval62.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime65 = interval64.getEnd();
        mutablePeriod1.add((org.joda.time.ReadableInterval) interval64);
        int int67 = mutablePeriod1.getDays();
        mutablePeriod1.setPeriod(1020248, 53753231, 10223, (-4104), 9, 32772, 112, 120052);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "PT0.100S");
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "hours" + "'", str44, "hours");
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 53230963L + "'", long50 == 53230963L);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test10404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10404");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        mutableDateTime4.setDayOfMonth((int) (byte) 10);
        mutableDateTime4.add((long) 6);
        mutableDateTime4.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.monthOfYear();
        mutableDateTime4.setTime((org.joda.time.ReadableInstant) dateMidnight11);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone15);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, 100L, periodType19, chronology20);
        java.lang.Object obj22 = mutablePeriod21.clone();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone30);
        org.joda.time.Duration duration32 = mutablePeriod21.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight16.plus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.LocalDate localDate34 = dateMidnight33.toLocalDate();
        org.joda.time.Period period36 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        java.lang.String str38 = durationFieldType37.toString();
        org.joda.time.Period period40 = period36.withField(durationFieldType37, 2);
        org.joda.time.Period period42 = period40.withMillis((int) '#');
        org.joda.time.LocalDate localDate43 = localDate34.minus((org.joda.time.ReadablePeriod) period42);
        int int44 = period42.getMonths();
        org.joda.time.Period period46 = period42.minusMinutes(8);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime4, (org.joda.time.ReadablePeriod) period42);
        long long48 = interval47.toDurationMillis();
        org.joda.time.MutableInterval mutableInterval49 = interval47.toMutableInterval();
        org.joda.time.Period period58 = new org.joda.time.Period(887, 1970, 59, (int) (byte) 1, 713, 32772, 53329, 455376);
        org.joda.time.Interval interval59 = interval47.withPeriodAfterStart((org.joda.time.ReadablePeriod) period58);
        org.joda.time.MutableDateTime mutableDateTime61 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime61.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime63 = property62.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime64 = property62.roundFloor();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.YearMonthDay yearMonthDay69 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology68);
        org.joda.time.DateMidnight dateMidnight70 = yearMonthDay69.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight70.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period75 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime64, (org.joda.time.ReadableInstant) dateMidnight70, periodType74);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateMidnight dateMidnight78 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone77);
        int int79 = dateMidnight78.getEra();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateTime dateTime81 = dateMidnight78.toDateTime(chronology80);
        org.joda.time.DateTime dateTime83 = dateTime81.plusDays(9);
        int int84 = dateTime81.getEra();
        org.joda.time.DateTime dateTime85 = dateTime81.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone86 = dateTime85.getZone();
        long long89 = dateTimeZone86.adjustOffset((long) 5, true);
        boolean boolean91 = dateTimeZone86.isStandardOffset((long) 3);
        mutableDateTime64.setZoneRetainFields(dateTimeZone86);
        mutableDateTime64.setTime(0L);
        mutableDateTime64.addDays(4);
        boolean boolean97 = interval47.isAfter((org.joda.time.ReadableInstant) mutableDateTime64);
        long long98 = interval47.getStartMillis();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "PT0.100S");
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hours" + "'", str38, "hours");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 7200035L + "'", long48 == 7200035L);
        org.junit.Assert.assertNotNull(mutableInterval49);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 5L + "'", long89 == 5L);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 1673222400000L + "'", long98 == 1673222400000L);
    }

    @Test
    public void test10405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10405");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.roundFloor();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology8);
        org.joda.time.DateMidnight dateMidnight10 = yearMonthDay9.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime4, (org.joda.time.ReadableInstant) dateMidnight10, periodType14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        int int19 = dateMidnight18.getEra();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateMidnight18.toDateTime(chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusDays(9);
        int int24 = dateTime21.getEra();
        org.joda.time.DateTime dateTime25 = dateTime21.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime25.getZone();
        long long29 = dateTimeZone26.adjustOffset((long) 5, true);
        boolean boolean31 = dateTimeZone26.isStandardOffset((long) 3);
        mutableDateTime4.setZoneRetainFields(dateTimeZone26);
        mutableDateTime4.setTime(0L);
        int int35 = mutableDateTime4.getMonthOfYear();
        int int36 = mutableDateTime4.getWeekyear();
        mutableDateTime4.add((long) 31);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime4.year();
        org.joda.time.DateTimeField dateTimeField40 = property39.getField();
        int int41 = dateTimeField40.getMaximumValue();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 5L + "'", long29 == 5L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2021 + "'", int36 == 2021);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 292278993 + "'", int41 == 292278993);
    }

    @Test
    public void test10406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10406");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.secondOfDay();
        java.lang.String str4 = property3.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime6 = property3.add((long) 15);
        org.joda.time.MutableDateTime mutableDateTime7 = property3.roundHalfEven();
        java.util.Locale locale8 = null;
        java.util.Calendar calendar9 = mutableDateTime7.toCalendar(locale8);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone("");
        java.lang.String str12 = timeZone11.getID();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        calendar9.setTimeZone(timeZone11);
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, 100L, periodType19, chronology20);
        java.lang.Object obj22 = mutablePeriod21.clone();
        java.lang.String str23 = mutablePeriod21.toString();
        mutableDateTime16.add((org.joda.time.ReadablePeriod) mutablePeriod21, 2022);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime16.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone28);
        int int30 = dateMidnight29.getEra();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = dateMidnight29.toDateTime(chronology31);
        org.joda.time.DateTime dateTime34 = dateTime32.plusDays(9);
        int int35 = dateTime32.getEra();
        org.joda.time.DateTime dateTime36 = dateTime32.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = dateTime36.getZone();
        long long40 = dateTimeZone37.adjustOffset((long) 5, true);
        mutableDateTime16.setZoneRetainFields(dateTimeZone37);
        java.util.TimeZone timeZone42 = dateTimeZone37.toTimeZone();
        boolean boolean43 = timeZone42.observesDaylightTime();
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.millisOfDay();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime45.secondOfDay();
        java.lang.String str48 = property47.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime50 = property47.add((long) 15);
        org.joda.time.MutableDateTime mutableDateTime51 = property47.roundHalfEven();
        java.util.Locale locale52 = null;
        java.util.Calendar calendar53 = mutableDateTime51.toCalendar(locale52);
        java.util.TimeZone timeZone55 = java.util.TimeZone.getTimeZone("");
        java.lang.String str56 = timeZone55.getID();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        calendar53.setTimeZone(timeZone55);
        boolean boolean59 = timeZone42.hasSameRules(timeZone55);
        calendar9.setTimeZone(timeZone55);
        calendar9.set(0, 252, 456, 58553967, 866);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0" + "'", str4, "0");
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(calendar9);
        org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=0,MONTH=252,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=456,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=58553967,MINUTE=866,SECOND=15,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "GMT" + "'", str12, "GMT");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT0.100S" + "'", str23, "PT0.100S");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 5L + "'", long40 == 5L);
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "0" + "'", str48, "0");
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(calendar53);
        org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=1640995215000,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=15,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone55);
        org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "GMT" + "'", str56, "GMT");
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test10407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10407");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        int int8 = dateTime5.getEra();
        int int9 = dateTime5.getSecondOfMinute();
        org.joda.time.DateTime.Property property10 = dateTime5.millisOfSecond();
        org.joda.time.DateTime dateTime11 = property10.roundFloorCopy();
        org.joda.time.DateTime.Property property12 = dateTime11.year();
        org.joda.time.DateTime.Property property13 = dateTime11.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test10408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10408");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType2 = periodType1.withMillisRemoved();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone5);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(0L, 100L, periodType9, chronology10);
        java.lang.Object obj12 = mutablePeriod11.clone();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(0L, 100L, periodType15, chronology16);
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone20);
        org.joda.time.Duration duration22 = mutablePeriod11.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight6.plus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.LocalDate localDate24 = dateMidnight23.toLocalDate();
        org.joda.time.Chronology chronology25 = localDate24.getChronology();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        java.lang.Object obj31 = mutablePeriod30.clone();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, 100L, periodType34, chronology35);
        mutablePeriod30.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod36);
        int int38 = mutablePeriod36.getMinutes();
        org.joda.time.Period period40 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.hours();
        java.lang.String str42 = durationFieldType41.toString();
        org.joda.time.Period period44 = period40.withField(durationFieldType41, 2);
        boolean boolean45 = mutablePeriod36.isSupported(durationFieldType41);
        long long48 = chronology25.add((org.joda.time.ReadablePeriod) mutablePeriod36, (long) 53230763, 2);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) 11, chronology25);
        org.joda.time.Period period50 = new org.joda.time.Period((-59930L), periodType1, chronology25);
        org.joda.time.DateTimeField dateTimeField51 = chronology25.weekOfWeekyear();
        org.joda.time.DurationField durationField52 = chronology25.weekyears();
        org.joda.time.LocalDate localDate53 = org.joda.time.LocalDate.now(chronology25);
        org.joda.time.LocalDate.Property property54 = localDate53.yearOfEra();
        java.util.Calendar.Builder builder56 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder60 = builder56.setDate(53243063, 21, 32769);
        java.util.Calendar.Builder builder62 = builder60.setLenient(true);
        java.util.Locale.Category category63 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale64 = java.util.Locale.getDefault(category63);
        java.util.Locale locale65 = java.util.Locale.getDefault(category63);
        java.util.Calendar.Builder builder66 = builder60.setLocale(locale65);
        org.joda.time.tz.NameProvider nameProvider67 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale68 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str71 = nameProvider67.getName(locale68, "", "0035-10-10");
        java.lang.String str72 = locale68.getCountry();
        java.lang.String str73 = locale65.getDisplayName(locale68);
        org.joda.time.LocalDate localDate74 = property54.setCopy("1", locale68);
        java.util.Set<java.lang.String> strSet75 = locale68.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet76 = locale68.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.YearMonthDay yearMonthDay81 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology80);
        java.lang.String str82 = yearMonthDay81.toString();
        org.joda.time.YearMonthDay yearMonthDay84 = yearMonthDay81.minusDays(10);
        org.joda.time.YearMonthDay.Property property85 = yearMonthDay81.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay87 = property85.addToCopy((int) (byte) 100);
        java.util.Locale locale88 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale89 = locale88.stripExtensions();
        java.lang.String str90 = locale89.getDisplayVariant();
        java.lang.String str91 = locale89.getISO3Language();
        java.util.Locale.setDefault(locale89);
        int int93 = property85.getMaximumTextLength(locale89);
        java.lang.String str94 = locale68.getDisplayCountry(locale89);
        java.util.Set<java.lang.String> strSet95 = locale89.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "PT0.100S");
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hours" + "'", str42, "hours");
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 53230963L + "'", long48 == 53230963L);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + category63 + "' != '" + java.util.Locale.Category.FORMAT + "'", category63.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(nameProvider67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "fr_CA");
        org.junit.Assert.assertNull(str71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "CA" + "'", str72, "CA");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "anglais (Canada)" + "'", str73, "anglais (Canada)");
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "0035-10-10" + "'", str82, "0035-10-10");
        org.junit.Assert.assertNotNull(yearMonthDay84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(yearMonthDay87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "zho" + "'", str91, "zho");
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 3 + "'", int93 == 3);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "\u52a0\u62ff\u5927" + "'", str94, "\u52a0\u62ff\u5927");
        org.junit.Assert.assertNotNull(strSet95);
    }

    @Test
    public void test10409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10409");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("T23:05:00.000");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone5);
        int int7 = dateMidnight6.getEra();
        org.joda.time.Chronology chronology8 = dateMidnight6.getChronology();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        java.lang.Object obj14 = mutablePeriod13.clone();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(0L, 100L, periodType17, chronology18);
        mutablePeriod13.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod19);
        int int21 = mutablePeriod19.getMinutes();
        org.joda.time.Period period23 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.hours();
        java.lang.String str25 = durationFieldType24.toString();
        org.joda.time.Period period27 = period23.withField(durationFieldType24, 2);
        boolean boolean28 = mutablePeriod19.isSupported(durationFieldType24);
        java.lang.String str29 = durationFieldType24.getName();
        java.lang.String str30 = durationFieldType24.getName();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight6.withFieldAdded(durationFieldType24, 43);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(chronology33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.year();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plusSeconds((int) (byte) 10);
        org.joda.time.Chronology chronology40 = localDateTime39.getChronology();
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(chronology40);
        org.joda.time.DurationField durationField42 = chronology40.days();
        boolean boolean43 = durationFieldType24.isSupported(chronology40);
        mutableDateTime1.add(durationFieldType24, 53538349);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hours" + "'", str25, "hours");
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hours" + "'", str29, "hours");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "hours" + "'", str30, "hours");
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test10410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10410");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Interval interval22 = localDate20.toInterval(dateTimeZone21);
        org.joda.time.Duration duration23 = interval22.toDuration();
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime27 = property26.roundHalfFloor();
        mutableDateTime27.setMonthOfYear(11);
        int int30 = mutableDateTime27.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        int int34 = dateMidnight33.getEra();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = dateMidnight33.toDateTime(chronology35);
        org.joda.time.DateTime dateTime38 = dateTime36.plusDays(9);
        org.joda.time.DateTime.Property property39 = dateTime36.monthOfYear();
        org.joda.time.DateTime dateTime40 = property39.roundFloorCopy();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology44);
        org.joda.time.Interval interval46 = yearMonthDay45.toInterval();
        org.joda.time.Interval interval48 = interval46.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime49 = interval48.getEnd();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology53);
        org.joda.time.Interval interval55 = yearMonthDay54.toInterval();
        org.joda.time.DateTime dateTime56 = yearMonthDay54.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property58 = dateTime56.property(dateTimeFieldType57);
        boolean boolean59 = dateTime49.isSupported(dateTimeFieldType57);
        int int60 = dateTime40.get(dateTimeFieldType57);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.YearMonthDay yearMonthDay65 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology64);
        int int66 = yearMonthDay65.size();
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(0L, 100L, periodType69, chronology70);
        java.lang.Object obj72 = mutablePeriod71.clone();
        org.joda.time.PeriodType periodType75 = null;
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod(0L, 100L, periodType75, chronology76);
        mutablePeriod71.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod77);
        org.joda.time.YearMonthDay yearMonthDay79 = yearMonthDay65.plus((org.joda.time.ReadablePeriod) mutablePeriod77);
        org.joda.time.DateTimeZone dateTimeZone83 = null;
        org.joda.time.DateMidnight dateMidnight84 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone83);
        int int85 = dateMidnight84.getEra();
        org.joda.time.Chronology chronology86 = dateMidnight84.getChronology();
        mutablePeriod77.setPeriod((long) (byte) 100, (long) (byte) -1, chronology86);
        org.joda.time.DurationField durationField88 = chronology86.weekyears();
        org.joda.time.DateTime dateTime89 = dateTime40.withChronology(chronology86);
        org.joda.time.DateTime dateTime91 = dateTime89.plusSeconds((int) 'a');
        mutableDateTime27.setMillis((org.joda.time.ReadableInstant) dateTime91);
        boolean boolean93 = interval22.contains((org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.DateTime.Property property94 = dateTime91.minuteOfHour();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 11 + "'", int30 == 11);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay79);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(property94);
    }

    @Test
    public void test10411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10411");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusSeconds((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval7 = new org.joda.time.Interval((java.lang.Object) localDateTime4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.LocalDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test10412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10412");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0L, 100L, periodType6, chronology7);
        java.lang.Object obj9 = mutablePeriod8.clone();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.Duration duration19 = mutablePeriod8.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight3.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.LocalDate localDate21 = dateMidnight20.toLocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.dayOfYear();
        org.joda.time.LocalDate localDate23 = property22.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate25 = localDate23.withWeekyear(11);
        org.joda.time.format.DateTimePrinter dateTimePrinter26 = null;
        org.joda.time.format.DateTimeParser dateTimeParser27 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter26, dateTimeParser27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter28.withPivotYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        int int34 = dateMidnight33.getEra();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = dateMidnight33.toDateTime(chronology35);
        org.joda.time.DateTime dateTime38 = dateTime36.plusDays(9);
        int int39 = dateTime36.getEra();
        org.joda.time.DateTime dateTime40 = dateTime36.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone41 = dateTime40.getZone();
        java.lang.String str42 = dateTimeZone41.toString();
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay(dateTimeZone41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter28.withZone(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = localDate25.toDateTimeAtStartOfDay(dateTimeZone41);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone41);
        boolean boolean47 = dateTimeZone41.isFixed();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 53355320, dateTimeZone41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime50 = dateTime48.withEra(42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 42 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT0.100S");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Etc/UTC" + "'", str42, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test10413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10413");
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology11);
        org.joda.time.Interval interval13 = yearMonthDay12.toInterval();
        org.joda.time.Interval interval15 = interval13.withEndMillis((long) 2);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime20 = property18.add((long) 3);
        org.joda.time.Interval interval21 = interval13.withEnd((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone26);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(0L, 100L, periodType36, chronology37);
        mutablePeriod32.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone41);
        org.joda.time.Duration duration43 = mutablePeriod32.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight27.plus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.LocalDate localDate45 = dateMidnight44.toLocalDate();
        org.joda.time.Chronology chronology46 = localDate45.getChronology();
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(0L, 100L, periodType49, chronology50);
        java.lang.Object obj52 = mutablePeriod51.clone();
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(0L, 100L, periodType55, chronology56);
        mutablePeriod51.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod57);
        int int59 = mutablePeriod57.getMinutes();
        org.joda.time.Period period61 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.hours();
        java.lang.String str63 = durationFieldType62.toString();
        org.joda.time.Period period65 = period61.withField(durationFieldType62, 2);
        boolean boolean66 = mutablePeriod57.isSupported(durationFieldType62);
        long long69 = chronology46.add((org.joda.time.ReadablePeriod) mutablePeriod57, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.Chronology chronology71 = chronology46.withZone(dateTimeZone70);
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((long) 11, chronology71);
        org.joda.time.DurationField durationField73 = chronology71.days();
        org.joda.time.Interval interval74 = new org.joda.time.Interval((long) (-1), (long) (short) 0, chronology71);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone76);
        int int78 = dateMidnight77.getEra();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.DateTime dateTime80 = dateMidnight77.toDateTime(chronology79);
        org.joda.time.DateTime dateTime82 = dateTime80.minusWeeks(0);
        org.joda.time.Interval interval83 = interval74.withStart((org.joda.time.ReadableInstant) dateTime80);
        long long84 = interval74.getEndMillis();
        org.joda.time.PeriodType periodType89 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType90 = periodType89.withMillisRemoved();
        org.joda.time.Period period91 = new org.joda.time.Period((long) 10, (long) '#', periodType90);
        org.joda.time.Period period92 = new org.joda.time.Period((long) (short) 10, (long) 53233428, periodType90);
        org.joda.time.Period period93 = interval74.toPeriod(periodType90);
        org.joda.time.PeriodType periodType94 = periodType90.withDaysRemoved();
        org.joda.time.PeriodType periodType95 = periodType90.withSecondsRemoved();
        org.joda.time.Period period96 = interval21.toPeriod(periodType95);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period97 = new org.joda.time.Period(53541, 53256551, 1022397, 96, 69840000, 65015, 86399, 340, periodType95);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'weeks'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0.100S");
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(obj52);
        org.junit.Assert.assertEquals(obj52.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj52), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj52), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "hours" + "'", str63, "hours");
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 53230963L + "'", long69 == 53230963L);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(periodType89);
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertNotNull(periodType94);
        org.junit.Assert.assertNotNull(periodType95);
        org.junit.Assert.assertNotNull(period96);
    }

    @Test
    public void test10414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10414");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        int int1 = localTime0.getMillisOfDay();
        org.joda.time.LocalTime.Property property2 = localTime0.hourOfDay();
        org.joda.time.LocalTime localTime4 = property2.addCopy(0L);
        org.joda.time.LocalTime localTime5 = property2.roundHalfCeilingCopy();
        org.joda.time.Interval interval6 = property2.toInterval();
        org.joda.time.Interval interval7 = interval6.toInterval();
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 53802943 + "'", int1 == 53802943);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(interval7);
    }

    @Test
    public void test10415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10415");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0L, 100L, periodType6, chronology7);
        java.lang.Object obj9 = mutablePeriod8.clone();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.Duration duration19 = mutablePeriod8.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight3.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.LocalDate localDate21 = dateMidnight20.toLocalDate();
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        int int35 = mutablePeriod33.getMinutes();
        org.joda.time.Period period37 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType38 = org.joda.time.DurationFieldType.hours();
        java.lang.String str39 = durationFieldType38.toString();
        org.joda.time.Period period41 = period37.withField(durationFieldType38, 2);
        boolean boolean42 = mutablePeriod33.isSupported(durationFieldType38);
        long long45 = chronology22.add((org.joda.time.ReadablePeriod) mutablePeriod33, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.Chronology chronology47 = chronology22.withZone(dateTimeZone46);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 11, chronology47);
        org.joda.time.DurationField durationField49 = chronology47.days();
        org.joda.time.DurationField durationField50 = chronology47.weekyears();
        org.joda.time.DateTimeField dateTimeField51 = chronology47.centuryOfEra();
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT0.100S");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "hours" + "'", str39, "hours");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 53230963L + "'", long45 == 53230963L);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test10416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10416");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfDay(100);
        int int6 = localDateTime5.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = localDateTime5.getFieldType((int) (byte) 1);
        java.util.Date date9 = localDateTime5.toDate();
        int int10 = localDateTime5.getYearOfEra();
        org.joda.time.LocalDateTime.Property property11 = localDateTime5.year();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 13 + "'", int6 == 13);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Mon Dec 13 00:00:00 GMT 2021");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2021 + "'", int10 == 2021);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test10417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10417");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.Period period6 = interval5.toPeriod();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType8 = periodType7.withMillisRemoved();
        int int9 = periodType8.size();
        org.joda.time.Period period11 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.hours();
        java.lang.String str13 = durationFieldType12.toString();
        org.joda.time.Period period15 = period11.withField(durationFieldType12, 2);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(0L, 100L, periodType21, chronology22);
        java.lang.Object obj24 = mutablePeriod23.clone();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        mutablePeriod23.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone32);
        org.joda.time.Duration duration34 = mutablePeriod23.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight18.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.LocalDate localDate36 = dateMidnight35.toLocalDate();
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(0L, 100L, periodType40, chronology41);
        java.lang.Object obj43 = mutablePeriod42.clone();
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(0L, 100L, periodType46, chronology47);
        mutablePeriod42.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod48);
        int int50 = mutablePeriod48.getMinutes();
        org.joda.time.Period period52 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.hours();
        java.lang.String str54 = durationFieldType53.toString();
        org.joda.time.Period period56 = period52.withField(durationFieldType53, 2);
        boolean boolean57 = mutablePeriod48.isSupported(durationFieldType53);
        long long60 = chronology37.add((org.joda.time.ReadablePeriod) mutablePeriod48, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.Chronology chronology62 = chronology37.withZone(dateTimeZone61);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(chronology62);
        org.joda.time.DurationField durationField64 = chronology62.halfdays();
        org.joda.time.DurationField durationField65 = durationFieldType12.getField(chronology62);
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((java.lang.Object) interval5, periodType8, chronology62);
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(0L, 100L, periodType69, chronology70);
        java.lang.Object obj72 = mutablePeriod71.clone();
        org.joda.time.Interval interval73 = interval5.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod71);
        boolean boolean74 = interval5.isBeforeNow();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.YearMonthDay yearMonthDay79 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology78);
        org.joda.time.Interval interval80 = yearMonthDay79.toInterval();
        org.joda.time.Period period81 = interval80.toPeriod();
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.YearMonthDay yearMonthDay86 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology85);
        org.joda.time.Interval interval87 = yearMonthDay86.toInterval();
        org.joda.time.Period period88 = interval87.toPeriod();
        long long89 = interval87.getStartMillis();
        org.joda.time.Interval interval90 = interval80.overlap((org.joda.time.ReadableInterval) interval87);
        boolean boolean91 = interval5.isAfter((org.joda.time.ReadableInterval) interval90);
        org.joda.time.Duration duration92 = interval5.toDuration();
        org.joda.time.Duration duration93 = duration92.toDuration();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hours" + "'", str13, "hours");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "PT0.100S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(obj43);
        org.junit.Assert.assertEquals(obj43.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "hours" + "'", str54, "hours");
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 53230963L + "'", long60 == 53230963L);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(obj72);
        org.junit.Assert.assertEquals(obj72.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "PT0.100S");
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + (-61038316800000L) + "'", long89 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(duration92);
        org.junit.Assert.assertNotNull(duration93);
    }

    @Test
    public void test10418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10418");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Period period22 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        java.lang.String str24 = durationFieldType23.toString();
        org.joda.time.Period period26 = period22.withField(durationFieldType23, 2);
        org.joda.time.Period period28 = period26.withMillis((int) '#');
        org.joda.time.LocalDate localDate29 = localDate20.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.LocalDate localDate31 = localDate29.minusYears(11);
        org.joda.time.LocalDate localDate33 = localDate29.withDayOfMonth(13);
        org.joda.time.LocalDate localDate35 = localDate29.minusWeeks(69);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType36.getRangeDurationType();
        java.lang.String str38 = durationFieldType37.getName();
        org.joda.time.LocalDate localDate40 = localDate35.withFieldAdded(durationFieldType37, 2004);
        int int41 = localDate40.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight(0L, dateTimeZone43);
        org.joda.time.LocalDate localDate45 = dateMidnight44.toLocalDate();
        org.joda.time.LocalDate localDate47 = localDate45.minusWeeks(100);
        org.joda.time.Chronology chronology48 = localDate45.getChronology();
        org.joda.time.LocalDate.Property property49 = localDate45.yearOfCentury();
        org.joda.time.LocalDate localDate50 = property49.roundCeilingCopy();
        org.joda.time.LocalDate.Property property51 = localDate50.weekyear();
        org.joda.time.LocalDate localDate53 = localDate50.withYearOfCentury((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType54.getRangeDurationType();
        java.lang.String str56 = durationFieldType55.getName();
        org.joda.time.LocalDate localDate58 = localDate53.withFieldAdded(durationFieldType55, 53250029);
        org.joda.time.LocalDate.Property property59 = localDate58.yearOfCentury();
        org.joda.time.LocalDate localDate60 = localDate40.withFields((org.joda.time.ReadablePartial) localDate58);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType62 = localDate58.getFieldType(112);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 112");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hours" + "'", str24, "hours");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "days" + "'", str38, "days");
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 19 + "'", int41 == 19);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "days" + "'", str56, "days");
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDate60);
    }

    @Test
    public void test10419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10419");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay9 = property8.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay11 = property8.addNoWrapToCopy(3);
        int int12 = property8.get();
        int int13 = property8.get();
        int int14 = property8.getMaximumValue();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
    }

    @Test
    public void test10420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10420");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusYears(53243063);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMillis((-46800000));
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test10421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10421");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay10 = property8.addNoWrapToCopy(3);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.minusMillis(14);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay10.plusHours(20);
        int int15 = timeOfDay14.getSecondOfMinute();
        org.joda.time.TimeOfDay.Property property16 = timeOfDay14.secondOfMinute();
        org.joda.time.Chronology chronology17 = timeOfDay14.getChronology();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test10422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10422");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.minusYears(6);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        org.joda.time.Duration duration21 = mutablePeriod10.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight5.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.LocalDate localDate23 = dateMidnight22.toLocalDate();
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        java.lang.Object obj30 = mutablePeriod29.clone();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        int int37 = mutablePeriod35.getMinutes();
        org.joda.time.Period period39 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.hours();
        java.lang.String str41 = durationFieldType40.toString();
        org.joda.time.Period period43 = period39.withField(durationFieldType40, 2);
        boolean boolean44 = mutablePeriod35.isSupported(durationFieldType40);
        long long47 = chronology24.add((org.joda.time.ReadablePeriod) mutablePeriod35, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Chronology chronology49 = chronology24.withZone(dateTimeZone48);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate(chronology49);
        org.joda.time.DurationField durationField51 = chronology49.halfdays();
        org.joda.time.DateTimeField dateTimeField52 = chronology49.secondOfMinute();
        org.joda.time.YearMonthDay yearMonthDay53 = yearMonthDay0.withChronologyRetainFields(chronology49);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.YearMonthDay yearMonthDay58 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology57);
        int int59 = yearMonthDay58.size();
        org.joda.time.PeriodType periodType62 = null;
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(0L, 100L, periodType62, chronology63);
        java.lang.Object obj65 = mutablePeriod64.clone();
        org.joda.time.PeriodType periodType68 = null;
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(0L, 100L, periodType68, chronology69);
        mutablePeriod64.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod70);
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay58.plus((org.joda.time.ReadablePeriod) mutablePeriod70);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime74 = yearMonthDay72.toDateTimeAtCurrentTime(dateTimeZone73);
        org.joda.time.DateTime dateTime75 = yearMonthDay53.toDateTimeAtMidnight(dateTimeZone73);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime(dateTimeZone73);
        org.joda.time.DateTime.Property property77 = dateTime76.yearOfEra();
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hours" + "'", str41, "hours");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 53230963L + "'", long47 == 53230963L);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 3 + "'", int59 == 3);
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property77);
    }

    @Test
    public void test10423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10423");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getHours();
        int int2 = date0.getSeconds();
        java.util.Date date9 = new java.util.Date((int) (short) 10, 32769, 9, 9, 22, 21);
        java.util.Date date11 = new java.util.Date((long) 0);
        boolean boolean12 = date9.after(date11);
        int int13 = date9.getTimezoneOffset();
        java.lang.String str14 = date9.toGMTString();
        boolean boolean15 = date0.after(date9);
        java.lang.String str16 = date0.toLocaleString();
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Mon Feb 21 14:56:43 GMT 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 14 + "'", int1 == 14);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 43 + "'", int2 == 43);
        org.junit.Assert.assertEquals(date9.toString(), "Fri Oct 09 09:22:21 GMT 4640");
        org.junit.Assert.assertEquals(date11.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "9 Oct 4640 09:22:21 GMT" + "'", str14, "9 Oct 4640 09:22:21 GMT");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-2-21 14:56:43" + "'", str16, "2022-2-21 14:56:43");
    }

    @Test
    public void test10424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10424");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight5 = property4.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight6 = property4.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight7 = property4.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight8 = property4.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight9 = property4.withMaximumValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
    }

    @Test
    public void test10425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10425");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.minutes();
        org.joda.time.PeriodType periodType2 = periodType1.withMillisRemoved();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone5);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(0L, 100L, periodType9, chronology10);
        java.lang.Object obj12 = mutablePeriod11.clone();
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(0L, 100L, periodType15, chronology16);
        mutablePeriod11.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod17);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone20);
        org.joda.time.Duration duration22 = mutablePeriod11.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight21);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight6.plus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.LocalDate localDate24 = dateMidnight23.toLocalDate();
        org.joda.time.Chronology chronology25 = localDate24.getChronology();
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(0L, 100L, periodType28, chronology29);
        java.lang.Object obj31 = mutablePeriod30.clone();
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(0L, 100L, periodType34, chronology35);
        mutablePeriod30.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod36);
        int int38 = mutablePeriod36.getMinutes();
        org.joda.time.Period period40 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.hours();
        java.lang.String str42 = durationFieldType41.toString();
        org.joda.time.Period period44 = period40.withField(durationFieldType41, 2);
        boolean boolean45 = mutablePeriod36.isSupported(durationFieldType41);
        long long48 = chronology25.add((org.joda.time.ReadablePeriod) mutablePeriod36, (long) 53230763, 2);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) 11, chronology25);
        org.joda.time.Period period50 = new org.joda.time.Period((-59930L), periodType1, chronology25);
        org.joda.time.DateTimeField dateTimeField51 = chronology25.weekOfWeekyear();
        long long54 = dateTimeField51.add((long) 28, (long) 53736036);
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "PT0.100S");
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(obj31);
        org.junit.Assert.assertEquals(obj31.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "hours" + "'", str42, "hours");
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 53230963L + "'", long48 == 53230963L);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 32499554572800028L + "'", long54 == 32499554572800028L);
    }

    @Test
    public void test10426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10426");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone6);
        int int8 = dateMidnight7.getEra();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = dateMidnight7.toDateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(9);
        int int13 = dateTime10.getEra();
        org.joda.time.DateTime dateTime14 = dateTime10.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime14.getZone();
        java.lang.String str16 = dateTimeZone15.toString();
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withZone(dateTimeZone15);
        org.joda.time.format.DateTimeParser dateTimeParser19 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withZoneUTC();
        java.io.Writer writer21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withMillisOfDay(0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.yearOfEra();
        org.joda.time.Period period30 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.hours();
        java.lang.String str32 = durationFieldType31.toString();
        org.joda.time.Period period34 = period30.withField(durationFieldType31, 2);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime27.withPeriodAdded((org.joda.time.ReadablePeriod) period34, (int) (short) 0);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(chronology37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.hourOfDay();
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(0L, 100L, periodType42, chronology43);
        java.lang.Object obj45 = mutablePeriod44.clone();
        org.joda.time.Chronology chronology48 = null;
        mutablePeriod44.setPeriod((long) 0, (long) 12, chronology48);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime38.plus((org.joda.time.ReadablePeriod) mutablePeriod44);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.weekyear();
        org.joda.time.LocalDateTime.Property property52 = localDateTime50.dayOfMonth();
        int int53 = localDateTime27.compareTo((org.joda.time.ReadablePartial) localDateTime50);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer21, (org.joda.time.ReadablePartial) localDateTime27);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Etc/UTC" + "'", str16, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(dateTimeParser19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hours" + "'", str32, "hours");
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "PT0.012S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "PT0.012S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "PT0.012S");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
    }

    @Test
    public void test10427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10427");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("");
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        boolean boolean4 = strSet3.isEmpty();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test10428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10428");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        int int12 = localTime11.getSecondOfMinute();
        org.joda.time.LocalTime localTime14 = localTime11.minusSeconds(53311722);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(0L, 100L, periodType17, chronology18);
        java.lang.Object obj20 = mutablePeriod19.clone();
        mutablePeriod19.setSeconds(53243308);
        org.joda.time.LocalTime localTime23 = localTime14.minus((org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.LocalTime.Property property24 = localTime23.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime26 = property24.setCopy("P1D");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"P1D\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "PT53243308.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "PT53243308.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "PT53243308.100S");
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test10429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10429");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getVariant();
        java.lang.String str2 = locale0.getDisplayScript();
        java.lang.String str3 = locale0.getDisplayScript();
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.getDefault(category4);
        java.util.Locale locale6 = java.util.Locale.getDefault(category4);
        java.util.Locale locale7 = java.util.Locale.ENGLISH;
        java.util.Locale.setDefault(category4, locale7);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        java.lang.Object obj17 = mutablePeriod16.clone();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(0L, 100L, periodType20, chronology21);
        mutablePeriod16.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone25);
        org.joda.time.Duration duration27 = mutablePeriod16.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight11.plus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.LocalDate localDate29 = dateMidnight28.toLocalDate();
        org.joda.time.Period period31 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.hours();
        java.lang.String str33 = durationFieldType32.toString();
        org.joda.time.Period period35 = period31.withField(durationFieldType32, 2);
        org.joda.time.Period period37 = period35.withMillis((int) '#');
        org.joda.time.LocalDate localDate38 = localDate29.minus((org.joda.time.ReadablePeriod) period37);
        org.joda.time.LocalDate localDate40 = localDate38.minusYears(11);
        org.joda.time.LocalDate localDate42 = localDate38.withDayOfMonth(13);
        java.util.Calendar.Builder builder44 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder48 = builder44.setDate(53243063, 21, 32769);
        java.util.Locale locale49 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar.Builder builder50 = builder48.setLocale(locale49);
        java.lang.String str51 = localDate38.toString("120", locale49);
        java.lang.String str52 = locale49.getCountry();
        java.lang.String str53 = locale7.getDisplayCountry(locale49);
        java.lang.String str54 = locale0.getDisplayCountry(locale7);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "PT0.100S");
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hours" + "'", str33, "hours");
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "120" + "'", str51, "120");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "CA" + "'", str52, "CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test10430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10430");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(0L, 100L, periodType2, chronology3);
        java.lang.Object obj5 = mutablePeriod4.clone();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone13);
        org.joda.time.Duration duration15 = mutablePeriod4.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight14);
        mutablePeriod4.addMillis(0);
        mutablePeriod4.setMonths(0);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone36);
        org.joda.time.Duration duration38 = mutablePeriod27.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight22.plus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        java.lang.Object obj47 = mutablePeriod46.clone();
        java.lang.String str48 = mutablePeriod46.toString();
        mutableDateTime41.add((org.joda.time.ReadablePeriod) mutablePeriod46, 2022);
        mutablePeriod4.setPeriod((org.joda.time.ReadableInstant) dateMidnight39, (org.joda.time.ReadableInstant) mutableDateTime41);
        mutableDateTime41.addWeekyears((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime54 = mutableDateTime41.copy();
        mutableDateTime41.addMinutes(50);
        mutableDateTime41.setTime((-61725661878521L));
        mutableDateTime41.addYears((int) ' ');
        org.joda.time.DateTimeZone dateTimeZone61 = mutableDateTime41.getZone();
        org.joda.time.TimeOfDay timeOfDay62 = new org.joda.time.TimeOfDay(dateTimeZone61);
        org.joda.time.TimeOfDay timeOfDay64 = timeOfDay62.plusMillis(56);
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "P52YT3M22.200S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "P52YT3M22.200S");
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0.100S");
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PT0.100S" + "'", str48, "PT0.100S");
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(timeOfDay64);
    }

    @Test
    public void test10431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10431");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay4.minusDays(1);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.lang.String str8 = dateTimeFieldType7.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay.Property property9 = yearMonthDay4.property(dateTimeFieldType7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'secondOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "secondOfDay" + "'", str8, "secondOfDay");
    }

    @Test
    public void test10432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10432");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime6.property(dateTimeFieldType7);
        org.joda.time.DateTime.Property property9 = dateTime6.minuteOfDay();
        org.joda.time.DateTime dateTime11 = dateTime6.minusYears(70);
        int int12 = dateTime11.getCenturyOfEra();
        org.joda.time.Chronology chronology13 = dateTime11.getChronology();
        long long17 = chronology13.add(0L, (-4459672L), 53624911);
        org.joda.time.DateTimeField dateTimeField18 = chronology13.yearOfEra();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-239149514089192L) + "'", long17 == (-239149514089192L));
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test10433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10433");
        java.io.IOException iOException2 = new java.io.IOException("PT0.100S");
        java.io.IOException iOException3 = new java.io.IOException("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=13,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=364,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=47,SECOND=42,MILLISECOND=580,ZONE_OFFSET=0,DST_OFFSET=0]", (java.lang.Throwable) iOException2);
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException3);
        java.io.IOException iOException8 = new java.io.IOException("PT0.100S");
        java.io.IOException iOException10 = new java.io.IOException();
        java.io.IOException iOException11 = new java.io.IOException("hi!", (java.lang.Throwable) iOException10);
        iOException8.addSuppressed((java.lang.Throwable) iOException10);
        java.io.IOException iOException13 = new java.io.IOException("PT2H0.035S", (java.lang.Throwable) iOException10);
        iOException3.addSuppressed((java.lang.Throwable) iOException13);
        java.io.IOException iOException15 = new java.io.IOException((java.lang.Throwable) iOException13);
    }

    @Test
    public void test10434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10434");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay10 = property8.addNoWrapToCopy(3);
        org.joda.time.TimeOfDay timeOfDay11 = property8.withMaximumValue();
        org.joda.time.DurationField durationField12 = property8.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay14 = property8.addWrapFieldToCopy(53239865);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(timeOfDay14);
    }

    @Test
    public void test10435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10435");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.YearMonthDay yearMonthDay6 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology5);
        org.joda.time.Interval interval7 = yearMonthDay6.toInterval();
        org.joda.time.Period period8 = interval7.toPeriod();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.PeriodType periodType10 = periodType9.withMillisRemoved();
        int int11 = periodType10.size();
        org.joda.time.Period period13 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.hours();
        java.lang.String str15 = durationFieldType14.toString();
        org.joda.time.Period period17 = period13.withField(durationFieldType14, 2);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(0L, 100L, periodType23, chronology24);
        java.lang.Object obj26 = mutablePeriod25.clone();
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(0L, 100L, periodType29, chronology30);
        mutablePeriod25.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod31);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        org.joda.time.Duration duration36 = mutablePeriod25.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight35);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight20.plus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.LocalDate localDate38 = dateMidnight37.toLocalDate();
        org.joda.time.Chronology chronology39 = localDate38.getChronology();
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(0L, 100L, periodType42, chronology43);
        java.lang.Object obj45 = mutablePeriod44.clone();
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(0L, 100L, periodType48, chronology49);
        mutablePeriod44.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod50);
        int int52 = mutablePeriod50.getMinutes();
        org.joda.time.Period period54 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.hours();
        java.lang.String str56 = durationFieldType55.toString();
        org.joda.time.Period period58 = period54.withField(durationFieldType55, 2);
        boolean boolean59 = mutablePeriod50.isSupported(durationFieldType55);
        long long62 = chronology39.add((org.joda.time.ReadablePeriod) mutablePeriod50, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.Chronology chronology64 = chronology39.withZone(dateTimeZone63);
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate(chronology64);
        org.joda.time.DurationField durationField66 = chronology64.halfdays();
        org.joda.time.DurationField durationField67 = durationFieldType14.getField(chronology64);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((java.lang.Object) interval7, periodType10, chronology64);
        org.joda.time.PeriodType periodType71 = null;
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod(0L, 100L, periodType71, chronology72);
        java.lang.Object obj74 = mutablePeriod73.clone();
        org.joda.time.Interval interval75 = interval7.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod73);
        boolean boolean76 = interval7.isBeforeNow();
        org.joda.time.Chronology chronology77 = interval7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((-61725661595482L), 3099000L, chronology77);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "hours" + "'", str15, "hours");
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "PT0.100S");
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(obj45);
        org.junit.Assert.assertEquals(obj45.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hours" + "'", str56, "hours");
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 53230963L + "'", long62 == 53230963L);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(obj74);
        org.junit.Assert.assertEquals(obj74.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj74), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj74), "PT0.100S");
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(chronology77);
    }

    @Test
    public void test10436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10436");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfFloor();
        mutableDateTime3.addWeekyears((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime3.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfCeiling();
        mutableDateTime7.addHours(53491073);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
    }

    @Test
    public void test10437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10437");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        mutableDateTime4.setDayOfMonth((int) (byte) 10);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime4.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundHalfFloor();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology12);
        org.joda.time.Interval interval14 = yearMonthDay13.toInterval();
        org.joda.time.Period period15 = interval14.toPeriod();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.YearMonthDay yearMonthDay20 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology19);
        org.joda.time.Interval interval21 = yearMonthDay20.toInterval();
        org.joda.time.Period period22 = interval21.toPeriod();
        long long23 = interval21.getStartMillis();
        org.joda.time.Interval interval24 = interval14.overlap((org.joda.time.ReadableInterval) interval21);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone26);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        java.lang.Object obj33 = mutablePeriod32.clone();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(0L, 100L, periodType36, chronology37);
        mutablePeriod32.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone41);
        org.joda.time.Duration duration43 = mutablePeriod32.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight42);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight27.plus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.LocalDate localDate45 = dateMidnight44.toLocalDate();
        org.joda.time.Chronology chronology46 = localDate45.getChronology();
        java.lang.String str47 = chronology46.toString();
        org.joda.time.DateTimeField dateTimeField48 = chronology46.secondOfDay();
        org.joda.time.Interval interval49 = interval14.withChronology(chronology46);
        org.joda.time.DurationField durationField50 = chronology46.minutes();
        boolean boolean51 = mutableDateTime8.equals((java.lang.Object) durationField50);
        org.joda.time.DateTimeField dateTimeField52 = null;
        mutableDateTime8.setRounding(dateTimeField52, 22);
        mutableDateTime8.setWeekyear(10);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime8.yearOfCentury();
        mutableDateTime8.addMinutes(365);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone61);
        int int63 = dateMidnight62.getEra();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = dateMidnight62.toDateTime(chronology64);
        long long66 = dateTime65.getMillis();
        org.joda.time.DateTime dateTime68 = dateTime65.withMillis(100L);
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone70);
        int int72 = dateMidnight71.getEra();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = dateMidnight71.toDateTime(chronology73);
        org.joda.time.DateTime dateTime76 = dateTime74.plusDays(9);
        int int77 = dateTime74.getEra();
        org.joda.time.DateTime dateTime78 = dateTime74.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone79 = dateTime78.getZone();
        org.joda.time.DateTime dateTime80 = dateTime65.withZoneRetainFields(dateTimeZone79);
        boolean boolean81 = dateTime65.isBeforeNow();
        org.joda.time.DateTime dateTime82 = dateTime65.toDateTime();
        int int83 = mutableDateTime8.compareTo((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.MutableDateTime.Property property84 = mutableDateTime8.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime85 = property84.roundFloor();
        java.util.GregorianCalendar gregorianCalendar86 = mutableDateTime85.toGregorianCalendar();
        java.util.Date date87 = gregorianCalendar86.getTime();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-61038316800000L) + "'", long23 == (-61038316800000L));
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(obj33);
        org.junit.Assert.assertEquals(obj33.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "PT0.100S");
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[UTC]" + "'", str47, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(mutableDateTime85);
        org.junit.Assert.assertNotNull(gregorianCalendar86);
        org.junit.Assert.assertNotNull(date87);
        org.junit.Assert.assertEquals(date87.toString(), "Sat Jan 03 06:05:00 GMT 11");
    }

    @Test
    public void test10438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10438");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight6 = property4.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property4.getFieldType();
        org.joda.time.DateMidnight dateMidnight8 = property4.roundHalfCeilingCopy();
        boolean boolean9 = property4.isLeap();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test10439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10439");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        int int8 = dateTime5.getEra();
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.secondOfDay();
        org.joda.time.DateTime dateTime11 = property10.roundCeilingCopy();
        org.joda.time.DateTime dateTime12 = property10.roundHalfCeilingCopy();
        org.joda.time.DateTime.Property property13 = dateTime12.minuteOfHour();
        org.joda.time.DateTime dateTime15 = property13.addToCopy((long) 47);
        org.joda.time.DateTime dateTime16 = property13.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime18 = dateTime16.minusMillis(16);
        org.joda.time.DateTime dateTime20 = dateTime16.withYearOfEra(69840000);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test10440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10440");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateTime dateTime5 = yearMonthDay4.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone8);
        int int10 = dateMidnight9.getEra();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = dateMidnight9.toDateTime(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight15 = dateTime14.toDateMidnight();
        org.joda.time.DateMidnight.Property property16 = dateMidnight15.era();
        int int17 = dateMidnight15.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        int int21 = dateMidnight20.getEra();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = dateMidnight20.toDateTime(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime23.minusWeeks(0);
        org.joda.time.DateTime dateTime26 = dateTime25.withEarlierOffsetAtOverlap();
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTime dateTime29 = dateTime25.withFieldAdded(durationFieldType27, 5);
        int int30 = dateMidnight15.compareTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime31 = dateTime29.toDateTime();
        int int32 = dateTime31.getDayOfMonth();
        org.joda.time.DateTime dateTime34 = dateTime31.minus((long) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone36);
        int int38 = dateMidnight37.getEra();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = dateMidnight37.toDateTime(chronology39);
        org.joda.time.DateTime dateTime42 = dateTime40.minusWeeks(0);
        org.joda.time.DateTime dateTime44 = dateTime40.withYear((int) (short) 10);
        org.joda.time.DateTime dateTime46 = dateTime44.plusDays(53230763);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.YearMonthDay yearMonthDay51 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology50);
        int int52 = yearMonthDay51.size();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone60);
        int int62 = dateMidnight61.getEra();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = dateMidnight61.toDateTime(chronology63);
        org.joda.time.DateTime dateTime66 = dateTime64.plusDays(9);
        int int67 = dateTime64.getEra();
        org.joda.time.DateTime dateTime68 = dateTime64.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone69 = dateTime68.getZone();
        java.lang.String str70 = dateTimeZone69.toString();
        org.joda.time.YearMonthDay yearMonthDay71 = new org.joda.time.YearMonthDay(dateTimeZone69);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((int) (byte) -1, 1, (int) (short) 1, (int) (short) 10, (int) (short) 0, 8, dateTimeZone69);
        java.lang.String str73 = dateTimeZone69.toString();
        org.joda.time.Interval interval74 = yearMonthDay51.toInterval(dateTimeZone69);
        org.joda.time.MutableDateTime mutableDateTime75 = dateTime46.toMutableDateTime(dateTimeZone69);
        org.joda.time.MutableDateTime mutableDateTime76 = dateTime31.toMutableDateTime(dateTimeZone69);
        boolean boolean77 = dateTime6.isBefore((org.joda.time.ReadableInstant) mutableDateTime76);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateMidnight dateMidnight80 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone79);
        int int81 = dateMidnight80.getEra();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.DateTime dateTime83 = dateMidnight80.toDateTime(chronology82);
        org.joda.time.DateTime dateTime85 = dateTime83.minusWeeks(0);
        mutableDateTime76.setTime((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime.Property property87 = dateTime83.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Etc/UTC" + "'", str70, "Etc/UTC");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Etc/UTC" + "'", str73, "Etc/UTC");
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertNotNull(mutableDateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(property87);
    }

    @Test
    public void test10441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10441");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        int int2 = calendar1.getFirstDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            calendar1.set(53582722, 1329237);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=1645455403443,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=43,MILLISECOND=443,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test10442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10442");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 86399);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        int int5 = dateMidnight4.getEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = dateMidnight4.toDateTime(chronology6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusDays(9);
        org.joda.time.DateTime dateTime11 = dateTime7.plusMillis(6);
        boolean boolean12 = dateTime1.isBefore((org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 4, (long) (-1));
        mutablePeriod15.setPeriod((long) 11, (long) 14);
        mutablePeriod15.addMinutes(100);
        org.joda.time.MutablePeriod mutablePeriod21 = mutablePeriod15.copy();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadablePeriod) mutablePeriod21);
        boolean boolean23 = interval22.isAfterNow();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test10443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10443");
        java.util.Date date1 = new java.util.Date((long) 6);
        int int2 = date1.getSeconds();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test10444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10444");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        int int8 = dateTime5.getEra();
        org.joda.time.DateTime dateTime9 = dateTime5.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime9.getZone();
        long long13 = dateTimeZone10.adjustOffset((long) 5, true);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now(dateTimeZone10);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.DateTime dateTime17 = dateTime15.plusYears((int) (byte) 1);
        org.joda.time.DateTime dateTime19 = dateTime15.minusMillis(32770);
        org.joda.time.DateTime.Property property20 = dateTime19.weekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 5L + "'", long13 == 5L);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test10445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10445");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(53243063, 21, 32769);
        java.util.Locale locale5 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar.Builder builder6 = builder4.setLocale(locale5);
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        java.lang.Object obj14 = mutablePeriod13.clone();
        java.lang.String str15 = mutablePeriod13.toString();
        mutableDateTime8.add((org.joda.time.ReadablePeriod) mutablePeriod13, 2022);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime8.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone20);
        int int22 = dateMidnight21.getEra();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = dateMidnight21.toDateTime(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusDays(9);
        int int27 = dateTime24.getEra();
        org.joda.time.DateTime dateTime28 = dateTime24.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = dateTime28.getZone();
        long long32 = dateTimeZone29.adjustOffset((long) 5, true);
        mutableDateTime8.setZoneRetainFields(dateTimeZone29);
        java.util.TimeZone timeZone34 = dateTimeZone29.toTimeZone();
        java.util.Calendar.Builder builder35 = builder4.setTimeZone(timeZone34);
        java.util.Calendar.Builder builder39 = builder4.setWeekDate(53233428, 12, (-1));
        java.util.Calendar.Builder builder43 = builder4.setWeekDate(22, 8, 50400000);
        java.util.Calendar.Builder builder47 = builder43.setTimeOfDay(53250029, 36, 53754824);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "PT0.100S");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT0.100S" + "'", str15, "PT0.100S");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 5L + "'", long32 == 5L);
        org.junit.Assert.assertNotNull(timeZone34);
        org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test10446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10446");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight6 = property4.addToCopy((long) ' ');
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone9);
        int int11 = dateMidnight10.getEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateMidnight10.toDateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusDays(9);
        int int16 = dateTime13.getEra();
        org.joda.time.DateTime dateTime17 = dateTime13.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime17.getZone();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight6.withZoneRetainFields(dateTimeZone18);
        org.joda.time.Period period22 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        java.lang.String str24 = durationFieldType23.toString();
        org.joda.time.Period period26 = period22.withField(durationFieldType23, 2);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.hours();
        java.lang.String str28 = durationFieldType27.toString();
        boolean boolean29 = period22.isSupported(durationFieldType27);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight6.withFieldAdded(durationFieldType27, 6);
        org.joda.time.format.DateTimePrinter dateTimePrinter32 = null;
        org.joda.time.format.DateTimeParser dateTimeParser33 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter32, dateTimeParser33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter34.withPivotYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone38);
        int int40 = dateMidnight39.getEra();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = dateMidnight39.toDateTime(chronology41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusDays(9);
        int int45 = dateTime42.getEra();
        org.joda.time.DateTime dateTime46 = dateTime42.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone47 = dateTime46.getZone();
        java.lang.String str48 = dateTimeZone47.toString();
        org.joda.time.YearMonthDay yearMonthDay49 = new org.joda.time.YearMonthDay(dateTimeZone47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter34.withZone(dateTimeZone47);
        org.joda.time.format.DateTimeParser dateTimeParser51 = dateTimeFormatter34.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter34.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter52.withPivotYear((java.lang.Integer) 35);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter54.withPivotYear(427);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str57 = dateMidnight31.toString(dateTimeFormatter54);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hours" + "'", str24, "hours");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hours" + "'", str28, "hours");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Etc/UTC" + "'", str48, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNull(dateTimeParser51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
    }

    @Test
    public void test10447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10447");
        java.util.Date date6 = new java.util.Date((int) (short) 10, 32769, 9, 9, 22, 21);
        java.util.Date date8 = new java.util.Date((long) 0);
        boolean boolean9 = date6.after(date8);
        int int10 = date6.getYear();
        int int11 = date6.getDate();
        org.joda.time.YearMonthDay yearMonthDay12 = org.joda.time.YearMonthDay.fromDateFields(date6);
        java.lang.String str13 = date6.toLocaleString();
        java.lang.String str14 = date6.toGMTString();
        org.junit.Assert.assertEquals(date6.toString(), "Fri Oct 09 09:22:21 GMT 4640");
        org.junit.Assert.assertEquals(date8.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2740 + "'", int10 == 2740);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Oct 9, 4640 9:22:21 AM" + "'", str13, "Oct 9, 4640 9:22:21 AM");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "9 Oct 4640 09:22:21 GMT" + "'", str14, "9 Oct 4640 09:22:21 GMT");
    }

    @Test
    public void test10448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10448");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 48);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.withHourOfDay(21);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusSeconds(890);
        int int6 = timeOfDay5.size();
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
    }

    @Test
    public void test10449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10449");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        int int4 = dateMidnight3.getEra();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = dateMidnight3.toDateTime(chronology5);
        org.joda.time.DateTime dateTime8 = dateTime6.plusDays(9);
        int int9 = dateTime6.getEra();
        org.joda.time.DateTime dateTime10 = dateTime6.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime10.getZone();
        long long14 = dateTimeZone11.adjustOffset((long) 5, true);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now(dateTimeZone11);
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone11);
        boolean boolean17 = dateTimeZone11.isFixed();
        org.joda.time.DateMidnight dateMidnight18 = org.joda.time.DateMidnight.now(dateTimeZone11);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) 136, dateTimeZone11);
        mutableDateTime19.addSeconds(0);
        mutableDateTime19.addMonths(53292560);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 5L + "'", long14 == 5L);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateMidnight18);
    }

    @Test
    public void test10450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10450");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        int int4 = dateMidnight2.getMillisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight2.withField(dateTimeFieldType5, 3);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.minusDays((int) (short) 10);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField11 = property10.getField();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test10451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10451");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.era();
        int int10 = dateMidnight8.getDayOfYear();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight8.plusWeeks(70);
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (byte) 1);
        boolean boolean15 = dateMidnight12.isEqual((org.joda.time.ReadableInstant) dateMidnight14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.plusYears(758);
        org.joda.time.DateTime dateTime18 = dateMidnight14.toDateTime();
        org.joda.time.DateMidnight.Property property19 = dateMidnight14.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight20 = property19.withMinimumValue();
        org.joda.time.Interval interval21 = dateMidnight20.toInterval();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(interval21);
    }

    @Test
    public void test10452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10452");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfEra(70);
        org.joda.time.LocalDate localDate10 = dateTime9.toLocalDate();
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.millis();
        java.lang.String str13 = durationField12.getName();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millis" + "'", str13, "millis");
    }

    @Test
    public void test10453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10453");
        org.joda.time.Period period1 = org.joda.time.Period.millis((-23));
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test10454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10454");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime localTime13 = property12.withMinimumValue();
        org.joda.time.LocalTime localTime15 = localTime13.withMinuteOfHour(47);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getRangeDurationType();
        org.joda.time.LocalTime.Property property18 = localTime15.property(dateTimeFieldType16);
        int int19 = localTime15.size();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
    }

    @Test
    public void test10455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10455");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay((long) 53336067);
    }

    @Test
    public void test10456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10456");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        java.lang.String str22 = chronology21.toString();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.yearOfEra();
        long long27 = chronology21.add((long) 53233428, (long) (short) 1, 292278993);
        org.joda.time.DurationField durationField28 = chronology21.millis();
        org.joda.time.DateTimeField dateTimeField29 = chronology21.millisOfDay();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ISOChronology[UTC]" + "'", str22, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 345512421L + "'", long27 == 345512421L);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test10457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10457");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(27, 752, 113, 32769);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test10458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10458");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone21);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        java.lang.Object obj28 = mutablePeriod27.clone();
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(0L, 100L, periodType31, chronology32);
        mutablePeriod27.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone36);
        org.joda.time.Duration duration38 = mutablePeriod27.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight37);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight22.plus((org.joda.time.ReadableDuration) duration38);
        int int40 = dateMidnight19.compareTo((org.joda.time.ReadableInstant) dateMidnight39);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight19, readableInstant41);
        int int43 = dateMidnight19.getYear();
        int int44 = dateMidnight19.getMinuteOfDay();
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight19.minusYears(12);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone48);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(0L, 100L, periodType52, chronology53);
        java.lang.Object obj55 = mutablePeriod54.clone();
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(0L, 100L, periodType58, chronology59);
        mutablePeriod54.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod60);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone63);
        org.joda.time.Duration duration65 = mutablePeriod54.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight64);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight49.plus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.LocalDate localDate67 = dateMidnight66.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.Interval interval69 = localDate67.toInterval(dateTimeZone68);
        java.lang.String str70 = interval69.toString();
        java.lang.String str71 = interval69.toString();
        org.joda.time.Duration duration72 = interval69.toDuration();
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight46.withDurationAdded((org.joda.time.ReadableDuration) duration72, (-1956));
        org.joda.time.MutableDateTime mutableDateTime75 = dateMidnight74.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime75.minuteOfHour();
        org.joda.time.MutableDateTime.Property property77 = mutableDateTime75.weekyear();
        org.joda.time.MutableDateTime mutableDateTime78 = property77.getMutableDateTime();
        int int79 = mutableDateTime78.getMillisOfDay();
        mutableDateTime78.addHours((-987));
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "PT0.100S");
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1970 + "'", int43 == 1970);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(obj55);
        org.junit.Assert.assertEquals(obj55.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj55), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj55), "PT0.100S");
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str70, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str71, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(mutableDateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
    }

    @Test
    public void test10459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10459");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.roundFloor();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology8);
        org.joda.time.DateMidnight dateMidnight10 = yearMonthDay9.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime4, (org.joda.time.ReadableInstant) dateMidnight10, periodType14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        int int19 = dateMidnight18.getEra();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateMidnight18.toDateTime(chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusDays(9);
        int int24 = dateTime21.getEra();
        org.joda.time.DateTime dateTime25 = dateTime21.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime25.getZone();
        long long29 = dateTimeZone26.adjustOffset((long) 5, true);
        boolean boolean31 = dateTimeZone26.isStandardOffset((long) 3);
        mutableDateTime4.setZoneRetainFields(dateTimeZone26);
        mutableDateTime4.setTime(0L);
        int int35 = mutableDateTime4.getMonthOfYear();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        java.lang.Object obj41 = mutablePeriod40.clone();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        mutablePeriod40.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.DateTimeZone dateTimeZone49 = null;
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone49);
        org.joda.time.Duration duration51 = mutablePeriod40.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight(0L, dateTimeZone53);
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone56);
        int int58 = dateMidnight57.getEra();
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(0L, 100L, periodType61, chronology62);
        java.lang.Object obj64 = mutablePeriod63.clone();
        org.joda.time.PeriodType periodType67 = null;
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod(0L, 100L, periodType67, chronology68);
        mutablePeriod63.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod69);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone72);
        org.joda.time.Duration duration74 = mutablePeriod63.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight73);
        org.joda.time.Period period75 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight57, (org.joda.time.ReadableDuration) duration74);
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight54, (org.joda.time.ReadableDuration) duration74, periodType76);
        boolean boolean78 = duration51.isLongerThan((org.joda.time.ReadableDuration) duration74);
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime4, (org.joda.time.ReadableDuration) duration74);
        mutableDateTime4.setDate((long) 53359356);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 5L + "'", long29 == 5L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "PT0.100S");
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(obj64);
        org.junit.Assert.assertEquals(obj64.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "PT0.100S");
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test10460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10460");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight(0L, dateTimeZone1);
        org.joda.time.LocalDate localDate3 = dateMidnight2.toLocalDate();
        org.joda.time.LocalDate localDate5 = localDate3.minusWeeks(100);
        org.joda.time.Chronology chronology6 = localDate3.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate3.yearOfCentury();
        org.joda.time.LocalDate localDate8 = property7.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        java.lang.Object obj17 = mutablePeriod16.clone();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(0L, 100L, periodType20, chronology21);
        mutablePeriod16.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone25);
        org.joda.time.Duration duration27 = mutablePeriod16.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight11.plus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.LocalDate localDate29 = dateMidnight28.toLocalDate();
        org.joda.time.Chronology chronology30 = localDate29.getChronology();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        java.lang.Object obj36 = mutablePeriod35.clone();
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(0L, 100L, periodType39, chronology40);
        mutablePeriod35.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod41);
        int int43 = mutablePeriod41.getMinutes();
        org.joda.time.Period period45 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.hours();
        java.lang.String str47 = durationFieldType46.toString();
        org.joda.time.Period period49 = period45.withField(durationFieldType46, 2);
        boolean boolean50 = mutablePeriod41.isSupported(durationFieldType46);
        long long53 = chronology30.add((org.joda.time.ReadablePeriod) mutablePeriod41, (long) 53230763, 2);
        org.joda.time.LocalDate localDate54 = localDate8.minus((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.LocalDate localDate56 = localDate54.withDayOfYear(14);
        org.joda.time.LocalDate localDate58 = localDate54.minusDays(53277990);
        org.joda.time.DateTime dateTime59 = localDate54.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone61);
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(0L, 100L, periodType65, chronology66);
        java.lang.Object obj68 = mutablePeriod67.clone();
        org.joda.time.PeriodType periodType71 = null;
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod(0L, 100L, periodType71, chronology72);
        mutablePeriod67.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod73);
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone76);
        org.joda.time.Duration duration78 = mutablePeriod67.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight77);
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight62.plus((org.joda.time.ReadableDuration) duration78);
        org.joda.time.LocalDate localDate80 = dateMidnight79.toLocalDate();
        org.joda.time.Chronology chronology81 = localDate80.getChronology();
        java.lang.String str82 = chronology81.toString();
        org.joda.time.DateTimeField dateTimeField83 = chronology81.yearOfEra();
        org.joda.time.DateTimeField dateTimeField84 = chronology81.yearOfCentury();
        org.joda.time.DateTime dateTime85 = dateTime59.withChronology(chronology81);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "PT0.100S");
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hours" + "'", str47, "hours");
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 53230963L + "'", long53 == 53230963L);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(obj68);
        org.junit.Assert.assertEquals(obj68.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj68), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj68), "PT0.100S");
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "ISOChronology[UTC]" + "'", str82, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTime85);
    }

    @Test
    public void test10461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10461");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 53230763, dateTimeZone1);
        int int3 = localDateTime2.size();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusMonths(0);
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.year();
        org.joda.time.LocalDateTime localDateTime8 = property6.setCopy(48);
        org.joda.time.LocalDateTime localDateTime10 = property6.addToCopy(53541);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 4 + "'", int3 == 4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test10462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10462");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Period period22 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.hours();
        java.lang.String str24 = durationFieldType23.toString();
        org.joda.time.Period period26 = period22.withField(durationFieldType23, 2);
        org.joda.time.Period period28 = period26.withMillis((int) '#');
        org.joda.time.LocalDate localDate29 = localDate20.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.LocalDate localDate31 = localDate29.minusYears(11);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology35);
        org.joda.time.Interval interval37 = yearMonthDay36.toInterval();
        org.joda.time.Interval interval39 = interval37.withEndMillis((long) 2);
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime44 = property42.add((long) 3);
        org.joda.time.Interval interval45 = interval37.withEnd((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.Period period47 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.hours();
        java.lang.String str49 = durationFieldType48.toString();
        org.joda.time.Period period51 = period47.withField(durationFieldType48, 2);
        org.joda.time.Period period53 = period51.withMillis((int) '#');
        org.joda.time.Interval interval54 = interval45.withPeriodAfterStart((org.joda.time.ReadablePeriod) period53);
        org.joda.time.LocalDate localDate55 = localDate31.plus((org.joda.time.ReadablePeriod) period53);
        org.joda.time.LocalDate.Property property56 = localDate55.yearOfEra();
        org.joda.time.DateTimeField[] dateTimeFieldArray57 = localDate55.getFields();
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hours" + "'", str24, "hours");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hours" + "'", str49, "hours");
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeFieldArray57);
    }

    @Test
    public void test10463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10463");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime localTime13 = property12.withMinimumValue();
        int int14 = property12.get();
        org.joda.time.DateTimeField dateTimeField15 = property12.getField();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test10464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10464");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setWeekDate(14, (int) (byte) 0, 7);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone7);
        int int9 = dateMidnight8.getEra();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateMidnight8.toDateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusDays(9);
        int int14 = dateTime11.getEra();
        org.joda.time.DateTime dateTime15 = dateTime11.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime15.getZone();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone16);
        boolean boolean18 = calendar0.before((java.lang.Object) dateTimeZone16);
        calendar0.clear();
        int int21 = calendar0.getMaximum(2);
        java.util.Date date22 = calendar0.getTime();
        calendar0.setLenient(false);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 11 + "'", int21 == 11);
        org.junit.Assert.assertNotNull(date22);
        org.junit.Assert.assertEquals(date22.toString(), "Thu Jan 01 00:00:00 GMT 1970");
    }

    @Test
    public void test10465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10465");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        java.util.Locale locale5 = new java.util.Locale("hi!", "");
        java.lang.String str6 = property2.getAsText(locale5);
        org.joda.time.LocalDateTime localDateTime7 = property2.withMaximumValue();
        int int8 = localDateTime7.getEra();
        int int9 = localDateTime7.getSecondOfMinute();
        org.joda.time.Period period11 = org.joda.time.Period.millis(7);
        org.joda.time.Period period13 = period11.minusDays(35);
        org.joda.time.MutablePeriod mutablePeriod14 = period11.toMutablePeriod();
        org.joda.time.Period period16 = period11.plusYears(2022);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime7.minus((org.joda.time.ReadablePeriod) period16);
        int int18 = localDateTime7.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime7.plusSeconds(33);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray21 = localDateTime7.getFieldTypes();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals(locale5.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022" + "'", str6, "2022");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 45 + "'", int9 == 45);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(mutablePeriod14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 292278993 + "'", int18 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray21);
    }

    @Test
    public void test10466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10466");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.dayOfYear();
        org.joda.time.LocalDate localDate22 = property21.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate23 = property21.getLocalDate();
        int int24 = localDate23.getYearOfEra();
        int int25 = localDate23.getDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType27 = localDate23.getFieldType(53624911);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 53624911");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
    }

    @Test
    public void test10467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10467");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(0L, 100L, periodType6, chronology7);
        java.lang.Object obj9 = mutablePeriod8.clone();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(0L, 100L, periodType12, chronology13);
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone17);
        org.joda.time.Duration duration19 = mutablePeriod8.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight3.plus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.LocalDate localDate21 = dateMidnight20.toLocalDate();
        org.joda.time.Period period23 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.hours();
        java.lang.String str25 = durationFieldType24.toString();
        org.joda.time.Period period27 = period23.withField(durationFieldType24, 2);
        org.joda.time.Period period29 = period27.withMillis((int) '#');
        org.joda.time.LocalDate localDate30 = localDate21.minus((org.joda.time.ReadablePeriod) period29);
        org.joda.time.LocalDate localDate32 = localDate30.withDayOfMonth(11);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone34);
        int int36 = dateMidnight35.getEra();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = dateMidnight35.toDateTime(chronology37);
        long long39 = dateTime38.getMillis();
        org.joda.time.DateTime dateTime41 = dateTime38.withMillis(100L);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone43);
        int int45 = dateMidnight44.getEra();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = dateMidnight44.toDateTime(chronology46);
        org.joda.time.DateTime dateTime49 = dateTime47.plusDays(9);
        int int50 = dateTime47.getEra();
        org.joda.time.DateTime dateTime51 = dateTime47.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone52 = dateTime51.getZone();
        org.joda.time.DateTime dateTime53 = dateTime38.withZoneRetainFields(dateTimeZone52);
        org.joda.time.DateMidnight dateMidnight54 = localDate30.toDateMidnight(dateTimeZone52);
        boolean boolean55 = dateTimeZone52.isFixed();
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) 22, dateTimeZone52);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.YearMonthDay yearMonthDay61 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology60);
        org.joda.time.DateMidnight dateMidnight62 = yearMonthDay61.toDateMidnight();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod();
        mutablePeriod63.setYears(11);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight62.plus((org.joda.time.ReadablePeriod) mutablePeriod63);
        mutablePeriod63.setWeeks(6);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight56.minus((org.joda.time.ReadablePeriod) mutablePeriod63);
        org.joda.time.DateMidnight.Property property70 = dateMidnight56.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight72 = property70.setCopy(53754841);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53754841 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "PT0.100S");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hours" + "'", str25, "hours");
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(property70);
    }

    @Test
    public void test10468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10468");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        int int5 = yearMonthDay4.size();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((int) (byte) 100, 3, (int) (byte) 10, 4, 2022, 6, 12, 1970);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay4.plus((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay15.minusYears((int) (byte) 1);
        int[] intArray18 = yearMonthDay17.getValues();
        org.joda.time.Period period20 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.hours();
        java.lang.String str22 = durationFieldType21.toString();
        org.joda.time.Period period24 = period20.withField(durationFieldType21, 2);
        org.joda.time.Period period26 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.hours();
        java.lang.String str28 = durationFieldType27.toString();
        org.joda.time.Period period30 = period26.withField(durationFieldType27, 2);
        org.joda.time.Period period31 = period24.minus((org.joda.time.ReadablePeriod) period30);
        int int32 = period30.getSeconds();
        int int33 = period30.getMinutes();
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay17.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.YearMonthDay.Property property35 = yearMonthDay17.year();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[135, 1, 14]");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hours" + "'", str22, "hours");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hours" + "'", str28, "hours");
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test10469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10469");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone1);
        int int4 = timeZone1.getOffset((long) 7);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone1);
        java.lang.String str6 = timeZone1.getID();
        int int8 = timeZone1.getOffset((-864L));
        int int9 = timeZone1.getRawOffset();
        java.lang.Object obj10 = timeZone1.clone();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone12);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        java.lang.Object obj19 = mutablePeriod18.clone();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        mutablePeriod18.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone27);
        org.joda.time.Duration duration29 = mutablePeriod18.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight13.plus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.LocalDate localDate31 = dateMidnight30.toLocalDate();
        org.joda.time.Period period33 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.hours();
        java.lang.String str35 = durationFieldType34.toString();
        org.joda.time.Period period37 = period33.withField(durationFieldType34, 2);
        org.joda.time.Period period39 = period37.withMillis((int) '#');
        org.joda.time.LocalDate localDate40 = localDate31.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.LocalDate localDate42 = localDate40.withDayOfMonth(11);
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone44);
        int int46 = dateMidnight45.getEra();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = dateMidnight45.toDateTime(chronology47);
        long long49 = dateTime48.getMillis();
        org.joda.time.DateTime dateTime51 = dateTime48.withMillis(100L);
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone53);
        int int55 = dateMidnight54.getEra();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = dateMidnight54.toDateTime(chronology56);
        org.joda.time.DateTime dateTime59 = dateTime57.plusDays(9);
        int int60 = dateTime57.getEra();
        org.joda.time.DateTime dateTime61 = dateTime57.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone62 = dateTime61.getZone();
        org.joda.time.DateTime dateTime63 = dateTime48.withZoneRetainFields(dateTimeZone62);
        org.joda.time.DateMidnight dateMidnight64 = localDate40.toDateMidnight(dateTimeZone62);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight((java.lang.Object) timeZone1, dateTimeZone62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: sun.util.calendar.ZoneInfo");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645455405654,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=45,MILLISECOND=654,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645455405654,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=45,MILLISECOND=654,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GMT" + "'", str6, "GMT");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "PT0.100S");
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "hours" + "'", str35, "hours");
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateMidnight64);
    }

    @Test
    public void test10470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10470");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime localTime13 = property12.withMinimumValue();
        org.joda.time.LocalTime localTime15 = property12.addCopy((int) ' ');
        org.joda.time.LocalTime.Property property16 = localTime15.secondOfMinute();
        org.joda.time.LocalTime.Property property17 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime18 = property17.withMaximumValue();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test10471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10471");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property1 = dateMidnight0.monthOfYear();
        org.joda.time.DateMidnight dateMidnight2 = property1.getDateMidnight();
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.dayOfYear();
        org.joda.time.DateMidnight dateMidnight4 = property3.roundCeilingCopy();
        org.joda.time.YearMonthDay yearMonthDay5 = dateMidnight4.toYearMonthDay();
        org.joda.time.Period period7 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.hours();
        java.lang.String str9 = durationFieldType8.toString();
        org.joda.time.Period period11 = period7.withField(durationFieldType8, 2);
        org.joda.time.format.PeriodFormatter periodFormatter12 = null;
        java.lang.String str13 = period7.toString(periodFormatter12);
        org.joda.time.Period period15 = period7.withHours(53256552);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay5.plus((org.joda.time.ReadablePeriod) period15);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay5.plusDays(53412536);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((java.lang.Object) 53412536);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hours" + "'", str9, "hours");
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT0.100S" + "'", str13, "PT0.100S");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
    }

    @Test
    public void test10472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10472");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withYearOfCentury(4);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMinutes(11);
        int int11 = localDateTime10.getCenturyOfEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
    }

    @Test
    public void test10473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10473");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(0L, 100L, periodType7, chronology8);
        java.lang.Object obj10 = mutablePeriod9.clone();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.Duration duration20 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.LocalDate localDate22 = dateMidnight21.toLocalDate();
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(0L, 100L, periodType26, chronology27);
        java.lang.Object obj29 = mutablePeriod28.clone();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        int int36 = mutablePeriod34.getMinutes();
        org.joda.time.Period period38 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.hours();
        java.lang.String str40 = durationFieldType39.toString();
        org.joda.time.Period period42 = period38.withField(durationFieldType39, 2);
        boolean boolean43 = mutablePeriod34.isSupported(durationFieldType39);
        long long46 = chronology23.add((org.joda.time.ReadablePeriod) mutablePeriod34, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Chronology chronology48 = chronology23.withZone(dateTimeZone47);
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now(chronology23);
        org.joda.time.DurationField durationField50 = chronology23.minutes();
        org.joda.time.Period period51 = new org.joda.time.Period((long) 19, (long) (short) 1, chronology23);
        java.lang.String str52 = period51.toString();
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT0.100S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hours" + "'", str40, "hours");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 53230963L + "'", long46 == 53230963L);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PT0.018S" + "'", str52, "PT0.018S");
    }

    @Test
    public void test10474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10474");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(0L, 100L, periodType7, chronology8);
        java.lang.Object obj10 = mutablePeriod9.clone();
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(0L, 100L, periodType13, chronology14);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone18);
        org.joda.time.Duration duration20 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight4.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.LocalDate localDate22 = dateMidnight21.toLocalDate();
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(0L, 100L, periodType26, chronology27);
        java.lang.Object obj29 = mutablePeriod28.clone();
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(0L, 100L, periodType32, chronology33);
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        int int36 = mutablePeriod34.getMinutes();
        org.joda.time.Period period38 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.hours();
        java.lang.String str40 = durationFieldType39.toString();
        org.joda.time.Period period42 = period38.withField(durationFieldType39, 2);
        boolean boolean43 = mutablePeriod34.isSupported(durationFieldType39);
        long long46 = chronology23.add((org.joda.time.ReadablePeriod) mutablePeriod34, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Chronology chronology48 = chronology23.withZone(dateTimeZone47);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(chronology48);
        org.joda.time.DurationField durationField50 = chronology48.halfdays();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) 70, (long) 2740, chronology48);
        org.joda.time.DurationField durationField52 = chronology48.millis();
        org.joda.time.LocalDate localDate53 = org.joda.time.LocalDate.now(chronology48);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.Chronology chronology55 = chronology48.withZone(dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField56 = chronology48.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField57 = chronology48.millisOfSecond();
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "PT0.100S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hours" + "'", str40, "hours");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 53230963L + "'", long46 == 53230963L);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
    }

    @Test
    public void test10475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10475");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setWeekDate(14, (int) (byte) 0, 7);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone7);
        int int9 = dateMidnight8.getEra();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateMidnight8.toDateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusDays(9);
        int int14 = dateTime11.getEra();
        org.joda.time.DateTime dateTime15 = dateTime11.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime15.getZone();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (byte) -1, dateTimeZone16);
        boolean boolean18 = calendar0.before((java.lang.Object) dateTimeZone16);
        calendar0.clear((int) (byte) 0);
        calendar0.set((int) '#', 2, (-1));
        calendar0.setTimeInMillis(22L);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        boolean boolean28 = calendar0.isLenient();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=22,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=22,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test10476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10476");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.DateMidnight.Property property4 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight5 = property4.withMinimumValue();
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.year();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        java.lang.Object obj17 = mutablePeriod16.clone();
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(0L, 100L, periodType20, chronology21);
        mutablePeriod16.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone25);
        org.joda.time.Duration duration27 = mutablePeriod16.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight11.plus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.LocalDate localDate29 = dateMidnight28.toLocalDate();
        org.joda.time.Chronology chronology30 = localDate29.getChronology();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        java.lang.Object obj36 = mutablePeriod35.clone();
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(0L, 100L, periodType39, chronology40);
        mutablePeriod35.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod41);
        int int43 = mutablePeriod41.getMinutes();
        org.joda.time.Period period45 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.hours();
        java.lang.String str47 = durationFieldType46.toString();
        org.joda.time.Period period49 = period45.withField(durationFieldType46, 2);
        boolean boolean50 = mutablePeriod41.isSupported(durationFieldType46);
        long long53 = chronology30.add((org.joda.time.ReadablePeriod) mutablePeriod41, (long) 53230763, 2);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate((long) 11, chronology30);
        org.joda.time.DateTimeField dateTimeField55 = chronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField56 = chronology30.era();
        org.joda.time.DateTimeField dateTimeField57 = chronology30.weekOfWeekyear();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate(0L, chronology30);
        org.joda.time.LocalDate localDate59 = org.joda.time.LocalDate.now(chronology30);
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((java.lang.Object) dateMidnight5, chronology30);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "PT0.100S");
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "hours" + "'", str47, "hours");
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 53230963L + "'", long53 == 53230963L);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(localDate59);
    }

    @Test
    public void test10477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10477");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withYearOfCentury(4);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMinutes(11);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusHours(0);
        java.util.Date date14 = localDateTime10.toDate();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Sat Feb 14 14:45:46 GMT 2004");
    }

    @Test
    public void test10478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10478");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getHours();
        date0.setTime(0L);
        org.joda.time.TimeOfDay timeOfDay4 = org.joda.time.TimeOfDay.fromDateFields(date0);
        java.lang.String str5 = timeOfDay4.toString();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay4.minusSeconds(53097298);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.hourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay11 = property8.setCopy(252);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 252 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date0.toString(), "Thu Jan 01 00:00:00 GMT 1970");
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 14 + "'", int1 == 14);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "T00:00:00.000" + "'", str5, "T00:00:00.000");
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test10479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10479");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        java.lang.Object obj11 = mutablePeriod10.clone();
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(0L, 100L, periodType14, chronology15);
        mutablePeriod10.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone19);
        org.joda.time.Duration duration21 = mutablePeriod10.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight5.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.LocalDate localDate23 = dateMidnight22.toLocalDate();
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(0L, 100L, periodType27, chronology28);
        java.lang.Object obj30 = mutablePeriod29.clone();
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(0L, 100L, periodType33, chronology34);
        mutablePeriod29.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod35);
        int int37 = mutablePeriod35.getMinutes();
        org.joda.time.Period period39 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.hours();
        java.lang.String str41 = durationFieldType40.toString();
        org.joda.time.Period period43 = period39.withField(durationFieldType40, 2);
        boolean boolean44 = mutablePeriod35.isSupported(durationFieldType40);
        long long47 = chronology24.add((org.joda.time.ReadablePeriod) mutablePeriod35, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.Chronology chronology49 = chronology24.withZone(dateTimeZone48);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 11, chronology49);
        org.joda.time.DurationField durationField51 = chronology49.days();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (-1), (long) (short) 0, chronology49);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate(chronology49);
        int int54 = localDate53.getYearOfCentury();
        org.joda.time.DateTime dateTime55 = localDate53.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate57 = localDate53.withYear(2740);
        org.joda.time.DateTime dateTime58 = localDate53.toDateTimeAtCurrentTime();
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "PT0.100S");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(obj30);
        org.junit.Assert.assertEquals(obj30.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj30), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj30), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "hours" + "'", str41, "hours");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 53230963L + "'", long47 == 53230963L);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 22 + "'", int54 == 22);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test10480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10480");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfFloor();
        mutableDateTime3.setMonthOfYear(11);
        int int6 = mutableDateTime3.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone8);
        int int10 = dateMidnight9.getEra();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = dateMidnight9.toDateTime(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusDays(9);
        org.joda.time.DateTime.Property property15 = dateTime12.monthOfYear();
        org.joda.time.DateTime dateTime16 = property15.roundFloorCopy();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology20);
        org.joda.time.Interval interval22 = yearMonthDay21.toInterval();
        org.joda.time.Interval interval24 = interval22.withEndMillis((long) 2);
        org.joda.time.DateTime dateTime25 = interval24.getEnd();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology29);
        org.joda.time.Interval interval31 = yearMonthDay30.toInterval();
        org.joda.time.DateTime dateTime32 = yearMonthDay30.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property34 = dateTime32.property(dateTimeFieldType33);
        boolean boolean35 = dateTime25.isSupported(dateTimeFieldType33);
        int int36 = dateTime16.get(dateTimeFieldType33);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.YearMonthDay yearMonthDay41 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology40);
        int int42 = yearMonthDay41.size();
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(0L, 100L, periodType45, chronology46);
        java.lang.Object obj48 = mutablePeriod47.clone();
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(0L, 100L, periodType51, chronology52);
        mutablePeriod47.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod53);
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay41.plus((org.joda.time.ReadablePeriod) mutablePeriod53);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone59);
        int int61 = dateMidnight60.getEra();
        org.joda.time.Chronology chronology62 = dateMidnight60.getChronology();
        mutablePeriod53.setPeriod((long) (byte) 100, (long) (byte) -1, chronology62);
        org.joda.time.DurationField durationField64 = chronology62.weekyears();
        org.joda.time.DateTime dateTime65 = dateTime16.withChronology(chronology62);
        org.joda.time.DateTime dateTime67 = dateTime65.plusSeconds((int) 'a');
        mutableDateTime3.setMillis((org.joda.time.ReadableInstant) dateTime67);
        boolean boolean70 = dateTime67.isAfter((long) 53243434);
        org.joda.time.DateTime dateTime72 = dateTime67.plusWeeks(0);
        long long73 = dateTime67.getMillis();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 11 + "'", int6 == 11);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(obj48);
        org.junit.Assert.assertEquals(obj48.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "PT0.100S");
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 97000L + "'", long73 == 97000L);
    }

    @Test
    public void test10481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10481");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.roundFloor();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology8);
        org.joda.time.DateMidnight dateMidnight10 = yearMonthDay9.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight10.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearMonthDay();
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime4, (org.joda.time.ReadableInstant) dateMidnight10, periodType14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(0L, 100L, periodType18, chronology19);
        java.lang.Object obj21 = mutablePeriod20.clone();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        mutablePeriod20.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone29);
        org.joda.time.Duration duration31 = mutablePeriod20.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(0L, dateTimeZone33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone36);
        int int38 = dateMidnight37.getEra();
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(0L, 100L, periodType41, chronology42);
        java.lang.Object obj44 = mutablePeriod43.clone();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(0L, 100L, periodType47, chronology48);
        mutablePeriod43.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod49);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone52);
        org.joda.time.Duration duration54 = mutablePeriod43.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight37, (org.joda.time.ReadableDuration) duration54);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight34, (org.joda.time.ReadableDuration) duration54, periodType56);
        boolean boolean58 = duration31.isLongerThan((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime4, (org.joda.time.ReadableDuration) duration31);
        mutableDateTime4.add(53453000L);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "PT0.100S");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertEquals(obj44.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "PT0.100S");
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test10482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10482");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime5 = property2.getMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone7);
        int int9 = dateMidnight8.getEra();
        org.joda.time.DateMidnight.Property property10 = dateMidnight8.monthOfYear();
        org.joda.time.DateMidnight dateMidnight12 = property10.addToCopy((long) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property10.getFieldType();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime5.property(dateTimeFieldType13);
        org.joda.time.MutableDateTime mutableDateTime16 = property14.add(21);
        org.joda.time.Period period18 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.hours();
        java.lang.String str20 = durationFieldType19.toString();
        org.joda.time.Period period22 = period18.withField(durationFieldType19, 2);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.millis();
        int int24 = period18.get(durationFieldType23);
        mutableDateTime16.add(durationFieldType23, 32770);
        org.joda.time.Chronology chronology27 = null;
        boolean boolean28 = durationFieldType23.isSupported(chronology27);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "hours" + "'", str20, "hours");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 100 + "'", int24 == 100);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test10483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10483");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime localTime13 = property12.withMinimumValue();
        org.joda.time.LocalTime localTime15 = property12.addCopy((int) ' ');
        org.joda.time.LocalTime localTime16 = property12.withMinimumValue();
        org.joda.time.LocalTime.Property property17 = localTime16.millisOfDay();
        org.joda.time.LocalTime.Property property18 = localTime16.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime20 = property18.setCopy(2470);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2470 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test10484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10484");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.add((long) 3);
        mutableDateTime13.setDayOfMonth((int) (byte) 10);
        mutableDateTime13.add((long) 6);
        mutableDateTime13.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.monthOfYear();
        mutableDateTime13.setTime((org.joda.time.ReadableInstant) dateMidnight20);
        int int23 = property8.compareTo((org.joda.time.ReadableInstant) mutableDateTime13);
        mutableDateTime13.addMinutes(22);
        mutableDateTime13.setMillis((long) 53658500);
        mutableDateTime13.addMonths(179);
        mutableDateTime13.add((long) 53747243);
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test10485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10485");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.year();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusWeeks((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusSeconds((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withYearOfCentury(4);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMinutes(11);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfYear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime14 = property12.addWrapFieldToCopy(53243063);
        org.joda.time.LocalDateTime localDateTime15 = property12.getLocalDateTime();
        java.lang.String str16 = property12.getAsText();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "7" + "'", str16, "7");
    }

    @Test
    public void test10486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10486");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(0L, 100L, periodType2, chronology3);
        java.lang.Object obj5 = mutablePeriod4.clone();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, 100L, periodType8, chronology9);
        mutablePeriod4.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod10);
        int int12 = mutablePeriod10.getMinutes();
        mutablePeriod10.setMonths((int) 'a');
        java.lang.Object obj15 = mutablePeriod10.clone();
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertEquals(obj15.toString(), "P97MT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj15), "P97MT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj15), "P97MT0.100S");
    }

    @Test
    public void test10487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10487");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) 3);
        org.joda.time.MutableDateTime mutableDateTime5 = property2.getMutableDateTime();
        java.lang.String str6 = mutableDateTime5.toString();
        java.lang.Object obj7 = mutableDateTime5.clone();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.secondOfMinute();
        java.util.Locale locale12 = new java.util.Locale("PT2H0.035S", "UTC", "PT0S");
        java.lang.String str13 = locale12.getDisplayName();
        java.util.Locale locale16 = new java.util.Locale("hi!", "");
        java.lang.String str17 = locale16.getDisplayVariant();
        boolean boolean18 = locale16.hasExtensions();
        java.lang.String str19 = locale16.getDisplayVariant();
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str21 = locale16.getDisplayScript(locale20);
        java.lang.String str22 = locale12.getDisplayCountry(locale16);
        java.lang.String str23 = property8.getAsShortText(locale12);
        org.joda.time.Period period25 = org.joda.time.Period.millis(100);
        boolean boolean26 = property8.equals((java.lang.Object) 100);
        org.joda.time.MutableDateTime mutableDateTime28 = property8.add(53636897);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property8.getFieldType();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-01-01T00:00:00.003Z" + "'", str6, "2022-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "2022-01-01T00:00:00.003Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "2022-01-01T00:00:00.003Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "2022-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals(locale12.toString(), "pt2h0.035s_UTC_PT0S");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "pt2h0.035s (UTC,PT0S)" + "'", str13, "pt2h0.035s (UTC,PT0S)");
        org.junit.Assert.assertEquals(locale16.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0" + "'", str23, "0");
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
    }

    @Test
    public void test10488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10488");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.Interval interval5 = yearMonthDay4.toInterval();
        org.joda.time.DateTime dateTime6 = yearMonthDay4.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property8 = dateTime6.property(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = property8.getDateTime();
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale11 = locale10.stripExtensions();
        int int12 = property8.getMaximumShortTextLength(locale10);
        org.joda.time.DateTime dateTime13 = property8.roundFloorCopy();
        int int14 = property8.getLeapAmount();
        org.joda.time.DateTime dateTime15 = property8.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime17 = dateTime15.minus(17536739580101L);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology21);
        org.joda.time.Interval interval23 = yearMonthDay22.toInterval();
        org.joda.time.DateTime dateTime24 = yearMonthDay22.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime.Property property26 = dateTime24.property(dateTimeFieldType25);
        org.joda.time.DateTime.Property property27 = dateTime24.minuteOfDay();
        org.joda.time.DateTime.Property property28 = dateTime24.monthOfYear();
        org.joda.time.DateTime.Property property29 = dateTime24.centuryOfEra();
        org.joda.time.LocalDate localDate30 = dateTime24.toLocalDate();
        int int31 = localDate30.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(0L, dateTimeZone33);
        org.joda.time.LocalDate localDate35 = dateMidnight34.toLocalDate();
        org.joda.time.LocalDate localDate37 = localDate35.minusWeeks(100);
        org.joda.time.LocalDate localDate38 = localDate30.withFields((org.joda.time.ReadablePartial) localDate37);
        org.joda.time.format.DateTimePrinter dateTimePrinter39 = null;
        org.joda.time.format.DateTimeParser dateTimeParser40 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter39, dateTimeParser40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter41.withPivotYear((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone45);
        int int47 = dateMidnight46.getEra();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = dateMidnight46.toDateTime(chronology48);
        org.joda.time.DateTime dateTime51 = dateTime49.plusDays(9);
        int int52 = dateTime49.getEra();
        org.joda.time.DateTime dateTime53 = dateTime49.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone54 = dateTime53.getZone();
        java.lang.String str55 = dateTimeZone54.toString();
        org.joda.time.YearMonthDay yearMonthDay56 = new org.joda.time.YearMonthDay(dateTimeZone54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter41.withZone(dateTimeZone54);
        int int59 = dateTimeZone54.getOffsetFromLocal((long) 53243308);
        org.joda.time.DateTime dateTime60 = localDate30.toDateTimeAtMidnight(dateTimeZone54);
        org.joda.time.MutableDateTime mutableDateTime61 = dateTime15.toMutableDateTime(dateTimeZone54);
        java.lang.String str62 = dateTimeZone54.toString();
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 35 + "'", int31 == 35);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Etc/UTC" + "'", str55, "Etc/UTC");
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Etc/UTC" + "'", str62, "Etc/UTC");
    }

    @Test
    public void test10489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10489");
        java.util.Date date1 = new java.util.Date((long) 0);
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromDateFields(date1);
        int int3 = timeOfDay2.getSecondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay2.minusMinutes(6);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.withMinuteOfHour(0);
        org.joda.time.TimeOfDay.Property property8 = timeOfDay7.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.add((long) 3);
        mutableDateTime13.setDayOfMonth((int) (byte) 10);
        mutableDateTime13.add((long) 6);
        mutableDateTime13.addWeeks((int) '4');
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight();
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.monthOfYear();
        mutableDateTime13.setTime((org.joda.time.ReadableInstant) dateMidnight20);
        int int23 = property8.compareTo((org.joda.time.ReadableInstant) mutableDateTime13);
        mutableDateTime13.setDayOfYear(13);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime13.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime28 = property26.addWrapField(283);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property26.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime30 = property26.roundHalfCeiling();
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
    }

    @Test
    public void test10490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10490");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("");
        java.util.Calendar calendar2 = java.util.Calendar.getInstance(timeZone1);
        int int4 = timeZone1.getOffset((long) 7);
        java.util.Calendar calendar5 = java.util.Calendar.getInstance(timeZone1);
        int int7 = timeZone1.getOffset((-61038316800000L));
        int int8 = timeZone1.getRawOffset();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertNotNull(calendar2);
// flaky:         org.junit.Assert.assertEquals(calendar2.toString(), "java.util.GregorianCalendar[time=1645455406599,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=46,MILLISECOND=599,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1645455406599,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=56,SECOND=46,MILLISECOND=599,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test10491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10491");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder3 = builder0.setScript("und");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: und [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test10492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10492");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        org.joda.time.DateTime.Property property8 = dateTime5.monthOfYear();
        org.joda.time.DateTime dateTime9 = property8.roundFloorCopy();
        org.joda.time.DurationField durationField10 = property8.getLeapDurationField();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone12);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(0L, 100L, periodType16, chronology17);
        java.lang.Object obj19 = mutablePeriod18.clone();
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(0L, 100L, periodType22, chronology23);
        mutablePeriod18.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone27);
        org.joda.time.Duration duration29 = mutablePeriod18.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight28);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight13.plus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.LocalDate localDate31 = dateMidnight30.toLocalDate();
        org.joda.time.Chronology chronology32 = localDate31.getChronology();
        java.lang.String str33 = chronology32.toString();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.secondOfDay();
        long long36 = dateTimeField34.roundHalfFloor(100L);
        java.util.Locale locale40 = new java.util.Locale("hi!", "");
        java.lang.String str41 = locale40.getDisplayVariant();
        java.lang.String str42 = locale40.getCountry();
        java.lang.String str43 = dateTimeField34.getAsShortText((long) 14, locale40);
        java.util.Locale locale44 = locale40.stripExtensions();
        java.lang.String str45 = locale40.getCountry();
        int int46 = property8.getMaximumTextLength(locale40);
        org.joda.time.DateTime dateTime47 = property8.roundHalfCeilingCopy();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "PT0.100S");
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ISOChronology[UTC]" + "'", str33, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertEquals(locale40.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0" + "'", str43, "0");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 9 + "'", int46 == 9);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test10493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10493");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        org.joda.time.DateMidnight dateMidnight5 = yearMonthDay4.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.withDurationAdded((long) (byte) 10, 12);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight5.withWeekyear(4);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.withWeekyear(32769);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.plusDays(53256552);
        int int15 = dateMidnight10.getWeekyear();
        org.joda.time.DateMidnight.Property property16 = dateMidnight10.year();
        int int17 = property16.getLeapAmount();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test10494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10494");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        long long6 = dateTime5.getMillis();
        org.joda.time.DateTime dateTime8 = dateTime5.withMillis(100L);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMinutes((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType11.getRangeDurationType();
        java.lang.String str13 = durationFieldType12.getName();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone15);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, 100L, periodType19, chronology20);
        java.lang.Object obj22 = mutablePeriod21.clone();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone30);
        org.joda.time.Duration duration32 = mutablePeriod21.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight16.plus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.LocalDate localDate34 = dateMidnight33.toLocalDate();
        org.joda.time.Chronology chronology35 = localDate34.getChronology();
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(0L, 100L, periodType38, chronology39);
        java.lang.Object obj41 = mutablePeriod40.clone();
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(0L, 100L, periodType44, chronology45);
        mutablePeriod40.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod46);
        int int48 = mutablePeriod46.getMinutes();
        org.joda.time.Period period50 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.hours();
        java.lang.String str52 = durationFieldType51.toString();
        org.joda.time.Period period54 = period50.withField(durationFieldType51, 2);
        boolean boolean55 = mutablePeriod46.isSupported(durationFieldType51);
        long long58 = chronology35.add((org.joda.time.ReadablePeriod) mutablePeriod46, (long) 53230763, 2);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.Chronology chronology60 = chronology35.withZone(dateTimeZone59);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate(chronology60);
        org.joda.time.DurationField durationField62 = chronology60.halfdays();
        org.joda.time.DurationField durationField63 = chronology60.months();
        org.joda.time.DateTimeField dateTimeField64 = chronology60.weekOfWeekyear();
        org.joda.time.DurationField durationField65 = durationFieldType12.getField(chronology60);
        org.joda.time.DateTime dateTime67 = dateTime8.withFieldAdded(durationFieldType12, 32772);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone69);
        org.joda.time.PeriodType periodType73 = null;
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod(0L, 100L, periodType73, chronology74);
        java.lang.Object obj76 = mutablePeriod75.clone();
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod(0L, 100L, periodType79, chronology80);
        mutablePeriod75.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod81);
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.DateMidnight dateMidnight85 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone84);
        org.joda.time.Duration duration86 = mutablePeriod75.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight85);
        org.joda.time.DateMidnight dateMidnight87 = dateMidnight70.plus((org.joda.time.ReadableDuration) duration86);
        org.joda.time.LocalDate localDate88 = dateMidnight87.toLocalDate();
        org.joda.time.Chronology chronology89 = localDate88.getChronology();
        org.joda.time.DurationField durationField90 = chronology89.centuries();
        org.joda.time.DateMidnight dateMidnight91 = new org.joda.time.DateMidnight(chronology89);
        org.joda.time.DateTimeField dateTimeField92 = chronology89.weekyear();
        org.joda.time.DurationField durationField93 = durationFieldType12.getField(chronology89);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "days" + "'", str13, "days");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "PT0.100S");
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(obj41);
        org.junit.Assert.assertEquals(obj41.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hours" + "'", str52, "hours");
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 53230963L + "'", long58 == 53230963L);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "PT0.100S");
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(dateMidnight87);
        org.junit.Assert.assertNotNull(localDate88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(durationField90);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(durationField93);
    }

    @Test
    public void test10495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10495");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(0L, 100L, periodType5, chronology6);
        java.lang.Object obj8 = mutablePeriod7.clone();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 100L, periodType11, chronology12);
        mutablePeriod7.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone16);
        org.joda.time.Duration duration18 = mutablePeriod7.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight2.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.LocalDate localDate20 = dateMidnight19.toLocalDate();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(0L, 100L, periodType24, chronology25);
        java.lang.Object obj27 = mutablePeriod26.clone();
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(0L, 100L, periodType30, chronology31);
        mutablePeriod26.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod32);
        int int34 = mutablePeriod32.getMinutes();
        org.joda.time.Period period36 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.hours();
        java.lang.String str38 = durationFieldType37.toString();
        org.joda.time.Period period40 = period36.withField(durationFieldType37, 2);
        boolean boolean41 = mutablePeriod32.isSupported(durationFieldType37);
        long long44 = chronology21.add((org.joda.time.ReadablePeriod) mutablePeriod32, (long) 53230763, 2);
        org.joda.time.DurationField durationField45 = chronology21.seconds();
        org.joda.time.DurationField durationField46 = chronology21.minutes();
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(chronology21);
        long long51 = chronology21.add(15120000203L, (long) 53704907, 90193);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "PT0.100S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(obj27);
        org.junit.Assert.assertEquals(obj27.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj27), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj27), "PT0.100S");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hours" + "'", str38, "hours");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 53230963L + "'", long44 == 53230963L);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 4858926677254L + "'", long51 == 4858926677254L);
    }

    @Test
    public void test10496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10496");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(45L);
        int[] intArray2 = yearMonthDay1.getValues();
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[1970, 1, 1]");
    }

    @Test
    public void test10497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10497");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusDays(9);
        org.joda.time.DateTime dateTime9 = dateTime5.plusMillis(6);
        org.joda.time.DateTime dateTime11 = dateTime9.withDayOfYear(16);
        org.joda.time.DateTime.Property property12 = dateTime9.dayOfYear();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test10498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10498");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.secondOfDay();
        java.lang.String str4 = property3.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime6 = property3.add((long) 15);
        java.util.GregorianCalendar gregorianCalendar7 = mutableDateTime6.toGregorianCalendar();
        mutableDateTime6.addMillis(2004);
        mutableDateTime6.addWeekyears(19);
        org.joda.time.Instant instant12 = mutableDateTime6.toInstant();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone14);
        int int16 = dateMidnight15.getEra();
        int int17 = dateMidnight15.getMillisOfSecond();
        org.joda.time.Period period19 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.hours();
        java.lang.String str21 = durationFieldType20.toString();
        org.joda.time.Period period23 = period19.withField(durationFieldType20, 2);
        org.joda.time.Period period25 = period23.minusMinutes(21);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight15, (org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period28 = period25.withWeeks(0);
        org.joda.time.Period period29 = period28.toPeriod();
        org.joda.time.Period period31 = org.joda.time.Period.millis((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.hours();
        java.lang.String str33 = durationFieldType32.toString();
        org.joda.time.Period period35 = period31.withField(durationFieldType32, 2);
        org.joda.time.Period period37 = period35.minusMinutes(21);
        org.joda.time.Days days38 = period35.toStandardDays();
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.halfdays();
        int int40 = period35.get(durationFieldType39);
        java.lang.String str41 = durationFieldType39.toString();
        int int42 = period29.indexOf(durationFieldType39);
        mutableDateTime6.add(durationFieldType39, (-46800000));
        java.lang.String str45 = durationFieldType39.getName();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0" + "'", str4, "0");
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(gregorianCalendar7);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hours" + "'", str21, "hours");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hours" + "'", str33, "hours");
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(days38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "halfdays" + "'", str41, "halfdays");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "halfdays" + "'", str45, "halfdays");
    }

    @Test
    public void test10499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10499");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone1);
        int int3 = dateMidnight2.getEra();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = dateMidnight2.toDateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.minusWeeks(0);
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        org.joda.time.LocalTime localTime9 = dateTime7.toLocalTime();
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes(3);
        org.joda.time.LocalTime.Property property12 = localTime9.minuteOfHour();
        org.joda.time.LocalTime.Property property13 = localTime9.millisOfDay();
        org.joda.time.LocalTime localTime15 = property13.addNoWrapToCopy((int) '4');
        org.joda.time.LocalTime localTime16 = property13.roundHalfFloorCopy();
        int int17 = localTime16.getMillisOfDay();
        org.joda.time.LocalTime.Property property18 = localTime16.hourOfDay();
        org.joda.time.LocalTime localTime20 = localTime16.withSecondOfMinute(0);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test10500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest20.test10500");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.YearMonthDay yearMonthDay4 = new org.joda.time.YearMonthDay((int) '#', (int) (byte) 10, (int) (short) 10, chronology3);
        java.lang.String str5 = yearMonthDay4.toString();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay4.withYear(10);
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) (byte) 1, (-169257599990L));
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay4.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod10, 53384083);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone15);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(0L, 100L, periodType19, chronology20);
        java.lang.Object obj22 = mutablePeriod21.clone();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(0L, 100L, periodType25, chronology26);
        mutablePeriod21.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((long) (byte) 0, dateTimeZone30);
        org.joda.time.Duration duration32 = mutablePeriod21.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight31);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight16.plus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.LocalDate localDate34 = dateMidnight33.toLocalDate();
        org.joda.time.Chronology chronology35 = localDate34.getChronology();
        java.lang.String str36 = chronology35.toString();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.yearOfEra();
        long long41 = chronology35.add((long) 53233428, (long) (short) 1, 292278993);
        org.joda.time.DurationField durationField42 = chronology35.millis();
        mutablePeriod10.setPeriod(0L, chronology35);
        int int44 = mutablePeriod10.getSeconds();
        int int45 = mutablePeriod10.getMinutes();
        mutablePeriod10.setMonths((-18993));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0035-10-10" + "'", str5, "0035-10-10");
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "PT0.100S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "PT0.100S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "PT0.100S");
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ISOChronology[UTC]" + "'", str36, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 345512421L + "'", long41 == 345512421L);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }
}

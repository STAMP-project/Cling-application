import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test01501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01501");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = copticChronology1.getZone();
        java.lang.String str6 = dateTimeZone5.getID();
        java.lang.String str7 = dateTimeZone5.getID();
        java.lang.String str9 = dateTimeZone5.getNameKey(10598109367754L);
        java.lang.String str11 = dateTimeZone5.getShortName(10040483771555L);
        java.lang.String str12 = dateTimeZone5.toString();
        java.lang.String str13 = dateTimeZone5.toString();
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone5);
        org.joda.time.DurationField durationField15 = copticChronology14.weekyears();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+100:00" + "'", str6, "+100:00");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+100:00" + "'", str7, "+100:00");
// flaky:         org.junit.Assert.assertNull(str9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+100:00" + "'", str11, "+100:00");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+100:00" + "'", str12, "+100:00");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+100:00" + "'", str13, "+100:00");
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test01502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01502");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = copticChronology1.getZone();
        org.joda.time.DurationField durationField6 = copticChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField8 = copticChronology1.weeks();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.hourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology10.centuryOfEra();
        org.joda.time.DurationField durationField13 = copticChronology10.millis();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology10.weekOfWeekyear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withMillisOfSecond((int) (byte) 1);
        int int29 = localDateTime16.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime.Property property30 = localDateTime24.weekyear();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime24.minusMillis(2022);
        int[] intArray34 = copticChronology10.get((org.joda.time.ReadablePartial) localDateTime24, (long) '#');
        org.joda.time.LocalDateTime.Property property35 = localDateTime24.millisOfDay();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime24.minus(readableDuration36);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = localDateTime37.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.chrono.CopticChronology copticChronology40 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = copticChronology40.clockhourOfDay();
        org.joda.time.DurationField durationField42 = copticChronology40.weekyears();
        org.joda.time.DateTimeField dateTimeField43 = copticChronology40.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = copticChronology40.getZone();
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology40);
        org.joda.time.DurationField durationField46 = copticChronology40.weekyears();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(chronology47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.dayOfWeek();
        int[] intArray55 = copticChronology40.get((org.joda.time.ReadablePartial) localDateTime52, 0L);
        copticChronology1.validate((org.joda.time.ReadablePartial) localDateTime37, intArray55);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime58 = localDateTime37.withCenturyOfEra((-2688));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2688 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(intArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1686, 4, 27, 14400035]");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertNotNull(copticChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(intArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1686, 4, 27, 14400000]");
    }

    @Test
    public void test01503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01503");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfSecond((int) (short) 0);
        int int8 = localDateTime5.getDayOfYear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 57 + "'", int8 == 57);
    }

    @Test
    public void test01504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01504");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DurationField durationField7 = copticChronology1.hours();
        org.joda.time.Chronology chronology8 = copticChronology1.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.hourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology11.centuryOfEra();
        org.joda.time.DurationField durationField14 = copticChronology11.millis();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology11.weekOfWeekyear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withMillisOfSecond((int) (byte) 1);
        int int30 = localDateTime17.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime.Property property31 = localDateTime25.weekyear();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime25.minusMillis(2022);
        int[] intArray35 = copticChronology11.get((org.joda.time.ReadablePartial) localDateTime25, (long) '#');
        int int36 = localDateTime25.getWeekOfWeekyear();
        int int37 = localDateTime25.getYear();
        java.lang.String str38 = localDateTime25.toString();
        java.util.Locale.Category category39 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.chrono.CopticChronology copticChronology41 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField42 = copticChronology41.dayOfMonth();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(chronology43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime44.plusWeeks((int) (byte) 10);
        java.util.Locale locale51 = java.util.Locale.PRC;
        java.lang.String str52 = dateTimeField42.getAsText((org.joda.time.ReadablePartial) localDateTime50, locale51);
        java.util.Set<java.lang.String> strSet53 = locale51.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category39, locale51);
        java.lang.String str55 = locale51.getDisplayLanguage();
        java.lang.String str56 = dateTimeField9.getAsShortText((org.joda.time.ReadablePartial) localDateTime25, locale51);
        long long58 = dateTimeField9.roundHalfCeiling(951203888899L);
        int int60 = dateTimeField9.getMaximumValue((-20455173738427L));
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(intArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1686, 4, 27, 14400035]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 8 + "'", int36 == 8);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-26T11:18:40.127" + "'", str38, "2022-02-26T11:18:40.127");
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category39.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(copticChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "7" + "'", str52, "7");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u4e2d\u6587" + "'", str55, "\u4e2d\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "127" + "'", str56, "127");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 951203888899L + "'", long58 == 951203888899L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 999 + "'", int60 == 999);
    }

    @Test
    public void test01505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01505");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = copticChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DurationField durationField7 = copticChronology1.weekyears();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        int[] intArray16 = copticChronology1.get((org.joda.time.ReadablePartial) localDateTime13, 0L);
        org.joda.time.DurationField durationField17 = copticChronology1.minutes();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology1.halfdayOfDay();
        java.lang.String str19 = copticChronology1.toString();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology1.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.dayOfMonth();
        org.joda.time.DurationField durationField24 = copticChronology22.eras();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology22.millisOfSecond();
        int int26 = dateTimeField25.getMinimumValue();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withMillisOfSecond((int) (short) 0);
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        java.lang.String str37 = locale36.getScript();
        java.lang.String str38 = locale36.getScript();
        java.lang.String str39 = locale36.getDisplayCountry();
        java.lang.String str40 = locale36.getVariant();
        java.lang.String str41 = dateTimeField25.getAsShortText((org.joda.time.ReadablePartial) localDateTime32, 993, locale36);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime32.minus(readableDuration42);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.clockhourOfDay();
        long long51 = copticChronology46.add((long) '#', (long) 'a', (int) '#');
        org.joda.time.DateTimeField dateTimeField52 = copticChronology46.clockhourOfHalfday();
        org.joda.time.DurationField durationField53 = copticChronology46.eras();
        org.joda.time.DateTimeField dateTimeField54 = copticChronology46.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField55 = copticChronology46.hourOfDay();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(chronology56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime57.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime61.minusYears((-292269338));
        java.lang.String str67 = localDateTime61.toString("1");
        int[] intArray69 = copticChronology46.get((org.joda.time.ReadablePartial) localDateTime61, 4346236708L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray71 = dateTimeField20.add((org.joda.time.ReadablePartial) localDateTime32, 886, intArray69, 40697751);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 886");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(intArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1686, 4, 27, 14400000]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "CopticChronology[+100:00]" + "'", str19, "CopticChronology[+100:00]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u5fb7\u56fd" + "'", str39, "\u5fb7\u56fd");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "993" + "'", str41, "993");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 3430L + "'", long51 == 3430L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1" + "'", str67, "1");
        org.junit.Assert.assertNotNull(intArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[1686, 6, 17, 40636708]");
    }

    @Test
    public void test01506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01506");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        int int8 = localDateTime7.getMillisOfSecond();
        int int9 = localDateTime7.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.plusHours((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType12 = null;
        boolean boolean13 = localDateTime7.isSupported(durationFieldType12);
        org.joda.time.DateTime dateTime14 = localDateTime7.toDateTime();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime7.plus(readableDuration15);
        org.joda.time.DateTime dateTime17 = localDateTime16.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime17.getZone();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.hourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology20.secondOfDay();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology20.secondOfDay();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology20.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.clockhourOfDay();
        org.joda.time.DurationField durationField28 = copticChronology26.weekyears();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology26.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology26.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology26.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone32 = copticChronology26.getZone();
        java.lang.String str34 = dateTimeZone32.getShortName(0L);
        int int36 = dateTimeZone32.getOffset(4346169777L);
        org.joda.time.Chronology chronology37 = copticChronology20.withZone(dateTimeZone32);
        java.lang.String str39 = dateTimeZone32.getName((-1L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        long long42 = dateTimeZone18.getMillisKeepLocal(dateTimeZone32, (long) 775);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 658 + "'", int8 == 658);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 658 + "'", int9 == 658);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+100:00" + "'", str34, "+100:00");
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 360000000 + "'", int36 == 360000000);
        org.junit.Assert.assertNotNull(chronology37);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+100:00" + "'", str39, "+100:00");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 775L + "'", long42 == 775L);
    }

    @Test
    public void test01507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01507");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DurationField durationField7 = copticChronology1.months();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.hourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology10.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Chronology chronology14 = copticChronology10.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = copticChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone17 = copticChronology10.getZone();
        org.joda.time.DurationField durationField18 = copticChronology10.seconds();
        boolean boolean19 = copticChronology1.equals((java.lang.Object) durationField18);
        long long22 = durationField18.getMillis(86399999, 10598109413873L);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 86399999000L + "'", long22 == 86399999000L);
    }

    @Test
    public void test01508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01508");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.eras();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekOfWeekyear();
        long long7 = dateTimeField5.remainder(4346281240L);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 127081240L + "'", long7 == 127081240L);
    }

    @Test
    public void test01509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01509");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.dayOfMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.plusWeeks((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.lang.String str12 = dateTimeField2.getAsText((org.joda.time.ReadablePartial) localDateTime10, locale11);
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet14 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet14.clear();
        java.lang.Object[] objArray16 = strSet14.toArray();
        boolean boolean17 = strSet13.addAll((java.util.Collection<java.lang.String>) strSet14);
        strSet13.clear();
        java.util.Locale locale21 = new java.util.Locale("hi!", "hi!");
        java.lang.String str22 = locale21.toLanguageTag();
        boolean boolean23 = strSet13.equals((java.lang.Object) locale21);
        java.lang.String str24 = locale21.getDisplayVariant();
        java.lang.String str25 = locale21.toString();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "7" + "'", str12, "7");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!_HI!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "und" + "'", str22, "und");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "hi!_HI!" + "'", str25, "hi!_HI!");
    }

    @Test
    public void test01510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01510");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(100);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test01511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01511");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.minuteOfDay();
        org.joda.time.Chronology chronology5 = copticChronology1.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.era();
        java.lang.Object obj7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray11 = localDateTime10.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology18.secondOfDay();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology18.secondOfDay();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) copticChronology18);
        int int23 = localDateTime22.getDayOfYear();
        boolean boolean24 = localDateTime15.isEqual((org.joda.time.ReadablePartial) localDateTime22);
        int int25 = localDateTime15.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.hourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology28.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.Chronology chronology32 = copticChronology28.withZone(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = copticChronology28.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology28.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology28.year();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology28.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) 761, (org.joda.time.Chronology) copticChronology28);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(chronology38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime39.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.weekyear();
        org.joda.time.LocalDateTime localDateTime48 = property46.setCopy((int) (byte) 1);
        long long49 = property46.remainder();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(chronology50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime51.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localDateTime57.toDateTime(readableInstant58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime57.millisOfDay();
        int int61 = property46.compareTo((org.joda.time.ReadablePartial) localDateTime57);
        boolean boolean63 = property46.equals((java.lang.Object) 342L);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = property46.getFieldType();
        org.joda.time.LocalDateTime.Property property65 = localDateTime37.property(dateTimeFieldType64);
        int int66 = localDateTime15.get(dateTimeFieldType64);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime8.withField(dateTimeFieldType64, (int) 'a');
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.plusYears(0);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.withMillisOfSecond(100);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime70.withYearOfEra(5);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime70.withYear(463);
        int int77 = dateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) localDateTime76);
        int[] intArray78 = localDateTime76.getValues();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 117 + "'", int23 == 117);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 22 + "'", int25 == 22);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 4706320815L + "'", long49 == 4706320815L);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2022 + "'", int66 == 2022);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(intArray78);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[463, 2, 23, 40720815]");
    }

    @Test
    public void test01512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01512");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = localDateTime1.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology9.secondOfDay();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology9.secondOfDay();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) copticChronology9);
        int int14 = localDateTime13.getDayOfYear();
        boolean boolean15 = localDateTime6.isEqual((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime.Property property16 = localDateTime6.yearOfEra();
        org.joda.time.LocalDateTime localDateTime18 = property16.addToCopy((long) 593);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.monthOfYear();
        java.lang.String str20 = property19.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 117 + "'", int14 == 117);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "monthOfYear" + "'", str20, "monthOfYear");
    }

    @Test
    public void test01513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01513");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-15T07:16:10.674");
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.era();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.DateTime dateTime12 = localDateTime10.toDateTime(readableInstant11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property13.addWrapFieldToCopy(26172680);
        int int16 = property2.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.Chronology chronology17 = localDateTime15.getChronology();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test01514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01514");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = copticChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DurationField durationField7 = copticChronology1.weekyears();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = copticChronology1.add(readablePeriod8, (long) 112, 984);
        org.joda.time.DateTimeField dateTimeField12 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = copticChronology14.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology14.centuryOfEra();
        org.joda.time.DurationField durationField17 = copticChronology14.millis();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology14.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.hourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology20.centuryOfEra();
        org.joda.time.DurationField durationField23 = copticChronology20.millis();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology20.weekOfWeekyear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(chronology33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withMillisOfSecond((int) (byte) 1);
        int int39 = localDateTime26.compareTo((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime.Property property40 = localDateTime34.weekyear();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime34.minusMillis(2022);
        int[] intArray44 = copticChronology20.get((org.joda.time.ReadablePartial) localDateTime34, (long) '#');
        long long46 = copticChronology14.set((org.joda.time.ReadablePartial) localDateTime34, 32054400000L);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.chrono.CopticChronology copticChronology48 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField49 = copticChronology48.hourOfDay();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology48.centuryOfEra();
        org.joda.time.DurationField durationField51 = copticChronology48.millis();
        org.joda.time.DateTimeField dateTimeField52 = copticChronology48.weekOfWeekyear();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(chronology53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime54.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime54.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime(chronology61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime62.withMillisOfSecond((int) (byte) 1);
        int int67 = localDateTime54.compareTo((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.LocalDateTime.Property property68 = localDateTime62.weekyear();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime62.minusMillis(2022);
        int[] intArray72 = copticChronology48.get((org.joda.time.ReadablePartial) localDateTime62, (long) '#');
        org.joda.time.LocalDateTime.Property property73 = localDateTime62.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = property73.getFieldType();
        int int75 = localDateTime34.get(dateTimeFieldType74);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.chrono.CopticChronology copticChronology78 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone77);
        org.joda.time.DateTimeField dateTimeField79 = copticChronology78.hourOfDay();
        org.joda.time.DateTimeField dateTimeField80 = copticChronology78.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.Chronology chronology82 = copticChronology78.withZone(dateTimeZone81);
        org.joda.time.DateTimeField dateTimeField83 = copticChronology78.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField84 = copticChronology78.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField85 = copticChronology78.year();
        org.joda.time.DateTimeZone dateTimeZone86 = copticChronology78.getZone();
        org.joda.time.DateTimeField dateTimeField87 = copticChronology78.clockhourOfDay();
        java.lang.String str88 = dateTimeField87.toString();
        java.util.Locale locale90 = java.util.Locale.GERMAN;
        java.lang.String str91 = dateTimeField87.getAsShortText((long) (byte) 10, locale90);
        java.lang.String str92 = dateTimeField12.getAsShortText((org.joda.time.ReadablePartial) localDateTime34, 26177281, locale90);
        java.lang.Class<?> wildcardClass93 = localDateTime34.getClass();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 112L + "'", long11 == 112L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(intArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[1686, 4, 27, 14400035]");
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 10598109521272L + "'", long46 == 10598109521272L);
        org.junit.Assert.assertNotNull(copticChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(intArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[1686, 4, 27, 14400035]");
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 40721272 + "'", int75 == 40721272);
        org.junit.Assert.assertNotNull(copticChronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "DateTimeField[clockhourOfDay]" + "'", str88, "DateTimeField[clockhourOfDay]");
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "4" + "'", str91, "4");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "26177281" + "'", str92, "26177281");
        org.junit.Assert.assertNotNull(wildcardClass93);
    }

    @Test
    public void test01515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01515");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime11 = property8.roundFloorCopy();
        org.joda.time.Interval interval12 = property8.toInterval();
        org.joda.time.LocalDateTime localDateTime13 = property8.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime15 = property8.addToCopy((long) 281);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withDayOfWeek(14400002);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 14400002 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test01516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01516");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.dayOfWeek();
        int int6 = copticChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.hourOfHalfday();
        org.joda.time.DurationField durationField8 = dateTimeField7.getDurationField();
        long long11 = durationField8.getDifferenceAsLong(0L, 4346214248L);
        int int14 = durationField8.getValue(10597504711631L, (long) (-244800));
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1207L) + "'", long11 == (-1207L));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2943751 + "'", int14 == 2943751);
    }

    @Test
    public void test01517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01517");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet0.clear();
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.util.TimeZone timeZone4 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        org.joda.time.DateTimeZone[] dateTimeZoneArray12 = new org.joda.time.DateTimeZone[] { dateTimeZone3, dateTimeZone5, dateTimeZone7, dateTimeZone9, dateTimeZone11 };
        org.joda.time.DateTimeZone[] dateTimeZoneArray13 = strSet0.toArray(dateTimeZoneArray12);
        java.util.Spliterator<java.lang.String> strSpliterator14 = strSet0.spliterator();
        java.util.Set<java.lang.String> strSet15 = org.joda.time.DateTimeZone.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfMonth();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.plusWeeks((int) (byte) 10);
        java.util.Locale locale27 = java.util.Locale.PRC;
        java.lang.String str28 = dateTimeField18.getAsText((org.joda.time.ReadablePartial) localDateTime26, locale27);
        java.util.Set<java.lang.String> strSet29 = locale27.getUnicodeLocaleKeys();
        java.lang.Object[] objArray30 = strSet29.toArray();
        boolean boolean31 = strSet15.retainAll((java.util.Collection<java.lang.String>) strSet29);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField34 = copticChronology33.hourOfDay();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology33.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.Chronology chronology37 = copticChronology33.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = copticChronology33.millisOfSecond();
        org.joda.time.DurationField durationField39 = copticChronology33.hours();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology33.dayOfMonth();
        org.joda.time.DurationField durationField41 = copticChronology33.weeks();
        boolean boolean42 = strSet15.contains((java.lang.Object) durationField41);
        boolean boolean43 = strSet0.containsAll((java.util.Collection<java.lang.String>) strSet15);
        strSet15.clear();
        int int45 = strSet15.size();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZoneArray12);
        org.junit.Assert.assertNotNull(dateTimeZoneArray13);
        org.junit.Assert.assertNotNull(strSpliterator14);
        org.junit.Assert.assertNotNull(strSet15);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "7" + "'", str28, "7");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(copticChronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test01518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01518");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        int int8 = localDateTime7.getMillisOfSecond();
        int int9 = localDateTime7.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.plusHours((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType12 = null;
        boolean boolean13 = localDateTime7.isSupported(durationFieldType12);
        int int14 = localDateTime7.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime7.withHourOfDay((-17516));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -17516 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 732 + "'", int8 == 732);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 732 + "'", int9 == 732);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
    }

    @Test
    public void test01519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01519");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = copticChronology1.hours();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekyear();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfDay();
        boolean boolean7 = dateTimeField6.isSupported();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test01520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01520");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology2.weekyear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(4346145364L, (org.joda.time.Chronology) copticChronology2);
        org.joda.time.DateTimeField dateTimeField9 = copticChronology2.minuteOfHour();
        org.joda.time.Chronology chronology10 = copticChronology2.withUTC();
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
    }

    @Test
    public void test01521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01521");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        int int8 = localDateTime7.getMillisOfSecond();
        int int9 = localDateTime7.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.plusHours((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusMonths(1738);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) -1);
        java.lang.String str18 = localDateTime17.toString();
        int int19 = localDateTime17.getWeekyear();
        int int20 = localDateTime17.getDayOfMonth();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withMinuteOfHour(10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime32.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.weekyear();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.plusYears((int) (short) 1);
        int int42 = localDateTime30.compareTo((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.minusYears(619);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.clockhourOfDay();
        org.joda.time.DurationField durationField48 = copticChronology46.weekyears();
        org.joda.time.DurationField durationField49 = copticChronology46.centuries();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology46.weekyear();
        int int51 = dateTimeField50.getMinimumValue();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(chronology52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime53.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime53.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(chronology60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime61.withMillisOfSecond((int) (byte) 1);
        int int66 = localDateTime53.compareTo((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.LocalDateTime.Property property67 = localDateTime61.weekyear();
        org.joda.time.LocalDateTime.Property property68 = localDateTime61.millisOfDay();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(chronology69);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime70.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime70.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = localDateTime76.toDateTime(readableInstant77);
        java.util.Locale locale79 = java.util.Locale.GERMANY;
        boolean boolean80 = locale79.hasExtensions();
        boolean boolean81 = dateTime78.equals((java.lang.Object) locale79);
        java.lang.String str82 = dateTimeField50.getAsShortText((org.joda.time.ReadablePartial) localDateTime61, locale79);
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = dateTimeField50.getType();
        int int84 = localDateTime41.get(dateTimeFieldType83);
        int int85 = localDateTime17.get(dateTimeFieldType83);
        int int86 = localDateTime7.get(dateTimeFieldType83);
        int int87 = localDateTime7.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 827 + "'", int8 == 827);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 827 + "'", int9 == 827);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-19T11:18:41.827" + "'", str18, "2022-02-19T11:18:41.827");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 19 + "'", int20 == 19);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-292269338) + "'", int51 == (-292269338));
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "2022" + "'", str82, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2001 + "'", int84 == 2001);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 2022 + "'", int85 == 2022);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2022 + "'", int86 == 2022);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 22 + "'", int87 == 22);
    }

    @Test
    public void test01522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01522");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(480, (-245326), 47, 475, (int) '4', 359);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 475 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01523");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = copticChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.hourOfDay();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundCeilingCopy();
        int int9 = property7.get();
        org.joda.time.LocalDateTime localDateTime10 = property7.roundHalfCeilingCopy();
        int int11 = localDateTime10.getDayOfWeek();
        int[] intArray12 = localDateTime10.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withMinuteOfHour(86399999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399999 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 11 + "'", int9 == 11);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 6 + "'", int11 == 6);
        org.junit.Assert.assertNotNull(intArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1738, 6, 19, 39600000]");
    }

    @Test
    public void test01524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01524");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.centuryOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime(readableInstant14);
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        boolean boolean17 = locale16.hasExtensions();
        boolean boolean18 = dateTime15.equals((java.lang.Object) locale16);
        int int19 = property5.getDifference((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalDateTime localDateTime20 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime21 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusYears(575);
        int int24 = localDateTime23.getDayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withField(dateTimeFieldType25, 65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
    }

    @Test
    public void test01525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01525");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.hourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology7.centuryOfEra();
        org.joda.time.DurationField durationField10 = copticChronology7.millis();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology7.weekOfWeekyear();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withMillisOfSecond((int) (byte) 1);
        int int26 = localDateTime13.compareTo((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime.Property property27 = localDateTime21.weekyear();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime21.minusMillis(2022);
        int[] intArray31 = copticChronology7.get((org.joda.time.ReadablePartial) localDateTime21, (long) '#');
        long long33 = copticChronology1.set((org.joda.time.ReadablePartial) localDateTime21, 32054400000L);
        org.joda.time.DateTimeField dateTimeField34 = copticChronology1.weekyearOfCentury();
        java.lang.String str35 = copticChronology1.toString();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology1.hourOfDay();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(chronology37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.minusYears((-292269338));
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withCenturyOfEra(47);
        int int49 = dateTimeField36.getMaximumValue((org.joda.time.ReadablePartial) localDateTime48);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(intArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1686, 4, 27, 14400035]");
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10598109522110L + "'", long33 == 10598109522110L);
        org.junit.Assert.assertNotNull(dateTimeField34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "CopticChronology[+100:00]" + "'", str35, "CopticChronology[+100:00]");
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 23 + "'", int49 == 23);
    }

    @Test
    public void test01526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01526");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("datetimefield[clockhourofday]", (double) 10598109462126L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.0598109462126E13");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01527");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        long long11 = property8.remainder();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.millisOfDay();
        int int23 = property8.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        boolean boolean25 = property8.equals((java.lang.Object) 342L);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property8.getFieldType();
        org.joda.time.DateTimeField dateTimeField27 = property8.getField();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4706322269L + "'", long11 == 4706322269L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test01528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01528");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DurationField durationField4 = dateTimeField3.getLeapDurationField();
        int int6 = dateTimeField3.getMaximumValue(4346285920L);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 86399 + "'", int6 == 86399);
    }

    @Test
    public void test01529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01529");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        boolean boolean11 = dateTime9.isSupported(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        boolean boolean22 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime21);
        long long23 = dateTime21.getMillis();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime(readableInstant32);
        java.util.Locale locale34 = java.util.Locale.GERMANY;
        boolean boolean35 = locale34.hasExtensions();
        boolean boolean36 = dateTime33.equals((java.lang.Object) locale34);
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Collection<java.lang.String> strCollection40 = null;
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, strCollection40);
        java.util.Collection<java.lang.String> strCollection42 = null;
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, strCollection42);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Collection<java.lang.String> strCollection47 = null;
        java.util.List<java.lang.String> strList48 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, strCollection47);
        java.util.Collection<java.lang.String> strCollection49 = null;
        java.util.List<java.lang.String> strList50 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, strCollection49);
        java.util.Locale.FilteringMode filteringMode51 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList52 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, strCollection49, filteringMode51);
        boolean boolean53 = dateTime33.equals((java.lang.Object) languageRangeList38);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(chronology54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property59 = localDateTime57.centuryOfEra();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(chronology60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime61.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime61.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.DateTime dateTime69 = localDateTime67.toDateTime(readableInstant68);
        java.util.Locale locale70 = java.util.Locale.GERMANY;
        boolean boolean71 = locale70.hasExtensions();
        boolean boolean72 = dateTime69.equals((java.lang.Object) locale70);
        int int73 = property59.getDifference((org.joda.time.ReadableInstant) dateTime69);
        int int74 = dateTime33.compareTo((org.joda.time.ReadableInstant) dateTime69);
        long long75 = dateTime69.getMillis();
        boolean boolean76 = dateTime21.isEqual((org.joda.time.ReadableInstant) dateTime69);
        long long77 = dateTime69.getMillis();
        org.joda.time.Chronology chronology78 = dateTime69.getChronology();
        long long79 = dateTime69.getMillis();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 951203922344L + "'", long23 == 951203922344L);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + filteringMode51 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode51.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long75 + "' != '" + 951203922344L + "'", long75 == 951203922344L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long77 + "' != '" + 951203922344L + "'", long77 == 951203922344L);
        org.junit.Assert.assertNotNull(chronology78);
// flaky:         org.junit.Assert.assertTrue("'" + long79 + "' != '" + 951203922344L + "'", long79 == 951203922344L);
    }

    @Test
    public void test01530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01530");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime9.minusMillis(2022);
        int int18 = localDateTime9.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime9.withDayOfYear(11);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime9.withWeekyear(242);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType24 = localDateTime9.getFieldType(436);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 436");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test01531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01531");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("weekyear");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale locale5 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder0.removeUnicodeLocaleAttribute("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
    }

    @Test
    public void test01532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01532");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(792, (-1685), 745, 725, (-17516), 758);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 725 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01533");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        boolean boolean11 = dateTime9.isSupported(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        boolean boolean22 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.weekyearOfCentury();
        org.joda.time.DurationField durationField26 = copticChronology24.minutes();
        boolean boolean27 = dateTime21.equals((java.lang.Object) copticChronology24);
        org.joda.time.DateTimeField dateTimeField28 = copticChronology24.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology24.yearOfCentury();
        long long31 = dateTimeField29.roundHalfFloor(951203777140L);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology32);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = localDateTime33.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withMillisOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(chronology37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withMillisOfSecond((int) (byte) 1);
        boolean boolean43 = localDateTime33.isAfter((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime33.withMinuteOfHour(4);
        java.util.Locale locale46 = null;
        java.lang.String str47 = dateTimeField29.getAsText((org.joda.time.ReadablePartial) localDateTime45, locale46);
        boolean boolean48 = dateTimeField29.isSupported();
        long long50 = dateTimeField29.roundCeiling(724L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 936734400000L + "'", long31 == 936734400000L);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "22" + "'", str47, "22");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 21499200000L + "'", long50 == 21499200000L);
    }

    @Test
    public void test01534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01534");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("26151082");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder4.setScript("clockhourOfHalfday");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: clockhourOfHalfday [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test01535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01535");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DurationField durationField4 = copticChronology1.hours();
        int int5 = copticChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.hourOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.Chronology chronology15 = localDateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfEra();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(3430L, chronology15);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology15);
        int int19 = localDateTime18.getYearOfEra();
        boolean boolean20 = copticChronology1.equals((java.lang.Object) int19);
        org.joda.time.DateTimeZone dateTimeZone21 = copticChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone21);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = localDateTime22.getValue(734);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 734");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test01536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01536");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.weekOfWeekyear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime(readableInstant15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusMonths((int) '4');
        long long21 = copticChronology1.set((org.joda.time.ReadablePartial) localDateTime19, (long) 100);
        org.joda.time.DateTimeField dateTimeField22 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology1.minuteOfHour();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withMillisOfSecond((int) (byte) 1);
        int int38 = localDateTime25.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime.Property property39 = localDateTime33.weekyear();
        org.joda.time.LocalDateTime.Property property40 = localDateTime33.millisOfDay();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime33.minusYears(999);
        int int43 = localDateTime33.getYear();
        long long45 = copticChronology1.set((org.joda.time.ReadablePartial) localDateTime33, (long) 26217164);
        org.joda.time.DateTimeField dateTimeField46 = copticChronology1.year();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10040483922745L + "'", long21 == 10040483922745L);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10598109522746L + "'", long45 == 10598109522746L);
        org.junit.Assert.assertNotNull(dateTimeField46);
    }

    @Test
    public void test01537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01537");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology6.clockhourOfDay();
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.lang.String str10 = dateTimeField7.getAsText((long) 'a', locale9);
        int int11 = dateTimeField4.getMaximumTextLength(locale9);
        int int13 = dateTimeField4.getMinimumValue((-3600001L));
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.centuryOfEra();
        java.lang.String str20 = localDateTime17.toString();
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.lang.String str23 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime17, (-292275054), locale22);
        java.util.Set<java.lang.String> strSet24 = locale22.getUnicodeLocaleKeys();
        java.lang.Object obj25 = locale22.clone();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "4" + "'", str10, "4");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-19T11:18:42.775" + "'", str20, "2022-02-19T11:18:42.775");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-292275054" + "'", str23, "-292275054");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertEquals(obj25.toString(), "en");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "en");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "en");
    }

    @Test
    public void test01538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01538");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYear(984);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withYearOfEra((int) '4');
        int int5 = localDateTime2.getWeekyear();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 984 + "'", int5 == 984);
    }

    @Test
    public void test01539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01539");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfWeek();
        org.joda.time.Chronology chronology8 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(3430L, chronology8);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(chronology8);
        int int12 = localDateTime11.getYearOfEra();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.clockhourOfDay();
        org.joda.time.DurationField durationField17 = copticChronology15.weekyears();
        org.joda.time.DurationField durationField18 = copticChronology15.hours();
        int int19 = copticChronology15.getMinimumDaysInFirstWeek();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withMinuteOfHour(10);
        long long31 = copticChronology15.set((org.joda.time.ReadablePartial) localDateTime29, 242L);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.plusWeeks((int) (byte) 10);
        int int40 = localDateTime39.getMillisOfSecond();
        int int41 = localDateTime39.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.plusHours((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType44 = null;
        boolean boolean45 = localDateTime39.isSupported(durationFieldType44);
        org.joda.time.DateTime dateTime46 = localDateTime39.toDateTime();
        org.joda.time.DateTime dateTime47 = localDateTime29.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        long long48 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime46.getZone();
        org.joda.time.ReadableInstant readableInstant50 = null;
        int int51 = dateTimeZone49.getOffset(readableInstant50);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 10598109042001L + "'", long31 == 10598109042001L);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 843 + "'", int40 == 843);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 843 + "'", int41 == 843);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-6048000L) + "'", long48 == (-6048000L));
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 360000000 + "'", int51 == 360000000);
    }

    @Test
    public void test01540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01540");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        int int4 = timeZone2.getOffset((-3600000L));
        int int5 = timeZone2.getRawOffset();
        java.lang.String str6 = timeZone2.getID();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '+00:00:00.010' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 10 + "'", int4 == 10);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 10 + "'", int5 == 10);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.010" + "'", str6, "+00:00:00.010");
    }

    @Test
    public void test01541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01541");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.clockhourOfDay();
        org.joda.time.DurationField durationField4 = copticChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology2.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology2.minuteOfDay();
        long long10 = copticChronology2.add((-7199987L), (-3600001L), (int) (byte) 1);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((-2692051200000L), (org.joda.time.Chronology) copticChronology2);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusDays(19);
        int int15 = localDateTime12.getEra();
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-10799988L) + "'", long10 == (-10799988L));
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test01542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01542");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField4 = copticChronology1.hours();
        org.joda.time.DurationField durationField5 = copticChronology1.seconds();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = copticChronology1.getDateTimeMillis(26209356, 2922728, 16601, 855, 30, 713, 49);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 855 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
    }

    @Test
    public void test01543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01543");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = copticChronology1.getZone();
        long long12 = copticChronology1.add((long) 15, (-3600001L), 2);
        org.joda.time.DateTimeField dateTimeField13 = copticChronology1.minuteOfDay();
        org.joda.time.DurationField durationField14 = copticChronology1.months();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.Chronology chronology18 = copticChronology1.withZone(dateTimeZone16);
        int int20 = dateTimeZone16.getStandardOffset((long) 26172680);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-7199987L) + "'", long12 == (-7199987L));
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 10 + "'", int20 == 10);
    }

    @Test
    public void test01544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01544");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = localDateTime1.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withMillisOfDay((int) (byte) 0);
        int int5 = localDateTime4.getYear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.yearOfEra();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime(readableInstant15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.plusWeeks((int) (byte) 10);
        int int25 = localDateTime24.getMillisOfSecond();
        int int26 = localDateTime24.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.plusHours((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType29 = null;
        boolean boolean30 = localDateTime24.isSupported(durationFieldType29);
        org.joda.time.DateTime dateTime31 = localDateTime24.toDateTime();
        boolean boolean32 = dateTime16.isAfter((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTimeZone dateTimeZone33 = dateTime31.getZone();
        org.joda.time.Instant instant34 = dateTime31.toInstant();
        int int35 = property6.getDifference((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.tz.NameProvider nameProvider37 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.chrono.CopticChronology copticChronology40 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = copticChronology40.hourOfDay();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology40.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.Chronology chronology44 = copticChronology40.withZone(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField45 = chronology44.yearOfCentury();
        java.util.Locale locale47 = java.util.Locale.ENGLISH;
        java.lang.String str48 = dateTimeField45.getAsText(100L, locale47);
        java.lang.String str51 = nameProvider37.getShortName(locale47, "2022-02-15T07:15:48.511", "UTC");
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.chrono.CopticChronology copticChronology53 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField54 = copticChronology53.dayOfMonth();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(chronology55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime56.plusWeeks((int) (byte) 10);
        java.util.Locale locale63 = java.util.Locale.PRC;
        java.lang.String str64 = dateTimeField54.getAsText((org.joda.time.ReadablePartial) localDateTime62, locale63);
        java.util.Set<java.lang.String> strSet65 = locale63.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet66 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet66.clear();
        java.lang.Object[] objArray68 = strSet66.toArray();
        boolean boolean69 = strSet65.addAll((java.util.Collection<java.lang.String>) strSet66);
        strSet65.clear();
        java.util.Locale locale73 = new java.util.Locale("hi!", "hi!");
        java.lang.String str74 = locale73.toLanguageTag();
        boolean boolean75 = strSet65.equals((java.lang.Object) locale73);
        java.lang.String str78 = nameProvider37.getName(locale73, "\u534f\u8c03\u4e16\u754c\u65f6\u95f4", "2022-02-15T07:16:01.099");
        java.util.Set<java.lang.String> strSet79 = locale73.getUnicodeLocaleKeys();
        java.lang.String str80 = locale73.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime81 = property6.setCopy("2022-02-15T07:17:07.353", locale73);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-15T07:17:07.353\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 177 + "'", int25 == 177);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 177 + "'", int26 == 177);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(nameProvider37);
        org.junit.Assert.assertNotNull(copticChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "86" + "'", str48, "86");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(copticChronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "7" + "'", str64, "7");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray68), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray68), "[]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertEquals(locale73.toString(), "hi!_HI!");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "und" + "'", str74, "und");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "hi!" + "'", str80, "hi!");
    }

    @Test
    public void test01545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01545");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("26151082");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.addUnicodeLocaleAttribute("26274933");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder4.setLanguage("26275418");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 26275418 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test01546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01546");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("15");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=15");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01547");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology6.clockhourOfDay();
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.lang.String str10 = dateTimeField7.getAsText((long) 'a', locale9);
        java.lang.String str11 = dateTimeField3.getAsText((int) 'a', locale9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.minusDays(0);
        int int24 = dateTimeField3.getMinimumValue((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime17.withYear(45);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray29 = localDateTime28.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusMinutes(1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusHours((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime26.withFields((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.hourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology36.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Chronology chronology40 = copticChronology36.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = copticChronology36.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology36.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone43 = copticChronology36.getZone();
        long long47 = copticChronology36.add((long) 15, (-3600001L), 2);
        org.joda.time.DateTimeField dateTimeField48 = copticChronology36.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField49 = copticChronology36.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology36.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField51 = copticChronology36.hourOfHalfday();
        boolean boolean52 = localDateTime34.equals((java.lang.Object) dateTimeField51);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime54 = localDateTime34.withWeekOfWeekyear(734);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 734 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "4" + "'", str10, "4");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "97" + "'", str11, "97");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-7199987L) + "'", long47 == (-7199987L));
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test01548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01548");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.minuteOfHour();
        org.joda.time.DurationField durationField8 = copticChronology1.weeks();
        org.joda.time.DurationField durationField9 = copticChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology1.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology1.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = copticChronology1.getDateTimeMillis((long) 201, 332, 761, 20276589, 446);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 332 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test01549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01549");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField18 = property16.getDurationField();
        org.joda.time.LocalDateTime localDateTime19 = property16.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField20 = property16.getField();
        org.joda.time.LocalDateTime localDateTime22 = property16.addToCopy((long) 745);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime24 = property16.setCopy("2022-02-15T07:16:51.228");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-15T07:16:51.228\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test01550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01550");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = copticChronology1.getZone();
        long long12 = copticChronology1.add((long) 15, (-3600001L), 2);
        org.joda.time.DateTimeField dateTimeField13 = copticChronology1.minuteOfDay();
        java.lang.String str14 = copticChronology1.toString();
        java.lang.String str15 = copticChronology1.toString();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology1.secondOfDay();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-7199987L) + "'", long12 == (-7199987L));
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "CopticChronology[+100:00]" + "'", str14, "CopticChronology[+100:00]");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CopticChronology[+100:00]" + "'", str15, "CopticChronology[+100:00]");
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test01551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01551");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long9 = copticChronology1.getDateTimeMillis(627, 902, 20256292, 26280714);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 902 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
    }

    @Test
    public void test01552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01552");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.clockhourOfDay();
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.lang.String str11 = dateTimeField8.getAsText((long) 'a', locale10);
        java.lang.String str12 = dateTimeZone1.getShortName(4346222874L, locale10);
        java.lang.String str14 = dateTimeZone1.getShortName(4706322269L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "4" + "'", str11, "4");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+100:00" + "'", str12, "+100:00");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+100:00" + "'", str14, "+100:00");
    }

    @Test
    public void test01553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01553");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("26151082");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder5 = builder3.addUnicodeLocaleAttribute("26211152");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.removeUnicodeLocaleAttribute("2000-02-22T07:17:06.734Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2000-02-22T07:17:06.734Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test01554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01554");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property16.withMinimumValue();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withMillisOfSecond((int) (byte) 1);
        int int32 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime.Property property33 = localDateTime27.weekyear();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime27.minusMillis(2022);
        boolean boolean36 = localDateTime17.isAfter((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime.Property property37 = localDateTime27.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = copticChronology39.clockhourOfDay();
        org.joda.time.DurationField durationField41 = copticChronology39.weekyears();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology39.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.chrono.CopticChronology copticChronology44 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField45 = copticChronology44.clockhourOfDay();
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        java.lang.String str48 = dateTimeField45.getAsText((long) 'a', locale47);
        int int49 = dateTimeField42.getMaximumTextLength(locale47);
        java.lang.String str50 = property37.getAsText(locale47);
        java.lang.String str51 = locale47.getISO3Country();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = locale47.getUnicodeLocaleType("40703509");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 40703509");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(copticChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "4" + "'", str48, "4");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "57" + "'", str50, "57");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test01555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01555");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = copticChronology1.getZone();
        long long12 = copticChronology1.add((long) 15, (-3600001L), 2);
        org.joda.time.DateTimeField dateTimeField13 = copticChronology1.minuteOfDay();
        org.joda.time.DurationField durationField14 = copticChronology1.months();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology1.yearOfCentury();
        org.joda.time.DurationField durationField16 = copticChronology1.weeks();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-7199987L) + "'", long12 == (-7199987L));
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test01556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01556");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property16.withMinimumValue();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withMillisOfSecond((int) (byte) 1);
        int int32 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime.Property property33 = localDateTime27.weekyear();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime27.minusMillis(2022);
        boolean boolean36 = localDateTime17.isAfter((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime.Property property37 = localDateTime27.dayOfYear();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime27.withPeriodAdded(readablePeriod38, (int) 'u');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withDayOfWeek(26262126);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26262126 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime40);
    }

    @Test
    public void test01557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01557");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = copticChronology1.getZone();
        long long12 = copticChronology1.add((long) 15, (-3600001L), 2);
        org.joda.time.DateTimeField dateTimeField13 = copticChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DurationField durationField16 = copticChronology1.weeks();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.clockhourOfDay();
        org.joda.time.DurationField durationField20 = copticChronology18.weekyears();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology18.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = copticChronology18.getZone();
        java.lang.String str23 = dateTimeZone22.getID();
        int int25 = dateTimeZone22.getStandardOffset((long) (-1));
        java.lang.String str27 = dateTimeZone22.getName((long) 15);
        org.joda.time.Chronology chronology28 = copticChronology1.withZone(dateTimeZone22);
        // The following exception was thrown during execution in test generation
        try {
            long long36 = copticChronology1.getDateTimeMillis(8, 122612, 962, 999, 292272708, 499, 378);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 999 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-7199987L) + "'", long12 == (-7199987L));
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+100:00" + "'", str23, "+100:00");
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 360000000 + "'", int25 == 360000000);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+100:00" + "'", str27, "+100:00");
        org.junit.Assert.assertNotNull(chronology28);
    }

    @Test
    public void test01558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01558");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DurationField durationField8 = copticChronology1.weeks();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = copticChronology1.getDateTimeMillis(544, 775, 40703810, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 775 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test01559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01559");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYear(984);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withMonthOfYear(57);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 57 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test01560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01560");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.dayOfMonth();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusWeeks((int) (byte) 10);
        java.util.Locale locale12 = java.util.Locale.PRC;
        java.lang.String str13 = dateTimeField3.getAsText((org.joda.time.ReadablePartial) localDateTime11, locale12);
        java.util.Set<java.lang.String> strSet14 = locale12.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category0, locale12);
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale12.getDisplayScript(locale16);
        java.lang.String str18 = locale16.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet19 = locale16.getUnicodeLocaleAttributes();
        boolean boolean20 = strSet19.isEmpty();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "7" + "'", str13, "7");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u4e2d\u6587" + "'", str18, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test01561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01561");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("minuteOfHour");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=minuteofhour");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01562");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = copticChronology1.getZone();
        long long12 = copticChronology1.add((long) 15, (-3600001L), 2);
        org.joda.time.DateTimeField dateTimeField13 = copticChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DurationField durationField16 = copticChronology1.millis();
        org.joda.time.DurationField durationField17 = copticChronology1.centuries();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-7199987L) + "'", long12 == (-7199987L));
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test01563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01563");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        long long4 = durationField3.getUnitMillis();
        long long7 = durationField3.getValueAsLong(10040630400000L, (long) 201);
        long long8 = durationField3.getUnitMillis();
        int int11 = durationField3.getValue(937094400000L, (-52L));
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 31557600000L + "'", long4 == 31557600000L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 318L + "'", long7 == 318L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 31557600000L + "'", long8 == 31557600000L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 29 + "'", int11 == 29);
    }

    @Test
    public void test01564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01564");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(659, 984, (-335), 26217164, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26217164 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01565");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.minusYears(999);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusDays(24);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.plusYears(902);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withSecondOfMinute(26280714);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26280714 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test01566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01566");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.dayOfMonth();
        org.joda.time.DurationField durationField4 = copticChronology1.weeks();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology6.hourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology6.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.Chronology chronology10 = copticChronology6.withZone(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology6.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology6.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology6.year();
        org.joda.time.DateTimeZone dateTimeZone14 = copticChronology6.getZone();
        org.joda.time.Chronology chronology15 = copticChronology1.withZone(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = copticChronology1.year();
        org.joda.time.DurationField durationField17 = copticChronology1.seconds();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology1.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long26 = copticChronology1.getDateTimeMillis(100, 26250133, 318, 480, 593, 40697751, 795);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 480 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test01567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01567");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.dayOfMonth();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusWeeks((int) (byte) 10);
        java.util.Locale locale12 = java.util.Locale.PRC;
        java.lang.String str13 = dateTimeField3.getAsText((org.joda.time.ReadablePartial) localDateTime11, locale12);
        java.util.Set<java.lang.String> strSet14 = locale12.getUnicodeLocaleKeys();
        java.lang.Object[] objArray15 = strSet14.toArray();
        boolean boolean16 = strSet0.retainAll((java.util.Collection<java.lang.String>) strSet14);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology18.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Chronology chronology22 = copticChronology18.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = copticChronology18.millisOfSecond();
        org.joda.time.DurationField durationField24 = copticChronology18.hours();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology18.dayOfMonth();
        org.joda.time.DurationField durationField26 = copticChronology18.weeks();
        boolean boolean27 = strSet0.contains((java.lang.Object) durationField26);
        java.util.Spliterator<java.lang.String> strSpliterator28 = strSet0.spliterator();
        boolean boolean30 = strSet0.add("");
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "7" + "'", str13, "7");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strSpliterator28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test01568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01568");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguageTag("inglese");
        java.util.Locale.Builder builder4 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder3.setLanguageTag("2022-02-15T07:15:52.442");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test01569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01569");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(463);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test01570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01570");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.eras();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.weekOfWeekyear();
        long long6 = dateTimeField4.roundCeiling(10040483757565L);
        int int9 = dateTimeField4.getDifference(10040483762981L, (long) (byte) 1);
        long long11 = dateTimeField4.roundHalfCeiling((long) 133);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10040875200000L + "'", long6 == 10040875200000L);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16601 + "'", int9 == 16601);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-14400000L) + "'", long11 == (-14400000L));
    }

    @Test
    public void test01571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01571");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusWeeks((int) (byte) -1);
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.lang.String str11 = locale10.getScript();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.clockhourOfDay();
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.lang.String str17 = dateTimeField14.getAsText((long) 'a', locale16);
        java.lang.String str18 = locale10.getDisplayName(locale16);
        java.lang.String str19 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime8, (int) ' ', locale16);
        java.lang.String str20 = locale16.getISO3Country();
        java.lang.String str21 = locale16.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = locale16.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "4" + "'", str17, "4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tedesco (Germania)" + "'", str18, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "32" + "'", str19, "32");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test01572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01572");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = copticChronology1.getZone();
        java.lang.String str9 = dateTimeZone7.getShortName(0L);
        int int11 = dateTimeZone7.getOffset(4346169777L);
        long long14 = dateTimeZone7.adjustOffset(4346212655L, false);
        long long16 = dateTimeZone7.convertUTCToLocal(10598109397575L);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+100:00" + "'", str9, "+100:00");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 360000000 + "'", int11 == 360000000);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 4346212655L + "'", long14 == 4346212655L);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 10598469397575L + "'", long16 == 10598469397575L);
    }

    @Test
    public void test01573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01573");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.centuryOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime(readableInstant14);
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        boolean boolean17 = locale16.hasExtensions();
        boolean boolean18 = dateTime15.equals((java.lang.Object) locale16);
        int int19 = property5.getDifference((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalDateTime localDateTime20 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime21 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusYears(575);
        int int24 = localDateTime23.getDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField26 = localDateTime23.getField(47);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 47");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
    }

    @Test
    public void test01574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01574");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekOfWeekyear();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withMillisOfSecond((int) (byte) 1);
        int int20 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime.Property property21 = localDateTime15.weekyear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime15.minusMillis(2022);
        int[] intArray25 = copticChronology1.get((org.joda.time.ReadablePartial) localDateTime15, (long) '#');
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime15.withDurationAdded(readableDuration26, 475);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(chronology29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusWeeks((int) (byte) -1);
        java.lang.String str33 = localDateTime32.toString();
        int int34 = localDateTime32.getWeekyear();
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.hourOfDay();
        int int36 = localDateTime15.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime38 = localDateTime15.withWeekOfWeekyear(25802001);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25802001 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1686, 4, 27, 14400035]");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-19T11:18:45.072" + "'", str33, "2022-02-19T11:18:45.072");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
    }

    @Test
    public void test01575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01575");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.secondOfDay();
        org.joda.time.DurationField durationField5 = copticChronology1.years();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.weekOfWeekyear();
        int int8 = dateTimeField6.getMinimumValue((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.dayOfMonth();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.plusWeeks((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.PRC;
        java.lang.String str22 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localDateTime20, locale21);
        java.util.Set<java.lang.String> strSet23 = locale21.getUnicodeLocaleKeys();
        java.lang.String str24 = locale21.getScript();
        java.lang.String str25 = locale21.toLanguageTag();
        java.lang.String str26 = dateTimeField6.getAsShortText(4346173739L, locale21);
        long long29 = dateTimeField6.add(10040483822497L, 26232955);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "7" + "'", str22, "7");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zh-CN" + "'", str25, "zh-CN");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "25" + "'", str26, "25");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 15875731667822497L + "'", long29 == 15875731667822497L);
    }

    @Test
    public void test01576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01576");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = localDateTime1.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withMillisOfDay((int) (byte) 0);
        int int5 = localDateTime4.getYear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.yearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusMonths(16601);
        int int9 = localDateTime4.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime4.withTime(559, 25855001, 75, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 559 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
    }

    @Test
    public void test01577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01577");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField6 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.minuteOfDay();
        org.joda.time.DurationField durationField8 = copticChronology1.millis();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = copticChronology1.getDateTimeMillis(100L, 15, 728, 45, 86399999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 728 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
    }

    @Test
    public void test01578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01578");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.hourOfHalfday();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = property15.withMaximumValue();
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfMonth();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.plusWeeks((int) (byte) 10);
        java.util.Locale locale29 = java.util.Locale.PRC;
        java.lang.String str30 = dateTimeField20.getAsText((org.joda.time.ReadablePartial) localDateTime28, locale29);
        java.lang.String str31 = locale29.getDisplayScript();
        java.lang.String str32 = locale29.getDisplayScript();
        java.lang.String str33 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, locale29);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime16.withDurationAdded(readableDuration34, 843);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "7" + "'", str30, "7");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "11" + "'", str33, "11");
        org.junit.Assert.assertNotNull(localDateTime36);
    }

    @Test
    public void test01579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01579");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.weekOfWeekyear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime(readableInstant15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusMonths((int) '4');
        long long21 = copticChronology1.set((org.joda.time.ReadablePartial) localDateTime19, (long) 100);
        org.joda.time.DateTimeField dateTimeField22 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology1.minuteOfHour();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withMillisOfSecond((int) (byte) 1);
        int int38 = localDateTime25.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime.Property property39 = localDateTime33.weekyear();
        org.joda.time.LocalDateTime.Property property40 = localDateTime33.millisOfDay();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime33.minusYears(999);
        int int43 = localDateTime33.getYear();
        long long45 = copticChronology1.set((org.joda.time.ReadablePartial) localDateTime33, (long) 26217164);
        // The following exception was thrown during execution in test generation
        try {
            long long50 = copticChronology1.getDateTimeMillis((-245326), 214, 532, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 214 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10040483925360L + "'", long21 == 10040483925360L);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 10598109525360L + "'", long45 == 10598109525360L);
    }

    @Test
    public void test01580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01580");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField7 = localDateTime5.getField((-52));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -52");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test01581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01581");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = copticChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.dayOfMonth();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusWeeks((int) (byte) 10);
        java.util.Locale locale23 = java.util.Locale.PRC;
        java.lang.String str24 = dateTimeField14.getAsText((org.joda.time.ReadablePartial) localDateTime22, locale23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.plus(readablePeriod25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.dayOfWeek();
        int int28 = dateTimeField11.getMaximumValue((org.joda.time.ReadablePartial) localDateTime26);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "7" + "'", str24, "7");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 53 + "'", int28 == 53);
    }

    @Test
    public void test01582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01582");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        int int5 = dateTimeField4.getMaximumValue();
        long long7 = dateTimeField4.roundHalfFloor(31557600000L);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 24 + "'", int5 == 24);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 31557600000L + "'", long7 == 31557600000L);
    }

    @Test
    public void test01583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01583");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.dayOfMonth();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.weekyear();
        org.joda.time.LocalDateTime localDateTime14 = property12.setCopy((int) (byte) 1);
        long long15 = property12.remainder();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime(readableInstant24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime23.millisOfDay();
        int int27 = property12.compareTo((org.joda.time.ReadablePartial) localDateTime23);
        int int28 = dateTimeField3.getMaximumValue((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = localDateTime23.getFieldType((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime23.withMinuteOfHour((int) (short) 0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.yearOfCentury();
        java.lang.String str34 = property33.toString();
        int int35 = property33.getLeapAmount();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.dayOfMonth();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(chronology39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.plusWeeks((int) (byte) 10);
        java.util.Locale locale47 = java.util.Locale.PRC;
        java.lang.String str48 = dateTimeField38.getAsText((org.joda.time.ReadablePartial) localDateTime46, locale47);
        java.lang.String str49 = locale47.getDisplayScript();
        java.lang.String str51 = locale47.getUnicodeLocaleType("de");
        java.lang.String str52 = property33.getAsText(locale47);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 4706325763L + "'", long15 == 4706325763L);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 30 + "'", int28 == 30);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Property[yearOfCentury]" + "'", str34, "Property[yearOfCentury]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "7" + "'", str48, "7");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0" + "'", str52, "0");
    }

    @Test
    public void test01584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01584");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = copticChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray9 = copticChronology1.get(readablePeriod7, 4519014090L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test01585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01585");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekOfWeekyear();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withMillisOfSecond((int) (byte) 1);
        int int20 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime.Property property21 = localDateTime15.weekyear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime15.minusMillis(2022);
        int[] intArray25 = copticChronology1.get((org.joda.time.ReadablePartial) localDateTime15, (long) '#');
        org.joda.time.DateTimeField dateTimeField26 = copticChronology1.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField27 = copticChronology1.yearOfEra();
        org.joda.time.DurationField durationField28 = copticChronology1.minutes();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology1.dayOfWeek();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1686, 4, 27, 14400035]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test01586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01586");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.hourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology7.centuryOfEra();
        org.joda.time.DurationField durationField10 = copticChronology7.millis();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology7.weekOfWeekyear();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withMillisOfSecond((int) (byte) 1);
        int int26 = localDateTime13.compareTo((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime.Property property27 = localDateTime21.weekyear();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime21.minusMillis(2022);
        int[] intArray31 = copticChronology7.get((org.joda.time.ReadablePartial) localDateTime21, (long) '#');
        long long33 = copticChronology1.set((org.joda.time.ReadablePartial) localDateTime21, 32054400000L);
        org.joda.time.DateTimeField dateTimeField34 = copticChronology1.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology1.dayOfYear();
        org.joda.time.DurationField durationField36 = copticChronology1.halfdays();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(intArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1686, 4, 27, 14400035]");
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10598109526021L + "'", long33 == 10598109526021L);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test01587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01587");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField6 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.weekyearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray11 = copticChronology1.get(readablePeriod8, 4638455520L, (-19565351999998L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test01588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01588");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField5 = copticChronology1.hours();
        org.joda.time.DurationField durationField6 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.hourOfDay();
        org.joda.time.DurationField durationField8 = copticChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.dayOfMonth();
        org.joda.time.DurationField durationField10 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology1.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test01589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01589");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.centuryOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime(readableInstant14);
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        boolean boolean17 = locale16.hasExtensions();
        boolean boolean18 = dateTime15.equals((java.lang.Object) locale16);
        int int19 = property5.getDifference((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalDateTime localDateTime20 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime21 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusMonths((int) (byte) 0);
        int int24 = localDateTime23.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withSecondOfMinute(772);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 772 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test01590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01590");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = copticChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology1.weekOfWeekyear();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test01591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01591");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(1651562202659L);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusMinutes(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMinuteOfHour(26185925);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26185925 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test01592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01592");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property16.withMinimumValue();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withMillisOfSecond((int) (byte) 1);
        int int32 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime.Property property33 = localDateTime27.weekyear();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime27.minusMillis(2022);
        boolean boolean36 = localDateTime17.isAfter((org.joda.time.ReadablePartial) localDateTime27);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str40 = dateTimeZone38.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(dateTimeZone38);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        java.lang.String str45 = dateTimeZone43.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(dateTimeZone43);
        boolean boolean47 = localDateTime41.isEqual((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime27.withFields((org.joda.time.ReadablePartial) localDateTime46);
        int int49 = localDateTime46.getYearOfEra();
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.plus(readableDuration50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withMillisOfSecond(463);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withYearOfEra(2060);
        int int56 = localDateTime53.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 18 + "'", int56 == 18);
    }

    @Test
    public void test01593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01593");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        int int8 = localDateTime7.getMillisOfSecond();
        int int9 = localDateTime7.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.plusHours((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType12 = null;
        boolean boolean13 = localDateTime7.isSupported(durationFieldType12);
        org.joda.time.DateTime dateTime14 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime7.plusMillis(491);
        org.joda.time.LocalDateTime.Property property17 = localDateTime7.dayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 604 + "'", int8 == 604);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 604 + "'", int9 == 604);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test01594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01594");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("26151082");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale locale6 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder0.setScript("962");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 962 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
    }

    @Test
    public void test01595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01595");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusDays(100);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime14 = property12.addToCopy((long) 724);
        org.joda.time.LocalDateTime localDateTime16 = property12.addWrapFieldToCopy(112);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.yearOfEra();
        int int18 = property17.getMaximumValueOverall();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = copticChronology21.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology21.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.Chronology chronology25 = copticChronology21.withZone(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField26 = chronology25.yearOfCentury();
        java.util.Locale locale28 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet29 = locale28.getExtensionKeys();
        java.lang.String str30 = dateTimeField26.getAsShortText(619, locale28);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.chrono.CopticChronology copticChronology32 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = copticChronology32.hourOfDay();
        org.joda.time.DurationField durationField34 = copticChronology32.eras();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology32.weekOfWeekyear();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(chronology36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.weekOfWeekyear();
        int int41 = localDateTime39.getYear();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.chrono.CopticChronology copticChronology43 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = copticChronology43.dayOfMonth();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(chronology45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime46.plusWeeks((int) (byte) 10);
        java.util.Locale locale53 = java.util.Locale.PRC;
        java.lang.String str54 = dateTimeField44.getAsText((org.joda.time.ReadablePartial) localDateTime52, locale53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(chronology55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.withMillisOfSecond((int) (byte) 1);
        java.util.Locale locale62 = java.util.Locale.JAPAN;
        java.lang.String str63 = dateTimeField44.getAsText((org.joda.time.ReadablePartial) localDateTime56, 2022, locale62);
        java.lang.String str64 = dateTimeField35.getAsShortText((org.joda.time.ReadablePartial) localDateTime39, locale62);
        java.util.Set<java.lang.String> strSet65 = locale62.getUnicodeLocaleAttributes();
        java.lang.String str66 = locale28.getDisplayCountry(locale62);
        org.joda.time.LocalDateTime localDateTime67 = property17.setCopy("26177709", locale28);
        int int68 = property17.get();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 292278993 + "'", int18 == 292278993);
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "619" + "'", str30, "619");
        org.junit.Assert.assertNotNull(copticChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertNotNull(copticChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "7" + "'", str54, "7");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2022" + "'", str63, "2022");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "7" + "'", str64, "7");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str66, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2021 + "'", int68 == 2021);
    }

    @Test
    public void test01596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01596");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone1);
        int int6 = dateTimeZone1.getOffsetFromLocal((-12955650256039L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 360000000 + "'", int6 == 360000000);
    }

    @Test
    public void test01597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01597");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.millisOfDay();
        int int6 = dateTimeField5.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.clockhourOfDay();
        org.joda.time.DurationField durationField11 = copticChronology9.weekyears();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology9.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = copticChronology9.getZone();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology9);
        org.joda.time.DurationField durationField15 = copticChronology9.weekyears();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(4346159663L, (org.joda.time.Chronology) copticChronology9);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfMonth();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.plusWeeks((int) (byte) 10);
        java.util.Locale locale29 = java.util.Locale.PRC;
        java.lang.String str30 = dateTimeField20.getAsText((org.joda.time.ReadablePartial) localDateTime28, locale29);
        java.lang.String str31 = dateTimeField5.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, 285, locale29);
        long long34 = dateTimeField5.set(4346158513L, (int) '4');
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 86399999 + "'", int6 == 86399999);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "7" + "'", str30, "7");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "285" + "'", str31, "285");
// flaky:         org.junit.Assert.assertTrue("'" + long34 + "' != '" + 4305600052L + "'", long34 == 4305600052L);
    }

    @Test
    public void test01598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01598");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Collection<java.lang.String> strCollection3 = null;
        java.util.List<java.lang.String> strList4 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection3);
        java.util.Collection<java.lang.String> strCollection5 = null;
        java.util.List<java.lang.String> strList6 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfMonth();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusWeeks((int) (byte) 10);
        java.util.Locale locale18 = java.util.Locale.PRC;
        java.lang.String str19 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime17, locale18);
        java.util.Set<java.lang.String> strSet20 = locale18.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet21 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet21.clear();
        java.lang.Object[] objArray23 = strSet21.toArray();
        boolean boolean24 = strSet20.addAll((java.util.Collection<java.lang.String>) strSet21);
        java.lang.String[] strArray34 = new java.lang.String[] { "UTC", "UTC", "tedesco (Germania)", "Etc/UTC", "Etc/UTC", "", "", "10", "Etc/UTC" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Collection<java.lang.String> strCollection40 = null;
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, strCollection40);
        boolean boolean42 = strSet35.retainAll((java.util.Collection<java.lang.String>) strList41);
        boolean boolean43 = strSet20.addAll((java.util.Collection<java.lang.String>) strSet35);
        java.util.Locale.FilteringMode filteringMode44 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet20, filteringMode44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.chrono.CopticChronology copticChronology47 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = copticChronology47.clockhourOfDay();
        org.joda.time.DurationField durationField49 = copticChronology47.weekyears();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology47.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone51 = copticChronology47.getZone();
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology47);
        org.joda.time.DurationField durationField53 = copticChronology47.weekyears();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(chronology54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime55.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.dayOfWeek();
        int[] intArray62 = copticChronology47.get((org.joda.time.ReadablePartial) localDateTime59, 0L);
        org.joda.time.DurationField durationField63 = copticChronology47.minutes();
        long long65 = durationField63.getMillis(3430L);
        boolean boolean66 = strSet20.contains((java.lang.Object) durationField63);
        java.lang.String str67 = durationField63.toString();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "7" + "'", str19, "7");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + filteringMode44 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode44.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(copticChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(intArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[1686, 4, 27, 14400000]");
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 205800000L + "'", long65 == 205800000L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "DurationField[minutes]" + "'", str67, "DurationField[minutes]");
    }

    @Test
    public void test01599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01599");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusMonths(761);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour((int) 'x');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test01600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01600");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusMonths((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField14 = localDateTime12.getField(360000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 360000000");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test01601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01601");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.dayOfMonth();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plusWeeks((int) (byte) 10);
        java.util.Locale locale15 = java.util.Locale.PRC;
        java.lang.String str16 = dateTimeField6.getAsText((org.joda.time.ReadablePartial) localDateTime14, locale15);
        java.util.Set<java.lang.String> strSet17 = locale15.getUnicodeLocaleKeys();
        java.lang.String str18 = locale15.getScript();
        java.util.Set<java.lang.Character> charSet19 = locale15.getExtensionKeys();
        java.lang.String str20 = dateTimeField2.getAsText(16, locale15);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.clockhourOfDay();
        org.joda.time.DurationField durationField24 = copticChronology22.weekyears();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology22.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = copticChronology22.getZone();
        java.lang.String str27 = dateTimeZone26.getID();
        int int29 = dateTimeZone26.getStandardOffset((long) (-1));
        java.lang.String str31 = dateTimeZone26.getName((long) 15);
        long long33 = dateTimeZone26.nextTransition(18000001L);
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone26);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusMinutes(26284924);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(chronology38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime43.minusDays(0);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minus(readableDuration50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = localDateTime51.toString(dateTimeFormatter52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.minusWeeks(11);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withYearOfEra(52);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(chronology59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime60.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.dayOfWeek();
        org.joda.time.Chronology chronology66 = localDateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.yearOfEra();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(3430L, chronology66);
        org.joda.time.LocalDateTime localDateTime69 = org.joda.time.LocalDateTime.now(chronology66);
        boolean boolean70 = localDateTime55.isAfter((org.joda.time.ReadablePartial) localDateTime69);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.LocalDateTime localDateTime72 = localDateTime55.minus(readablePeriod71);
        int int73 = localDateTime55.size();
        boolean boolean74 = localDateTime35.isAfter((org.joda.time.ReadablePartial) localDateTime55);
        boolean boolean75 = locale15.equals((java.lang.Object) boolean74);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "7" + "'", str16, "7");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(charSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "16" + "'", str20, "16");
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+100:00" + "'", str27, "+100:00");
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 360000000 + "'", int29 == 360000000);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+100:00" + "'", str31, "+100:00");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 18000001L + "'", long33 == 18000001L);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-26T11:18:46.001" + "'", str53, "2022-02-26T11:18:46.001");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 4 + "'", int73 == 4);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test01602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01602");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset(0L);
        boolean boolean3 = timeZone0.observesDaylightTime();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone0.hasSameRules(timeZone4);
        java.lang.String str6 = timeZone0.getID();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = timeZone0.getDisplayName(false, 103);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 103");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
    }

    @Test
    public void test01603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01603");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.dayOfMonth();
        org.joda.time.DurationField durationField3 = copticChronology1.eras();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.millisOfSecond();
        int int5 = dateTimeField4.getMinimumValue();
        java.lang.String str6 = dateTimeField4.getName();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "millisOfSecond" + "'", str6, "millisOfSecond");
    }

    @Test
    public void test01604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01604");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) (byte) 0);
        boolean boolean4 = dateTimeZone1.isFixed();
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        timeZone5.setRawOffset(132);
        java.lang.String str8 = timeZone5.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+100:00" + "'", str8, "+100:00");
    }

    @Test
    public void test01605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01605");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.minusYears(999);
        int int19 = localDateTime9.getDayOfYear();
        org.joda.time.LocalDateTime.Property property20 = localDateTime9.dayOfMonth();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.DateTime dateTime30 = localDateTime28.toDateTime(readableInstant29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime28.millisOfDay();
        org.joda.time.LocalDateTime localDateTime32 = property31.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.chrono.CopticChronology copticChronology34 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = copticChronology34.clockhourOfDay();
        org.joda.time.DurationField durationField36 = copticChronology34.weekyears();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology34.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology34.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology34.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone40 = copticChronology34.getZone();
        java.lang.String str42 = dateTimeZone40.getShortName(0L);
        int int44 = dateTimeZone40.getOffset(4346169777L);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.clockhourOfDay();
        org.joda.time.DurationField durationField48 = copticChronology46.weekyears();
        org.joda.time.DateTimeField dateTimeField49 = copticChronology46.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone50 = copticChronology46.getZone();
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology46);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.Chronology chronology54 = copticChronology46.withZone(dateTimeZone53);
        long long56 = dateTimeZone40.getMillisKeepLocal(dateTimeZone53, (long) 761);
        long long59 = dateTimeZone53.adjustOffset(242L, true);
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now(dateTimeZone53);
        int int61 = localDateTime32.compareTo((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime60.withMinuteOfHour(15);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(133);
        org.joda.time.DateTime dateTime66 = localDateTime63.toDateTime(dateTimeZone65);
        int int67 = property20.compareTo((org.joda.time.ReadableInstant) dateTime66);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 57 + "'", int19 == 57);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(copticChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+100:00" + "'", str42, "+100:00");
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 360000000 + "'", int44 == 360000000);
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 761L + "'", long56 == 761L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 242L + "'", long59 == 242L);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
    }

    @Test
    public void test01606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01606");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekOfWeekyear();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withMillisOfSecond((int) (byte) 1);
        int int20 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime.Property property21 = localDateTime15.weekyear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime15.minusMillis(2022);
        int[] intArray25 = copticChronology1.get((org.joda.time.ReadablePartial) localDateTime15, (long) '#');
        int int26 = localDateTime15.getYearOfCentury();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime15.minus(readableDuration27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime15.minusYears(34);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1686, 4, 27, 14400035]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 22 + "'", int26 == 22);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
    }

    @Test
    public void test01607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01607");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.weekyear();
        int int7 = dateTimeField6.getMaximumValue();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 292272708 + "'", int7 == 292272708);
    }

    @Test
    public void test01608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01608");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withMinuteOfHour(10);
        boolean boolean26 = localDateTime9.isEqual((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime28 = property27.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withDayOfMonth(500);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 500 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test01609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01609");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfMonth();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusWeeks((int) (byte) 10);
        java.util.Locale locale18 = java.util.Locale.PRC;
        java.lang.String str19 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime17, locale18);
        int int20 = dateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) localDateTime17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = localDateTime17.withWeekOfWeekyear(165065759);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 165065759 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "7" + "'", str19, "7");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 24 + "'", int20 == 24);
    }

    @Test
    public void test01610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01610");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DurationField durationField4 = copticChronology1.years();
        org.joda.time.DurationField durationField5 = copticChronology1.hours();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfDay();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.minuteOfHour();
        java.util.TimeZone timeZone10 = null;
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone10);
        java.lang.String str13 = dateTimeZone11.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.dayOfMonth();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.plusWeeks((int) (byte) 10);
        java.util.Locale locale27 = java.util.Locale.PRC;
        java.lang.String str28 = dateTimeField18.getAsText((org.joda.time.ReadablePartial) localDateTime26, locale27);
        java.lang.String str29 = dateTimeZone11.getName((long) 242, locale27);
        java.lang.String str30 = locale27.getISO3Country();
        java.util.Locale locale31 = locale27.stripExtensions();
        java.lang.String str32 = dateTimeField8.getAsText(17523, locale31);
        long long35 = dateTimeField8.add((-12955650256039L), 1645514277609L);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "7" + "'", str28, "7");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+100:00" + "'", str29, "+100:00");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "CHN" + "'", str30, "CHN");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "17523" + "'", str32, "17523");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 98717901006283961L + "'", long35 == 98717901006283961L);
    }

    @Test
    public void test01611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01611");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.clockhourOfDay();
        org.joda.time.DurationField durationField9 = copticChronology7.weekyears();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology7.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone13 = copticChronology7.getZone();
        java.lang.String str15 = dateTimeZone13.getShortName(0L);
        int int17 = dateTimeZone13.getOffset(4346169777L);
        org.joda.time.Chronology chronology18 = copticChronology1.withZone(dateTimeZone13);
        java.lang.String str20 = dateTimeZone13.getName((-1L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.hourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology24.centuryOfEra();
        org.joda.time.DurationField durationField27 = copticChronology24.millis();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology24.weekOfWeekyear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(chronology29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(chronology37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withMillisOfSecond((int) (byte) 1);
        int int43 = localDateTime30.compareTo((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime.Property property44 = localDateTime38.weekyear();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime38.minusMillis(2022);
        int[] intArray48 = copticChronology24.get((org.joda.time.ReadablePartial) localDateTime38, (long) '#');
        org.joda.time.DateTimeField dateTimeField49 = copticChronology24.halfdayOfDay();
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology24);
        int int51 = localDateTime22.compareTo((org.joda.time.ReadablePartial) localDateTime50);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+100:00" + "'", str15, "+100:00");
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 360000000 + "'", int17 == 360000000);
        org.junit.Assert.assertNotNull(chronology18);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+100:00" + "'", str20, "+100:00");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(intArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1686, 4, 27, 14400035]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
    }

    @Test
    public void test01612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01612");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField9 = localDateTime7.getField(40719540);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 40719540");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test01613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01613");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekOfWeekyear();
        java.lang.String str5 = property4.getAsText();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime(readableInstant14);
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        boolean boolean17 = locale16.hasExtensions();
        boolean boolean18 = dateTime15.equals((java.lang.Object) locale16);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Collection<java.lang.String> strCollection22 = null;
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, strCollection22);
        java.util.Collection<java.lang.String> strCollection24 = null;
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, strCollection24);
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.util.Collection<java.lang.String> strCollection29 = null;
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, strCollection29);
        java.util.Collection<java.lang.String> strCollection31 = null;
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, strCollection31);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, strCollection31, filteringMode33);
        boolean boolean35 = dateTime15.equals((java.lang.Object) languageRangeList20);
        int int36 = property4.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeField dateTimeField37 = property4.getField();
        org.joda.time.LocalDateTime localDateTime38 = property4.withMaximumValue();
        int int39 = property4.getMinimumValue();
        int int40 = property4.getMinimumValueOverall();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime42 = property4.addToCopy(10598109496001L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 10598109496001 * 604800000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "7" + "'", str5, "7");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode33.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test01614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01614");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology6.clockhourOfDay();
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.lang.String str10 = dateTimeField7.getAsText((long) 'a', locale9);
        java.lang.String str11 = dateTimeField3.getAsText((int) 'a', locale9);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.clockhourOfDay();
        org.joda.time.DurationField durationField15 = copticChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology13.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.clockhourOfDay();
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.lang.String str22 = dateTimeField19.getAsText((long) 'a', locale21);
        int int23 = dateTimeField16.getMaximumTextLength(locale21);
        java.lang.String str24 = locale9.getDisplayCountry(locale21);
        java.util.Set<java.lang.Character> charSet25 = locale9.getExtensionKeys();
        java.lang.String str26 = locale9.getScript();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "4" + "'", str10, "4");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "97" + "'", str11, "97");
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "4" + "'", str22, "4");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(charSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test01615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01615");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = copticChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology1.hourOfDay();
        long long13 = dateTimeField11.roundHalfCeiling((long) 581);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test01616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01616");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = copticChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DurationField durationField7 = copticChronology1.weekyears();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        int[] intArray16 = copticChronology1.get((org.joda.time.ReadablePartial) localDateTime13, 0L);
        org.joda.time.DurationField durationField17 = copticChronology1.minutes();
        org.joda.time.Chronology chronology18 = copticChronology1.withUTC();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology1.hourOfHalfday();
        int int21 = dateTimeField19.get(0L);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(intArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1686, 4, 27, 14400000]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
    }

    @Test
    public void test01617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01617");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime.Property property17 = localDateTime9.yearOfCentury();
        long long18 = property17.remainder();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 4879127517L + "'", long18 == 4879127517L);
    }

    @Test
    public void test01618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01618");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-15T07:17:08.948");
        int int2 = timeZone1.getRawOffset();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.minusYears((-292269338));
        java.lang.String str14 = localDateTime8.toString("1");
        java.util.Date date15 = localDateTime8.toDate();
        boolean boolean16 = timeZone1.inDaylightTime(date15);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u30b0\u30ea\u30cb\u30c3\u30b8\u6a19\u6e96\u6642");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Sat Feb 26 11:18:47 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test01619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01619");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.yearOfCentury();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        int int18 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime.Property property19 = localDateTime13.weekyear();
        org.joda.time.LocalDateTime.Property property20 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.minusYears(999);
        int int23 = localDateTime13.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime13.minusSeconds(30);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.millisOfDay();
        org.joda.time.LocalDateTime localDateTime37 = property36.withMaximumValue();
        java.util.Locale locale38 = java.util.Locale.GERMANY;
        java.lang.String str39 = locale38.getScript();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.chrono.CopticChronology copticChronology41 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField42 = copticChronology41.clockhourOfDay();
        java.util.Locale locale44 = java.util.Locale.ITALIAN;
        java.lang.String str45 = dateTimeField42.getAsText((long) 'a', locale44);
        java.lang.String str46 = locale38.getDisplayName(locale44);
        java.lang.String str47 = property36.getAsShortText(locale38);
        java.lang.String str48 = dateTimeField3.getAsText((org.joda.time.ReadablePartial) localDateTime25, locale38);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((java.lang.Object) str48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withWeekOfWeekyear(26211405);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26211405 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 57 + "'", int23 == 57);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(copticChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "4" + "'", str45, "4");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tedesco (Germania)" + "'", str46, "tedesco (Germania)");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "40727591" + "'", str47, "40727591");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "22" + "'", str48, "22");
    }

    @Test
    public void test01620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01620");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.hourOfHalfday();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime16 = property15.withMaximumValue();
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfMonth();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.plusWeeks((int) (byte) 10);
        java.util.Locale locale29 = java.util.Locale.PRC;
        java.lang.String str30 = dateTimeField20.getAsText((org.joda.time.ReadablePartial) localDateTime28, locale29);
        java.lang.String str31 = locale29.getDisplayScript();
        java.lang.String str32 = locale29.getDisplayScript();
        java.lang.String str33 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, locale29);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = locale29.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "7" + "'", str30, "7");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "11" + "'", str33, "11");
    }

    @Test
    public void test01621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01621");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("26151082");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.setLanguageTag("2022-02-22T07:17:39.482");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test01622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01622");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DurationField durationField7 = copticChronology1.months();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.hourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology10.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Chronology chronology14 = copticChronology10.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = copticChronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology10.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone17 = copticChronology10.getZone();
        org.joda.time.DurationField durationField18 = copticChronology10.seconds();
        boolean boolean19 = copticChronology1.equals((java.lang.Object) durationField18);
        org.joda.time.DurationField durationField20 = copticChronology1.seconds();
        int int23 = durationField20.getValue((long) 133, 0L);
        long long25 = durationField20.getValueAsLong((long) 256);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test01623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01623");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) (byte) 0);
        boolean boolean4 = dateTimeZone1.isFixed();
        java.util.TimeZone timeZone5 = dateTimeZone1.toTimeZone();
        timeZone5.setRawOffset(132);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = localDateTime9.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withMillisOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withMillisOfSecond((int) (byte) 1);
        boolean boolean19 = localDateTime9.isAfter((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime9.withMinuteOfHour(4);
        java.util.Date date22 = localDateTime9.toDate();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.fromDateFields(date22);
        boolean boolean24 = timeZone5.inDaylightTime(date22);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Sat Feb 26 11:18:47 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test01624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01624");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekOfWeekyear();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withMillisOfSecond((int) (byte) 1);
        int int20 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime.Property property21 = localDateTime15.weekyear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime15.minusMillis(2022);
        int[] intArray25 = copticChronology1.get((org.joda.time.ReadablePartial) localDateTime15, (long) '#');
        org.joda.time.LocalDateTime.Property property26 = localDateTime15.millisOfDay();
        int int27 = localDateTime15.getMonthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime29 = localDateTime15.withDayOfYear(572);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 572 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1686, 4, 27, 14400035]");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
    }

    @Test
    public void test01625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01625");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withMinuteOfHour(10);
        boolean boolean26 = localDateTime9.isEqual((org.joda.time.ReadablePartial) localDateTime25);
        int int27 = localDateTime25.getMillisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType29 = localDateTime25.getFieldType(86);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 86");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 40247001 + "'", int27 == 40247001);
    }

    @Test
    public void test01626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01626");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.centuryOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime(readableInstant14);
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        boolean boolean17 = locale16.hasExtensions();
        boolean boolean18 = dateTime15.equals((java.lang.Object) locale16);
        int int19 = property5.getDifference((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalDateTime localDateTime20 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime21 = property5.roundHalfEvenCopy();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.weekOfWeekyear();
        java.lang.String str27 = property26.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = property26.getFieldType();
        int int29 = localDateTime21.get(dateTimeFieldType28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = localDateTime31.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withMillisOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(chronology35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.withMillisOfSecond((int) (byte) 1);
        boolean boolean41 = localDateTime31.isAfter((org.joda.time.ReadablePartial) localDateTime36);
        int int42 = localDateTime36.getMillisOfSecond();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(chronology43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property48 = localDateTime46.centuryOfEra();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(chronology49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime50.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDateTime56.toDateTime(readableInstant57);
        java.util.Locale locale59 = java.util.Locale.GERMANY;
        boolean boolean60 = locale59.hasExtensions();
        boolean boolean61 = dateTime58.equals((java.lang.Object) locale59);
        int int62 = property48.getDifference((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.LocalDateTime localDateTime63 = property48.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime64 = property48.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.plusMonths((int) (byte) 0);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(chronology67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime68.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime68.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = localDateTime74.toDateTime(readableInstant75);
        org.joda.time.LocalDateTime.Property property77 = localDateTime74.millisOfDay();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime74.plusMonths((int) '4');
        org.joda.time.LocalDateTime.Property property80 = localDateTime74.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime81 = property80.roundHalfFloorCopy();
        int int82 = property80.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = property80.getFieldType();
        org.joda.time.LocalDateTime localDateTime85 = localDateTime64.withField(dateTimeFieldType83, (int) (byte) 1);
        boolean boolean86 = localDateTime36.isSupported(dateTimeFieldType83);
        boolean boolean87 = localDateTime21.isSupported(dateTimeFieldType83);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "7" + "'", str27, "7");
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 988 + "'", int42 == 988);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 99 + "'", int82 == 99);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
    }

    @Test
    public void test01627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01627");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = copticChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology1.weekyearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray16 = copticChronology1.get(readablePeriod14, (long) 112);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test01628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01628");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = localDateTime1.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withMillisOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withMillisOfSecond((int) (byte) 1);
        boolean boolean11 = localDateTime1.isAfter((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.withMinuteOfHour(4);
        int int14 = localDateTime13.size();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 4 + "'", int14 == 4);
    }

    @Test
    public void test01629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01629");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusDays(0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readableDuration12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = localDateTime13.toString(dateTimeFormatter14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.minusWeeks(11);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = localDateTime13.getFieldTypes();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-26T11:18:48.001" + "'", str15, "2022-02-26T11:18:48.001");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
    }

    @Test
    public void test01630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01630");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("26151082");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.setVariant("26236970");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.setVariant("113");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 113 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test01631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01631");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("26151082");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder2.setVariant("Etc/UTC");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: Etc/UTC [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test01632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01632");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        long long8 = dateTimeField6.roundHalfFloor(34440112L);
        org.joda.time.DurationField durationField9 = dateTimeField6.getDurationField();
        // The following exception was thrown during execution in test generation
        try {
            long long12 = durationField9.subtract((long) 868, 26284924);
            org.junit.Assert.fail("Expected exception of type org.joda.time.chrono.LimitChronology.LimitException; message: The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-10036800000L) + "'", long8 == (-10036800000L));
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test01633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01633");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.DurationField durationField16 = property15.getRangeDurationField();
        org.joda.time.DurationField durationField17 = property15.getDurationField();
        org.joda.time.LocalDateTime localDateTime18 = property15.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.clockhourOfDay();
        org.joda.time.DurationField durationField22 = copticChronology20.weekyears();
        org.joda.time.DurationField durationField23 = copticChronology20.centuries();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology20.weekyear();
        int int25 = dateTimeField24.getMinimumValue();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withMillisOfSecond((int) (byte) 1);
        int int40 = localDateTime27.compareTo((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime.Property property41 = localDateTime35.weekyear();
        org.joda.time.LocalDateTime.Property property42 = localDateTime35.millisOfDay();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(chronology43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime44.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDateTime50.toDateTime(readableInstant51);
        java.util.Locale locale53 = java.util.Locale.GERMANY;
        boolean boolean54 = locale53.hasExtensions();
        boolean boolean55 = dateTime52.equals((java.lang.Object) locale53);
        java.lang.String str56 = dateTimeField24.getAsShortText((org.joda.time.ReadablePartial) localDateTime35, locale53);
        int int57 = property15.getMaximumTextLength(locale53);
        java.lang.String str59 = locale53.getExtension('x');
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.chrono.CopticChronology copticChronology61 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone60);
        org.joda.time.DateTimeField dateTimeField62 = copticChronology61.hourOfDay();
        org.joda.time.DateTimeField dateTimeField63 = copticChronology61.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.Chronology chronology65 = copticChronology61.withZone(dateTimeZone64);
        org.joda.time.DateTimeField dateTimeField66 = chronology65.yearOfCentury();
        java.util.Locale locale68 = java.util.Locale.ENGLISH;
        java.lang.String str69 = dateTimeField66.getAsText(100L, locale68);
        java.lang.String str70 = locale53.getDisplayScript(locale68);
        java.util.Set<java.lang.String> strSet71 = locale53.getUnicodeLocaleKeys();
        java.util.Iterator<java.lang.String> strItor72 = strSet71.iterator();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-292269338) + "'", int25 == (-292269338));
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022" + "'", str56, "2022");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 9 + "'", int57 == 9);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(copticChronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "86" + "'", str69, "86");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(strItor72);
    }

    @Test
    public void test01634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01634");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("26176455");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=26176455");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01635");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("26177281");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=26177281");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01636");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekOfWeekyear();
        java.lang.String str5 = property4.getAsText();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime7 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = property4.addToCopy((-1));
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "7" + "'", str5, "7");
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test01637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01637");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DurationField durationField4 = copticChronology1.hours();
        int int5 = copticChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField6 = copticChronology1.centuries();
        long long8 = durationField6.getMillis(2033);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 6415660080000000L + "'", long8 == 6415660080000000L);
    }

    @Test
    public void test01638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01638");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField6 = copticChronology1.weeks();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = copticChronology1.getDateTimeMillis(318, 770, (int) '4', 0, 2922728, 40221001, (-335));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2922728 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test01639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01639");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        boolean boolean11 = dateTime9.isSupported(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        boolean boolean22 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.weekyearOfCentury();
        org.joda.time.DurationField durationField26 = copticChronology24.minutes();
        boolean boolean27 = dateTime21.equals((java.lang.Object) copticChronology24);
        org.joda.time.DateTimeField dateTimeField28 = copticChronology24.yearOfEra();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology24.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone30 = copticChronology24.getZone();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology24.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology24.millisOfDay();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(chronology33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(chronology41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withMillisOfSecond((int) (byte) 1);
        int int47 = localDateTime34.compareTo((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime.Property property48 = localDateTime42.weekyear();
        org.joda.time.LocalDateTime.Property property49 = localDateTime42.millisOfDay();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime42.minusYears(999);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plusDays(24);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.plusWeeks(0);
        int[] intArray57 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray59 = dateTimeField32.addWrapPartial((org.joda.time.ReadablePartial) localDateTime51, 26232955, intArray57, 666);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
    }

    @Test
    public void test01640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01640");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) (byte) 0);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withMillisOfSecond((int) (byte) 1);
        int int19 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        boolean boolean20 = dateTimeZone1.isLocalDateTimeGap(localDateTime6);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime6.plusMillis(708);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime6.withMillisOfSecond(318);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.year();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime31.minusDays(100);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(chronology38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime39.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.weekyear();
        org.joda.time.LocalDateTime localDateTime48 = property46.setCopy((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime49 = property46.roundFloorCopy();
        org.joda.time.Interval interval50 = property46.toInterval();
        org.joda.time.LocalDateTime localDateTime51 = property46.withMinimumValue();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(chronology52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime53.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime57.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime57.minusDays(100);
        org.joda.time.LocalDateTime.Property property64 = localDateTime63.minuteOfHour();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(chronology65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.weekOfWeekyear();
        java.lang.String str70 = property69.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = property69.getFieldType();
        boolean boolean72 = localDateTime63.isSupported(dateTimeFieldType71);
        org.joda.time.LocalDateTime.Property property73 = localDateTime51.property(dateTimeFieldType71);
        int int74 = localDateTime37.indexOf(dateTimeFieldType71);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime76 = localDateTime24.withField(dateTimeFieldType71, 40697751);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 40697751 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "7" + "'", str70, "7");
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
    }

    @Test
    public void test01641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01641");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology2.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Chronology chronology6 = copticChronology2.withZone(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology2.year();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology2.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 761, (org.joda.time.Chronology) copticChronology2);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withPeriodAdded(readablePeriod12, 26217164);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusYears(2000);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withHourOfDay(16);
        boolean boolean24 = localDateTime14.isEqual((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime14.withDurationAdded(readableDuration25, 2922728);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withWeekOfWeekyear(16601);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 16601 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test01642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01642");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        boolean boolean11 = locale10.hasExtensions();
        boolean boolean12 = dateTime9.equals((java.lang.Object) locale10);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Collection<java.lang.String> strCollection16 = null;
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, strCollection16);
        java.util.Collection<java.lang.String> strCollection18 = null;
        java.util.List<java.lang.String> strList19 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, strCollection18);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Collection<java.lang.String> strCollection23 = null;
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strCollection23);
        java.util.Collection<java.lang.String> strCollection25 = null;
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strCollection25);
        java.util.Locale.FilteringMode filteringMode27 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, strCollection25, filteringMode27);
        boolean boolean29 = dateTime9.equals((java.lang.Object) languageRangeList14);
        org.joda.time.Instant instant30 = dateTime9.toInstant();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.weekOfWeekyear();
        java.lang.String str36 = property35.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property35.getFieldType();
        int int38 = instant30.get(dateTimeFieldType37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.chrono.CopticChronology copticChronology40 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = copticChronology40.hourOfDay();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology40.dayOfMonth();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(chronology43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime44.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.weekyear();
        org.joda.time.LocalDateTime localDateTime53 = property51.setCopy((int) (byte) 1);
        long long54 = property51.remainder();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(chronology55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime56.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = localDateTime62.toDateTime(readableInstant63);
        org.joda.time.LocalDateTime.Property property65 = localDateTime62.millisOfDay();
        int int66 = property51.compareTo((org.joda.time.ReadablePartial) localDateTime62);
        int int67 = dateTimeField42.getMaximumValue((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = localDateTime62.getFieldType((int) (short) 1);
        boolean boolean70 = instant30.isSupported(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + filteringMode27 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode27.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "7" + "'", str36, "7");
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 8 + "'", int38 == 8);
        org.junit.Assert.assertNotNull(copticChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 4706329325L + "'", long54 == 4706329325L);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 30 + "'", int67 == 30);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test01643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01643");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        boolean boolean11 = locale10.hasExtensions();
        boolean boolean12 = dateTime9.equals((java.lang.Object) locale10);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Collection<java.lang.String> strCollection16 = null;
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, strCollection16);
        java.util.Collection<java.lang.String> strCollection18 = null;
        java.util.List<java.lang.String> strList19 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, strCollection18);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Collection<java.lang.String> strCollection23 = null;
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strCollection23);
        java.util.Collection<java.lang.String> strCollection25 = null;
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strCollection25);
        java.util.Locale.FilteringMode filteringMode27 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, strCollection25, filteringMode27);
        boolean boolean29 = dateTime9.equals((java.lang.Object) languageRangeList14);
        java.util.Collection<java.lang.String> strCollection30 = null;
        java.lang.String str31 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, strCollection30);
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Collection<java.lang.String> strCollection35 = null;
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, strCollection35);
        java.util.Collection<java.lang.String> strCollection37 = null;
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, strCollection37);
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Collection<java.lang.String> strCollection45 = null;
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, strCollection45);
        java.util.Collection<java.lang.String> strCollection47 = null;
        java.util.List<java.lang.String> strList48 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, strCollection47);
        java.util.Locale.LanguageRange[] languageRangeArray49 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList50 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList50, languageRangeArray49);
        java.util.Collection<java.lang.String> strCollection52 = null;
        java.util.List<java.lang.String> strList53 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, strCollection52);
        java.util.Collection<java.lang.String> strCollection54 = null;
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, strCollection54);
        java.util.Locale.FilteringMode filteringMode56 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, strCollection54, filteringMode56);
        java.util.Locale locale58 = java.util.Locale.GERMANY;
        boolean boolean59 = locale58.hasExtensions();
        java.util.Locale locale60 = java.util.Locale.TAIWAN;
        java.util.Locale locale61 = java.util.Locale.JAPAN;
        java.util.Locale locale62 = java.util.Locale.ITALY;
        java.util.Locale locale63 = java.util.Locale.JAPAN;
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.chrono.CopticChronology copticChronology65 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone64);
        org.joda.time.DateTimeField dateTimeField66 = copticChronology65.clockhourOfDay();
        org.joda.time.DurationField durationField67 = copticChronology65.weekyears();
        org.joda.time.DateTimeField dateTimeField68 = copticChronology65.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.chrono.CopticChronology copticChronology70 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone69);
        org.joda.time.DateTimeField dateTimeField71 = copticChronology70.clockhourOfDay();
        java.util.Locale locale73 = java.util.Locale.ITALIAN;
        java.lang.String str74 = dateTimeField71.getAsText((long) 'a', locale73);
        int int75 = dateTimeField68.getMaximumTextLength(locale73);
        java.util.Locale[] localeArray76 = new java.util.Locale[] { locale58, locale60, locale61, locale62, locale63, locale73 };
        java.util.ArrayList<java.util.Locale> localeList77 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList77, localeArray76);
        java.util.List<java.util.Locale> localeList79 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList77);
        java.util.Locale.LanguageRange[] languageRangeArray80 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList81 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList81, languageRangeArray80);
        java.util.Collection<java.lang.String> strCollection83 = null;
        java.util.List<java.lang.String> strList84 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList81, strCollection83);
        java.util.Collection<java.lang.String> strCollection85 = null;
        java.util.List<java.lang.String> strList86 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList81, strCollection85);
        java.util.Locale.LanguageRange[] languageRangeArray87 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList88 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList88, languageRangeArray87);
        java.util.Collection<java.lang.String> strCollection90 = null;
        java.util.List<java.lang.String> strList91 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList88, strCollection90);
        java.util.Collection<java.lang.String> strCollection92 = null;
        java.util.List<java.lang.String> strList93 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList88, strCollection92);
        java.util.Locale.FilteringMode filteringMode94 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList95 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList81, strCollection92, filteringMode94);
        java.util.List<java.util.Locale> localeList96 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.util.Locale>) localeList79, filteringMode94);
        java.util.Locale locale97 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, (java.util.Collection<java.util.Locale>) localeList96);
        java.util.List<java.util.Locale> localeList98 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList96);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + filteringMode27 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode27.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(languageRangeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertTrue("'" + filteringMode56 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode56.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(copticChronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(copticChronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "4" + "'", str74, "4");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertNotNull(localeArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(localeList79);
        org.junit.Assert.assertNotNull(languageRangeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertNotNull(languageRangeArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(strList91);
        org.junit.Assert.assertNotNull(strList93);
        org.junit.Assert.assertTrue("'" + filteringMode94 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode94.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList95);
        org.junit.Assert.assertNotNull(localeList96);
        org.junit.Assert.assertNull(locale97);
        org.junit.Assert.assertNotNull(localeList98);
    }

    @Test
    public void test01644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01644");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setScript("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder0.addUnicodeLocaleAttribute("2022-02-22T07:16:13.001");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-22T07:16:13.001 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test01645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01645");
        java.lang.Object obj0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(obj0);
        java.lang.String str2 = localDateTime1.toString();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusMinutes(100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withWeekOfWeekyear(122663);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 122663 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-26T11:18:49.797" + "'", str2, "2022-02-26T11:18:49.797");
        org.junit.Assert.assertNotNull(localDateTime4);
    }

    @Test
    public void test01646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01646");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfWeek();
        org.joda.time.DurationField durationField7 = property6.getDurationField();
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfMonth();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plusWeeks((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.PRC;
        java.lang.String str21 = dateTimeField11.getAsText((org.joda.time.ReadablePartial) localDateTime19, locale20);
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category8, locale20);
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.lang.String str25 = locale20.getDisplayScript(locale24);
        java.lang.String str26 = locale24.getDisplayLanguage();
        int int27 = property6.getMaximumTextLength(locale24);
        java.lang.String str28 = property6.toString();
        int int29 = property6.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime31 = property6.addToCopy(26209356);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category8.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "7" + "'", str21, "7");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u4e2d\u6587" + "'", str26, "\u4e2d\u6587");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Property[dayOfWeek]" + "'", str28, "Property[dayOfWeek]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test01647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01647");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = copticChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.millisOfDay();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.DateTime dateTime18 = localDateTime16.toDateTime(readableInstant17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.millisOfDay();
        org.joda.time.Interval interval20 = property19.toInterval();
        org.joda.time.DurationField durationField21 = property19.getDurationField();
        org.joda.time.LocalDateTime localDateTime23 = property19.addWrapFieldToCopy(25802001);
        java.lang.String str24 = property19.toString();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.clockhourOfDay();
        org.joda.time.DurationField durationField28 = copticChronology26.weekyears();
        org.joda.time.DurationField durationField29 = copticChronology26.centuries();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology26.weekyear();
        int int31 = dateTimeField30.getMinimumValue();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(chronology40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withMillisOfSecond((int) (byte) 1);
        int int46 = localDateTime33.compareTo((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime.Property property47 = localDateTime41.weekyear();
        org.joda.time.LocalDateTime.Property property48 = localDateTime41.millisOfDay();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(chronology49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime50.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.DateTime dateTime58 = localDateTime56.toDateTime(readableInstant57);
        java.util.Locale locale59 = java.util.Locale.GERMANY;
        boolean boolean60 = locale59.hasExtensions();
        boolean boolean61 = dateTime58.equals((java.lang.Object) locale59);
        java.lang.String str62 = dateTimeField30.getAsShortText((org.joda.time.ReadablePartial) localDateTime41, locale59);
        java.lang.String str63 = locale59.getDisplayCountry();
        java.lang.String str64 = locale59.getLanguage();
        java.lang.String str65 = locale59.getDisplayName();
        java.lang.String str66 = locale59.getLanguage();
        java.lang.String str67 = locale59.toLanguageTag();
        java.util.Locale locale68 = locale59.stripExtensions();
        java.lang.String str69 = locale59.getScript();
        int int70 = property19.getMaximumShortTextLength(locale59);
        java.lang.String str71 = dateTimeField7.getAsShortText(306, locale59);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Property[millisOfDay]" + "'", str24, "Property[millisOfDay]");
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-292269338) + "'", int31 == (-292269338));
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "2022" + "'", str62, "2022");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Deutschland" + "'", str63, "Deutschland");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "de" + "'", str64, "de");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Deutsch (Deutschland)" + "'", str65, "Deutsch (Deutschland)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "de" + "'", str66, "de");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "de-DE" + "'", str67, "de-DE");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 8 + "'", int70 == 8);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "306" + "'", str71, "306");
    }

    @Test
    public void test01648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01648");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology2.secondOfDay();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) copticChronology2);
        org.joda.time.DurationField durationField7 = copticChronology2.eras();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology2.year();
        org.joda.time.DateTimeZone dateTimeZone9 = copticChronology2.getZone();
        org.joda.time.DateTimeZone dateTimeZone10 = copticChronology2.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone10, 256);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 256");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
    }

    @Test
    public void test01649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01649");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusYears((-292269338));
        java.lang.String str11 = localDateTime5.toString("1");
        java.util.Date date12 = localDateTime5.toDate();
        org.joda.time.LocalDateTime.Property property13 = localDateTime5.monthOfYear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime(readableInstant22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.plusWeeks((int) (byte) 10);
        int int32 = localDateTime31.getMillisOfSecond();
        int int33 = localDateTime31.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.plusHours((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType36 = null;
        boolean boolean37 = localDateTime31.isSupported(durationFieldType36);
        org.joda.time.DateTime dateTime38 = localDateTime31.toDateTime();
        boolean boolean39 = dateTime23.isAfter((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime38.getZone();
        org.joda.time.Instant instant41 = dateTime38.toInstant();
        int int42 = property13.compareTo((org.joda.time.ReadableInstant) instant41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime44 = property13.addToCopy(10598109425605L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Magnitude of add amount is too large: 10598109425605");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Sat Feb 26 11:18:50 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 175 + "'", int32 == 175);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 175 + "'", int33 == 175);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test01650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01650");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(40722793, 14, 500, 855, 86399, 4, 26282001);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 855 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01651");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        long long7 = copticChronology1.add(readablePeriod4, (-10435L), (int) (byte) 100);
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.millisOfSecond();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.weekyear();
        org.joda.time.Interval interval18 = property17.toInterval();
        boolean boolean19 = property17.isLeap();
        org.joda.time.LocalDateTime localDateTime20 = property17.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMillisOfSecond(775);
        java.util.Locale locale24 = java.util.Locale.ROOT;
        java.lang.String str25 = locale24.getDisplayVariant();
        java.lang.String str26 = locale24.toLanguageTag();
        java.lang.String str27 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDateTime22, 727, locale24);
        java.lang.Object obj28 = locale24.clone();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-10435L) + "'", long7 == (-10435L));
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "und" + "'", str26, "und");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "727" + "'", str27, "727");
        org.junit.Assert.assertNotNull(obj28);
        org.junit.Assert.assertEquals(obj28.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj28), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj28), "");
    }

    @Test
    public void test01652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01652");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.dayOfMonth();
        org.joda.time.DurationField durationField4 = copticChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test01653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01653");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.yearOfCentury();
        org.joda.time.DurationField durationField6 = copticChronology1.eras();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withDate(26232955, 8, 165065759);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 165065759 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test01654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01654");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.chrono.CopticChronology copticChronology6 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology6.clockhourOfDay();
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.lang.String str10 = dateTimeField7.getAsText((long) 'a', locale9);
        int int11 = dateTimeField4.getMaximumTextLength(locale9);
        int int13 = dateTimeField4.getMinimumValue((-3600001L));
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.centuryOfEra();
        java.lang.String str20 = localDateTime17.toString();
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.lang.String str23 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime17, (-292275054), locale22);
        java.lang.String str24 = localDateTime17.toString();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.plusWeeks((int) (byte) 10);
        int int33 = localDateTime17.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime17.withDayOfYear((int) 'u');
        org.joda.time.LocalDateTime localDateTime37 = localDateTime17.withWeekyear((int) (short) 0);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(copticChronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "4" + "'", str10, "4");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-19T11:18:50.326" + "'", str20, "2022-02-19T11:18:50.326");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "-292275054" + "'", str23, "-292275054");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-19T11:18:50.326" + "'", str24, "2022-02-19T11:18:50.326");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
    }

    @Test
    public void test01655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01655");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) (byte) 0);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withMillisOfSecond((int) (byte) 1);
        int int19 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        boolean boolean20 = dateTimeZone1.isLocalDateTimeGap(localDateTime6);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime6.plusMillis(708);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField24 = localDateTime6.getField(26285067);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26285067");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test01656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01656");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusWeeks((int) (byte) -1);
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.lang.String str11 = locale10.getScript();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.clockhourOfDay();
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.lang.String str17 = dateTimeField14.getAsText((long) 'a', locale16);
        java.lang.String str18 = locale10.getDisplayName(locale16);
        java.lang.String str19 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime8, (int) ' ', locale16);
        java.lang.String str20 = locale16.getISO3Country();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = locale16.getUnicodeLocaleType("544");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 544");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "4" + "'", str17, "4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tedesco (Germania)" + "'", str18, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "32" + "'", str19, "32");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test01657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01657");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfWeek();
        org.joda.time.DurationField durationField7 = property6.getDurationField();
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfMonth();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plusWeeks((int) (byte) 10);
        java.util.Locale locale20 = java.util.Locale.PRC;
        java.lang.String str21 = dateTimeField11.getAsText((org.joda.time.ReadablePartial) localDateTime19, locale20);
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category8, locale20);
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.lang.String str25 = locale20.getDisplayScript(locale24);
        java.lang.String str26 = locale24.getDisplayLanguage();
        int int27 = property6.getMaximumTextLength(locale24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(chronology28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.weekyear();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusYears((int) (short) 1);
        int int39 = property6.compareTo((org.joda.time.ReadablePartial) localDateTime38);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str41 = localDateTime38.toString("2022-02-15T07:17:36.130");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category8.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "7" + "'", str21, "7");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\u4e2d\u6587" + "'", str26, "\u4e2d\u6587");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test01658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01658");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.weekyearOfCentury();
        org.joda.time.DurationField durationField3 = copticChronology1.minutes();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.centuryOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.centuryOfEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        boolean boolean23 = locale22.hasExtensions();
        boolean boolean24 = dateTime21.equals((java.lang.Object) locale22);
        int int25 = property11.getDifference((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.LocalDateTime localDateTime26 = property11.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime27 = property11.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusMonths((int) (byte) 0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime31.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localDateTime37.toDateTime(readableInstant38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.millisOfDay();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime37.plusMonths((int) '4');
        org.joda.time.LocalDateTime.Property property43 = localDateTime37.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime44 = property43.roundHalfFloorCopy();
        int int45 = property43.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = property43.getFieldType();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime27.withField(dateTimeFieldType46, (int) (byte) 1);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(chronology49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime50.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.weekyear();
        org.joda.time.LocalDateTime localDateTime59 = property57.setCopy((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusDays(10);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withWeekyear((int) (byte) 0);
        int[] intArray64 = localDateTime63.getValues();
        copticChronology1.validate((org.joda.time.ReadablePartial) localDateTime48, intArray64);
        int int66 = localDateTime48.getYearOfCentury();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 99 + "'", int45 == 99);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(intArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[0, 2, 16, 40730771]");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
    }

    @Test
    public void test01659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01659");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getStandardOffset((long) 1);
        long long7 = dateTimeZone1.convertLocalToUTC((long) 724, false, (long) (short) 10);
        java.util.TimeZone timeZone8 = dateTimeZone1.toTimeZone();
        java.lang.String str10 = dateTimeZone1.getNameKey((long) 16601);
        java.util.TimeZone timeZone11 = dateTimeZone1.toTimeZone();
        java.lang.String str12 = timeZone11.getID();
        int int13 = timeZone11.getDSTSavings();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 360000000 + "'", int3 == 360000000);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-359999276L) + "'", long7 == (-359999276L));
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+:0:00");
// flaky:         org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+:0:00");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+100:00" + "'", str12, "+100:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test01660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01660");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        int int16 = property15.getLeapAmount();
        java.util.Locale.Category category17 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfMonth();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.plusWeeks((int) (byte) 10);
        java.util.Locale locale29 = java.util.Locale.PRC;
        java.lang.String str30 = dateTimeField20.getAsText((org.joda.time.ReadablePartial) localDateTime28, locale29);
        java.util.Set<java.lang.String> strSet31 = locale29.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category17, locale29);
        int int33 = property15.getMaximumShortTextLength(locale29);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.weekOfWeekyear();
        int int39 = property38.getMinimumValue();
        org.joda.time.DurationField durationField40 = property38.getLeapDurationField();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.chrono.CopticChronology copticChronology42 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = copticChronology42.dayOfMonth();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(chronology44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime45.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime45.plusWeeks((int) (byte) 10);
        java.util.Locale locale52 = java.util.Locale.PRC;
        java.lang.String str53 = dateTimeField43.getAsText((org.joda.time.ReadablePartial) localDateTime51, locale52);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.plus(readablePeriod54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime51.withCenturyOfEra(30);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.DateTime dateTime59 = localDateTime57.toDateTime(readableInstant58);
        long long60 = property38.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime59);
        long long61 = property15.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime59);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + category17 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category17.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "7" + "'", str30, "7");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 9 + "'", int33 == 9);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNull(durationField40);
        org.junit.Assert.assertNotNull(copticChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "7" + "'", str53, "7");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-52187L) + "'", long60 == (-52187L));
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1000L) + "'", long61 == (-1000L));
    }

    @Test
    public void test01661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01661");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = copticChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.yearOfCentury();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test01662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01662");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        java.util.Locale locale8 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet9 = locale8.getExtensionKeys();
        java.lang.String str10 = dateTimeField6.getAsShortText(619, locale8);
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.hourOfDay();
        org.joda.time.DurationField durationField14 = copticChronology12.eras();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology12.weekOfWeekyear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.weekOfWeekyear();
        int int21 = localDateTime19.getYear();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.dayOfMonth();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.plusWeeks((int) (byte) 10);
        java.util.Locale locale33 = java.util.Locale.PRC;
        java.lang.String str34 = dateTimeField24.getAsText((org.joda.time.ReadablePartial) localDateTime32, locale33);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(chronology35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.withMillisOfSecond((int) (byte) 1);
        java.util.Locale locale42 = java.util.Locale.JAPAN;
        java.lang.String str43 = dateTimeField24.getAsText((org.joda.time.ReadablePartial) localDateTime36, 2022, locale42);
        java.lang.String str44 = dateTimeField15.getAsShortText((org.joda.time.ReadablePartial) localDateTime19, locale42);
        java.util.Set<java.lang.String> strSet45 = locale42.getUnicodeLocaleAttributes();
        java.lang.String str46 = locale8.getDisplayCountry(locale42);
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.chrono.CopticChronology copticChronology48 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField49 = copticChronology48.dayOfMonth();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(chronology50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime51.plusWeeks((int) (byte) 10);
        java.util.Locale locale58 = java.util.Locale.PRC;
        java.lang.String str59 = dateTimeField49.getAsText((org.joda.time.ReadablePartial) localDateTime57, locale58);
        java.util.Set<java.lang.String> strSet60 = locale58.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet61 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet61.clear();
        java.lang.Object[] objArray63 = strSet61.toArray();
        boolean boolean64 = strSet60.addAll((java.util.Collection<java.lang.String>) strSet61);
        strSet60.clear();
        java.util.Locale locale68 = new java.util.Locale("hi!", "hi!");
        java.lang.String str69 = locale68.toLanguageTag();
        boolean boolean70 = strSet60.equals((java.lang.Object) locale68);
        java.lang.String str71 = locale68.getDisplayVariant();
        java.lang.String str72 = locale8.getDisplayVariant(locale68);
        java.lang.Object obj73 = locale8.clone();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "619" + "'", str10, "619");
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "7" + "'", str34, "7");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022" + "'", str43, "2022");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "7" + "'", str44, "7");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u30a4\u30ae\u30ea\u30b9" + "'", str46, "\u30a4\u30ae\u30ea\u30b9");
        org.junit.Assert.assertNotNull(copticChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "7" + "'", str59, "7");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(objArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray63), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray63), "[]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals(locale68.toString(), "hi!_HI!");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "und" + "'", str69, "und");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(obj73);
        org.junit.Assert.assertEquals(obj73.toString(), "en_GB");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj73), "en_GB");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj73), "en_GB");
    }

    @Test
    public void test01663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01663");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DurationField durationField7 = copticChronology1.months();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology1.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology1.hourOfDay();
        org.joda.time.DurationField durationField14 = copticChronology1.eras();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test01664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01664");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DurationField durationField4 = copticChronology1.hours();
        int int5 = copticChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.dayOfMonth();
        java.lang.String str8 = copticChronology1.toString();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.yearOfEra();
        long long11 = dateTimeField9.roundCeiling(10040483790986L);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CopticChronology[+100:00]" + "'", str8, "CopticChronology[+100:00]");
        org.junit.Assert.assertNotNull(dateTimeField9);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10056859200000L + "'", long11 == 10056859200000L);
    }

    @Test
    public void test01665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01665");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        long long6 = copticChronology1.add((long) '#', (long) 'a', (int) '#');
        org.joda.time.DurationField durationField7 = copticChronology1.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long10 = durationField7.subtract((long) 780, 10598109387814L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -1059810938781400");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 3430L + "'", long6 == 3430L);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test01666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01666");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withYearOfEra(666);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime3.withTime(22, 921, 0, 2916391);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 921 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test01667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01667");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DurationField durationField4 = copticChronology1.hours();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField8 = copticChronology1.halfdays();
        int int10 = durationField8.getValue(4346218549L);
        long long12 = durationField8.getValueAsLong(10040483922053L);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 100 + "'", int10 == 100);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 232418L + "'", long12 == 232418L);
    }

    @Test
    public void test01668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01668");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = copticChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DurationField durationField7 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.clockhourOfDay();
        org.joda.time.DurationField durationField12 = copticChronology10.weekyears();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology10.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = copticChronology10.getZone();
        org.joda.time.Chronology chronology15 = copticChronology10.withUTC();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime(readableInstant25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.millisOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusMonths((int) '4');
        org.joda.time.LocalDateTime.Property property30 = localDateTime24.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime31 = property30.roundHalfEvenCopy();
        boolean boolean32 = localDateTime16.equals((java.lang.Object) localDateTime31);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime16.plus(readableDuration33);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.chrono.CopticChronology copticChronology40 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = copticChronology40.clockhourOfDay();
        org.joda.time.DurationField durationField42 = copticChronology40.weekyears();
        org.joda.time.DateTimeField dateTimeField43 = copticChronology40.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.chrono.CopticChronology copticChronology45 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone44);
        org.joda.time.DateTimeField dateTimeField46 = copticChronology45.clockhourOfDay();
        java.util.Locale locale48 = java.util.Locale.ITALIAN;
        java.lang.String str49 = dateTimeField46.getAsText((long) 'a', locale48);
        int int50 = dateTimeField43.getMaximumTextLength(locale48);
        int int52 = dateTimeField43.getMinimumValue((-3600001L));
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(chronology53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property58 = localDateTime56.centuryOfEra();
        java.lang.String str59 = localDateTime56.toString();
        java.util.Locale locale61 = java.util.Locale.ENGLISH;
        java.lang.String str62 = dateTimeField43.getAsShortText((org.joda.time.ReadablePartial) localDateTime56, (-292275054), locale61);
        java.lang.String str63 = localDateTime56.toString();
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.chrono.CopticChronology copticChronology66 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone65);
        org.joda.time.DateTimeField dateTimeField67 = copticChronology66.clockhourOfDay();
        org.joda.time.DurationField durationField68 = copticChronology66.weekyears();
        org.joda.time.DateTimeField dateTimeField69 = copticChronology66.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone70 = copticChronology66.getZone();
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology66);
        org.joda.time.DurationField durationField72 = copticChronology66.weekyears();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime(chronology73);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime74.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property79 = localDateTime78.dayOfWeek();
        int[] intArray81 = copticChronology66.get((org.joda.time.ReadablePartial) localDateTime78, 0L);
        int[] intArray83 = dateTimeField38.addWrapPartial((org.joda.time.ReadablePartial) localDateTime56, (int) (short) 0, intArray81, (int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray85 = dateTimeField8.addWrapField((org.joda.time.ReadablePartial) localDateTime16, 575, intArray81, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 575");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(copticChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(copticChronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "4" + "'", str49, "4");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2022-02-19T11:18:51.419" + "'", str59, "2022-02-19T11:18:51.419");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "-292275054" + "'", str62, "-292275054");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2022-02-19T11:18:51.419" + "'", str63, "2022-02-19T11:18:51.419");
        org.junit.Assert.assertNotNull(copticChronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(intArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[18, 4, 27, 14400000]");
        org.junit.Assert.assertNotNull(intArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[18, 4, 27, 14400000]");
    }

    @Test
    public void test01669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01669");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = copticChronology1.getZone();
        org.joda.time.DurationField durationField6 = copticChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField8 = copticChronology1.weeks();
        long long12 = copticChronology1.add(1651562294389L, 0L, 14);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1651562294389L + "'", long12 == 1651562294389L);
    }

    @Test
    public void test01670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01670");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguageTag("inglese");
        java.util.Locale.Builder builder5 = builder0.setRegion("");
        java.util.Locale locale6 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale.Builder builder7 = builder5.setLocale(locale6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.addUnicodeLocaleAttribute("\u30c9\u30a4\u30c4\u8a9e\u30c9\u30a4\u30c4)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ????? (????) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test01671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01671");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = localDateTime1.getFieldTypes();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = property3.setCopy("halfdays");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"halfdays\" for secondOfMinute is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
    }

    @Test
    public void test01672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01672");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekOfWeekyear();
        java.lang.String str5 = property4.getAsText();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime(readableInstant14);
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        boolean boolean17 = locale16.hasExtensions();
        boolean boolean18 = dateTime15.equals((java.lang.Object) locale16);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Collection<java.lang.String> strCollection22 = null;
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, strCollection22);
        java.util.Collection<java.lang.String> strCollection24 = null;
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, strCollection24);
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.util.Collection<java.lang.String> strCollection29 = null;
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, strCollection29);
        java.util.Collection<java.lang.String> strCollection31 = null;
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, strCollection31);
        java.util.Locale.FilteringMode filteringMode33 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, strCollection31, filteringMode33);
        boolean boolean35 = dateTime15.equals((java.lang.Object) languageRangeList20);
        int int36 = property4.compareTo((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeField dateTimeField37 = property4.getField();
        org.joda.time.LocalDateTime localDateTime38 = property4.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField40 = localDateTime38.getField(122734);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 122734");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "7" + "'", str5, "7");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertTrue("'" + filteringMode33 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode33.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime38);
    }

    @Test
    public void test01673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01673");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.dayOfWeek();
        int int6 = copticChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.hourOfHalfday();
        org.joda.time.ReadablePartial readablePartial8 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusSeconds((int) (short) -1);
        int[] intArray14 = localDateTime13.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray16 = dateTimeField7.add(readablePartial8, (-37384), intArray14, 20276589);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -37384");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(intArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[2022, 2, 26, 40732754]");
    }

    @Test
    public void test01674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01674");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime1.year();
        int int7 = localDateTime1.getYearOfEra();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime1.plus(readablePeriod8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.centuryOfEra();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.monthOfYear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test01675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01675");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.clockhourOfDay();
        org.joda.time.DurationField durationField9 = copticChronology7.weekyears();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology7.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone13 = copticChronology7.getZone();
        java.lang.String str15 = dateTimeZone13.getShortName(0L);
        int int17 = dateTimeZone13.getOffset(4346169777L);
        org.joda.time.Chronology chronology18 = copticChronology1.withZone(dateTimeZone13);
        java.lang.String str20 = dateTimeZone13.getName((-1L));
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        java.lang.String str22 = dateTimeZone13.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone13, 65);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 65");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+100:00" + "'", str15, "+100:00");
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 360000000 + "'", int17 == 360000000);
        org.junit.Assert.assertNotNull(chronology18);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+100:00" + "'", str20, "+100:00");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+100:00" + "'", str22, "+100:00");
    }

    @Test
    public void test01676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01676");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.clockhourOfDay();
        java.util.Locale locale8 = java.util.Locale.GERMANY;
        java.lang.String str9 = locale8.getScript();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.chrono.CopticChronology copticChronology11 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone10);
        org.joda.time.DateTimeField dateTimeField12 = copticChronology11.clockhourOfDay();
        java.util.Locale locale14 = java.util.Locale.ITALIAN;
        java.lang.String str15 = dateTimeField12.getAsText((long) 'a', locale14);
        java.lang.String str16 = locale8.getDisplayName(locale14);
        java.lang.String str17 = locale14.getISO3Language();
        boolean boolean18 = locale14.hasExtensions();
        java.lang.String str19 = dateTimeField6.getAsShortText(164099520000000L, locale14);
        long long21 = dateTimeField6.roundCeiling(10040483783359L);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withMillisOfSecond((int) (byte) 1);
        int int36 = localDateTime23.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime.Property property37 = localDateTime31.weekyear();
        org.joda.time.LocalDateTime.Property property38 = localDateTime31.millisOfDay();
        org.joda.time.LocalDateTime localDateTime39 = property38.roundHalfCeilingCopy();
        java.lang.String str40 = property38.getAsText();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.chrono.CopticChronology copticChronology42 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField43 = copticChronology42.hourOfDay();
        org.joda.time.DateTimeField dateTimeField44 = copticChronology42.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.Chronology chronology46 = copticChronology42.withZone(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField47 = chronology46.yearOfCentury();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(chronology48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withMillisOfSecond((int) (byte) 1);
        java.util.Locale locale55 = java.util.Locale.getDefault();
        java.lang.String str56 = dateTimeField47.getAsShortText((org.joda.time.ReadablePartial) localDateTime53, 761, locale55);
        int int57 = property38.compareTo((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.chrono.CopticChronology copticChronology59 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone58);
        org.joda.time.DateTimeField dateTimeField60 = copticChronology59.clockhourOfDay();
        org.joda.time.DurationField durationField61 = copticChronology59.weekyears();
        org.joda.time.DateTimeField dateTimeField62 = copticChronology59.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField63 = copticChronology59.minuteOfDay();
        org.joda.time.DurationField durationField64 = copticChronology59.seconds();
        org.joda.time.DurationFieldType durationFieldType65 = durationField64.getType();
        boolean boolean66 = localDateTime53.isSupported(durationFieldType65);
        int int67 = dateTimeField6.getMinimumValue((org.joda.time.ReadablePartial) localDateTime53);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType69 = localDateTime53.getFieldType((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 52");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(copticChronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "4" + "'", str15, "4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "tedesco (Germania)" + "'", str16, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ita" + "'", str17, "ita");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "4" + "'", str19, "4");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10040486400000L + "'", long21 == 10040486400000L);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "40731816" + "'", str40, "40731816");
        org.junit.Assert.assertNotNull(copticChronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(locale55);
// flaky:         org.junit.Assert.assertEquals(locale55.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "761" + "'", str56, "761");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(copticChronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test01677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01677");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(742);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01678");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.eras();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 2, dateTimeZone7);
        boolean boolean10 = dateTimeZone7.isStandardOffset(32054400000L);
        long long12 = dateTimeZone7.previousTransition(451821769334669L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) dateTimeField4, dateTimeZone7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 451821769334669L + "'", long12 == 451821769334669L);
    }

    @Test
    public void test01679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01679");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.weekOfWeekyear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime(readableInstant15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusMonths((int) '4');
        long long21 = copticChronology1.set((org.joda.time.ReadablePartial) localDateTime19, (long) 100);
        org.joda.time.DateTimeField dateTimeField22 = copticChronology1.year();
        org.joda.time.DurationField durationField23 = copticChronology1.months();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology1.dayOfMonth();
        org.joda.time.DurationField durationField25 = copticChronology1.weekyears();
        long long27 = durationField25.getMillis(112);
        int int30 = durationField25.getValue((long) 25855001, 542939032539669L);
        int int33 = durationField25.getDifference(0L, 10598109469776L);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10040483932000L + "'", long21 == 10040483932000L);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 3534451200000L + "'", long27 == 3534451200000L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-335) + "'", int33 == (-335));
    }

    @Test
    public void test01680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01680");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.dayOfMonth();
        int int9 = dateTimeField7.getMinimumValue((long) '4');
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test01681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01681");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Collection<java.lang.String> strCollection3 = null;
        java.util.List<java.lang.String> strList4 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection3);
        java.util.Collection<java.lang.String> strCollection5 = null;
        java.util.List<java.lang.String> strList6 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfMonth();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusWeeks((int) (byte) 10);
        java.util.Locale locale18 = java.util.Locale.PRC;
        java.lang.String str19 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime17, locale18);
        java.util.Set<java.lang.String> strSet20 = locale18.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet21 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet21.clear();
        java.lang.Object[] objArray23 = strSet21.toArray();
        boolean boolean24 = strSet20.addAll((java.util.Collection<java.lang.String>) strSet21);
        java.lang.String[] strArray34 = new java.lang.String[] { "UTC", "UTC", "tedesco (Germania)", "Etc/UTC", "Etc/UTC", "", "", "10", "Etc/UTC" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Collection<java.lang.String> strCollection40 = null;
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, strCollection40);
        boolean boolean42 = strSet35.retainAll((java.util.Collection<java.lang.String>) strList41);
        boolean boolean43 = strSet20.addAll((java.util.Collection<java.lang.String>) strSet35);
        java.util.Locale.FilteringMode filteringMode44 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet20, filteringMode44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.chrono.CopticChronology copticChronology47 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = copticChronology47.clockhourOfDay();
        org.joda.time.DurationField durationField49 = copticChronology47.weekyears();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology47.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone51 = copticChronology47.getZone();
        org.joda.time.DurationField durationField52 = copticChronology47.centuries();
        org.joda.time.DateTimeField dateTimeField53 = copticChronology47.dayOfYear();
        long long57 = copticChronology47.add((long) (byte) 0, (long) (byte) 100, (int) 'a');
        boolean boolean58 = strSet20.equals((java.lang.Object) copticChronology47);
        boolean boolean60 = copticChronology47.equals((java.lang.Object) 10598109048001L);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        long long64 = copticChronology47.add(readablePeriod61, (long) 'a', 16);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "7" + "'", str19, "7");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + filteringMode44 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode44.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(copticChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 9700L + "'", long57 == 9700L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 97L + "'", long64 == 97L);
    }

    @Test
    public void test01682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01682");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays(10);
        int int13 = localDateTime12.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withWeekyear((int) (short) -1);
        java.lang.Class<?> wildcardClass16 = localDateTime15.getClass();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(wildcardClass16);
    }

    @Test
    public void test01683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01683");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.secondOfDay();
        org.joda.time.DurationField durationField7 = copticChronology1.centuries();
        long long9 = durationField7.getMillis((long) 789);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2489894640000000L + "'", long9 == 2489894640000000L);
    }

    @Test
    public void test01684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01684");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguageTag("inglese");
        java.util.Locale.Builder builder5 = builder0.setLanguageTag("fr");
        java.util.Locale locale6 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setRegion("2022-02-19T11:18:39.299");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2022-02-19T11:18:39.299 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
    }

    @Test
    public void test01685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01685");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfWeek();
        org.joda.time.Chronology chronology7 = localDateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyear();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.clockhourOfDay();
        org.joda.time.DurationField durationField14 = copticChronology12.weekyears();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology12.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = copticChronology12.getZone();
        java.lang.String str17 = dateTimeZone16.getID();
        int int19 = dateTimeZone16.getStandardOffset((long) (-1));
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.Chronology chronology21 = chronology7.withZone(dateTimeZone16);
        long long23 = dateTimeZone16.previousTransition(4346255933L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+100:00" + "'", str17, "+100:00");
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 360000000 + "'", int19 == 360000000);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 4346255933L + "'", long23 == 4346255933L);
    }

    @Test
    public void test01686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01686");
        java.util.Locale locale2 = new java.util.Locale("26250087", "26289591");
        org.junit.Assert.assertEquals(locale2.toString(), "26250087_26289591");
    }

    @Test
    public void test01687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01687");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = property10.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.clockhourOfDay();
        org.joda.time.DurationField durationField15 = copticChronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology13.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone19 = copticChronology13.getZone();
        java.lang.String str21 = dateTimeZone19.getShortName(0L);
        int int23 = dateTimeZone19.getOffset(4346169777L);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.clockhourOfDay();
        org.joda.time.DurationField durationField27 = copticChronology25.weekyears();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology25.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = copticChronology25.getZone();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology25);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.Chronology chronology33 = copticChronology25.withZone(dateTimeZone32);
        long long35 = dateTimeZone19.getMillisKeepLocal(dateTimeZone32, (long) 761);
        long long38 = dateTimeZone32.adjustOffset(242L, true);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(dateTimeZone32);
        int int40 = localDateTime11.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        int int41 = localDateTime11.size();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+100:00" + "'", str21, "+100:00");
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 360000000 + "'", int23 == 360000000);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 761L + "'", long35 == 761L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 242L + "'", long38 == 242L);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 4 + "'", int41 == 4);
    }

    @Test
    public void test01688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01688");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(524, 2922728, 100, 26172680, 108663);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26172680 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01689");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.centuryOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime(readableInstant14);
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        boolean boolean17 = locale16.hasExtensions();
        boolean boolean18 = dateTime15.equals((java.lang.Object) locale16);
        int int19 = property5.getDifference((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalDateTime localDateTime20 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime21 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusMonths((int) (byte) 0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime(readableInstant32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.millisOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.plusMonths((int) '4');
        org.joda.time.LocalDateTime.Property property37 = localDateTime31.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundHalfFloorCopy();
        int int39 = property37.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = property37.getFieldType();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime21.withField(dateTimeFieldType40, (int) (byte) 1);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(chronology43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.weekOfWeekyear();
        int int48 = localDateTime46.getYear();
        int int49 = localDateTime46.getWeekyear();
        org.joda.time.LocalDateTime.Property property50 = localDateTime46.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime46.minus(readablePeriod51);
        int int53 = localDateTime42.compareTo((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime.Property property54 = localDateTime42.millisOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 99 + "'", int39 == 99);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(property54);
    }

    @Test
    public void test01690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01690");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withYearOfEra((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(922);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 922 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test01691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01691");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(29, 26211405, 26209356, (int) ' ', 123, 581);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01692");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(491, 26, (int) 'a', 268, 751, (int) (short) 100, (-245326));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 268 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01693");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DurationField durationField8 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.era();
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test01694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01694");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("26151082");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder5 = builder3.addUnicodeLocaleAttribute("26211152");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setUnicodeLocaleKeyword("\u5fb7\u56fd", "26239565");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test01695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01695");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-15T07:17:36.130");
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test01696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01696");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DurationField durationField4 = copticChronology1.hours();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.dayOfMonth();
        org.joda.time.DurationField durationField6 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = copticChronology1.getDateTimeMillis(4346270434L, 26185925, 23, 339, 544);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26185925 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test01697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01697");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset(0L);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        int int5 = timeZone3.getOffset(0L);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone6.observesDaylightTime();
        boolean boolean8 = timeZone3.hasSameRules(timeZone6);
        boolean boolean9 = timeZone0.hasSameRules(timeZone6);
        int int10 = timeZone0.getRawOffset();
        int int12 = timeZone0.getOffset(26153572L);
        java.lang.String str13 = timeZone0.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "GMT+00:00" + "'", str13, "GMT+00:00");
    }

    @Test
    public void test01698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01698");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.getScript();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.clockhourOfDay();
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.lang.String str7 = dateTimeField4.getAsText((long) 'a', locale6);
        java.lang.String str8 = locale0.getDisplayName(locale6);
        java.lang.String str9 = locale6.getDisplayVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = locale6.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "4" + "'", str7, "4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tedesco (Germania)" + "'", str8, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test01699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01699");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime.Property property17 = localDateTime9.yearOfCentury();
        org.joda.time.DurationField durationField18 = property17.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime19 = property17.withMinimumValue();
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        int int21 = property17.getMaximumShortTextLength(locale20);
        org.joda.time.LocalDateTime localDateTime23 = property17.addToCopy(292272708);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime28 = localDateTime23.withTime(544, 26242843, 572, 442);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 544 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test01700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01700");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekOfWeekyear();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withMillisOfSecond((int) (byte) 1);
        int int20 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime.Property property21 = localDateTime15.weekyear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime15.minusMillis(2022);
        int[] intArray25 = copticChronology1.get((org.joda.time.ReadablePartial) localDateTime15, (long) '#');
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = copticChronology1.add(readablePeriod26, 4346143961L, 984);
        org.joda.time.Chronology chronology30 = copticChronology1.withUTC();
        org.joda.time.DurationField durationField31 = copticChronology1.eras();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1686, 4, 27, 14400035]");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 4346143961L + "'", long29 == 4346143961L);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
    }

    @Test
    public void test01701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01701");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withDurationAdded(readableDuration16, (int) (byte) 0);
        int int19 = localDateTime18.getWeekyear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
    }

    @Test
    public void test01702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01702");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds((int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withDayOfWeek(8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 8 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test01703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01703");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = copticChronology1.getZone();
        long long12 = copticChronology1.add((long) 15, (-3600001L), 2);
        org.joda.time.DateTimeField dateTimeField13 = copticChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = copticChronology1.getZone();
        long long19 = dateTimeZone16.adjustOffset(94273676175182L, false);
        long long22 = dateTimeZone16.adjustOffset(10598109466488L, false);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-7199987L) + "'", long12 == (-7199987L));
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 94273676175182L + "'", long19 == 94273676175182L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10598109466488L + "'", long22 == 10598109466488L);
    }

    @Test
    public void test01704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01704");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology2.secondOfDay();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) copticChronology2);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusYears((-1));
        int int9 = localDateTime6.getMillisOfSecond();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusWeeks((int) (byte) 10);
        int int18 = localDateTime17.getMillisOfSecond();
        int int19 = localDateTime17.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.plusHours((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType22 = null;
        boolean boolean23 = localDateTime17.isSupported(durationFieldType22);
        org.joda.time.DateTime dateTime24 = localDateTime17.toDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime17.plusMillis(491);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfMonth();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime31.plusWeeks((int) (byte) 10);
        java.util.Locale locale38 = java.util.Locale.PRC;
        java.lang.String str39 = dateTimeField29.getAsText((org.joda.time.ReadablePartial) localDateTime37, locale38);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = dateTimeField29.getType();
        int int41 = localDateTime26.indexOf(dateTimeFieldType40);
        int int42 = localDateTime6.indexOf(dateTimeFieldType40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime44 = localDateTime6.withYearOfCentury(40221001);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 40221001 for yearOfCentury must be in the range [1,100]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10 + "'", int9 == 10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 448 + "'", int18 == 448);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 448 + "'", int19 == 448);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "7" + "'", str39, "7");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
    }

    @Test
    public void test01705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01705");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField5 = copticChronology1.hours();
        org.joda.time.DateTimeZone dateTimeZone6 = copticChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology9.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology9.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology9);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology9.weekOfWeekyear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(readableInstant23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.millisOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusMonths((int) '4');
        long long29 = copticChronology9.set((org.joda.time.ReadablePartial) localDateTime27, (long) 100);
        org.joda.time.DateTimeField dateTimeField30 = copticChronology9.year();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime32.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime(readableInstant39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.millisOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusMonths((int) '4');
        int int44 = dateTimeField30.getMinimumValue((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.minusYears(113);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.minusSeconds(2000);
        int int50 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(chronology51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.withMinuteOfHour(10);
        org.joda.time.LocalDateTime.Property property61 = localDateTime56.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod62 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime56.withPeriodAdded(readablePeriod62, (int) 'a');
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.chrono.CopticChronology copticChronology67 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone66);
        org.joda.time.DateTimeField dateTimeField68 = copticChronology67.clockhourOfDay();
        org.joda.time.DurationField durationField69 = copticChronology67.weekyears();
        org.joda.time.DateTimeField dateTimeField70 = copticChronology67.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField71 = copticChronology67.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField72 = copticChronology67.hourOfDay();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime(chronology73);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime74.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime78.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime78.minusDays(100);
        int int85 = localDateTime78.getDayOfYear();
        int[] intArray87 = copticChronology67.get((org.joda.time.ReadablePartial) localDateTime78, 3155760000002L);
        org.joda.time.DateTimeField dateTimeField88 = copticChronology67.millisOfDay();
        org.joda.time.Chronology chronology89 = null;
        org.joda.time.LocalDateTime localDateTime90 = new org.joda.time.LocalDateTime(chronology89);
        org.joda.time.LocalDateTime localDateTime92 = localDateTime90.plusWeeks((int) (byte) -1);
        java.util.Locale locale93 = java.util.Locale.GERMANY;
        java.lang.String str94 = locale93.getScript();
        java.lang.String str95 = locale93.getScript();
        java.lang.String str96 = locale93.getDisplayCountry();
        java.lang.String str97 = dateTimeField88.getAsShortText((org.joda.time.ReadablePartial) localDateTime92, locale93);
        java.lang.String str98 = dateTimeField7.getAsText((org.joda.time.ReadablePartial) localDateTime56, 55, locale93);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 10040483933479L + "'", long29 == 10040483933479L);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-292269338) + "'", int44 == (-292269338));
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(copticChronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime84);
// flaky:         org.junit.Assert.assertTrue("'" + int85 + "' != '" + 57 + "'", int85 == 57);
        org.junit.Assert.assertNotNull(intArray87);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[1786, 4, 27, 14400002]");
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "\u5fb7\u56fd" + "'", str96, "\u5fb7\u56fd");
// flaky:         org.junit.Assert.assertEquals("'" + str97 + "' != '" + "40733479" + "'", str97, "40733479");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "55" + "'", str98, "55");
    }

    @Test
    public void test01706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01706");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("26151082");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder4 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder4.setRegion("2022-02-15T07:15:56.503");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2022-02-15T07:15:56.503 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test01707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01707");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone3);
        org.joda.time.DateTimeField dateTimeField5 = copticChronology4.clockhourOfDay();
        org.joda.time.DurationField durationField6 = copticChronology4.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology4.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.clockhourOfDay();
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.lang.String str13 = dateTimeField10.getAsText((long) 'a', locale12);
        int int14 = dateTimeField7.getMaximumTextLength(locale12);
        int int16 = dateTimeField7.getMinimumValue((-3600001L));
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.centuryOfEra();
        java.lang.String str23 = localDateTime20.toString();
        java.util.Locale locale25 = java.util.Locale.ENGLISH;
        java.lang.String str26 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime20, (-292275054), locale25);
        java.lang.String str27 = localDateTime20.toString();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.clockhourOfDay();
        org.joda.time.DurationField durationField32 = copticChronology30.weekyears();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology30.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = copticChronology30.getZone();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology30);
        org.joda.time.DurationField durationField36 = copticChronology30.weekyears();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(chronology37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.dayOfWeek();
        int[] intArray45 = copticChronology30.get((org.joda.time.ReadablePartial) localDateTime42, 0L);
        int[] intArray47 = dateTimeField2.addWrapPartial((org.joda.time.ReadablePartial) localDateTime20, (int) (short) 0, intArray45, (int) ' ');
        org.joda.time.LocalDateTime.Property property48 = localDateTime20.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField49 = property48.getField();
        org.joda.time.LocalDateTime localDateTime51 = property48.setCopy(53);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.chrono.CopticChronology copticChronology53 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField54 = copticChronology53.hourOfDay();
        org.joda.time.DateTimeField dateTimeField55 = copticChronology53.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField56 = copticChronology53.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology53);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.plusMonths(761);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.chrono.CopticChronology copticChronology62 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone61);
        org.joda.time.DateTimeField dateTimeField63 = copticChronology62.hourOfDay();
        org.joda.time.DateTimeField dateTimeField64 = copticChronology62.secondOfDay();
        org.joda.time.DateTimeField dateTimeField65 = copticChronology62.secondOfDay();
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) copticChronology62);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minusYears((-1));
        int int69 = localDateTime66.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property70 = localDateTime66.weekyear();
        org.joda.time.LocalDateTime localDateTime71 = property70.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.chrono.CopticChronology copticChronology73 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone72);
        org.joda.time.DateTimeField dateTimeField74 = copticChronology73.clockhourOfDay();
        org.joda.time.DurationField durationField75 = copticChronology73.weekyears();
        org.joda.time.DateTimeField dateTimeField76 = copticChronology73.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField77 = copticChronology73.minuteOfDay();
        org.joda.time.DurationField durationField78 = copticChronology73.seconds();
        org.joda.time.DurationFieldType durationFieldType79 = durationField78.getType();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime71.withFieldAdded(durationFieldType79, 112);
        boolean boolean82 = localDateTime59.isSupported(durationFieldType79);
        boolean boolean83 = localDateTime51.isSupported(durationFieldType79);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(copticChronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "4" + "'", str13, "4");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-19T11:18:53.769" + "'", str23, "2022-02-19T11:18:53.769");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "-292275054" + "'", str26, "-292275054");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-19T11:18:53.769" + "'", str27, "2022-02-19T11:18:53.769");
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(intArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[18, 4, 27, 14400000]");
        org.junit.Assert.assertNotNull(intArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[18, 4, 27, 14400000]");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(copticChronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(copticChronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 86 + "'", int69 == 86);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(copticChronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertNotNull(durationFieldType79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
    }

    @Test
    public void test01708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01708");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = copticChronology1.getZone();
        org.joda.time.DurationField durationField6 = copticChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.dayOfYear();
        long long11 = copticChronology1.add((long) (byte) 0, (long) (byte) 100, (int) 'a');
        org.joda.time.DateTimeField dateTimeField12 = copticChronology1.minuteOfHour();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMillisOfSecond((int) (byte) 1);
        int int27 = localDateTime14.compareTo((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime.Property property28 = localDateTime22.weekyear();
        org.joda.time.LocalDateTime.Property property29 = localDateTime22.millisOfDay();
        org.joda.time.LocalDateTime localDateTime30 = property29.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField31 = property29.getDurationField();
        org.joda.time.LocalDateTime localDateTime32 = property29.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField33 = property29.getField();
        org.joda.time.DurationField durationField34 = property29.getLeapDurationField();
        int int35 = property29.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime37 = property29.addToCopy(3430L);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(chronology38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime39.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.DateTime dateTime47 = localDateTime45.toDateTime(readableInstant46);
        org.joda.time.LocalDateTime.Property property48 = localDateTime45.millisOfDay();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime45.plusMonths((int) '4');
        org.joda.time.LocalDateTime.Property property51 = localDateTime45.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime52 = property51.roundHalfFloorCopy();
        int int53 = property51.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = property51.getFieldType();
        int int55 = localDateTime37.get(dateTimeFieldType54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime37.withDayOfMonth(20);
        int[] intArray59 = copticChronology1.get((org.joda.time.ReadablePartial) localDateTime57, (long) 9);
        org.joda.time.DurationField durationField60 = copticChronology1.millis();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 9700L + "'", long11 == 9700L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNull(durationField34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 99 + "'", int53 == 99);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 22 + "'", int55 == 22);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(intArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1686, 4, 27, 14400009]");
        org.junit.Assert.assertNotNull(durationField60);
    }

    @Test
    public void test01709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01709");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone timeZone1 = null;
        boolean boolean2 = timeZone0.hasSameRules(timeZone1);
        int int4 = timeZone0.getOffset(4346159663L);
        java.lang.String str5 = timeZone0.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+23:59");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 86399999 + "'", int4 == 86399999);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "GMT+23:59" + "'", str5, "GMT+23:59");
    }

    @Test
    public void test01710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01710");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.dayOfMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.plusWeeks((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.lang.String str12 = dateTimeField2.getAsText((org.joda.time.ReadablePartial) localDateTime10, locale11);
        java.lang.String str13 = locale11.getDisplayScript();
        java.lang.String str14 = locale11.toString();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "7" + "'", str12, "7");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh_CN" + "'", str14, "zh_CN");
    }

    @Test
    public void test01711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01711");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = chronology5.yearOfCentury();
        java.util.Locale locale8 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet9 = locale8.getExtensionKeys();
        java.lang.String str10 = dateTimeField6.getAsShortText(619, locale8);
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.lang.String str12 = locale11.getScript();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = copticChronology14.clockhourOfDay();
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.lang.String str18 = dateTimeField15.getAsText((long) 'a', locale17);
        java.lang.String str19 = locale11.getDisplayName(locale17);
        java.lang.String str20 = locale8.getDisplayLanguage(locale17);
        java.util.Locale.setDefault(locale8);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "619" + "'", str10, "619");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "4" + "'", str18, "4");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "tedesco (Germania)" + "'", str19, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "inglese" + "'", str20, "inglese");
    }

    @Test
    public void test01712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01712");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        org.joda.time.DurationField durationField11 = property8.getLeapDurationField();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        boolean boolean23 = locale22.hasExtensions();
        boolean boolean24 = dateTime21.equals((java.lang.Object) locale22);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Collection<java.lang.String> strCollection28 = null;
        java.util.List<java.lang.String> strList29 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, strCollection28);
        java.util.Collection<java.lang.String> strCollection30 = null;
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, strCollection30);
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Collection<java.lang.String> strCollection35 = null;
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, strCollection35);
        java.util.Collection<java.lang.String> strCollection37 = null;
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, strCollection37);
        java.util.Locale.FilteringMode filteringMode39 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, strCollection37, filteringMode39);
        boolean boolean41 = dateTime21.equals((java.lang.Object) languageRangeList26);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(chronology42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property47 = localDateTime45.centuryOfEra();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(chronology48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime49.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDateTime55.toDateTime(readableInstant56);
        java.util.Locale locale58 = java.util.Locale.GERMANY;
        boolean boolean59 = locale58.hasExtensions();
        boolean boolean60 = dateTime57.equals((java.lang.Object) locale58);
        int int61 = property47.getDifference((org.joda.time.ReadableInstant) dateTime57);
        int int62 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(chronology63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime64.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime64.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.DateTime dateTime72 = localDateTime70.toDateTime(readableInstant71);
        java.util.Locale locale73 = java.util.Locale.GERMANY;
        boolean boolean74 = locale73.hasExtensions();
        boolean boolean75 = dateTime72.equals((java.lang.Object) locale73);
        boolean boolean76 = dateTime21.isEqual((org.joda.time.ReadableInstant) dateTime72);
        long long77 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime72);
        java.lang.String str78 = property8.toString();
        java.lang.String str79 = property8.getName();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + filteringMode39 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode39.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "Property[weekyear]" + "'", str78, "Property[weekyear]");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "weekyear" + "'", str79, "weekyear");
    }

    @Test
    public void test01713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01713");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DurationField durationField7 = copticChronology1.months();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology1.dayOfYear();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test01714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01714");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.dayOfMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.plusWeeks((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.lang.String str12 = dateTimeField2.getAsText((org.joda.time.ReadablePartial) localDateTime10, locale11);
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet14 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet14.clear();
        java.lang.Object[] objArray16 = strSet14.toArray();
        boolean boolean17 = strSet13.addAll((java.util.Collection<java.lang.String>) strSet14);
        java.util.stream.Stream<java.lang.String> strStream18 = strSet14.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream19 = strSet14.parallelStream();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(readableInstant28);
        java.util.Locale locale30 = java.util.Locale.GERMANY;
        boolean boolean31 = locale30.hasExtensions();
        boolean boolean32 = dateTime29.equals((java.lang.Object) locale30);
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Collection<java.lang.String> strCollection36 = null;
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, strCollection36);
        java.util.Collection<java.lang.String> strCollection38 = null;
        java.util.List<java.lang.String> strList39 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, strCollection38);
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.util.Collection<java.lang.String> strCollection43 = null;
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, strCollection43);
        java.util.Collection<java.lang.String> strCollection45 = null;
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, strCollection45);
        java.util.Locale.FilteringMode filteringMode47 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList48 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, strCollection45, filteringMode47);
        boolean boolean49 = dateTime29.equals((java.lang.Object) languageRangeList34);
        java.util.Collection<java.lang.String> strCollection50 = null;
        java.lang.String str51 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, strCollection50);
        java.util.Locale locale52 = java.util.Locale.JAPAN;
        java.util.Set<java.lang.String> strSet53 = locale52.getUnicodeLocaleKeys();
        java.lang.String str54 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.lang.String>) strSet53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(chronology55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime56.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.DateTime dateTime64 = localDateTime62.toDateTime(readableInstant63);
        java.util.Locale locale65 = java.util.Locale.GERMANY;
        boolean boolean66 = locale65.hasExtensions();
        boolean boolean67 = dateTime64.equals((java.lang.Object) locale65);
        java.util.Locale.LanguageRange[] languageRangeArray68 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList69 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList69, languageRangeArray68);
        java.util.Collection<java.lang.String> strCollection71 = null;
        java.util.List<java.lang.String> strList72 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList69, strCollection71);
        java.util.Collection<java.lang.String> strCollection73 = null;
        java.util.List<java.lang.String> strList74 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList69, strCollection73);
        java.util.Locale.LanguageRange[] languageRangeArray75 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList76 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList76, languageRangeArray75);
        java.util.Collection<java.lang.String> strCollection78 = null;
        java.util.List<java.lang.String> strList79 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList76, strCollection78);
        java.util.Collection<java.lang.String> strCollection80 = null;
        java.util.List<java.lang.String> strList81 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList76, strCollection80);
        java.util.Locale.FilteringMode filteringMode82 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList83 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList69, strCollection80, filteringMode82);
        boolean boolean84 = dateTime64.equals((java.lang.Object) languageRangeList69);
        java.util.Collection<java.lang.String> strCollection85 = null;
        java.lang.String str86 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList69, strCollection85);
        java.util.Locale locale87 = java.util.Locale.JAPAN;
        java.util.Set<java.lang.String> strSet88 = locale87.getUnicodeLocaleKeys();
        java.lang.String str89 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList69, (java.util.Collection<java.lang.String>) strSet88);
        java.util.Iterator<java.lang.String> strItor90 = strSet88.iterator();
        java.lang.String str91 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.lang.String>) strSet88);
        boolean boolean92 = strSet14.removeAll((java.util.Collection<java.lang.String>) strSet88);
        int int93 = strSet14.size();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "7" + "'", str12, "7");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strStream18);
        org.junit.Assert.assertNotNull(strStream19);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(languageRangeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertTrue("'" + filteringMode47 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode47.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(languageRangeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strList72);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertNotNull(languageRangeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(strList79);
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertTrue("'" + filteringMode82 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode82.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(str86);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNotNull(strItor90);
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test01715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01715");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime9.minusMillis(2022);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime9.plusMonths(113);
        int int20 = localDateTime19.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 6 + "'", int20 == 6);
    }

    @Test
    public void test01716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01716");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.clockhourOfDay();
        org.joda.time.Chronology chronology7 = copticChronology1.withUTC();
        org.joda.time.DurationField durationField8 = copticChronology1.minutes();
        long long11 = durationField8.add(86400000L, (long) (short) 1);
        int int14 = durationField8.getDifference(10598109411405L, (-35672L));
        boolean boolean15 = durationField8.isSupported();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 86460000L + "'", long11 == 86460000L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 176635157 + "'", int14 == 176635157);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test01717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01717");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusMonths((int) '4');
        org.joda.time.DurationFieldType durationFieldType13 = null;
        boolean boolean14 = localDateTime12.isSupported(durationFieldType13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.minusWeeks(26177281);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField18 = localDateTime16.getField(758);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 758");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test01718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01718");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.dayOfMonth();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.plusWeeks((int) (byte) 10);
        java.util.Locale locale12 = java.util.Locale.PRC;
        java.lang.String str13 = dateTimeField3.getAsText((org.joda.time.ReadablePartial) localDateTime11, locale12);
        java.util.Set<java.lang.String> strSet14 = locale12.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category0, locale12);
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = locale12.getDisplayScript(locale16);
        java.lang.String str18 = locale16.getISO3Language();
        java.lang.String str19 = locale16.toLanguageTag();
        java.lang.String str20 = locale16.getDisplayName();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "7" + "'", str13, "7");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zho" + "'", str18, "zho");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zh" + "'", str19, "zh");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u4e2d\u6587" + "'", str20, "\u4e2d\u6587");
    }

    @Test
    public void test01719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01719");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("26151082");
        java.util.Locale.Builder builder4 = builder0.setVariant("26184136");
        java.util.Locale.Builder builder6 = builder0.removeUnicodeLocaleAttribute("119");
        java.util.Locale.Builder builder8 = builder0.addUnicodeLocaleAttribute("2022");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder8.setScript("127");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 127 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test01720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01720");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-19T11:18:50.438");
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test01721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01721");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType5 = localDateTime1.getFieldType(16601);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 16601");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test01722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01722");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        long long4 = dateTimeZone1.adjustOffset((long) 23, true);
        boolean boolean6 = dateTimeZone1.isStandardOffset((long) 147);
        java.lang.String str7 = dateTimeZone1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 23L + "'", long4 == 23L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+100:00" + "'", str7, "+100:00");
    }

    @Test
    public void test01723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01723");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime9.minusMillis(2022);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime9.withDayOfMonth(99);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 99 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test01724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01724");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField18 = property16.getDurationField();
        org.joda.time.LocalDateTime localDateTime19 = property16.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusMonths(26172895);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.plus(readableDuration22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            int int26 = localDateTime23.getValue(26209356);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26209356");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test01725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01725");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        boolean boolean11 = locale10.hasExtensions();
        boolean boolean12 = dateTime9.equals((java.lang.Object) locale10);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Collection<java.lang.String> strCollection16 = null;
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, strCollection16);
        java.util.Collection<java.lang.String> strCollection18 = null;
        java.util.List<java.lang.String> strList19 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, strCollection18);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Collection<java.lang.String> strCollection23 = null;
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strCollection23);
        java.util.Collection<java.lang.String> strCollection25 = null;
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strCollection25);
        java.util.Locale.FilteringMode filteringMode27 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, strCollection25, filteringMode27);
        boolean boolean29 = dateTime9.equals((java.lang.Object) languageRangeList14);
        org.joda.time.Instant instant30 = dateTime9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime9.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.chrono.CopticChronology copticChronology33 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone31, 599);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid min days in first week: 599");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + filteringMode27 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode27.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
    }

    @Test
    public void test01726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01726");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(157);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test01727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01727");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusYears((int) (short) 1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.year();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDateTime13.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withMillisOfDay((int) (byte) 0);
        int int17 = localDateTime16.getYear();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.yearOfEra();
        java.lang.Object obj19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(obj19);
        java.lang.String str21 = localDateTime20.toString();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.minusMinutes(100);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withMillisOfSecond((int) (byte) 1);
        int int38 = localDateTime25.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.chrono.CopticChronology copticChronology40 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = copticChronology40.dayOfMonth();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(chronology42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime43.plusWeeks((int) (byte) 10);
        java.util.Locale locale50 = java.util.Locale.PRC;
        java.lang.String str51 = dateTimeField41.getAsText((org.joda.time.ReadablePartial) localDateTime49, locale50);
        org.joda.time.ReadablePeriod readablePeriod52 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.plus(readablePeriod52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime49.withCenturyOfEra(30);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.DateTime dateTime57 = localDateTime55.toDateTime(readableInstant56);
        org.joda.time.DateTime dateTime58 = localDateTime33.toDateTime((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime59 = localDateTime23.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        int int60 = property18.getDifference((org.joda.time.ReadableInstant) dateTime59);
        java.lang.String str61 = dateTime59.toString();
        long long62 = property11.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.LocalDateTime localDateTime63 = property11.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime65 = property11.setCopy((int) (byte) 100);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-26T11:18:54.875" + "'", str21, "2022-02-26T11:18:54.875");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(copticChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "7" + "'", str51, "7");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2022-02-26T09:38:54.875+100:00" + "'", str61, "2022-02-26T09:38:54.875+100:00");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + (-21L) + "'", long62 == (-21L));
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
    }

    @Test
    public void test01728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01728");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusWeeks((int) (byte) -1);
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.lang.String str11 = locale10.getScript();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.clockhourOfDay();
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.lang.String str17 = dateTimeField14.getAsText((long) 'a', locale16);
        java.lang.String str18 = locale10.getDisplayName(locale16);
        java.lang.String str19 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime8, (int) ' ', locale16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime8.minusYears(984);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime8.minusWeeks((int) '#');
        int int24 = localDateTime23.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.centuryOfEra();
        boolean boolean26 = property25.isLeap();
        org.joda.time.LocalDateTime localDateTime27 = property25.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime28 = property25.roundCeilingCopy();
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        java.lang.String str32 = dateTimeZone30.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(dateTimeZone30);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        java.lang.String str37 = dateTimeZone35.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(dateTimeZone35);
        boolean boolean39 = localDateTime33.isEqual((org.joda.time.ReadablePartial) localDateTime38);
        java.util.Locale locale41 = java.util.Locale.TAIWAN;
        java.lang.String str42 = locale41.getVariant();
        java.lang.String str43 = localDateTime38.toString("10", locale41);
        java.lang.String str44 = property25.getAsShortText(locale41);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "4" + "'", str17, "4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tedesco (Germania)" + "'", str18, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "32" + "'", str19, "32");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
// flaky:         org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "10" + "'", str43, "10");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "20" + "'", str44, "20");
    }

    @Test
    public void test01729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01729");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.year();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology1.yearOfEra();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology1.millisOfDay();
        org.joda.time.DurationField durationField12 = copticChronology1.months();
        boolean boolean13 = durationField12.isPrecise();
        long long14 = durationField12.getUnitMillis();
        long long17 = durationField12.add((long) 889, 55);
        long long19 = durationField12.getValueAsLong((long) 286);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 2592000000L + "'", long14 == 2592000000L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 134006400889L + "'", long17 == 134006400889L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test01730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01730");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = copticChronology1.getDateTimeMillis(40721272, 619, 620, 192, 426, 745, 40224001);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 192 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test01731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01731");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime11 = property8.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime localDateTime23 = property22.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.chrono.CopticChronology copticChronology25 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone24);
        org.joda.time.DateTimeField dateTimeField26 = copticChronology25.clockhourOfDay();
        org.joda.time.DurationField durationField27 = copticChronology25.weekyears();
        org.joda.time.DateTimeField dateTimeField28 = copticChronology25.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology25.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology25.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone31 = copticChronology25.getZone();
        java.lang.String str33 = dateTimeZone31.getShortName(0L);
        int int35 = dateTimeZone31.getOffset(4346169777L);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.chrono.CopticChronology copticChronology37 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField38 = copticChronology37.clockhourOfDay();
        org.joda.time.DurationField durationField39 = copticChronology37.weekyears();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology37.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone41 = copticChronology37.getZone();
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology37);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.Chronology chronology45 = copticChronology37.withZone(dateTimeZone44);
        long long47 = dateTimeZone31.getMillisKeepLocal(dateTimeZone44, (long) 761);
        long long50 = dateTimeZone44.adjustOffset(242L, true);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now(dateTimeZone44);
        int int52 = localDateTime23.compareTo((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.withMinuteOfHour(15);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(133);
        org.joda.time.DateTime dateTime57 = localDateTime54.toDateTime(dateTimeZone56);
        long long58 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Interval interval59 = property8.toInterval();
        org.joda.time.Interval interval60 = property8.toInterval();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(copticChronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+100:00" + "'", str33, "+100:00");
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 360000000 + "'", int35 == 360000000);
        org.junit.Assert.assertNotNull(copticChronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 761L + "'", long47 == 761L);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 242L + "'", long50 == 242L);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-21L) + "'", long58 == (-21L));
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(interval60);
    }

    @Test
    public void test01732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01732");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = copticChronology1.hours();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekOfWeekyear();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime(readableInstant14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.millisOfDay();
        org.joda.time.Interval interval17 = property16.toInterval();
        org.joda.time.DurationField durationField18 = property16.getDurationField();
        org.joda.time.LocalDateTime localDateTime19 = property16.withMaximumValue();
        long long21 = copticChronology1.set((org.joda.time.ReadablePartial) localDateTime19, 10598109377074L);
        org.joda.time.DurationField durationField22 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology1.minuteOfHour();
        long long25 = dateTimeField23.roundHalfEven(3932L);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 9903931199999L + "'", long21 == 9903931199999L);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test01733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01733");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.dayOfWeek();
        long long9 = dateTimeField7.roundHalfFloor((-1207L));
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-14400000L) + "'", long9 == (-14400000L));
    }

    @Test
    public void test01734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01734");
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.clockhourOfDay();
        org.joda.time.DurationField durationField10 = copticChronology8.weekyears();
        org.joda.time.DurationField durationField11 = copticChronology8.hours();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology8.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(952, 264, 20206271, 17523, 40707113, 1686, 143, (org.joda.time.Chronology) copticChronology8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 17523 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test01735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01735");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Collection<java.lang.String> strCollection4 = null;
        java.util.List<java.lang.String> strList5 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, strCollection4);
        java.util.Collection<java.lang.String> strCollection6 = null;
        java.util.List<java.lang.String> strList7 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, strCollection6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.dayOfMonth();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.plusWeeks((int) (byte) 10);
        java.util.Locale locale19 = java.util.Locale.PRC;
        java.lang.String str20 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) localDateTime18, locale19);
        java.util.Set<java.lang.String> strSet21 = locale19.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet22 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet22.clear();
        java.lang.Object[] objArray24 = strSet22.toArray();
        boolean boolean25 = strSet21.addAll((java.util.Collection<java.lang.String>) strSet22);
        java.lang.String[] strArray35 = new java.lang.String[] { "UTC", "UTC", "tedesco (Germania)", "Etc/UTC", "Etc/UTC", "", "", "10", "Etc/UTC" };
        java.util.LinkedHashSet<java.lang.String> strSet36 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet36, strArray35);
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.util.Collection<java.lang.String> strCollection41 = null;
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, strCollection41);
        boolean boolean43 = strSet36.retainAll((java.util.Collection<java.lang.String>) strList42);
        boolean boolean44 = strSet21.addAll((java.util.Collection<java.lang.String>) strSet36);
        java.util.Locale.FilteringMode filteringMode45 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet21, filteringMode45);
        java.lang.String[] strArray57 = new java.lang.String[] { "26176455", "Property[millisOfDay]", "de", "2022-05-03T07:16:18.675", "2022-02-15T00:16:01.659", "und", "761", "2022-02-15T07:15:56.982", "de-DE", "2022-02-15T07:16:18.031" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(chronology60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime61.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.dayOfWeek();
        org.joda.time.Chronology chronology67 = localDateTime65.getChronology();
        int int68 = localDateTime65.getDayOfWeek();
        boolean boolean69 = strSet58.remove((java.lang.Object) int68);
        boolean boolean70 = strSet21.removeAll((java.util.Collection<java.lang.String>) strSet58);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str71 = java.util.Locale.lookupTag(languageRangeList0, (java.util.Collection<java.lang.String>) strSet58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strList5);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "7" + "'", str20, "7");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + filteringMode45 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode45.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(chronology67);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test01736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01736");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("Property[weekOfWeekyear]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Property[weekOfWeekyear]\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01737");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        boolean boolean1 = timeZone0.observesDaylightTime();
        int int2 = timeZone0.getRawOffset();
        int int4 = timeZone0.getOffset(32054400000L);
        java.util.Locale locale7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = timeZone0.getDisplayName(false, 514, locale7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 514");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+23:59");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 86399999 + "'", int2 == 86399999);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 86399999 + "'", int4 == 86399999);
    }

    @Test
    public void test01738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01738");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = copticChronology1.getZone();
        long long12 = copticChronology1.add((long) 15, (-3600001L), 2);
        org.joda.time.DateTimeField dateTimeField13 = copticChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology1.monthOfYear();
        org.joda.time.DurationField durationField15 = copticChronology1.weeks();
        long long18 = durationField15.add((-374399988L), (long) (byte) -1);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-7199987L) + "'", long12 == (-7199987L));
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-979199988L) + "'", long18 == (-979199988L));
    }

    @Test
    public void test01739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01739");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfMonth();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusWeeks((int) (byte) 10);
        java.util.Locale locale26 = java.util.Locale.PRC;
        java.lang.String str27 = dateTimeField17.getAsText((org.joda.time.ReadablePartial) localDateTime25, locale26);
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.plus(readablePeriod28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.withCenturyOfEra(30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime(readableInstant32);
        org.joda.time.DateTime dateTime34 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Instant instant35 = dateTime33.toInstant();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "7" + "'", str27, "7");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(instant35);
    }

    @Test
    public void test01740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01740");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 2, dateTimeZone2);
        boolean boolean5 = dateTimeZone2.isStandardOffset(32054400000L);
        boolean boolean7 = dateTimeZone2.isStandardOffset((-47520000000L));
        org.joda.time.tz.NameProvider nameProvider9 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str13 = nameProvider9.getShortName(locale10, "26172895", "JP");
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.lang.String str15 = locale14.getScript();
        java.lang.String str16 = locale14.getDisplayVariant();
        java.util.Locale locale17 = locale14.stripExtensions();
        java.lang.String str18 = locale14.getVariant();
        java.lang.String str21 = nameProvider9.getName(locale14, "2022-02-15T07:16:36.447", "2022-02-15T07:16:16.648");
        java.lang.String str22 = dateTimeZone2.getName(10040483758014L, locale14);
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.lang.String str26 = dateTimeZone24.getNameKey((long) (byte) 0);
        boolean boolean27 = dateTimeZone24.isFixed();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(chronology28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime29.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(chronology36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withMillisOfSecond((int) (byte) 1);
        int int42 = localDateTime29.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        boolean boolean43 = dateTimeZone24.isLocalDateTimeGap(localDateTime29);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime29.plusMillis(708);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime29.withMillisOfSecond(318);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.year();
        boolean boolean49 = dateTimeZone2.isLocalDateTimeGap(localDateTime47);
        int int50 = localDateTime47.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(nameProvider9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(str21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+100:00" + "'", str22, "+100:00");
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 8 + "'", int50 == 8);
    }

    @Test
    public void test01741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01741");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.dayOfMonth();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime(readableInstant13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime16 = property15.withMaximumValue();
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.lang.String str18 = locale17.getScript();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.clockhourOfDay();
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.lang.String str24 = dateTimeField21.getAsText((long) 'a', locale23);
        java.lang.String str25 = locale17.getDisplayName(locale23);
        java.lang.String str26 = property15.getAsShortText(locale17);
        java.lang.String str27 = dateTimeField3.getAsText(717, locale17);
        org.joda.time.ReadablePartial readablePartial28 = null;
        int int29 = dateTimeField3.getMinimumValue(readablePartial28);
        org.joda.time.DurationField durationField30 = dateTimeField3.getLeapDurationField();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "4" + "'", str24, "4");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "tedesco (Germania)" + "'", str25, "tedesco (Germania)");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "40735936" + "'", str26, "40735936");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "717" + "'", str27, "717");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNull(durationField30);
    }

    @Test
    public void test01742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01742");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = copticChronology1.getZone();
        long long12 = copticChronology1.add((long) 15, (-3600001L), 2);
        org.joda.time.DateTimeField dateTimeField13 = copticChronology1.minuteOfDay();
        org.joda.time.DurationField durationField14 = copticChronology1.days();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology1.halfdayOfDay();
        long long18 = dateTimeField15.addWrapField((long) 742, 889);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-7199987L) + "'", long12 == (-7199987L));
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 43200742L + "'", long18 == 43200742L);
    }

    @Test
    public void test01743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01743");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfWeek();
        org.joda.time.Chronology chronology8 = localDateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.yearOfEra();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(3430L, chronology8);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now(chronology8);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfEra(26153572);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusMinutes((-17516));
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.clockhourOfDay();
        org.joda.time.DurationField durationField19 = copticChronology17.weekyears();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology17.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = copticChronology17.getZone();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology17);
        org.joda.time.DurationField durationField23 = copticChronology17.weekyears();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.dayOfWeek();
        int[] intArray32 = copticChronology17.get((org.joda.time.ReadablePartial) localDateTime29, 0L);
        org.joda.time.DateTimeField dateTimeField33 = copticChronology17.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology17.era();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology17.halfdayOfDay();
        org.joda.time.DurationField durationField36 = copticChronology17.centuries();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((java.lang.Object) (-17516), (org.joda.time.Chronology) copticChronology17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(intArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1686, 4, 27, 14400000]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test01744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01744");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = copticChronology1.getZone();
        long long12 = copticChronology1.add((long) 15, (-3600001L), 2);
        org.joda.time.DateTimeField dateTimeField13 = copticChronology1.minuteOfDay();
        org.joda.time.DurationField durationField14 = copticChronology1.months();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.Chronology chronology18 = copticChronology1.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekOfWeekyear();
        java.lang.String str20 = dateTimeField19.toString();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-7199987L) + "'", long12 == (-7199987L));
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "DateTimeField[weekOfWeekyear]" + "'", str20, "DateTimeField[weekOfWeekyear]");
    }

    @Test
    public void test01745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01745");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.millisOfDay();
        org.joda.time.Interval interval11 = property10.toInterval();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        org.joda.time.LocalDateTime localDateTime14 = property10.addWrapFieldToCopy(25802001);
        int int15 = localDateTime14.getMillisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 129 + "'", int15 == 129);
    }

    @Test
    public void test01746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01746");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.dayOfMonth();
        org.joda.time.DurationField durationField4 = copticChronology1.days();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
    }

    @Test
    public void test01747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01747");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("hours");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"hours\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01748");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology2.weekyear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(4346145364L, (org.joda.time.Chronology) copticChronology2);
        // The following exception was thrown during execution in test generation
        try {
            long long16 = copticChronology2.getDateTimeMillis(108663, 1023, 29, 2000, 40726325, 838, 581);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test01749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01749");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.year();
        org.joda.time.DateTimeZone dateTimeZone9 = copticChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology1.weekyear();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField13 = copticChronology1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology1.dayOfYear();
        int int16 = dateTimeField14.getMinimumValue((long) 40224001);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test01750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01750");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.weekOfWeekyear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withMillisOfSecond((int) (byte) 1);
        int int21 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property22 = localDateTime16.weekyear();
        int[] intArray24 = copticChronology1.get((org.joda.time.ReadablePartial) localDateTime16, (long) 22);
        org.joda.time.LocalDateTime.Property property25 = localDateTime16.year();
        java.lang.Object obj26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(obj26);
        boolean boolean28 = localDateTime16.isAfter((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.plusMillis(242);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusWeeks(292278993);
        int int33 = localDateTime32.getMillisOfDay();
        int int34 = localDateTime32.getYear();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(intArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1686, 4, 27, 14400022]");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 40736557 + "'", int33 == 40736557);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 5603651 + "'", int34 == 5603651);
    }

    @Test
    public void test01751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01751");
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.clockhourOfDay();
        org.joda.time.DurationField durationField10 = copticChronology8.weekyears();
        org.joda.time.DurationField durationField11 = copticChronology8.hours();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology8.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology8.centuryOfEra();
        org.joda.time.DurationField durationField15 = copticChronology8.centuries();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(27, 1, 40726325, 793, (int) (short) 100, 581, 37098767, (org.joda.time.Chronology) copticChronology8);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 793 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
    }

    @Test
    public void test01752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01752");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((-1), 2);
        boolean boolean4 = dateTimeZone2.isStandardOffset((long) 40736557);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test01753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01753");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = copticChronology1.getZone();
        int int9 = dateTimeZone7.getOffsetFromLocal((long) 26173890);
        java.lang.String str11 = dateTimeZone7.getShortName(292278993L);
        java.lang.String str12 = dateTimeZone7.toString();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 360000000 + "'", int9 == 360000000);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+100:00" + "'", str11, "+100:00");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+100:00" + "'", str12, "+100:00");
    }

    @Test
    public void test01754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01754");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.millisOfSecond();
        org.joda.time.DurationField durationField5 = copticChronology1.millis();
        int int7 = durationField5.getValue((long) 26211405);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 26211405 + "'", int7 == 26211405);
    }

    @Test
    public void test01755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01755");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = copticChronology1.getZone();
        java.lang.String str6 = dateTimeZone5.getID();
        java.lang.String str7 = dateTimeZone5.getID();
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        int int10 = timeZone8.getOffset(4346154297L);
        timeZone8.setID("+00:00");
        java.util.Locale locale16 = new java.util.Locale("119");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = timeZone8.getDisplayName(true, 45, locale16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 45");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+100:00" + "'", str6, "+100:00");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+100:00" + "'", str7, "+100:00");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+:0:00");
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 360000000 + "'", int10 == 360000000);
        org.junit.Assert.assertEquals(locale16.toString(), "119");
    }

    @Test
    public void test01756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01756");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.DurationField durationField16 = property15.getRangeDurationField();
        org.joda.time.DurationField durationField17 = property15.getDurationField();
        org.joda.time.LocalDateTime localDateTime18 = property15.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.clockhourOfDay();
        org.joda.time.DurationField durationField22 = copticChronology20.weekyears();
        org.joda.time.DurationField durationField23 = copticChronology20.centuries();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology20.weekyear();
        int int25 = dateTimeField24.getMinimumValue();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withMillisOfSecond((int) (byte) 1);
        int int40 = localDateTime27.compareTo((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime.Property property41 = localDateTime35.weekyear();
        org.joda.time.LocalDateTime.Property property42 = localDateTime35.millisOfDay();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(chronology43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime44.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.DateTime dateTime52 = localDateTime50.toDateTime(readableInstant51);
        java.util.Locale locale53 = java.util.Locale.GERMANY;
        boolean boolean54 = locale53.hasExtensions();
        boolean boolean55 = dateTime52.equals((java.lang.Object) locale53);
        java.lang.String str56 = dateTimeField24.getAsShortText((org.joda.time.ReadablePartial) localDateTime35, locale53);
        int int57 = property15.getMaximumTextLength(locale53);
        java.lang.String str59 = locale53.getExtension('x');
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.chrono.CopticChronology copticChronology61 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone60);
        org.joda.time.DateTimeField dateTimeField62 = copticChronology61.hourOfDay();
        org.joda.time.DateTimeField dateTimeField63 = copticChronology61.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.Chronology chronology65 = copticChronology61.withZone(dateTimeZone64);
        org.joda.time.DateTimeField dateTimeField66 = chronology65.yearOfCentury();
        java.util.Locale locale68 = java.util.Locale.ENGLISH;
        java.lang.String str69 = dateTimeField66.getAsText(100L, locale68);
        java.lang.String str70 = locale53.getDisplayScript(locale68);
        java.util.Set<java.lang.String> strSet71 = locale53.getUnicodeLocaleKeys();
        boolean boolean72 = strSet71.isEmpty();
        java.lang.Object[] objArray73 = strSet71.toArray();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-292269338) + "'", int25 == (-292269338));
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022" + "'", str56, "2022");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 9 + "'", int57 == 9);
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(copticChronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "86" + "'", str69, "86");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(objArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray73), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray73), "[]");
    }

    @Test
    public void test01757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01757");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology2.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Chronology chronology6 = copticChronology2.withZone(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology2.era();
        org.joda.time.DurationField durationField8 = copticChronology2.seconds();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 480, (org.joda.time.Chronology) copticChronology2);
        org.joda.time.DurationField durationField10 = copticChronology2.centuries();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray14 = copticChronology2.get(readablePeriod11, 951203870307L, (long) 26280714);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test01758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01758");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusHours(666);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plus(readablePeriod7);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYear(984);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfEra((int) '4');
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfMonth();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.plusWeeks((int) (byte) 10);
        java.util.Locale locale25 = java.util.Locale.PRC;
        java.lang.String str26 = dateTimeField16.getAsText((org.joda.time.ReadablePartial) localDateTime24, locale25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = dateTimeField16.getType();
        boolean boolean28 = localDateTime11.isSupported(dateTimeFieldType27);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.clockhourOfDay();
        org.joda.time.DurationField durationField32 = copticChronology30.weekyears();
        org.joda.time.DateTimeField dateTimeField33 = copticChronology30.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone34 = copticChronology30.getZone();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology30);
        org.joda.time.DurationField durationField36 = copticChronology30.weekyears();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology30.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = dateTimeField37.getType();
        int int39 = localDateTime11.indexOf(dateTimeFieldType38);
        int int40 = localDateTime8.indexOf(dateTimeFieldType38);
        java.lang.String str41 = localDateTime8.toString();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "7" + "'", str26, "7");
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-19T11:18:56.638" + "'", str41, "2022-02-19T11:18:56.638");
    }

    @Test
    public void test01759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01759");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DurationField durationField7 = copticChronology1.hours();
        org.joda.time.Chronology chronology8 = copticChronology1.withUTC();
        org.joda.time.DurationField durationField9 = copticChronology1.hours();
        long long11 = durationField9.getValueAsLong(17L);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test01760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01760");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Collection<java.lang.String> strCollection3 = null;
        java.util.List<java.lang.String> strList4 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection3);
        java.util.Collection<java.lang.String> strCollection5 = null;
        java.util.List<java.lang.String> strList6 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.dayOfMonth();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusWeeks((int) (byte) 10);
        java.util.Locale locale18 = java.util.Locale.PRC;
        java.lang.String str19 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime17, locale18);
        java.util.Set<java.lang.String> strSet20 = locale18.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet21 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet21.clear();
        java.lang.Object[] objArray23 = strSet21.toArray();
        boolean boolean24 = strSet20.addAll((java.util.Collection<java.lang.String>) strSet21);
        java.lang.String[] strArray34 = new java.lang.String[] { "UTC", "UTC", "tedesco (Germania)", "Etc/UTC", "Etc/UTC", "", "", "10", "Etc/UTC" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Collection<java.lang.String> strCollection40 = null;
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, strCollection40);
        boolean boolean42 = strSet35.retainAll((java.util.Collection<java.lang.String>) strList41);
        boolean boolean43 = strSet20.addAll((java.util.Collection<java.lang.String>) strSet35);
        java.util.Locale.FilteringMode filteringMode44 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet20, filteringMode44);
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.chrono.CopticChronology copticChronology47 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = copticChronology47.clockhourOfDay();
        org.joda.time.DurationField durationField49 = copticChronology47.weekyears();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology47.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone51 = copticChronology47.getZone();
        org.joda.time.DurationField durationField52 = copticChronology47.centuries();
        org.joda.time.DateTimeField dateTimeField53 = copticChronology47.dayOfYear();
        long long57 = copticChronology47.add((long) (byte) 0, (long) (byte) 100, (int) 'a');
        boolean boolean58 = strSet20.equals((java.lang.Object) copticChronology47);
        org.joda.time.DateTimeField dateTimeField59 = copticChronology47.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            long long64 = copticChronology47.getDateTimeMillis(944, 588, 774, 581);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 588 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strList4);
        org.junit.Assert.assertNotNull(strList6);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "7" + "'", str19, "7");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(objArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray23), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray23), "[]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + filteringMode44 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode44.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(copticChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 9700L + "'", long57 == 9700L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeField59);
    }

    @Test
    public void test01761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01761");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.dayOfMonth();
        org.joda.time.DurationField durationField3 = copticChronology1.eras();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.millisOfSecond();
        int int5 = dateTimeField4.getMinimumValue();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withMillisOfSecond((int) (short) 0);
        java.util.Locale locale15 = java.util.Locale.GERMANY;
        java.lang.String str16 = locale15.getScript();
        java.lang.String str17 = locale15.getScript();
        java.lang.String str18 = locale15.getDisplayCountry();
        java.lang.String str19 = locale15.getVariant();
        java.lang.String str20 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime11, 993, locale15);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime11.minus(readableDuration21);
        int int23 = localDateTime22.getEra();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = localDateTime22.getFieldTypes();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u5fb7\u56fd" + "'", str18, "\u5fb7\u56fd");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "993" + "'", str20, "993");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
    }

    @Test
    public void test01762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01762");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.eras();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.weekOfWeekyear();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.weekOfWeekyear();
        int int10 = localDateTime8.getYear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfMonth();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.plusWeeks((int) (byte) 10);
        java.util.Locale locale22 = java.util.Locale.PRC;
        java.lang.String str23 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDateTime21, locale22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withMillisOfSecond((int) (byte) 1);
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        java.lang.String str32 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDateTime25, 2022, locale31);
        java.lang.String str33 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime8, locale31);
        java.util.Set<java.lang.String> strSet34 = locale31.getUnicodeLocaleAttributes();
        boolean boolean35 = strSet34.isEmpty();
        int int36 = strSet34.size();
        strSet34.clear();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "7" + "'", str23, "7");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022" + "'", str32, "2022");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "7" + "'", str33, "7");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test01763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01763");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.eras();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.minuteOfHour();
        java.lang.String str6 = dateTimeField5.getName();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withYearOfEra((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.dayOfMonth();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.plusWeeks((int) (byte) 10);
        java.util.Locale locale25 = java.util.Locale.PRC;
        java.lang.String str26 = dateTimeField16.getAsText((org.joda.time.ReadablePartial) localDateTime24, locale25);
        java.util.Set<java.lang.String> strSet27 = locale25.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet28 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet28.clear();
        java.lang.Object[] objArray30 = strSet28.toArray();
        boolean boolean31 = strSet27.addAll((java.util.Collection<java.lang.String>) strSet28);
        strSet27.clear();
        java.util.Locale locale35 = new java.util.Locale("hi!", "hi!");
        java.lang.String str36 = locale35.toLanguageTag();
        boolean boolean37 = strSet27.equals((java.lang.Object) locale35);
        java.lang.String str38 = dateTimeField5.getAsShortText((org.joda.time.ReadablePartial) localDateTime12, 724, locale35);
        java.lang.String str39 = locale35.toLanguageTag();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = locale35.getISO3Country();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter country code for HI!");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "minuteOfHour" + "'", str6, "minuteOfHour");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "7" + "'", str26, "7");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals(locale35.toString(), "hi!_HI!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "und" + "'", str36, "und");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "724" + "'", str38, "724");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "und" + "'", str39, "und");
    }

    @Test
    public void test01764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01764");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        boolean boolean11 = dateTime9.isSupported(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        boolean boolean22 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localDateTime30.toDateTime(readableInstant31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(chronology33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.plusWeeks((int) (byte) 10);
        int int41 = localDateTime40.getMillisOfSecond();
        int int42 = localDateTime40.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.plusHours((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType45 = null;
        boolean boolean46 = localDateTime40.isSupported(durationFieldType45);
        org.joda.time.DateTime dateTime47 = localDateTime40.toDateTime();
        boolean boolean48 = dateTime32.isAfter((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTimeZone dateTimeZone49 = dateTime47.getZone();
        org.joda.time.Chronology chronology50 = dateTime47.getChronology();
        boolean boolean51 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime47);
        java.util.TimeZone timeZone52 = null;
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        java.lang.String str55 = dateTimeZone53.getNameKey((long) (byte) 0);
        boolean boolean56 = dateTimeZone53.isFixed();
        java.lang.String str58 = dateTimeZone53.getShortName(3430L);
        java.lang.String str60 = dateTimeZone53.getShortName(108052L);
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now(dateTimeZone53);
        boolean boolean62 = dateTime9.equals((java.lang.Object) localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 960 + "'", int41 == 960);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 960 + "'", int42 == 960);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeZone53);
// flaky:         org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+100:00" + "'", str58, "+100:00");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+100:00" + "'", str60, "+100:00");
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test01765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01765");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.weekyearOfCentury();
        org.joda.time.DurationField durationField3 = copticChronology1.minutes();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.era();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.minuteOfHour();
        org.joda.time.DurationField durationField8 = copticChronology1.days();
        boolean boolean9 = durationField8.isSupported();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test01766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01766");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        org.joda.time.DurationField durationField11 = property8.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime12 = property8.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusWeeks(984);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMonths(53);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.year();
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test01767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01767");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(286);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test01768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01768");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withMinuteOfHour(10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.weekyear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusYears((int) (short) 1);
        int int21 = localDateTime9.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime9.plusSeconds(22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime9.plusMinutes((int) '#');
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime(readableInstant34);
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        boolean boolean37 = locale36.hasExtensions();
        boolean boolean38 = dateTime35.equals((java.lang.Object) locale36);
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.util.Collection<java.lang.String> strCollection42 = null;
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, strCollection42);
        java.util.Collection<java.lang.String> strCollection44 = null;
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, strCollection44);
        java.util.Locale.LanguageRange[] languageRangeArray46 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList47 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList47, languageRangeArray46);
        java.util.Collection<java.lang.String> strCollection49 = null;
        java.util.List<java.lang.String> strList50 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, strCollection49);
        java.util.Collection<java.lang.String> strCollection51 = null;
        java.util.List<java.lang.String> strList52 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList47, strCollection51);
        java.util.Locale.FilteringMode filteringMode53 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList54 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, strCollection51, filteringMode53);
        boolean boolean55 = dateTime35.equals((java.lang.Object) languageRangeList40);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(chronology56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property61 = localDateTime59.centuryOfEra();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(chronology62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime63.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.DateTime dateTime71 = localDateTime69.toDateTime(readableInstant70);
        java.util.Locale locale72 = java.util.Locale.GERMANY;
        boolean boolean73 = locale72.hasExtensions();
        boolean boolean74 = dateTime71.equals((java.lang.Object) locale72);
        int int75 = property61.getDifference((org.joda.time.ReadableInstant) dateTime71);
        int int76 = dateTime35.compareTo((org.joda.time.ReadableInstant) dateTime71);
        long long77 = dateTime71.getMillis();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime(chronology78);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime79.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime79.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.DateTime dateTime87 = localDateTime85.toDateTime(readableInstant86);
        org.joda.time.LocalDateTime.Property property88 = localDateTime85.millisOfDay();
        org.joda.time.LocalDateTime localDateTime90 = localDateTime85.plusMonths((int) '4');
        org.joda.time.LocalDateTime.Property property91 = localDateTime85.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime92 = property91.roundHalfFloorCopy();
        int int93 = property91.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType94 = property91.getFieldType();
        boolean boolean95 = dateTime71.isSupported(dateTimeFieldType94);
        org.joda.time.LocalDateTime.Property property96 = localDateTime25.property(dateTimeFieldType94);
        org.joda.time.LocalDateTime localDateTime98 = localDateTime25.minusYears(796);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(languageRangeArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertTrue("'" + filteringMode53 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode53.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long77 + "' != '" + 951203937141L + "'", long77 == 951203937141L);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(property91);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 99 + "'", int93 == 99);
        org.junit.Assert.assertNotNull(dateTimeFieldType94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(property96);
        org.junit.Assert.assertNotNull(localDateTime98);
    }

    @Test
    public void test01769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01769");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("26151082");
        java.util.Locale locale5 = new java.util.Locale("+00:00:00.010", "");
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale5.getDisplayCountry();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.clockhourOfDay();
        org.joda.time.DurationField durationField11 = copticChronology9.weekyears();
        org.joda.time.DurationField durationField12 = copticChronology9.centuries();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology9.weekyear();
        int int14 = dateTimeField13.getMinimumValue();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withMillisOfSecond((int) (byte) 1);
        int int29 = localDateTime16.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime.Property property30 = localDateTime24.weekyear();
        org.joda.time.LocalDateTime.Property property31 = localDateTime24.millisOfDay();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDateTime39.toDateTime(readableInstant40);
        java.util.Locale locale42 = java.util.Locale.GERMANY;
        boolean boolean43 = locale42.hasExtensions();
        boolean boolean44 = dateTime41.equals((java.lang.Object) locale42);
        java.lang.String str45 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime24, locale42);
        java.lang.String str46 = locale42.getDisplayCountry();
        java.lang.String str47 = locale42.getLanguage();
        java.lang.String str48 = locale5.getDisplayLanguage(locale42);
        java.lang.String str49 = locale5.getLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder50 = builder2.setLocale(locale5);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: +00:00:00.010 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(locale5.toString(), "+00:00:00.010");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-292269338) + "'", int14 == (-292269338));
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022" + "'", str45, "2022");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u5fb7\u56fd" + "'", str46, "\u5fb7\u56fd");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "de" + "'", str47, "de");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00:00.010" + "'", str48, "+00:00:00.010");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.010" + "'", str49, "+00:00:00.010");
    }

    @Test
    public void test01770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01770");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        org.joda.time.DurationField durationField11 = property8.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime12 = property8.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusWeeks(984);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMonths(53);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((java.lang.Object) property17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test01771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01771");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.getScript();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.clockhourOfDay();
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.lang.String str7 = dateTimeField4.getAsText((long) 'a', locale6);
        java.lang.String str8 = locale0.getDisplayName(locale6);
        java.lang.String str9 = locale6.getISO3Language();
        boolean boolean10 = locale6.hasExtensions();
        java.util.Locale locale11 = locale6.stripExtensions();
        java.lang.String str12 = locale11.getDisplayCountry();
        java.lang.String str13 = locale11.getISO3Language();
        java.lang.String str14 = locale11.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "4" + "'", str7, "4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tedesco (Germania)" + "'", str8, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ita" + "'", str9, "ita");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ita" + "'", str13, "ita");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "it" + "'", str14, "it");
    }

    @Test
    public void test01772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01772");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = localDateTime1.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology9.secondOfDay();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology9.secondOfDay();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) copticChronology9);
        int int14 = localDateTime13.getDayOfYear();
        boolean boolean15 = localDateTime6.isEqual((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime.Property property16 = localDateTime6.yearOfEra();
        org.joda.time.Chronology chronology17 = localDateTime6.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime6.withDayOfMonth((int) '#');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 117 + "'", int14 == 117);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
    }

    @Test
    public void test01773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01773");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("+00:00:00.010");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"+00:00:00.010\" is malformed at \":00:00.010\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01774");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = copticChronology1.getZone();
        java.lang.String str6 = dateTimeZone5.getID();
        java.lang.String str7 = dateTimeZone5.getID();
        java.lang.String str9 = dateTimeZone5.getNameKey(10598109367754L);
        java.lang.String str11 = dateTimeZone5.getShortName(10040483771555L);
        long long13 = dateTimeZone5.previousTransition((-3692217599900L));
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.hourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology16.secondOfDay();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology16.secondOfDay();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) copticChronology16);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusYears((-1));
        int int23 = localDateTime20.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property24 = localDateTime20.weekyear();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.clockhourOfDay();
        org.joda.time.DurationField durationField29 = copticChronology27.weekyears();
        org.joda.time.DateTimeField dateTimeField30 = copticChronology27.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology27.minuteOfDay();
        org.joda.time.DurationField durationField32 = copticChronology27.seconds();
        org.joda.time.DurationFieldType durationFieldType33 = durationField32.getType();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime25.withFieldAdded(durationFieldType33, 112);
        boolean boolean36 = dateTimeZone5.isLocalDateTimeGap(localDateTime35);
        org.joda.time.Chronology chronology37 = localDateTime35.getChronology();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+100:00" + "'", str6, "+100:00");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+100:00" + "'", str7, "+100:00");
// flaky:         org.junit.Assert.assertNull(str9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+100:00" + "'", str11, "+100:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3692217599900L) + "'", long13 == (-3692217599900L));
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 86 + "'", int23 == 86);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
    }

    @Test
    public void test01775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01775");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.weekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withDurationAdded(readableDuration5, (int) '#');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime1.plusMillis(30);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withMillisOfSecond((int) (byte) 1);
        int int24 = localDateTime11.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime.Property property25 = localDateTime19.weekyear();
        org.joda.time.LocalDateTime.Property property26 = localDateTime19.millisOfDay();
        org.joda.time.LocalDateTime.Property property27 = localDateTime19.yearOfCentury();
        org.joda.time.DurationField durationField28 = property27.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime29 = property27.withMinimumValue();
        java.util.Locale locale30 = java.util.Locale.ENGLISH;
        int int31 = property27.getMaximumShortTextLength(locale30);
        org.joda.time.LocalDateTime localDateTime33 = property27.addToCopy(292272708);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.chrono.CopticChronology copticChronology35 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone34);
        org.joda.time.DateTimeField dateTimeField36 = copticChronology35.clockhourOfDay();
        org.joda.time.DurationField durationField37 = copticChronology35.weekyears();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology35.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone39 = copticChronology35.getZone();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology35);
        org.joda.time.DurationField durationField41 = copticChronology35.weekyears();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology35.hourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = dateTimeField42.getType();
        org.joda.time.LocalDateTime.Property property44 = localDateTime33.property(dateTimeFieldType43);
        int int45 = localDateTime1.get(dateTimeFieldType43);
        int int46 = localDateTime1.getDayOfYear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(copticChronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 11 + "'", int45 == 11);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 57 + "'", int46 == 57);
    }

    @Test
    public void test01776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01776");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology3.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.Chronology chronology7 = copticChronology3.withZone(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        java.util.Locale locale10 = java.util.Locale.ENGLISH;
        java.lang.String str11 = dateTimeField8.getAsText(100L, locale10);
        java.lang.String str14 = nameProvider0.getShortName(locale10, "2022-02-15T07:15:48.511", "UTC");
        java.util.Locale locale15 = java.util.Locale.GERMANY;
        java.lang.String str16 = locale15.getScript();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.clockhourOfDay();
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.lang.String str22 = dateTimeField19.getAsText((long) 'a', locale21);
        java.lang.String str23 = locale15.getDisplayName(locale21);
        java.lang.String str26 = nameProvider0.getShortName(locale15, "Etc/UTC", "Property[weekyear]");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "86" + "'", str11, "86");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "4" + "'", str22, "4");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "tedesco (Germania)" + "'", str23, "tedesco (Germania)");
        org.junit.Assert.assertNull(str26);
    }

    @Test
    public void test01777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01777");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusMonths((int) '4');
        org.joda.time.LocalDateTime.Property property13 = localDateTime7.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundHalfEvenCopy();
        org.joda.time.DurationField durationField15 = property13.getRangeDurationField();
        org.joda.time.DurationFieldType durationFieldType16 = durationField15.getType();
        long long19 = durationField15.add(4346199585L, 382);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1205479955799585L + "'", long19 == 1205479955799585L);
    }

    @Test
    public void test01778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01778");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        boolean boolean1 = timeZone0.observesDaylightTime();
        int int2 = timeZone0.getRawOffset();
        int int4 = timeZone0.getOffset(32054400000L);
        int int6 = timeZone0.getOffset(4346271147L);
        java.util.TimeZone.setDefault(timeZone0);
        boolean boolean8 = timeZone0.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+23:59");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 86399999 + "'", int2 == 86399999);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 86399999 + "'", int4 == 86399999);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 86399999 + "'", int6 == 86399999);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test01779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01779");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusMonths((int) '4');
        org.joda.time.LocalDateTime.Property property13 = localDateTime7.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = property13.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = property13.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withYearOfCentury(54);
        // The following exception was thrown during execution in test generation
        try {
            int int19 = localDateTime17.getValue(59);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 59");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test01780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01780");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.clockhourOfDay();
        org.joda.time.DurationField durationField11 = copticChronology9.weekyears();
        org.joda.time.DurationField durationField12 = copticChronology9.hours();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology9.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology9.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.clockhourOfDay();
        org.joda.time.DurationField durationField19 = copticChronology17.weekyears();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology17.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology17.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology17.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone23 = copticChronology17.getZone();
        java.lang.String str25 = dateTimeZone23.getShortName(0L);
        int int27 = dateTimeZone23.getOffset(4346169777L);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.chrono.CopticChronology copticChronology29 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = copticChronology29.clockhourOfDay();
        org.joda.time.DurationField durationField31 = copticChronology29.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology29.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone33 = copticChronology29.getZone();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology29);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.Chronology chronology37 = copticChronology29.withZone(dateTimeZone36);
        long long39 = dateTimeZone23.getMillisKeepLocal(dateTimeZone36, (long) 761);
        long long42 = dateTimeZone36.adjustOffset(242L, true);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        java.lang.String str45 = dateTimeZone36.getName(4346175182L);
        org.joda.time.Chronology chronology46 = copticChronology9.withZone(dateTimeZone36);
        org.joda.time.Chronology chronology47 = copticChronology1.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField48 = copticChronology1.monthOfYear();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+100:00" + "'", str25, "+100:00");
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 360000000 + "'", int27 == 360000000);
        org.junit.Assert.assertNotNull(copticChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 761L + "'", long39 == 761L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 242L + "'", long42 == 242L);
        org.junit.Assert.assertNotNull(localDateTime43);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+100:00" + "'", str45, "+100:00");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test01781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01781");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.weekOfWeekyear();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test01782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01782");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(129, 581, 470, 2943751, 20276589, 868);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2943751 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01783");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("26151082");
        java.util.Locale.Builder builder3 = builder2.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder2.setScript("26284214");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 26284214 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test01784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01784");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.millisOfDay();
        org.joda.time.Interval interval11 = property10.toInterval();
        org.joda.time.DurationField durationField12 = property10.getDurationField();
        java.lang.String str13 = property10.getName();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "millisOfDay" + "'", str13, "millisOfDay");
    }

    @Test
    public void test01785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01785");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.clockhourOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.weekyear();
        org.joda.time.LocalDateTime localDateTime17 = property15.setCopy((int) (byte) 1);
        org.joda.time.DurationField durationField18 = property15.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime19 = property15.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.weekOfWeekyear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.weekyear();
        org.joda.time.LocalDateTime localDateTime31 = property29.setCopy((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays(10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withWeekyear((int) (byte) 0);
        int[] intArray36 = localDateTime35.getValues();
        copticChronology1.validate((org.joda.time.ReadablePartial) localDateTime19, intArray36);
        org.joda.time.DurationField durationField38 = copticChronology1.weekyears();
        org.joda.time.DurationField durationField39 = copticChronology1.millis();
        long long40 = durationField39.getUnitMillis();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 2, 16, 40738506]");
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
    }

    @Test
    public void test01786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01786");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        int int7 = copticChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            long long11 = dateTimeField8.add(0L, 960897600000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 960897600000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test01787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01787");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("54", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01788");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        boolean boolean11 = locale10.hasExtensions();
        boolean boolean12 = dateTime9.equals((java.lang.Object) locale10);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Collection<java.lang.String> strCollection16 = null;
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, strCollection16);
        java.util.Collection<java.lang.String> strCollection18 = null;
        java.util.List<java.lang.String> strList19 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, strCollection18);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Collection<java.lang.String> strCollection23 = null;
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strCollection23);
        java.util.Collection<java.lang.String> strCollection25 = null;
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strCollection25);
        java.util.Locale.FilteringMode filteringMode27 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, strCollection25, filteringMode27);
        boolean boolean29 = dateTime9.equals((java.lang.Object) languageRangeList14);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.centuryOfEra();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(chronology36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime37.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        java.util.Locale locale46 = java.util.Locale.GERMANY;
        boolean boolean47 = locale46.hasExtensions();
        boolean boolean48 = dateTime45.equals((java.lang.Object) locale46);
        int int49 = property35.getDifference((org.joda.time.ReadableInstant) dateTime45);
        int int50 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = null;
        boolean boolean52 = dateTime45.isSupported(dateTimeFieldType51);
        java.util.Set<java.lang.String> strSet53 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet53.clear();
        java.lang.Object[] objArray55 = strSet53.toArray();
        boolean boolean56 = dateTime45.equals((java.lang.Object) strSet53);
        java.util.Iterator<java.lang.String> strItor57 = strSet53.iterator();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.chrono.CopticChronology copticChronology59 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone58);
        org.joda.time.DateTimeField dateTimeField60 = copticChronology59.clockhourOfDay();
        org.joda.time.DurationField durationField61 = copticChronology59.weekyears();
        org.joda.time.DateTimeField dateTimeField62 = copticChronology59.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone63 = copticChronology59.getZone();
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology59);
        org.joda.time.DurationField durationField65 = copticChronology59.weekyears();
        long long67 = durationField65.getValueAsLong((long) 30);
        boolean boolean68 = strSet53.contains((java.lang.Object) 30);
        boolean boolean69 = strSet53.isEmpty();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + filteringMode27 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode27.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(strItor57);
        org.junit.Assert.assertNotNull(copticChronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test01789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01789");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("87", (double) 6301843200000L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=6.3018432E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01790");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = localDateTime1.getFieldTypes();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundCeilingCopy();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusYears((-292269338));
        java.lang.String str16 = localDateTime10.toString("1");
        org.joda.time.LocalDateTime localDateTime18 = localDateTime10.minusYears(745);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime18.getFieldTypes();
        boolean boolean20 = localDateTime4.isAfter((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime4.plus(readablePeriod21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.millisOfDay();
        int int24 = localDateTime22.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.millisOfDay();
        org.joda.time.LocalDateTime localDateTime26 = property25.roundCeilingCopy();
        org.joda.time.DurationField durationField27 = property25.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20 + "'", int24 == 20);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNull(durationField27);
    }

    @Test
    public void test01791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01791");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = property10.withMaximumValue();
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.lang.String str13 = locale12.getScript();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.clockhourOfDay();
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.lang.String str19 = dateTimeField16.getAsText((long) 'a', locale18);
        java.lang.String str20 = locale12.getDisplayName(locale18);
        java.lang.String str21 = property10.getAsShortText(locale12);
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.dayOfMonth();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.plusWeeks((int) (byte) 10);
        java.util.Locale locale34 = java.util.Locale.PRC;
        java.lang.String str35 = dateTimeField25.getAsText((org.joda.time.ReadablePartial) localDateTime33, locale34);
        java.util.Set<java.lang.String> strSet36 = locale34.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category22, locale34);
        java.util.Locale locale38 = java.util.Locale.CHINESE;
        java.lang.String str39 = locale34.getDisplayScript(locale38);
        java.lang.String str40 = locale38.getDisplayLanguage();
        int int41 = property10.getMaximumShortTextLength(locale38);
        java.util.Set<java.lang.String> strSet42 = locale38.getUnicodeLocaleKeys();
        java.util.Locale locale43 = java.util.Locale.ROOT;
        java.lang.String str44 = locale43.getDisplayVariant();
        java.lang.String str45 = locale43.toLanguageTag();
        java.lang.String str46 = locale43.getVariant();
        java.lang.String str47 = locale38.getDisplayName(locale43);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(chronology48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime49.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(chronology56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime57.withMillisOfSecond((int) (byte) 1);
        int int62 = localDateTime49.compareTo((org.joda.time.ReadablePartial) localDateTime57);
        org.joda.time.LocalDateTime.Property property63 = localDateTime57.weekyear();
        org.joda.time.LocalDateTime.Property property64 = localDateTime57.millisOfDay();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime57.minusYears(999);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.plusDays(24);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime66.plusWeeks(0);
        org.joda.time.LocalDateTime.Property property71 = localDateTime66.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime72 = property71.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.chrono.CopticChronology copticChronology74 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone73);
        org.joda.time.DateTimeField dateTimeField75 = copticChronology74.dayOfMonth();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime(chronology76);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime77.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime77.plusWeeks((int) (byte) 10);
        java.util.Locale locale84 = java.util.Locale.PRC;
        java.lang.String str85 = dateTimeField75.getAsText((org.joda.time.ReadablePartial) localDateTime83, locale84);
        java.lang.String str86 = locale84.getDisplayScript();
        java.lang.String str87 = locale84.getDisplayScript();
        int int88 = property71.getMaximumTextLength(locale84);
        java.lang.String str89 = locale43.getDisplayLanguage(locale84);
        java.lang.String str91 = locale84.getExtension('x');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str93 = locale84.getUnicodeLocaleType("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "4" + "'", str19, "4");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tedesco (Germania)" + "'", str20, "tedesco (Germania)");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "40738849" + "'", str21, "40738849");
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "7" + "'", str35, "7");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u4e2d\u6587" + "'", str40, "\u4e2d\u6587");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "und" + "'", str45, "und");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Chinese" + "'", str47, "Chinese");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(copticChronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "7" + "'", str85, "7");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 7 + "'", int88 == 7);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNull(str91);
    }

    @Test
    public void test01792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01792");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = copticChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DurationField durationField7 = copticChronology1.weekyears();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        long long11 = copticChronology1.add(readablePeriod8, (long) 112, 984);
        org.joda.time.DateTimeField dateTimeField12 = copticChronology1.millisOfSecond();
        java.lang.String str13 = dateTimeField12.toString();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 112L + "'", long11 == 112L);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DateTimeField[millisOfSecond]" + "'", str13, "DateTimeField[millisOfSecond]");
    }

    @Test
    public void test01793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01793");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("26151082");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder4 = builder2.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.setVariant("26236970");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder4.setExtension('4', "2000-01-01T00:00:00.000");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test01794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01794");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DurationField durationField4 = copticChronology1.hours();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.dayOfMonth();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.weekOfWeekyear();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withDurationAdded(readableDuration12, (int) '#');
        int int15 = dateTimeField6.getMaximumValue((org.joda.time.ReadablePartial) localDateTime8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime8.withCenturyOfEra(292278993);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 30 + "'", int15 == 30);
    }

    @Test
    public void test01795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01795");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology2.millisOfDay();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology2.weekyear();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(4346145364L, (org.joda.time.Chronology) copticChronology2);
        org.joda.time.DateTimeField dateTimeField9 = copticChronology2.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            long long14 = copticChronology2.getDateTimeMillis((-1685), 40715917, 196, 604);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 40715917 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test01796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01796");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(942, 2167, 286, 285, 442);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 285 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01797");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) (byte) 0);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withMillisOfSecond((int) (byte) 1);
        int int19 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        boolean boolean20 = dateTimeZone1.isLocalDateTimeGap(localDateTime6);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime6.plusMillis(708);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime6.minus(readablePeriod23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withYear(984);
        boolean boolean28 = localDateTime24.isEqual((org.joda.time.ReadablePartial) localDateTime25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime32 = localDateTime24.withDate(359, 767, 962);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 767 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test01798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01798");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguageTag("inglese");
        java.util.Locale.Builder builder6 = builder3.setExtension('a', "DEU");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.setLanguageTag("40728361");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 40728361 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test01799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01799");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minus(readableDuration1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        long long6 = dateTimeZone4.convertUTCToLocal((long) (short) 1);
        long long9 = dateTimeZone4.adjustOffset((long) 984, true);
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone4.getName((long) 242, locale11);
        org.joda.time.DateTime dateTime13 = localDateTime0.toDateTime(dateTimeZone4);
        org.joda.time.Instant instant14 = dateTime13.toInstant();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime(readableInstant23);
        java.util.Locale locale25 = java.util.Locale.GERMANY;
        boolean boolean26 = locale25.hasExtensions();
        boolean boolean27 = dateTime24.equals((java.lang.Object) locale25);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.util.Collection<java.lang.String> strCollection31 = null;
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, strCollection31);
        java.util.Collection<java.lang.String> strCollection33 = null;
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, strCollection33);
        java.util.Locale.LanguageRange[] languageRangeArray35 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList36 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList36, languageRangeArray35);
        java.util.Collection<java.lang.String> strCollection38 = null;
        java.util.List<java.lang.String> strList39 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, strCollection38);
        java.util.Collection<java.lang.String> strCollection40 = null;
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList36, strCollection40);
        java.util.Locale.FilteringMode filteringMode42 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList43 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, strCollection40, filteringMode42);
        boolean boolean44 = dateTime24.equals((java.lang.Object) languageRangeList29);
        org.joda.time.Instant instant45 = dateTime24.toInstant();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.chrono.CopticChronology copticChronology47 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = copticChronology47.hourOfDay();
        org.joda.time.DateTimeField dateTimeField49 = copticChronology47.centuryOfEra();
        org.joda.time.DurationField durationField50 = copticChronology47.millis();
        org.joda.time.DateTimeField dateTimeField51 = copticChronology47.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField52 = copticChronology47.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.chrono.CopticChronology copticChronology54 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone53);
        org.joda.time.DateTimeField dateTimeField55 = copticChronology54.dayOfMonth();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(chronology56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime57.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime57.plusWeeks((int) (byte) 10);
        java.util.Locale locale64 = java.util.Locale.PRC;
        java.lang.String str65 = dateTimeField55.getAsText((org.joda.time.ReadablePartial) localDateTime63, locale64);
        int int66 = dateTimeField52.getMaximumValue((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.DateTime dateTime67 = localDateTime63.toDateTime();
        int int68 = instant45.compareTo((org.joda.time.ReadableInstant) dateTime67);
        boolean boolean69 = instant14.isAfter((org.joda.time.ReadableInstant) instant45);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 11L + "'", long6 == 11L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 984L + "'", long9 == 984L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.010" + "'", str12, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertNotNull(languageRangeArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + filteringMode42 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode42.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(copticChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(copticChronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "7" + "'", str65, "7");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 24 + "'", int66 == 24);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
    }

    @Test
    public void test01800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01800");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMonths(742);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField9 = localDateTime7.getField(708);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 708");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test01801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01801");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = copticChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DurationField durationField7 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField10 = copticChronology1.weekyears();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = durationField10.subtract((long) 40707113, 26153572);
            org.junit.Assert.fail("Expected exception of type org.joda.time.chrono.LimitChronology.LimitException; message: The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test01802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01802");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.getScript();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.clockhourOfDay();
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.lang.String str7 = dateTimeField4.getAsText((long) 'a', locale6);
        java.lang.String str8 = locale0.getDisplayName(locale6);
        java.lang.String str9 = locale6.getISO3Language();
        java.lang.String str10 = locale6.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "4" + "'", str7, "4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tedesco (Germania)" + "'", str8, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ita" + "'", str9, "ita");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "it" + "'", str10, "it");
    }

    @Test
    public void test01803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01803");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("DateTimeField[hourOfDay]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=datetimefield[hourofday]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01804");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("ita", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap5);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime(readableInstant15);
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        boolean boolean18 = locale17.hasExtensions();
        boolean boolean19 = dateTime16.equals((java.lang.Object) locale17);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Collection<java.lang.String> strCollection23 = null;
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strCollection23);
        java.util.Collection<java.lang.String> strCollection25 = null;
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strCollection25);
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Collection<java.lang.String> strCollection30 = null;
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, strCollection30);
        java.util.Collection<java.lang.String> strCollection32 = null;
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, strCollection32);
        java.util.Locale.FilteringMode filteringMode34 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList35 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strCollection32, filteringMode34);
        boolean boolean36 = dateTime16.equals((java.lang.Object) languageRangeList21);
        java.util.Collection<java.lang.String> strCollection37 = null;
        java.lang.String str38 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strCollection37);
        java.util.Locale locale39 = java.util.Locale.JAPAN;
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleKeys();
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strSet40);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Collection<java.lang.String> strCollection45 = null;
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, strCollection45);
        java.util.Collection<java.lang.String> strCollection47 = null;
        java.util.List<java.lang.String> strList48 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, strCollection47);
        java.util.Locale.LanguageRange[] languageRangeArray49 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList50 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList50, languageRangeArray49);
        java.util.Collection<java.lang.String> strCollection52 = null;
        java.util.List<java.lang.String> strList53 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, strCollection52);
        java.util.Collection<java.lang.String> strCollection54 = null;
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, strCollection54);
        java.util.Locale.FilteringMode filteringMode56 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, strCollection54, filteringMode56);
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.util.Collection<java.lang.String> strCollection61 = null;
        java.util.List<java.lang.String> strList62 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, strCollection61);
        java.util.Collection<java.lang.String> strCollection63 = null;
        java.util.List<java.lang.String> strList64 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, strCollection63);
        java.util.Locale.LanguageRange[] languageRangeArray65 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList66 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList66, languageRangeArray65);
        java.util.Collection<java.lang.String> strCollection68 = null;
        java.util.List<java.lang.String> strList69 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList66, strCollection68);
        java.util.Collection<java.lang.String> strCollection70 = null;
        java.util.List<java.lang.String> strList71 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList66, strCollection70);
        java.util.Locale.FilteringMode filteringMode72 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList73 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, strCollection70, filteringMode72);
        java.util.Locale locale74 = java.util.Locale.GERMANY;
        boolean boolean75 = locale74.hasExtensions();
        java.util.Locale locale76 = java.util.Locale.TAIWAN;
        java.util.Locale locale77 = java.util.Locale.JAPAN;
        java.util.Locale locale78 = java.util.Locale.ITALY;
        java.util.Locale locale79 = java.util.Locale.JAPAN;
        org.joda.time.DateTimeZone dateTimeZone80 = null;
        org.joda.time.chrono.CopticChronology copticChronology81 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone80);
        org.joda.time.DateTimeField dateTimeField82 = copticChronology81.clockhourOfDay();
        org.joda.time.DurationField durationField83 = copticChronology81.weekyears();
        org.joda.time.DateTimeField dateTimeField84 = copticChronology81.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone85 = null;
        org.joda.time.chrono.CopticChronology copticChronology86 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone85);
        org.joda.time.DateTimeField dateTimeField87 = copticChronology86.clockhourOfDay();
        java.util.Locale locale89 = java.util.Locale.ITALIAN;
        java.lang.String str90 = dateTimeField87.getAsText((long) 'a', locale89);
        int int91 = dateTimeField84.getMaximumTextLength(locale89);
        java.util.Locale[] localeArray92 = new java.util.Locale[] { locale74, locale76, locale77, locale78, locale79, locale89 };
        java.util.ArrayList<java.util.Locale> localeList93 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean94 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList93, localeArray92);
        java.util.List<java.util.Locale> localeList95 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.util.Locale>) localeList93);
        java.util.Locale.FilteringMode filteringMode96 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList97 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList95, filteringMode96);
        java.util.List<java.util.Locale> localeList98 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList97);
        java.util.Locale locale99 = java.util.Locale.lookup(languageRangeList6, (java.util.Collection<java.util.Locale>) localeList98);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertTrue("'" + filteringMode34 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode34.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(languageRangeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertTrue("'" + filteringMode56 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode56.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(strList64);
        org.junit.Assert.assertNotNull(languageRangeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertNotNull(strList71);
        org.junit.Assert.assertTrue("'" + filteringMode72 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode72.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(copticChronology81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(copticChronology86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "4" + "'", str90, "4");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertNotNull(localeArray92);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + true + "'", boolean94 == true);
        org.junit.Assert.assertNotNull(localeList95);
        org.junit.Assert.assertTrue("'" + filteringMode96 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode96.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList97);
        org.junit.Assert.assertNotNull(localeList98);
        org.junit.Assert.assertNull(locale99);
    }

    @Test
    public void test01805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01805");
        java.util.Locale locale2 = new java.util.Locale("DateTimeField[clockhourOfDay]", "2022");
        java.lang.String str3 = locale2.getDisplayScript();
        java.util.Locale locale4 = locale2.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = locale4.getUnicodeLocaleType("26286968");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 26286968");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "datetimefield[clockhourofday]_2022");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "datetimefield[clockhourofday]_2022");
    }

    @Test
    public void test01806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01806");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        int int7 = copticChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.dayOfMonth();
        org.joda.time.DurationField durationField9 = copticChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology1.secondOfMinute();
        java.lang.String str12 = dateTimeField10.getAsText(273196800010L);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
    }

    @Test
    public void test01807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01807");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            long long9 = dateTimeField6.set(4706334033L, "2022-02-15T07:16:56.239");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-15T07:16:56.239\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test01808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01808");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguageTag("inglese");
        java.util.Locale.Builder builder4 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder3.setScript("2000-02-22T23:59:59.999");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2000-02-22T23:59:59.999 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test01809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01809");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.clockhourOfDay();
        org.joda.time.DurationField durationField4 = copticChronology2.weekyears();
        org.joda.time.DurationField durationField5 = copticChronology2.hours();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 772, (org.joda.time.Chronology) copticChronology2);
        int int8 = localDateTime7.getDayOfYear();
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 117 + "'", int8 == 117);
    }

    @Test
    public void test01810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01810");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime7 = property6.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.clockhourOfDay();
        org.joda.time.DurationField durationField11 = copticChronology9.weekyears();
        org.joda.time.DurationField durationField12 = copticChronology9.centuries();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology9.weekyear();
        int int14 = dateTimeField13.getMinimumValue();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withMillisOfSecond((int) (byte) 1);
        int int29 = localDateTime16.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime.Property property30 = localDateTime24.weekyear();
        org.joda.time.LocalDateTime.Property property31 = localDateTime24.millisOfDay();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDateTime39.toDateTime(readableInstant40);
        java.util.Locale locale42 = java.util.Locale.GERMANY;
        boolean boolean43 = locale42.hasExtensions();
        boolean boolean44 = dateTime41.equals((java.lang.Object) locale42);
        java.lang.String str45 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime24, locale42);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = dateTimeField13.getType();
        int int47 = localDateTime7.indexOf(dateTimeFieldType46);
        java.lang.String str48 = localDateTime7.toString();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-292269338) + "'", int14 == (-292269338));
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022" + "'", str45, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022-02-27T11:18:59.001" + "'", str48, "2022-02-27T11:18:59.001");
    }

    @Test
    public void test01811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01811");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        int int8 = localDateTime7.getMillisOfSecond();
        int int9 = localDateTime7.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.plusHours((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusMonths(1738);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime15.getFieldTypes();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundCeilingCopy();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.minusYears((-292269338));
        java.lang.String str30 = localDateTime24.toString("1");
        org.joda.time.LocalDateTime localDateTime32 = localDateTime24.minusYears(745);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = localDateTime32.getFieldTypes();
        boolean boolean34 = localDateTime18.isAfter((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.plusMinutes(593);
        int int37 = localDateTime13.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.DateTimeField[] dateTimeFieldArray38 = localDateTime13.getFields();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime40 = localDateTime13.withDayOfMonth(26280714);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26280714 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 26 + "'", int8 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 26 + "'", int9 == 26);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldArray38);
    }

    @Test
    public void test01812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01812");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField6 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.minuteOfDay();
        org.joda.time.DurationField durationField8 = copticChronology1.hours();
        org.joda.time.DurationField durationField9 = copticChronology1.halfdays();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test01813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01813");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.dayOfMonth();
        org.joda.time.DurationField durationField3 = copticChronology1.eras();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.millisOfSecond();
        int int5 = dateTimeField4.getMinimumValue();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withMillisOfSecond((int) (short) 0);
        java.util.Locale locale15 = java.util.Locale.GERMANY;
        java.lang.String str16 = locale15.getScript();
        java.lang.String str17 = locale15.getScript();
        java.lang.String str18 = locale15.getDisplayCountry();
        java.lang.String str19 = locale15.getVariant();
        java.lang.String str20 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime11, 993, locale15);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(chronology29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withMillisOfSecond((int) (byte) 1);
        int int35 = localDateTime22.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime.Property property36 = localDateTime30.weekyear();
        org.joda.time.LocalDateTime.Property property37 = localDateTime30.millisOfDay();
        org.joda.time.LocalDateTime localDateTime38 = property37.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime39 = property37.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.era();
        long long42 = property41.remainder();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval43 = property41.toInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Germany" + "'", str18, "Germany");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "993" + "'", str20, "993");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 63781471140129L + "'", long42 == 63781471140129L);
    }

    @Test
    public void test01814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01814");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusWeeks((int) (byte) -1);
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.lang.String str11 = locale10.getScript();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.clockhourOfDay();
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.lang.String str17 = dateTimeField14.getAsText((long) 'a', locale16);
        java.lang.String str18 = locale10.getDisplayName(locale16);
        java.lang.String str19 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime8, (int) ' ', locale16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime8.minusYears(984);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime8.minusWeeks((int) '#');
        int int24 = localDateTime23.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.centuryOfEra();
        boolean boolean26 = property25.isLeap();
        org.joda.time.LocalDateTime localDateTime27 = property25.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime28 = property25.roundCeilingCopy();
        java.lang.String str29 = property25.toString();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "4" + "'", str17, "4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tedesco (Germania)" + "'", str18, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "32" + "'", str19, "32");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Property[centuryOfEra]" + "'", str29, "Property[centuryOfEra]");
    }

    @Test
    public void test01815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01815");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("hours");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekOfWeekyear();
        int int9 = localDateTime7.getYear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withMillisOfDay(724);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusMillis(26204011);
        boolean boolean14 = languageRange1.equals((java.lang.Object) localDateTime7);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hours" + "'", str3, "hours");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test01816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01816");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField18 = property16.getDurationField();
        org.joda.time.LocalDateTime localDateTime19 = property16.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField20 = property16.getField();
        org.joda.time.LocalDateTime localDateTime22 = property16.addToCopy((long) 745);
        org.joda.time.LocalDateTime localDateTime23 = property16.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime24 = property16.getLocalDateTime();
        java.lang.String str25 = property16.getAsString();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "40740267" + "'", str25, "40740267");
    }

    @Test
    public void test01817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01817");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        long long4 = dateTimeField2.roundHalfEven(6474410250611L);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 6474409200000L + "'", long4 == 6474409200000L);
    }

    @Test
    public void test01818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01818");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        java.lang.String str4 = localDateTime3.toString();
        int int5 = localDateTime3.getWeekyear();
        int int6 = localDateTime3.getDayOfMonth();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.weekOfWeekyear();
        java.lang.String str12 = property11.getAsText();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.DateTime dateTime22 = localDateTime20.toDateTime(readableInstant21);
        java.util.Locale locale23 = java.util.Locale.GERMANY;
        boolean boolean24 = locale23.hasExtensions();
        boolean boolean25 = dateTime22.equals((java.lang.Object) locale23);
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.util.Collection<java.lang.String> strCollection29 = null;
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, strCollection29);
        java.util.Collection<java.lang.String> strCollection31 = null;
        java.util.List<java.lang.String> strList32 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, strCollection31);
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Collection<java.lang.String> strCollection36 = null;
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, strCollection36);
        java.util.Collection<java.lang.String> strCollection38 = null;
        java.util.List<java.lang.String> strList39 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, strCollection38);
        java.util.Locale.FilteringMode filteringMode40 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList41 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, strCollection38, filteringMode40);
        boolean boolean42 = dateTime22.equals((java.lang.Object) languageRangeList27);
        int int43 = property11.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalDateTime localDateTime44 = property11.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.dayOfWeek();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(chronology46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime47.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(chronology54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime55.withMillisOfSecond((int) (byte) 1);
        int int60 = localDateTime47.compareTo((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime.Property property61 = localDateTime55.weekyear();
        org.joda.time.LocalDateTime.Property property62 = localDateTime55.millisOfDay();
        org.joda.time.LocalDateTime localDateTime63 = property62.withMinimumValue();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime(chronology64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime65.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime65.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(chronology72);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime73.withMillisOfSecond((int) (byte) 1);
        int int78 = localDateTime65.compareTo((org.joda.time.ReadablePartial) localDateTime73);
        org.joda.time.LocalDateTime.Property property79 = localDateTime73.weekyear();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime73.minusMillis(2022);
        boolean boolean82 = localDateTime63.isAfter((org.joda.time.ReadablePartial) localDateTime73);
        int int83 = localDateTime44.compareTo((org.joda.time.ReadablePartial) localDateTime73);
        boolean boolean84 = localDateTime3.isAfter((org.joda.time.ReadablePartial) localDateTime73);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime73.plusDays((int) (short) 100);
        org.joda.time.ReadablePartial readablePartial87 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean88 = localDateTime73.isAfter(readablePartial87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-19T11:19:00.364" + "'", str4, "2022-02-19T11:19:00.364");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 19 + "'", int6 == 19);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "7" + "'", str12, "7");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strList32);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertTrue("'" + filteringMode40 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode40.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(localDateTime86);
    }

    @Test
    public void test01819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01819");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset(0L);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        int int5 = timeZone3.getOffset(0L);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone6.observesDaylightTime();
        boolean boolean8 = timeZone3.hasSameRules(timeZone6);
        boolean boolean9 = timeZone0.hasSameRules(timeZone6);
        java.lang.Object obj10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(obj10);
        java.lang.String str12 = localDateTime11.toString();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusMinutes(100);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.withYearOfCentury(11);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusMinutes(962);
        java.util.Date date20 = localDateTime16.toDate();
        boolean boolean21 = timeZone6.inDaylightTime(date20);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+23:59");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 86399999 + "'", int2 == 86399999);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+23:59");
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 86399999 + "'", int5 == 86399999);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+23:59");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-26T11:19:00.387" + "'", str12, "2022-02-26T11:19:00.387");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(date20);
// flaky:         org.junit.Assert.assertEquals(date20.toString(), "Sat Feb 26 11:19:00 GMT+23:59 2011");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test01820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01820");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property16.withMinimumValue();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withMillisOfSecond((int) (byte) 1);
        int int32 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime.Property property33 = localDateTime27.weekyear();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime27.minusMillis(2022);
        boolean boolean36 = localDateTime17.isAfter((org.joda.time.ReadablePartial) localDateTime27);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        java.lang.String str40 = dateTimeZone38.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(dateTimeZone38);
        java.util.TimeZone timeZone42 = null;
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forTimeZone(timeZone42);
        java.lang.String str45 = dateTimeZone43.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(dateTimeZone43);
        boolean boolean47 = localDateTime41.isEqual((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime27.withFields((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.minusMinutes(26153572);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusMonths((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime57 = localDateTime50.withTime((int) (short) 100, 0, 470, 793);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeZone38);
// flaky:         org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(dateTimeZone43);
// flaky:         org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
    }

    @Test
    public void test01821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01821");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField18 = property16.getDurationField();
        org.joda.time.LocalDateTime localDateTime19 = property16.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField20 = property16.getField();
        org.joda.time.DurationField durationField21 = property16.getLeapDurationField();
        int int22 = property16.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime24 = property16.addToCopy(3430L);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime26.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime(readableInstant33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.millisOfDay();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.plusMonths((int) '4');
        org.joda.time.LocalDateTime.Property property38 = localDateTime32.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime39 = property38.roundHalfFloorCopy();
        int int40 = property38.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = property38.getFieldType();
        int int42 = localDateTime24.get(dateTimeFieldType41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime44 = localDateTime24.withYearOfEra(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNull(durationField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 99 + "'", int40 == 99);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 22 + "'", int42 == 22);
    }

    @Test
    public void test01822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01822");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("weekyear");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder6 = builder2.setExtension('u', "86");
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.lang.String str9 = locale8.getDisplayLanguage();
        java.util.Locale.Builder builder10 = builder7.setLocale(locale8);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder7.removeUnicodeLocaleAttribute("2022-02-19T11:18:58.448");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-19T11:18:58.448 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u6587" + "'", str9, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test01823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01823");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        java.util.Locale locale7 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        int int9 = dateTimeField6.getMaximumShortTextLength(locale7);
        java.lang.String str11 = dateTimeField6.getAsText((long) 544);
        long long14 = dateTimeField6.add(52L, (long) 57);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "544" + "'", str11, "544");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 109L + "'", long14 == 109L);
    }

    @Test
    public void test01824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01824");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("inglese");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        double double4 = languageRange1.getWeight();
        java.lang.String str5 = languageRange1.getRange();
        double double6 = languageRange1.getWeight();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "inglese" + "'", str3, "inglese");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "inglese" + "'", str5, "inglese");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
    }

    @Test
    public void test01825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01825");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.era();
        // The following exception was thrown during execution in test generation
        try {
            long long8 = dateTimeField6.remainder((long) 588);
            org.junit.Assert.fail("Expected exception of type org.joda.time.chrono.LimitChronology.LimitException; message: The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test01826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01826");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = copticChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DurationField durationField7 = copticChronology1.weekyears();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        int[] intArray16 = copticChronology1.get((org.joda.time.ReadablePartial) localDateTime13, 0L);
        org.joda.time.DurationField durationField17 = copticChronology1.minutes();
        org.joda.time.Chronology chronology18 = copticChronology1.withUTC();
        long long22 = copticChronology1.add((-31449599999L), (long) 25855001, 24);
        java.lang.Object obj23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(obj23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = localDateTime26.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.chrono.CopticChronology copticChronology34 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = copticChronology34.hourOfDay();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology34.secondOfDay();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology34.secondOfDay();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) copticChronology34);
        int int39 = localDateTime38.getDayOfYear();
        boolean boolean40 = localDateTime31.isEqual((org.joda.time.ReadablePartial) localDateTime38);
        int int41 = localDateTime31.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.chrono.CopticChronology copticChronology44 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField45 = copticChronology44.hourOfDay();
        org.joda.time.DateTimeField dateTimeField46 = copticChronology44.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Chronology chronology48 = copticChronology44.withZone(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField49 = copticChronology44.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology44.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField51 = copticChronology44.year();
        org.joda.time.DateTimeField dateTimeField52 = copticChronology44.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) 761, (org.joda.time.Chronology) copticChronology44);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(chronology54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime55.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime55.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property62 = localDateTime61.weekyear();
        org.joda.time.LocalDateTime localDateTime64 = property62.setCopy((int) (byte) 1);
        long long65 = property62.remainder();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime(chronology66);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime67.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime67.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = localDateTime73.toDateTime(readableInstant74);
        org.joda.time.LocalDateTime.Property property76 = localDateTime73.millisOfDay();
        int int77 = property62.compareTo((org.joda.time.ReadablePartial) localDateTime73);
        boolean boolean79 = property62.equals((java.lang.Object) 342L);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = property62.getFieldType();
        org.joda.time.LocalDateTime.Property property81 = localDateTime53.property(dateTimeFieldType80);
        int int82 = localDateTime31.get(dateTimeFieldType80);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime24.withField(dateTimeFieldType80, (int) 'a');
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.plusYears(0);
        int[] intArray88 = copticChronology1.get((org.joda.time.ReadablePartial) localDateTime84, 4346153397L);
        org.joda.time.DateTimeField dateTimeField89 = copticChronology1.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod90 = null;
        long long93 = copticChronology1.add(readablePeriod90, (long) 26185925, 50);
        org.joda.time.DateTimeField dateTimeField94 = copticChronology1.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod95 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray97 = copticChronology1.get(readablePeriod95, 10598109042001L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(intArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1686, 4, 27, 14400000]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-30829079975L) + "'", long22 == (-30829079975L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(copticChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 117 + "'", int39 == 117);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 22 + "'", int41 == 22);
        org.junit.Assert.assertNotNull(copticChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
// flaky:         org.junit.Assert.assertTrue("'" + long65 + "' != '" + 4706340745L + "'", long65 == 4706340745L);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2022 + "'", int82 == 2022);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(intArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1686, 6, 17, 40553397]");
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 26185925L + "'", long93 == 26185925L);
        org.junit.Assert.assertNotNull(dateTimeField94);
    }

    @Test
    public void test01827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01827");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("26151082");
        java.util.Locale.Builder builder3 = builder0.clear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.hourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology5.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Chronology chronology9 = copticChronology5.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = chronology9.yearOfCentury();
        java.util.Locale locale12 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet13 = locale12.getExtensionKeys();
        java.lang.String str14 = dateTimeField10.getAsShortText(619, locale12);
        java.util.Locale.Builder builder15 = builder0.setLocale(locale12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder15.setScript("\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: ?????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "619" + "'", str14, "619");
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test01828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01828");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = copticChronology1.getZone();
        org.joda.time.Chronology chronology6 = copticChronology1.withUTC();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.DateTime dateTime17 = localDateTime15.toDateTime(readableInstant16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.millisOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusMonths((int) '4');
        org.joda.time.LocalDateTime.Property property21 = localDateTime15.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime22 = property21.roundHalfEvenCopy();
        boolean boolean23 = localDateTime7.equals((java.lang.Object) localDateTime22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime7.plus(readableDuration24);
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder27.removeUnicodeLocaleAttribute("26151082");
        java.util.Locale.Builder builder30 = builder27.clear();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.chrono.CopticChronology copticChronology32 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = copticChronology32.hourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology32.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.Chronology chronology36 = copticChronology32.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = chronology36.yearOfCentury();
        java.util.Locale locale39 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet40 = locale39.getExtensionKeys();
        java.lang.String str41 = dateTimeField37.getAsShortText(619, locale39);
        java.util.Locale.Builder builder42 = builder27.setLocale(locale39);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.chrono.CopticChronology copticChronology44 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField45 = copticChronology44.dayOfMonth();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(chronology46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime47.plusWeeks((int) (byte) 10);
        java.util.Locale locale54 = java.util.Locale.PRC;
        java.lang.String str55 = dateTimeField45.getAsText((org.joda.time.ReadablePartial) localDateTime53, locale54);
        java.util.Set<java.lang.Character> charSet56 = locale54.getExtensionKeys();
        java.lang.String str57 = locale39.getDisplayCountry(locale54);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str58 = localDateTime25.toString("2022-02-22T07:18:15.724", locale39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(copticChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "619" + "'", str41, "619");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(copticChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "7" + "'", str55, "7");
        org.junit.Assert.assertNotNull(charSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\u82f1\u56fd" + "'", str57, "\u82f1\u56fd");
    }

    @Test
    public void test01829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01829");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withMillisOfSecond((int) (byte) 1);
        int int17 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.dayOfMonth();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.plusWeeks((int) (byte) 10);
        java.util.Locale locale29 = java.util.Locale.PRC;
        java.lang.String str30 = dateTimeField20.getAsText((org.joda.time.ReadablePartial) localDateTime28, locale29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.plus(readablePeriod31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime28.withCenturyOfEra(30);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime(readableInstant35);
        org.joda.time.DateTime dateTime37 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = copticChronology39.clockhourOfDay();
        org.joda.time.DurationField durationField41 = copticChronology39.weekyears();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology39.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField43 = copticChronology39.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField44 = copticChronology39.hourOfDay();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(chronology45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime50.minusDays(100);
        int int57 = localDateTime50.getDayOfYear();
        int[] intArray59 = copticChronology39.get((org.joda.time.ReadablePartial) localDateTime50, 3155760000002L);
        copticChronology1.validate((org.joda.time.ReadablePartial) localDateTime12, intArray59);
        org.joda.time.DurationField durationField61 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField62 = copticChronology1.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long65 = dateTimeField62.set(10014330302068L, 37098767);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37098767 for dayOfYear must be in the range [1,366]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "7" + "'", str30, "7");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 57 + "'", int57 == 57);
        org.junit.Assert.assertNotNull(intArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1786, 4, 27, 14400002]");
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
    }

    @Test
    public void test01830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01830");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = copticChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology1.hourOfDay();
        long long14 = dateTimeField11.add(4346143961L, (-3599999L));
        long long16 = dateTimeField11.remainder((long) 470);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-12955650256039L) + "'", long14 == (-12955650256039L));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 470L + "'", long16 == 470L);
    }

    @Test
    public void test01831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01831");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = copticChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology1.hourOfDay();
        long long14 = dateTimeField11.add(4346143961L, (-3599999L));
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withMillisOfSecond((int) (byte) 1);
        int int29 = localDateTime16.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime.Property property30 = localDateTime24.weekyear();
        org.joda.time.LocalDateTime.Property property31 = localDateTime24.millisOfDay();
        org.joda.time.LocalDateTime localDateTime32 = property31.withMinimumValue();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(chronology33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(chronology41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withMillisOfSecond((int) (byte) 1);
        int int47 = localDateTime34.compareTo((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime.Property property48 = localDateTime42.weekyear();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime42.minusMillis(2022);
        boolean boolean51 = localDateTime32.isAfter((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime32.minusMonths(514);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime32.minus(readablePeriod54);
        java.lang.String str56 = localDateTime32.toString();
        java.util.Locale locale59 = new java.util.Locale("2022-02-22T07:17:30.786");
        java.lang.String str60 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) localDateTime32, 17523, locale59);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-12955650256039L) + "'", long14 == (-12955650256039L));
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022-02-26T00:00:00.000" + "'", str56, "2022-02-26T00:00:00.000");
        org.junit.Assert.assertEquals(locale59.toString(), "2022-02-22t07:17:30.786");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "17523" + "'", str60, "17523");
    }

    @Test
    public void test01832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01832");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.minuteOfDay();
        long long9 = copticChronology1.add((-7199987L), (-3600001L), (int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = copticChronology1.add(readablePeriod10, (long) 292278993, 132);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology1.yearOfCentury();
        long long17 = dateTimeField14.addWrapField(10598109519861L, 26217164);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-10799988L) + "'", long9 == (-10799988L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 292278993L + "'", long13 == 292278993L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 12617795919861L + "'", long17 == 12617795919861L);
    }

    @Test
    public void test01833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01833");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.dayOfMonth();
        org.joda.time.DurationField durationField3 = copticChronology1.years();
        // The following exception was thrown during execution in test generation
        try {
            long long8 = copticChronology1.getDateTimeMillis(659, 25804001, 295, 589);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25804001 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
    }

    @Test
    public void test01834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01834");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.minusYears(999);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusDays(24);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.plusWeeks(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime18.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundHalfEvenCopy();
        java.lang.String str25 = property23.getAsString();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.dayOfMonth();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(chronology29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.plusWeeks((int) (byte) 10);
        java.util.Locale locale37 = java.util.Locale.PRC;
        java.lang.String str38 = dateTimeField28.getAsText((org.joda.time.ReadablePartial) localDateTime36, locale37);
        java.util.Set<java.lang.String> strSet39 = locale37.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet40 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet40.clear();
        java.lang.Object[] objArray42 = strSet40.toArray();
        boolean boolean43 = strSet39.addAll((java.util.Collection<java.lang.String>) strSet40);
        strSet39.clear();
        java.util.Locale locale47 = new java.util.Locale("hi!", "hi!");
        java.lang.String str48 = locale47.toLanguageTag();
        boolean boolean49 = strSet39.equals((java.lang.Object) locale47);
        int int50 = property23.getMaximumTextLength(locale47);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "10" + "'", str25, "10");
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "7" + "'", str38, "7");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertEquals(locale47.toString(), "hi!_HI!");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "und" + "'", str48, "und");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 7 + "'", int50 == 7);
    }

    @Test
    public void test01835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01835");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(40707113, 1207, 20, 35, 86);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01836");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minus(readableDuration1);
        int int3 = localDateTime2.getHourOfDay();
        java.lang.Class<?> wildcardClass4 = localDateTime2.getClass();
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 11 + "'", int3 == 11);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test01837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01837");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset(0L);
        boolean boolean3 = timeZone0.observesDaylightTime();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone0.hasSameRules(timeZone4);
        boolean boolean6 = timeZone4.observesDaylightTime();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.minusDays(100);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime21 = property19.addToCopy((long) 724);
        org.joda.time.LocalDateTime localDateTime23 = property19.addWrapFieldToCopy(112);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.yearOfEra();
        java.util.Date date25 = localDateTime23.toDate();
        boolean boolean26 = timeZone4.inDaylightTime(date25);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+23:59");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 86399999 + "'", int2 == 86399999);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+23:59");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Thu Nov 18 11:11:01 GMT+23:59 2021");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test01838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01838");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology2.secondOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology2.secondOfDay();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) copticChronology2);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology2.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology9.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology9.hourOfHalfday();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) copticChronology2, (org.joda.time.Chronology) copticChronology9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.CopticChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test01839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01839");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = copticChronology1.getZone();
        org.joda.time.DurationField durationField8 = copticChronology1.days();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = copticChronology1.getDateTimeMillis(165065759, (-335), 974, 99, 40227001, 480, 742);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 99 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test01840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01840");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Collection<java.lang.String> strCollection6 = null;
        java.util.List<java.lang.String> strList7 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strCollection6);
        java.util.Collection<java.lang.String> strCollection8 = null;
        java.util.List<java.lang.String> strList9 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strCollection8);
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Collection<java.lang.String> strCollection13 = null;
        java.util.List<java.lang.String> strList14 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, strCollection13);
        java.util.Collection<java.lang.String> strCollection15 = null;
        java.util.List<java.lang.String> strList16 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, strCollection15);
        java.util.Locale.FilteringMode filteringMode17 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strCollection15, filteringMode17);
        java.util.Locale locale19 = java.util.Locale.GERMANY;
        boolean boolean20 = locale19.hasExtensions();
        java.util.Locale locale21 = java.util.Locale.TAIWAN;
        java.util.Locale locale22 = java.util.Locale.JAPAN;
        java.util.Locale locale23 = java.util.Locale.ITALY;
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.clockhourOfDay();
        org.joda.time.DurationField durationField28 = copticChronology26.weekyears();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology26.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.chrono.CopticChronology copticChronology31 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone30);
        org.joda.time.DateTimeField dateTimeField32 = copticChronology31.clockhourOfDay();
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        java.lang.String str35 = dateTimeField32.getAsText((long) 'a', locale34);
        int int36 = dateTimeField29.getMaximumTextLength(locale34);
        java.util.Locale[] localeArray37 = new java.util.Locale[] { locale19, locale21, locale22, locale23, locale24, locale34 };
        java.util.ArrayList<java.util.Locale> localeList38 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList38, localeArray37);
        java.util.List<java.util.Locale> localeList40 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList38);
        java.util.Locale.LanguageRange[] languageRangeArray41 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList42 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList42, languageRangeArray41);
        java.util.Collection<java.lang.String> strCollection44 = null;
        java.util.List<java.lang.String> strList45 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, strCollection44);
        java.util.Collection<java.lang.String> strCollection46 = null;
        java.util.List<java.lang.String> strList47 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, strCollection46);
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.util.Collection<java.lang.String> strCollection51 = null;
        java.util.List<java.lang.String> strList52 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, strCollection51);
        java.util.Collection<java.lang.String> strCollection53 = null;
        java.util.List<java.lang.String> strList54 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, strCollection53);
        java.util.Locale.FilteringMode filteringMode55 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, strCollection53, filteringMode55);
        java.util.List<java.util.Locale> localeList57 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList40, filteringMode55);
        java.util.Locale locale58 = java.util.Locale.GERMANY;
        java.lang.String str59 = locale58.getScript();
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.chrono.CopticChronology copticChronology61 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone60);
        org.joda.time.DateTimeField dateTimeField62 = copticChronology61.clockhourOfDay();
        java.util.Locale locale64 = java.util.Locale.ITALIAN;
        java.lang.String str65 = dateTimeField62.getAsText((long) 'a', locale64);
        java.lang.String str66 = locale58.getDisplayName(locale64);
        java.util.Set<java.lang.String> strSet67 = locale64.getUnicodeLocaleAttributes();
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.chrono.CopticChronology copticChronology69 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone68);
        org.joda.time.DateTimeField dateTimeField70 = copticChronology69.clockhourOfDay();
        org.joda.time.DurationField durationField71 = copticChronology69.weekyears();
        org.joda.time.DurationField durationField72 = copticChronology69.hours();
        org.joda.time.DateTimeField dateTimeField73 = copticChronology69.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField74 = copticChronology69.weekyearOfCentury();
        boolean boolean75 = strSet67.remove((java.lang.Object) copticChronology69);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime(chronology77);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime78.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property83 = localDateTime82.dayOfWeek();
        org.joda.time.Chronology chronology84 = localDateTime82.getChronology();
        org.joda.time.DateTimeField dateTimeField85 = chronology84.yearOfEra();
        org.joda.time.LocalDateTime localDateTime86 = new org.joda.time.LocalDateTime(3430L, chronology84);
        boolean boolean87 = strSet67.contains((java.lang.Object) localDateTime86);
        java.lang.String str88 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet67);
        java.util.stream.Stream<java.lang.String> strStream89 = strSet67.stream();
        java.util.Locale.Category category90 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale91 = java.util.Locale.getDefault(category90);
        java.util.Locale locale92 = java.util.Locale.getDefault(category90);
        java.lang.String str93 = locale92.getDisplayName();
        boolean boolean94 = strSet67.remove((java.lang.Object) str93);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strList7);
        org.junit.Assert.assertNotNull(strList9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertTrue("'" + filteringMode17 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode17.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(copticChronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "4" + "'", str35, "4");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(localeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localeList40);
        org.junit.Assert.assertNotNull(languageRangeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(strList45);
        org.junit.Assert.assertNotNull(strList47);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertTrue("'" + filteringMode55 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode55.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(localeList57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(copticChronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "4" + "'", str65, "4");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "tedesco (Germania)" + "'", str66, "tedesco (Germania)");
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(copticChronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(str88);
        org.junit.Assert.assertNotNull(strStream89);
        org.junit.Assert.assertTrue("'" + category90 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category90.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale91);
// flaky:         org.junit.Assert.assertEquals(locale91.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale92);
// flaky:         org.junit.Assert.assertEquals(locale92.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Deutsch (Deutschland)" + "'", str93, "Deutsch (Deutschland)");
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test01841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01841");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField5 = copticChronology1.hours();
        long long8 = durationField5.getDifferenceAsLong(9700L, (long) 52);
        java.lang.String str9 = durationField5.getName();
        long long12 = durationField5.getValueAsLong(10040483838470L, 10040483811543L);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hours" + "'", str9, "hours");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2789023L + "'", long12 == 2789023L);
    }

    @Test
    public void test01842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01842");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = copticChronology1.getZone();
        long long12 = copticChronology1.add((long) 15, (-3600001L), 2);
        org.joda.time.DateTimeField dateTimeField13 = copticChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology1.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology1.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            long long26 = copticChronology1.getDateTimeMillis(19, 2022, 26272678, 20276589, 184, 599, 242);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 20276589 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-7199987L) + "'", long12 == (-7199987L));
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test01843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01843");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = copticChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DurationField durationField7 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.hourOfHalfday();
        long long12 = dateTimeField9.getDifferenceAsLong(1574570580000L, 10571923516168L);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-2499264L) + "'", long12 == (-2499264L));
    }

    @Test
    public void test01844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01844");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.year();
        org.joda.time.DateTimeZone dateTimeZone9 = copticChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology1.clockhourOfDay();
        java.lang.String str11 = dateTimeField10.toString();
        boolean boolean13 = dateTimeField10.isLeap((long) 26172680);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withMillisOfSecond((int) (byte) 1);
        int int28 = localDateTime15.compareTo((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime.Property property29 = localDateTime23.weekyear();
        org.joda.time.LocalDateTime.Property property30 = localDateTime23.millisOfDay();
        org.joda.time.LocalDateTime localDateTime31 = property30.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField32 = property30.getDurationField();
        org.joda.time.LocalDateTime localDateTime33 = property30.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime34 = property30.roundHalfEvenCopy();
        int int35 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDateTime34);
        long long38 = dateTimeField10.getDifferenceAsLong((-1510850506580L), 4346233266L);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DateTimeField[clockhourOfDay]" + "'", str11, "DateTimeField[clockhourOfDay]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 24 + "'", int35 == 24);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-420887L) + "'", long38 == (-420887L));
    }

    @Test
    public void test01845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01845");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        int int8 = localDateTime7.getMillisOfSecond();
        int int9 = localDateTime7.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.plusHours((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType12 = null;
        boolean boolean13 = localDateTime7.isSupported(durationFieldType12);
        org.joda.time.DateTime dateTime14 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime7.plusMillis(491);
        int int17 = localDateTime7.getDayOfYear();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray18 = localDateTime7.getFieldTypes();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 659 + "'", int8 == 659);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 659 + "'", int9 == 659);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 127 + "'", int17 == 127);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray18);
    }

    @Test
    public void test01846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01846");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField18 = property16.getDurationField();
        org.joda.time.LocalDateTime localDateTime19 = property16.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField20 = property16.getField();
        org.joda.time.LocalDateTime localDateTime22 = property16.addToCopy((long) 745);
        org.joda.time.LocalDateTime localDateTime23 = property16.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withMinuteOfHour(245326);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 245326 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test01847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01847");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.millisOfDay();
        org.joda.time.DurationField durationField6 = copticChronology1.weeks();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.weekyearOfCentury();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test01848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01848");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.hourOfHalfday();
        long long7 = dateTimeField5.roundHalfCeiling((long) 766);
        int int10 = dateTimeField5.getDifference(4346203007L, 119L);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology13.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.Chronology chronology17 = copticChronology13.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = copticChronology13.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = copticChronology13.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology13.year();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology13.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 761, (org.joda.time.Chronology) copticChronology13);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withPeriodAdded(readablePeriod23, 26217164);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.hourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology27.centuryOfEra();
        org.joda.time.DurationField durationField30 = copticChronology27.millis();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology27.weekOfWeekyear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(chronology40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withMillisOfSecond((int) (byte) 1);
        int int46 = localDateTime33.compareTo((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime.Property property47 = localDateTime41.weekyear();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime41.minusMillis(2022);
        int[] intArray51 = copticChronology27.get((org.joda.time.ReadablePartial) localDateTime41, (long) '#');
        int int52 = localDateTime41.getWeekOfWeekyear();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(chronology53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime54.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime54.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.weekyear();
        org.joda.time.LocalDateTime localDateTime63 = property61.setCopy((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusDays(10);
        int int66 = localDateTime41.compareTo((org.joda.time.ReadablePartial) localDateTime63);
        int[] intArray67 = localDateTime41.getValues();
        int int68 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localDateTime25, intArray67);
        org.joda.time.DurationField durationField69 = dateTimeField5.getLeapDurationField();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1207 + "'", int10 == 1207);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(intArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1686, 4, 27, 14400035]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 8 + "'", int52 == 8);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(intArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[2022, 2, 26, 40741772]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNull(durationField69);
    }

    @Test
    public void test01849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01849");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = copticChronology1.getZone();
        long long12 = copticChronology1.add((long) 15, (-3600001L), 2);
        org.joda.time.DateTimeField dateTimeField13 = copticChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology1.monthOfYear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMinuteOfHour(2022);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2022 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-7199987L) + "'", long12 == (-7199987L));
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test01850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01850");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = copticChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DurationField durationField7 = copticChronology1.weekyears();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology9.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.Chronology chronology13 = copticChronology9.withZone(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology9.millisOfSecond();
        org.joda.time.DurationField durationField15 = copticChronology9.hours();
        int int16 = durationField7.compareTo(durationField15);
        long long18 = durationField7.getMillis(133);
        java.lang.String str19 = durationField7.getName();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 4197160800000L + "'", long18 == 4197160800000L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "weekyears" + "'", str19, "weekyears");
    }

    @Test
    public void test01851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01851");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = copticChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DurationField durationField7 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.weekyearOfCentury();
        java.lang.String str9 = dateTimeField8.toString();
        java.lang.String str10 = dateTimeField8.getName();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DateTimeField[weekyearOfCentury]" + "'", str9, "DateTimeField[weekyearOfCentury]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "weekyearOfCentury" + "'", str10, "weekyearOfCentury");
    }

    @Test
    public void test01852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01852");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset(0L);
        java.util.TimeZone timeZone3 = java.util.TimeZone.getDefault();
        int int5 = timeZone3.getOffset(0L);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        boolean boolean7 = timeZone6.observesDaylightTime();
        boolean boolean8 = timeZone3.hasSameRules(timeZone6);
        boolean boolean9 = timeZone0.hasSameRules(timeZone6);
        java.util.Locale locale14 = new java.util.Locale("UTC", "2022-02-15T07:16:01.659");
        java.lang.String str15 = locale14.getDisplayScript();
        java.lang.String str16 = locale14.getScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = timeZone0.getDisplayName(false, 306, locale14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 306");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+23:59");
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 86399999 + "'", int2 == 86399999);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+23:59");
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 86399999 + "'", int5 == 86399999);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+23:59");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals(locale14.toString(), "utc_2022-02-15T07:16:01.659");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test01853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01853");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        int int8 = localDateTime7.getMillisOfSecond();
        int int9 = localDateTime7.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.plusHours((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusMonths(1738);
        int int14 = localDateTime13.getWeekyear();
        int int15 = localDateTime13.size();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 261 + "'", int8 == 261);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 261 + "'", int9 == 261);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2167 + "'", int14 == 2167);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
    }

    @Test
    public void test01854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01854");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("2022-02-15T07:15:52.442");
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        java.util.Spliterator<java.lang.String> strSpliterator6 = strSet5.spliterator();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSpliterator6);
    }

    @Test
    public void test01855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01855");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        java.lang.String str3 = dateTimeZone1.getShortName((long) (short) 100);
        org.joda.time.chrono.CopticChronology copticChronology4 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
        long long8 = dateTimeZone1.convertLocalToUTC(951203814584L, false, 4706303979L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:00.010" + "'", str3, "+00:00:00.010");
        org.junit.Assert.assertNotNull(copticChronology4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 951203814574L + "'", long8 == 951203814574L);
    }

    @Test
    public void test01856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01856");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        long long6 = durationField3.subtract(10598401646747L, 500);
        long long7 = durationField3.getUnitMillis();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-5180225553253L) + "'", long6 == (-5180225553253L));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 31557600000L + "'", long7 == 31557600000L);
    }

    @Test
    public void test01857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01857");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = copticChronology1.getZone();
        org.joda.time.DurationField durationField6 = copticChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.weekOfWeekyear();
        org.joda.time.DurationField durationField8 = copticChronology1.weeks();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.hourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology10.centuryOfEra();
        org.joda.time.DurationField durationField13 = copticChronology10.millis();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology10.weekOfWeekyear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withMillisOfSecond((int) (byte) 1);
        int int29 = localDateTime16.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime.Property property30 = localDateTime24.weekyear();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime24.minusMillis(2022);
        int[] intArray34 = copticChronology10.get((org.joda.time.ReadablePartial) localDateTime24, (long) '#');
        org.joda.time.LocalDateTime.Property property35 = localDateTime24.millisOfDay();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime24.minus(readableDuration36);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray38 = localDateTime37.getFieldTypes();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.chrono.CopticChronology copticChronology40 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = copticChronology40.clockhourOfDay();
        org.joda.time.DurationField durationField42 = copticChronology40.weekyears();
        org.joda.time.DateTimeField dateTimeField43 = copticChronology40.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = copticChronology40.getZone();
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology40);
        org.joda.time.DurationField durationField46 = copticChronology40.weekyears();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(chronology47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.dayOfWeek();
        int[] intArray55 = copticChronology40.get((org.joda.time.ReadablePartial) localDateTime52, 0L);
        copticChronology1.validate((org.joda.time.ReadablePartial) localDateTime37, intArray55);
        // The following exception was thrown during execution in test generation
        try {
            long long61 = copticChronology1.getDateTimeMillis(58, 1, 451, 446);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 451 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(intArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[1686, 4, 27, 14400035]");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray38);
        org.junit.Assert.assertNotNull(copticChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(intArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[1686, 4, 27, 14400000]");
    }

    @Test
    public void test01858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01858");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = copticChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.Chronology chronology9 = copticChronology1.withZone(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology1.secondOfDay();
        org.joda.time.DurationField durationField12 = copticChronology1.hours();
        org.joda.time.DurationField durationField13 = copticChronology1.years();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test01859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01859");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder0.setLanguageTag("inglese");
        java.util.Locale.Builder builder6 = builder3.setExtension('a', "DEU");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder3.setRegion("26277430");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 26277430 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test01860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01860");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = property10.withMaximumValue();
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.yearOfEra();
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder13.removeUnicodeLocaleAttribute("26151082");
        java.util.Locale.Builder builder16 = builder13.clear();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.chrono.CopticChronology copticChronology18 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone17);
        org.joda.time.DateTimeField dateTimeField19 = copticChronology18.hourOfDay();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology18.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.Chronology chronology22 = copticChronology18.withZone(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = chronology22.yearOfCentury();
        java.util.Locale locale25 = java.util.Locale.UK;
        java.util.Set<java.lang.Character> charSet26 = locale25.getExtensionKeys();
        java.lang.String str27 = dateTimeField23.getAsShortText(619, locale25);
        java.util.Locale.Builder builder28 = builder13.setLocale(locale25);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfMonth();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.plusWeeks((int) (byte) 10);
        java.util.Locale locale40 = java.util.Locale.PRC;
        java.lang.String str41 = dateTimeField31.getAsText((org.joda.time.ReadablePartial) localDateTime39, locale40);
        java.util.Set<java.lang.Character> charSet42 = locale40.getExtensionKeys();
        java.lang.String str43 = locale25.getDisplayCountry(locale40);
        java.lang.String str44 = property12.getAsShortText(locale40);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(chronology45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.minusYears((-292269338));
        java.lang.String str56 = localDateTime50.toString("1");
        java.util.Date date57 = localDateTime50.toDate();
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.chrono.CopticChronology copticChronology59 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone58);
        org.joda.time.DateTimeField dateTimeField60 = copticChronology59.clockhourOfDay();
        org.joda.time.DurationField durationField61 = copticChronology59.weekyears();
        org.joda.time.DateTimeField dateTimeField62 = copticChronology59.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone63 = copticChronology59.getZone();
        java.lang.String str64 = dateTimeZone63.getID();
        java.lang.String str65 = dateTimeZone63.getID();
        java.util.TimeZone timeZone66 = dateTimeZone63.toTimeZone();
        java.lang.String str68 = dateTimeZone63.getShortName(242L);
        org.joda.time.DateTime dateTime69 = localDateTime50.toDateTime(dateTimeZone63);
        int int70 = property12.compareTo((org.joda.time.ReadableInstant) dateTime69);
        java.lang.String str71 = dateTime69.toString();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(chronology72);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime73.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime73.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = localDateTime79.toDateTime(readableInstant80);
        org.joda.time.LocalDateTime.Property property82 = localDateTime79.millisOfDay();
        org.joda.time.LocalDateTime localDateTime84 = localDateTime79.plusMonths((int) '4');
        org.joda.time.LocalDateTime.Property property85 = localDateTime79.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime86 = property85.roundHalfFloorCopy();
        int int87 = property85.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = property85.getFieldType();
        boolean boolean89 = dateTime69.isSupported(dateTimeFieldType88);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(copticChronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
        org.junit.Assert.assertNotNull(charSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "619" + "'", str27, "619");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "7" + "'", str41, "7");
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u82f1\u56fd" + "'", str43, "\u82f1\u56fd");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2000" + "'", str44, "2000");
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1" + "'", str56, "1");
        org.junit.Assert.assertNotNull(date57);
// flaky:         org.junit.Assert.assertEquals(date57.toString(), "Sat Feb 26 11:19:02 GMT+23:59 2022");
        org.junit.Assert.assertNotNull(copticChronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+100:00" + "'", str64, "+100:00");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+100:00" + "'", str65, "+100:00");
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "GMT+:0:00");
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+100:00" + "'", str68, "+100:00");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "2022-02-26T11:19:02.001+100:00" + "'", str71, "2022-02-26T11:19:02.001+100:00");
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 99 + "'", int87 == 99);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
    }

    @Test
    public void test01861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01861");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DurationField durationField4 = copticChronology1.years();
        org.joda.time.DurationField durationField5 = copticChronology1.hours();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfDay();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray12 = copticChronology1.get(readablePeriod10, (long) 921);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test01862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01862");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        boolean boolean11 = locale10.hasExtensions();
        boolean boolean12 = dateTime9.equals((java.lang.Object) locale10);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Collection<java.lang.String> strCollection16 = null;
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, strCollection16);
        java.util.Collection<java.lang.String> strCollection18 = null;
        java.util.List<java.lang.String> strList19 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, strCollection18);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Collection<java.lang.String> strCollection23 = null;
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strCollection23);
        java.util.Collection<java.lang.String> strCollection25 = null;
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strCollection25);
        java.util.Locale.FilteringMode filteringMode27 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, strCollection25, filteringMode27);
        boolean boolean29 = dateTime9.equals((java.lang.Object) languageRangeList14);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.centuryOfEra();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(chronology36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime37.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        java.util.Locale locale46 = java.util.Locale.GERMANY;
        boolean boolean47 = locale46.hasExtensions();
        boolean boolean48 = dateTime45.equals((java.lang.Object) locale46);
        int int49 = property35.getDifference((org.joda.time.ReadableInstant) dateTime45);
        int int50 = dateTime9.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(chronology51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime52.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime(readableInstant59);
        java.util.Locale locale61 = java.util.Locale.GERMANY;
        boolean boolean62 = locale61.hasExtensions();
        boolean boolean63 = dateTime60.equals((java.lang.Object) locale61);
        boolean boolean64 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTimeZone dateTimeZone65 = dateTime60.getZone();
        java.util.TimeZone timeZone66 = dateTimeZone65.toTimeZone();
        int int67 = timeZone66.getRawOffset();
        java.util.Locale locale70 = java.util.Locale.ITALY;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str71 = timeZone66.getDisplayName(true, 673, locale70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 673");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + filteringMode27 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode27.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "GMT+:0:00");
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 360000000 + "'", int67 == 360000000);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "it_IT");
    }

    @Test
    public void test01863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01863");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) (byte) 0);
        boolean boolean4 = dateTimeZone1.isFixed();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withMillisOfSecond((int) (byte) 1);
        int int19 = localDateTime6.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        boolean boolean20 = dateTimeZone1.isLocalDateTimeGap(localDateTime6);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.dayOfWeek();
        org.joda.time.DurationField durationField28 = property27.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime30 = property27.addToCopy((long) 'a');
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.chrono.CopticChronology copticChronology32 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = copticChronology32.clockhourOfDay();
        org.joda.time.DurationField durationField34 = copticChronology32.weekyears();
        long long37 = durationField34.subtract((long) (byte) 1, 1);
        int int39 = durationField34.getValue((long) '#');
        org.joda.time.DurationFieldType durationFieldType40 = durationField34.getType();
        boolean boolean41 = localDateTime30.isSupported(durationFieldType40);
        boolean boolean42 = localDateTime6.isSupported(durationFieldType40);
        // The following exception was thrown during execution in test generation
        try {
            int int44 = localDateTime6.getValue(26213873);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26213873");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(copticChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-31449599999L) + "'", long37 == (-31449599999L));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test01864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01864");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = localDateTime1.getFieldTypes();
        org.joda.time.LocalDateTime.Property property3 = localDateTime1.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundCeilingCopy();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusYears((-292269338));
        java.lang.String str16 = localDateTime10.toString("1");
        org.joda.time.LocalDateTime localDateTime18 = localDateTime10.minusYears(745);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray19 = localDateTime18.getFieldTypes();
        boolean boolean20 = localDateTime4.isAfter((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.minusDays(26172680);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minus(readablePeriod23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.yearOfEra();
        org.joda.time.LocalDateTime localDateTime27 = property25.addToCopy((-1));
        // The following exception was thrown during execution in test generation
        try {
            int int29 = localDateTime27.getValue(147);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 147");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test01865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01865");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekOfWeekyear();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withMillisOfSecond((int) (byte) 1);
        int int20 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime.Property property21 = localDateTime15.weekyear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime15.minusMillis(2022);
        int[] intArray25 = copticChronology1.get((org.joda.time.ReadablePartial) localDateTime15, (long) '#');
        org.joda.time.DateTimeField dateTimeField26 = copticChronology1.halfdayOfDay();
        java.util.Locale.Category category28 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.dayOfMonth();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.plusWeeks((int) (byte) 10);
        java.util.Locale locale40 = java.util.Locale.PRC;
        java.lang.String str41 = dateTimeField31.getAsText((org.joda.time.ReadablePartial) localDateTime39, locale40);
        java.util.Set<java.lang.String> strSet42 = locale40.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category28, locale40);
        java.lang.String str44 = dateTimeField26.getAsText(26172895, locale40);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.chrono.CopticChronology copticChronology46 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone45);
        org.joda.time.DateTimeField dateTimeField47 = copticChronology46.clockhourOfDay();
        org.joda.time.DurationField durationField48 = copticChronology46.weekyears();
        org.joda.time.DurationField durationField49 = copticChronology46.centuries();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology46.weekyear();
        int int51 = dateTimeField50.getMinimumValue();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(chronology52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime53.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime53.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime(chronology60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime61.withMillisOfSecond((int) (byte) 1);
        int int66 = localDateTime53.compareTo((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.LocalDateTime.Property property67 = localDateTime61.weekyear();
        org.joda.time.LocalDateTime.Property property68 = localDateTime61.millisOfDay();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(chronology69);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime70.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime70.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.DateTime dateTime78 = localDateTime76.toDateTime(readableInstant77);
        java.util.Locale locale79 = java.util.Locale.GERMANY;
        boolean boolean80 = locale79.hasExtensions();
        boolean boolean81 = dateTime78.equals((java.lang.Object) locale79);
        java.lang.String str82 = dateTimeField50.getAsShortText((org.joda.time.ReadablePartial) localDateTime61, locale79);
        java.lang.String str83 = locale79.getDisplayCountry();
        java.lang.String str84 = locale79.getLanguage();
        java.lang.String str85 = locale79.getDisplayName();
        java.lang.String str86 = locale79.getLanguage();
        int int87 = dateTimeField26.getMaximumTextLength(locale79);
        java.lang.Object obj88 = locale79.clone();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1686, 4, 27, 14400035]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + category28 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category28.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "7" + "'", str41, "7");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "26172895" + "'", str44, "26172895");
        org.junit.Assert.assertNotNull(copticChronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-292269338) + "'", int51 == (-292269338));
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "2022" + "'", str82, "2022");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "\u5fb7\u56fd" + "'", str83, "\u5fb7\u56fd");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "de" + "'", str84, "de");
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\u5fb7\u6587\u5fb7\u56fd)" + "'", str85, "\u5fb7\u6587\u5fb7\u56fd)");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "de" + "'", str86, "de");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertNotNull(obj88);
        org.junit.Assert.assertEquals(obj88.toString(), "de_DE");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj88), "de_DE");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj88), "de_DE");
    }

    @Test
    public void test01866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01866");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withYear(984);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = property3.setCopy(184);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test01867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01867");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekyearOfCentury();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekOfWeekyear();
        java.lang.String str11 = property10.getAsText();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        boolean boolean23 = locale22.hasExtensions();
        boolean boolean24 = dateTime21.equals((java.lang.Object) locale22);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Collection<java.lang.String> strCollection28 = null;
        java.util.List<java.lang.String> strList29 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, strCollection28);
        java.util.Collection<java.lang.String> strCollection30 = null;
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, strCollection30);
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Collection<java.lang.String> strCollection35 = null;
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, strCollection35);
        java.util.Collection<java.lang.String> strCollection37 = null;
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, strCollection37);
        java.util.Locale.FilteringMode filteringMode39 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, strCollection37, filteringMode39);
        boolean boolean41 = dateTime21.equals((java.lang.Object) languageRangeList26);
        int int42 = property10.compareTo((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeField dateTimeField43 = property10.getField();
        org.joda.time.LocalDateTime localDateTime44 = property10.withMaximumValue();
        int int45 = localDateTime44.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.chrono.CopticChronology copticChronology47 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = copticChronology47.hourOfDay();
        org.joda.time.DateTimeField dateTimeField49 = copticChronology47.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.Chronology chronology51 = copticChronology47.withZone(dateTimeZone50);
        org.joda.time.DateTimeField dateTimeField52 = copticChronology47.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField53 = copticChronology47.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone54 = copticChronology47.getZone();
        long long58 = copticChronology47.add((long) 15, (-3600001L), 2);
        org.joda.time.DateTimeField dateTimeField59 = copticChronology47.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField60 = copticChronology47.monthOfYear();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology47);
        boolean boolean62 = localDateTime44.equals((java.lang.Object) localDateTime61);
        org.joda.time.LocalDateTime.Property property63 = localDateTime61.dayOfYear();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(chronology65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.weekOfWeekyear();
        java.lang.String str70 = property69.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = property69.getFieldType();
        java.util.Locale.Category category72 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.chrono.CopticChronology copticChronology74 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone73);
        org.joda.time.DateTimeField dateTimeField75 = copticChronology74.dayOfMonth();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime(chronology76);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime77.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime77.plusWeeks((int) (byte) 10);
        java.util.Locale locale84 = java.util.Locale.PRC;
        java.lang.String str85 = dateTimeField75.getAsText((org.joda.time.ReadablePartial) localDateTime83, locale84);
        java.util.Set<java.lang.String> strSet86 = locale84.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category72, locale84);
        java.util.Locale locale88 = java.util.Locale.CHINESE;
        java.lang.String str89 = locale84.getDisplayScript(locale88);
        java.lang.String str90 = locale88.getDisplayLanguage();
        java.lang.String str92 = locale88.getUnicodeLocaleType("10");
        int int93 = property69.getMaximumShortTextLength(locale88);
        java.lang.String str94 = dateTimeField5.getAsText((org.joda.time.ReadablePartial) localDateTime61, 0, locale88);
        boolean boolean96 = localDateTime61.equals((java.lang.Object) 'a');
        org.joda.time.ReadablePeriod readablePeriod97 = null;
        org.joda.time.LocalDateTime localDateTime98 = localDateTime61.minus(readablePeriod97);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "7" + "'", str11, "7");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + filteringMode39 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode39.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(copticChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-7199987L) + "'", long58 == (-7199987L));
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "7" + "'", str70, "7");
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertTrue("'" + category72 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category72.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(copticChronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "7" + "'", str85, "7");
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "\u4e2d\u6587" + "'", str90, "\u4e2d\u6587");
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "0" + "'", str94, "0");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(localDateTime98);
    }

    @Test
    public void test01868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01868");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DurationField durationField4 = copticChronology1.hours();
        int int5 = copticChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.hourOfDay();
        org.joda.time.DurationField durationField7 = dateTimeField6.getDurationField();
        long long10 = durationField7.getValueAsLong(6759163599774934452L, 4346203007L);
        long long13 = durationField7.add(10040483850414L, 14400);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1877545444381L + "'", long10 == 1877545444381L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10092323850414L + "'", long13 == 10092323850414L);
    }

    @Test
    public void test01869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01869");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekOfWeekyear();
        int int5 = localDateTime3.getYear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withMillisOfDay(724);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime3.minusDays((int) 'u');
        int int10 = localDateTime3.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
    }

    @Test
    public void test01870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01870");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(1686);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01871");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.dayOfMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.plusWeeks((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.lang.String str12 = dateTimeField2.getAsText((org.joda.time.ReadablePartial) localDateTime10, locale11);
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet14 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet14.clear();
        java.lang.Object[] objArray16 = strSet14.toArray();
        boolean boolean17 = strSet13.addAll((java.util.Collection<java.lang.String>) strSet14);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.chrono.CopticChronology copticChronology19 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = copticChronology19.clockhourOfDay();
        org.joda.time.DurationField durationField21 = copticChronology19.weekyears();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology19.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.clockhourOfDay();
        java.util.Locale locale27 = java.util.Locale.ITALIAN;
        java.lang.String str28 = dateTimeField25.getAsText((long) 'a', locale27);
        int int29 = dateTimeField22.getMaximumTextLength(locale27);
        boolean boolean30 = strSet13.contains((java.lang.Object) dateTimeField22);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.chrono.CopticChronology copticChronology32 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = copticChronology32.dayOfMonth();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.plusWeeks((int) (byte) 10);
        java.util.Locale locale42 = java.util.Locale.PRC;
        java.lang.String str43 = dateTimeField33.getAsText((org.joda.time.ReadablePartial) localDateTime41, locale42);
        java.util.Set<java.lang.String> strSet44 = locale42.getUnicodeLocaleKeys();
        java.lang.Object[] objArray45 = strSet44.toArray();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.chrono.CopticChronology copticChronology47 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = copticChronology47.clockhourOfDay();
        org.joda.time.DurationField durationField49 = copticChronology47.weekyears();
        org.joda.time.DurationField durationField50 = copticChronology47.weekyears();
        boolean boolean51 = strSet44.equals((java.lang.Object) copticChronology47);
        boolean boolean52 = strSet13.addAll((java.util.Collection<java.lang.String>) strSet44);
        java.util.TimeZone timeZone53 = null;
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forTimeZone(timeZone53);
        int int56 = dateTimeZone54.getStandardOffset((long) 1);
        long long58 = dateTimeZone54.previousTransition(4346143961L);
        org.joda.time.chrono.CopticChronology copticChronology59 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone54);
        boolean boolean60 = strSet13.equals((java.lang.Object) dateTimeZone54);
        long long62 = dateTimeZone54.nextTransition((long) 112);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "7" + "'", str12, "7");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(copticChronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "4" + "'", str28, "4");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(copticChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "7" + "'", str43, "7");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertNotNull(copticChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeZone54);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 360000000 + "'", int56 == 360000000);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 4346143961L + "'", long58 == 4346143961L);
        org.junit.Assert.assertNotNull(copticChronology59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 112L + "'", long62 == 112L);
    }

    @Test
    public void test01872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01872");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getVariant();
        java.lang.String str2 = locale0.getISO3Country();
        java.lang.String str3 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "TWN" + "'", str2, "TWN");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "zh_TW" + "'", str3, "zh_TW");
    }

    @Test
    public void test01873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01873");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(766, 298);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 298");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01874");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        int int7 = copticChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray11 = copticChronology1.get(readablePeriod8, (-10435L), 4346229005L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
    }

    @Test
    public void test01875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01875");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.millisOfDay();
        int int6 = dateTimeField5.getMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.chrono.CopticChronology copticChronology8 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone7);
        org.joda.time.DateTimeField dateTimeField9 = copticChronology8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology8.centuryOfEra();
        org.joda.time.DurationField durationField11 = copticChronology8.millis();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology8.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = copticChronology14.hourOfDay();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology14.centuryOfEra();
        org.joda.time.DurationField durationField17 = copticChronology14.millis();
        org.joda.time.DateTimeField dateTimeField18 = copticChronology14.weekOfWeekyear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withMillisOfSecond((int) (byte) 1);
        int int33 = localDateTime20.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime.Property property34 = localDateTime28.weekyear();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime28.minusMillis(2022);
        int[] intArray38 = copticChronology14.get((org.joda.time.ReadablePartial) localDateTime28, (long) '#');
        long long40 = copticChronology8.set((org.joda.time.ReadablePartial) localDateTime28, 32054400000L);
        org.joda.time.DateTimeField dateTimeField41 = copticChronology8.yearOfCentury();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(chronology42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime43.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.weekyear();
        org.joda.time.LocalDateTime localDateTime52 = property50.setCopy((int) (byte) 1);
        org.joda.time.DurationField durationField53 = property50.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime54 = property50.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plusWeeks(984);
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minus(readablePeriod57);
        long long60 = copticChronology8.set((org.joda.time.ReadablePartial) localDateTime56, 0L);
        int int61 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localDateTime56);
        int int63 = dateTimeField5.getLeapAmount((-30829079975L));
        int int64 = dateTimeField5.getMaximumValue();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 86399999 + "'", int6 == 86399999);
        org.junit.Assert.assertNotNull(copticChronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(intArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1686, 4, 27, 14400035]");
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 10598109543524L + "'", long40 == 10598109543524L);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 10499008743524L + "'", long60 == 10499008743524L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 86399999 + "'", int64 == 86399999);
    }

    @Test
    public void test01876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01876");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusMonths((int) '4');
        org.joda.time.LocalDateTime.Property property13 = localDateTime7.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime15 = property13.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withField(dateTimeFieldType16, 922);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test01877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01877");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.year();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology1.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology1.dayOfYear();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plusWeeks((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.monthOfYear();
        int int21 = localDateTime19.getCenturyOfEra();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.plus(readablePeriod22);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.chrono.CopticChronology copticChronology26 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField27 = copticChronology26.clockhourOfDay();
        org.joda.time.DurationField durationField28 = copticChronology26.weekyears();
        org.joda.time.DurationField durationField29 = copticChronology26.hours();
        int int30 = copticChronology26.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology26.hourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology26.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone33 = copticChronology26.getZone();
        java.lang.String str34 = copticChronology26.toString();
        org.joda.time.DateTimeField dateTimeField35 = copticChronology26.hourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withYear(984);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.chrono.CopticChronology copticChronology41 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField42 = copticChronology41.clockhourOfDay();
        org.joda.time.DurationField durationField43 = copticChronology41.weekyears();
        org.joda.time.DateTimeField dateTimeField44 = copticChronology41.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone45 = copticChronology41.getZone();
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology41);
        org.joda.time.DurationField durationField47 = copticChronology41.weekyears();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(chronology48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.dayOfWeek();
        int[] intArray56 = copticChronology41.get((org.joda.time.ReadablePartial) localDateTime53, 0L);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.withYear(742);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withYearOfEra((int) (short) 100);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime(chronology61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime62.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime62.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime(chronology69);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime70.withMillisOfSecond((int) (byte) 1);
        int int75 = localDateTime62.compareTo((org.joda.time.ReadablePartial) localDateTime70);
        org.joda.time.LocalDateTime.Property property76 = localDateTime70.weekyear();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime70.minusMillis(2022);
        int int79 = localDateTime70.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime70.withDayOfYear(11);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime70.withWeekyear(242);
        boolean boolean84 = localDateTime60.isAfter((org.joda.time.ReadablePartial) localDateTime70);
        int[] intArray85 = localDateTime60.getValues();
        int int86 = dateTimeField35.getMaximumValue((org.joda.time.ReadablePartial) localDateTime38, intArray85);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray88 = dateTimeField11.set((org.joda.time.ReadablePartial) localDateTime19, 426, intArray85, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfYear must be in the range [1,366]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20 + "'", int21 == 20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(copticChronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "CopticChronology[+100:00]" + "'", str34, "CopticChronology[+100:00]");
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(copticChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(intArray56);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[1686, 4, 27, 14400000]");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 22 + "'", int79 == 22);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(intArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[100, 2, 26, 40743001]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 23 + "'", int86 == 23);
    }

    @Test
    public void test01878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01878");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = copticChronology1.getZone();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            int int15 = timeZone8.getOffset(436, 122734, 261, 268, 26285067, 708);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era 436");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+:0:00");
    }

    @Test
    public void test01879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01879");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DurationField durationField4 = copticChronology1.hours();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.clockhourOfDay();
        org.joda.time.DurationField durationField11 = copticChronology9.weekyears();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology9.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology9.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology9.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone15 = copticChronology9.getZone();
        java.lang.String str17 = dateTimeZone15.getShortName(0L);
        int int19 = dateTimeZone15.getOffset(4346169777L);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.chrono.CopticChronology copticChronology21 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField22 = copticChronology21.clockhourOfDay();
        org.joda.time.DurationField durationField23 = copticChronology21.weekyears();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology21.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone25 = copticChronology21.getZone();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology21);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.Chronology chronology29 = copticChronology21.withZone(dateTimeZone28);
        long long31 = dateTimeZone15.getMillisKeepLocal(dateTimeZone28, (long) 761);
        long long34 = dateTimeZone28.adjustOffset(242L, true);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(dateTimeZone28);
        java.lang.String str37 = dateTimeZone28.getName(4346175182L);
        org.joda.time.Chronology chronology38 = copticChronology1.withZone(dateTimeZone28);
        java.lang.Class<?> wildcardClass39 = dateTimeZone28.getClass();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+100:00" + "'", str17, "+100:00");
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 360000000 + "'", int19 == 360000000);
        org.junit.Assert.assertNotNull(copticChronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 761L + "'", long31 == 761L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 242L + "'", long34 == 242L);
        org.junit.Assert.assertNotNull(localDateTime35);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+100:00" + "'", str37, "+100:00");
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(wildcardClass39);
    }

    @Test
    public void test01880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01880");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        boolean boolean2 = dateTimeZone1.isFixed();
        boolean boolean4 = dateTimeZone1.equals((java.lang.Object) 1104969600000L);
        int int6 = dateTimeZone1.getOffsetFromLocal(10598109478361L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 10 + "'", int6 == 10);
    }

    @Test
    public void test01881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01881");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = copticChronology1.getZone();
        long long12 = copticChronology1.add((long) 15, (-3600001L), 2);
        org.joda.time.DateTimeField dateTimeField13 = copticChronology1.minuteOfDay();
        org.joda.time.DurationField durationField14 = copticChronology1.months();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        boolean boolean17 = dateTimeZone16.isFixed();
        org.joda.time.Chronology chronology18 = copticChronology1.withZone(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField19 = copticChronology1.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology1.weekyearOfCentury();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-7199987L) + "'", long12 == (-7199987L));
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test01882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01882");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.weekOfWeekyear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime(readableInstant15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusMonths((int) '4');
        long long21 = copticChronology1.set((org.joda.time.ReadablePartial) localDateTime19, (long) 100);
        org.joda.time.DateTimeField dateTimeField22 = copticChronology1.year();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.DateTime dateTime32 = localDateTime30.toDateTime(readableInstant31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.millisOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusMonths((int) '4');
        int int36 = dateTimeField22.getMinimumValue((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.minusYears(113);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.minusSeconds(2000);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.era();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minus(readableDuration44);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        long long49 = dateTimeZone47.convertUTCToLocal((long) (short) 1);
        long long52 = dateTimeZone47.adjustOffset((long) 984, true);
        java.util.Locale locale54 = null;
        java.lang.String str55 = dateTimeZone47.getName((long) 242, locale54);
        org.joda.time.DateTime dateTime56 = localDateTime43.toDateTime(dateTimeZone47);
        org.joda.time.Instant instant57 = dateTime56.toInstant();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(chronology58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime59.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime63.minusDays(100);
        org.joda.time.LocalDateTime.Property property70 = localDateTime69.minuteOfHour();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(chronology71);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime72.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime72.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.DateTime dateTime80 = localDateTime78.toDateTime(readableInstant79);
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = null;
        boolean boolean82 = dateTime80.isSupported(dateTimeFieldType81);
        org.joda.time.DateTime dateTime83 = localDateTime69.toDateTime((org.joda.time.ReadableInstant) dateTime80);
        int int84 = instant57.compareTo((org.joda.time.ReadableInstant) dateTime80);
        long long85 = instant57.getMillis();
        // The following exception was thrown during execution in test generation
        try {
            int int86 = property42.getDifference((org.joda.time.ReadableInstant) instant57);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10040483944038L + "'", long21 == 10040483944038L);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-292269338) + "'", int36 == (-292269338));
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 11L + "'", long49 == 11L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 984L + "'", long52 == 984L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.010" + "'", str55, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long85 + "' != '" + 1645874344029L + "'", long85 == 1645874344029L);
    }

    @Test
    public void test01883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01883");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = localDateTime1.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withMillisOfDay((int) (byte) 0);
        int int5 = localDateTime4.getYear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.yearOfEra();
        java.lang.Object obj7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(obj7);
        java.lang.String str9 = localDateTime8.toString();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusMinutes(100);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withMillisOfSecond((int) (byte) 1);
        int int26 = localDateTime13.compareTo((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.chrono.CopticChronology copticChronology28 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone27);
        org.joda.time.DateTimeField dateTimeField29 = copticChronology28.dayOfMonth();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime31.plusWeeks((int) (byte) 10);
        java.util.Locale locale38 = java.util.Locale.PRC;
        java.lang.String str39 = dateTimeField29.getAsText((org.joda.time.ReadablePartial) localDateTime37, locale38);
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.plus(readablePeriod40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime37.withCenturyOfEra(30);
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime(readableInstant44);
        org.joda.time.DateTime dateTime46 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime47 = localDateTime11.toDateTime((org.joda.time.ReadableInstant) dateTime46);
        int int48 = property6.getDifference((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Interval interval49 = property6.toInterval();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-26T11:19:04.185" + "'", str9, "2022-02-26T11:19:04.185");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(copticChronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "7" + "'", str39, "7");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(interval49);
    }

    @Test
    public void test01884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01884");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.eras();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.weekOfWeekyear();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.weekOfWeekyear();
        int int10 = localDateTime8.getYear();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.chrono.CopticChronology copticChronology12 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone11);
        org.joda.time.DateTimeField dateTimeField13 = copticChronology12.dayOfMonth();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.plusWeeks((int) (byte) 10);
        java.util.Locale locale22 = java.util.Locale.PRC;
        java.lang.String str23 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDateTime21, locale22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withMillisOfSecond((int) (byte) 1);
        java.util.Locale locale31 = java.util.Locale.JAPAN;
        java.lang.String str32 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDateTime25, 2022, locale31);
        java.lang.String str33 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime8, locale31);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime8.withDurationAdded(readableDuration34, 16601);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.withPeriodAdded(readablePeriod38, 999);
        int int41 = localDateTime40.getDayOfWeek();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(copticChronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "7" + "'", str23, "7");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022" + "'", str32, "2022");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "7" + "'", str33, "7");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
    }

    @Test
    public void test01885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01885");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("26151082");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale locale4 = builder2.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder2.setLanguage("787");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 787 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
    }

    @Test
    public void test01886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01886");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekyearOfCentury();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekOfWeekyear();
        java.lang.String str11 = property10.getAsText();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        boolean boolean23 = locale22.hasExtensions();
        boolean boolean24 = dateTime21.equals((java.lang.Object) locale22);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Collection<java.lang.String> strCollection28 = null;
        java.util.List<java.lang.String> strList29 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, strCollection28);
        java.util.Collection<java.lang.String> strCollection30 = null;
        java.util.List<java.lang.String> strList31 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, strCollection30);
        java.util.Locale.LanguageRange[] languageRangeArray32 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList33 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33, languageRangeArray32);
        java.util.Collection<java.lang.String> strCollection35 = null;
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, strCollection35);
        java.util.Collection<java.lang.String> strCollection37 = null;
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList33, strCollection37);
        java.util.Locale.FilteringMode filteringMode39 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, strCollection37, filteringMode39);
        boolean boolean41 = dateTime21.equals((java.lang.Object) languageRangeList26);
        int int42 = property10.compareTo((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeField dateTimeField43 = property10.getField();
        org.joda.time.LocalDateTime localDateTime44 = property10.withMaximumValue();
        int int45 = localDateTime44.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.chrono.CopticChronology copticChronology47 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone46);
        org.joda.time.DateTimeField dateTimeField48 = copticChronology47.hourOfDay();
        org.joda.time.DateTimeField dateTimeField49 = copticChronology47.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.Chronology chronology51 = copticChronology47.withZone(dateTimeZone50);
        org.joda.time.DateTimeField dateTimeField52 = copticChronology47.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField53 = copticChronology47.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone54 = copticChronology47.getZone();
        long long58 = copticChronology47.add((long) 15, (-3600001L), 2);
        org.joda.time.DateTimeField dateTimeField59 = copticChronology47.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField60 = copticChronology47.monthOfYear();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology47);
        boolean boolean62 = localDateTime44.equals((java.lang.Object) localDateTime61);
        org.joda.time.LocalDateTime.Property property63 = localDateTime61.dayOfYear();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime(chronology65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.weekOfWeekyear();
        java.lang.String str70 = property69.getAsText();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = property69.getFieldType();
        java.util.Locale.Category category72 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.chrono.CopticChronology copticChronology74 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone73);
        org.joda.time.DateTimeField dateTimeField75 = copticChronology74.dayOfMonth();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime(chronology76);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime77.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime77.plusWeeks((int) (byte) 10);
        java.util.Locale locale84 = java.util.Locale.PRC;
        java.lang.String str85 = dateTimeField75.getAsText((org.joda.time.ReadablePartial) localDateTime83, locale84);
        java.util.Set<java.lang.String> strSet86 = locale84.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category72, locale84);
        java.util.Locale locale88 = java.util.Locale.CHINESE;
        java.lang.String str89 = locale84.getDisplayScript(locale88);
        java.lang.String str90 = locale88.getDisplayLanguage();
        java.lang.String str92 = locale88.getUnicodeLocaleType("10");
        int int93 = property69.getMaximumShortTextLength(locale88);
        java.lang.String str94 = dateTimeField5.getAsText((org.joda.time.ReadablePartial) localDateTime61, 0, locale88);
        boolean boolean96 = localDateTime61.equals((java.lang.Object) 'a');
        org.joda.time.LocalDateTime localDateTime98 = localDateTime61.plusHours((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property99 = localDateTime61.yearOfEra();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "7" + "'", str11, "7");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(strList31);
        org.junit.Assert.assertNotNull(languageRangeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertTrue("'" + filteringMode39 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode39.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertNotNull(copticChronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-7199987L) + "'", long58 == (-7199987L));
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "7" + "'", str70, "7");
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertTrue("'" + category72 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category72.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(copticChronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "7" + "'", str85, "7");
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "\u4e2d\u6587" + "'", str90, "\u4e2d\u6587");
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "0" + "'", str94, "0");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(localDateTime98);
        org.junit.Assert.assertNotNull(property99);
    }

    @Test
    public void test01887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01887");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.getScript();
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.chrono.CopticChronology copticChronology3 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone2);
        org.joda.time.DateTimeField dateTimeField4 = copticChronology3.clockhourOfDay();
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.lang.String str7 = dateTimeField4.getAsText((long) 'a', locale6);
        java.lang.String str8 = locale0.getDisplayName(locale6);
        java.lang.String str9 = locale6.getISO3Language();
        boolean boolean10 = locale6.hasExtensions();
        java.util.Locale locale11 = locale6.stripExtensions();
        java.lang.String str12 = locale11.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(copticChronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "4" + "'", str7, "4");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "tedesco (Germania)" + "'", str8, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ita" + "'", str9, "ita");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
    }

    @Test
    public void test01888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01888");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DurationField durationField4 = copticChronology1.hours();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone7 = copticChronology1.getZone();
        long long10 = dateTimeZone7.convertLocalToUTC(10040630400000L, false);
        long long12 = dateTimeZone7.convertUTCToLocal(4346222874L);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10040270400000L + "'", long10 == 10040270400000L);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 4706222874L + "'", long12 == 4706222874L);
    }

    @Test
    public void test01889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01889");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = localDateTime1.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology9.secondOfDay();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology9.secondOfDay();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) copticChronology9);
        int int14 = localDateTime13.getDayOfYear();
        boolean boolean15 = localDateTime6.isEqual((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withMillisOfSecond((int) (byte) 1);
        boolean boolean22 = localDateTime6.isAfter((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime6.minusWeeks(9);
        org.joda.time.LocalDateTime.Property property25 = localDateTime6.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 117 + "'", int14 == 117);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test01890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01890");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("inglese");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.chrono.CopticChronology copticChronology5 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology5.clockhourOfDay();
        long long10 = copticChronology5.add((long) '#', (long) 'a', (int) '#');
        org.joda.time.DateTimeField dateTimeField11 = copticChronology5.clockhourOfHalfday();
        boolean boolean12 = languageRange1.equals((java.lang.Object) copticChronology5);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "inglese" + "'", str3, "inglese");
        org.junit.Assert.assertNotNull(copticChronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 3430L + "'", long10 == 3430L);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test01891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01891");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getStandardOffset((long) 1);
        long long7 = dateTimeZone1.convertLocalToUTC((long) 724, false, (long) (short) 10);
        java.util.TimeZone timeZone8 = dateTimeZone1.toTimeZone();
        java.lang.String str10 = dateTimeZone1.getNameKey((long) 16601);
        java.util.TimeZone timeZone11 = dateTimeZone1.toTimeZone();
        java.lang.String str12 = dateTimeZone1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 360000000 + "'", int3 == 360000000);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-359999276L) + "'", long7 == (-359999276L));
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+:0:00");
// flaky:         org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+:0:00");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+100:00" + "'", str12, "+100:00");
    }

    @Test
    public void test01892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01892");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfWeek();
        org.joda.time.Chronology chronology7 = localDateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.weekyear();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        long long13 = chronology7.add(readablePeriod10, 99L, 318);
        org.joda.time.DateTimeField dateTimeField14 = chronology7.era();
        boolean boolean15 = dateTimeField14.isLenient();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 99L + "'", long13 == 99L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test01893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01893");
        java.util.Locale.Category category0 = null;
        java.util.Locale locale4 = new java.util.Locale("2000-02-22T07:16:11.316Z", "DurationField[weekyears]", "26251495");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.setDefault(category0, locale4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Category cannot be NULL");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale4.toString(), "2000-02-22t07:16:11.316z_DURATIONFIELD[WEEKYEARS]_26251495");
    }

    @Test
    public void test01894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01894");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("26151082");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder5 = builder3.addUnicodeLocaleAttribute("26211152");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder3.setScript("DurationField[millis]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: DurationField[millis] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test01895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01895");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField18 = property16.getDurationField();
        org.joda.time.LocalDateTime localDateTime19 = property16.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField20 = property16.getField();
        org.joda.time.LocalDateTime localDateTime22 = property16.addToCopy((long) 745);
        org.joda.time.LocalDateTime localDateTime23 = property16.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime24 = property16.getLocalDateTime();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plus(readableDuration25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType28 = localDateTime26.getFieldType(9);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 9");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test01896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01896");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-15T07:17:15.851");
        int int2 = timeZone1.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test01897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01897");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weeks();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.millisOfDay();
        org.joda.time.DurationField durationField5 = copticChronology1.years();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.era();
        java.lang.String str7 = copticChronology1.toString();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CopticChronology[+100:00]" + "'", str7, "CopticChronology[+100:00]");
    }

    @Test
    public void test01898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01898");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.Interval interval9 = property8.toInterval();
        boolean boolean10 = property8.isLeap();
        org.joda.time.LocalDateTime localDateTime11 = property8.roundFloorCopy();
        org.joda.time.tz.NameProvider nameProvider12 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider12);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology15.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.Chronology chronology19 = copticChronology15.withZone(dateTimeZone18);
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfCentury();
        java.util.Locale locale22 = java.util.Locale.ENGLISH;
        java.lang.String str23 = dateTimeField20.getAsText(100L, locale22);
        java.lang.String str26 = nameProvider12.getShortName(locale22, "2022-02-15T07:15:48.511", "UTC");
        java.util.Locale locale27 = java.util.Locale.GERMANY;
        java.lang.String str28 = locale27.getScript();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.clockhourOfDay();
        java.util.Locale locale33 = java.util.Locale.ITALIAN;
        java.lang.String str34 = dateTimeField31.getAsText((long) 'a', locale33);
        java.lang.String str35 = locale27.getDisplayName(locale33);
        java.lang.String str38 = nameProvider12.getShortName(locale27, "Etc/UTC", "Property[weekyear]");
        int int39 = property8.getMaximumShortTextLength(locale27);
        org.joda.time.LocalDateTime localDateTime40 = property8.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime44 = localDateTime40.withDate(0, 335, 589);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 335 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(nameProvider12);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "86" + "'", str23, "86");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "4" + "'", str34, "4");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "tedesco (Germania)" + "'", str35, "tedesco (Germania)");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 9 + "'", int39 == 9);
        org.junit.Assert.assertNotNull(localDateTime40);
    }

    @Test
    public void test01899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01899");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekOfWeekyear();
        java.lang.String str5 = property4.getAsText();
        org.joda.time.LocalDateTime localDateTime7 = property4.addToCopy(588);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology9.centuryOfEra();
        org.joda.time.DurationField durationField12 = copticChronology9.millis();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology9.weekOfWeekyear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.withMillisOfSecond((int) (byte) 1);
        int int28 = localDateTime15.compareTo((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime.Property property29 = localDateTime23.weekyear();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime23.minusMillis(2022);
        int[] intArray33 = copticChronology9.get((org.joda.time.ReadablePartial) localDateTime23, (long) '#');
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.hourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology36.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.Chronology chronology40 = copticChronology36.withZone(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = copticChronology36.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField42 = copticChronology36.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField43 = copticChronology36.year();
        org.joda.time.DateTimeField dateTimeField44 = copticChronology36.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) 761, (org.joda.time.Chronology) copticChronology36);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(chronology46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime47.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.weekyear();
        org.joda.time.LocalDateTime localDateTime56 = property54.setCopy((int) (byte) 1);
        long long57 = property54.remainder();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(chronology58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime59.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime59.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.DateTime dateTime67 = localDateTime65.toDateTime(readableInstant66);
        org.joda.time.LocalDateTime.Property property68 = localDateTime65.millisOfDay();
        int int69 = property54.compareTo((org.joda.time.ReadablePartial) localDateTime65);
        boolean boolean71 = property54.equals((java.lang.Object) 342L);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = property54.getFieldType();
        org.joda.time.LocalDateTime.Property property73 = localDateTime45.property(dateTimeFieldType72);
        int int74 = localDateTime23.get(dateTimeFieldType72);
        int int75 = localDateTime7.get(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "7" + "'", str5, "7");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(intArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[1686, 4, 27, 14400035]");
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + 4706345295L + "'", long57 == 4706345295L);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2022 + "'", int74 == 2022);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2033 + "'", int75 == 2033);
    }

    @Test
    public void test01900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01900");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withMillisOfSecond((int) (byte) 1);
        int int22 = localDateTime9.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime.Property property23 = localDateTime17.weekyear();
        org.joda.time.LocalDateTime.Property property24 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime17.minusYears(999);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusDays(24);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.plusWeeks(0);
        int int31 = localDateTime26.size();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.DateTime dateTime41 = localDateTime39.toDateTime(readableInstant40);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(chronology42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime43.plusWeeks((int) (byte) 10);
        int int50 = localDateTime49.getMillisOfSecond();
        int int51 = localDateTime49.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.plusHours((int) (short) -1);
        org.joda.time.DurationFieldType durationFieldType54 = null;
        boolean boolean55 = localDateTime49.isSupported(durationFieldType54);
        org.joda.time.DateTime dateTime56 = localDateTime49.toDateTime();
        boolean boolean57 = dateTime41.isAfter((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTimeZone dateTimeZone58 = dateTime56.getZone();
        long long59 = dateTime56.getMillis();
        org.joda.time.DateTime dateTime60 = localDateTime26.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime61 = localDateTime1.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.chrono.CopticChronology copticChronology63 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone62);
        org.joda.time.DateTimeField dateTimeField64 = copticChronology63.hourOfDay();
        org.joda.time.DateTimeField dateTimeField65 = copticChronology63.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.Chronology chronology67 = copticChronology63.withZone(dateTimeZone66);
        org.joda.time.DateTimeField dateTimeField68 = copticChronology63.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField69 = copticChronology63.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone70 = null;
        org.joda.time.chrono.CopticChronology copticChronology71 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone70);
        org.joda.time.DateTimeField dateTimeField72 = copticChronology71.clockhourOfDay();
        org.joda.time.DurationField durationField73 = copticChronology71.weekyears();
        org.joda.time.DateTimeField dateTimeField74 = copticChronology71.clockhourOfDay();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime(chronology75);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.plusWeeks((int) (byte) -1);
        java.util.Locale locale80 = java.util.Locale.GERMANY;
        java.lang.String str81 = locale80.getScript();
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.chrono.CopticChronology copticChronology83 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone82);
        org.joda.time.DateTimeField dateTimeField84 = copticChronology83.clockhourOfDay();
        java.util.Locale locale86 = java.util.Locale.ITALIAN;
        java.lang.String str87 = dateTimeField84.getAsText((long) 'a', locale86);
        java.lang.String str88 = locale80.getDisplayName(locale86);
        java.lang.String str89 = dateTimeField74.getAsShortText((org.joda.time.ReadablePartial) localDateTime78, (int) ' ', locale86);
        org.joda.time.LocalDateTime localDateTime91 = localDateTime78.minusYears(984);
        long long93 = copticChronology63.set((org.joda.time.ReadablePartial) localDateTime91, 10598109358834L);
        boolean boolean94 = dateTime60.equals((java.lang.Object) 10598109358834L);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 362 + "'", int50 == 362);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 362 + "'", int51 == 362);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTimeZone58);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1651562345362L + "'", long59 == 1651562345362L);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(copticChronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(copticChronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(copticChronology83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "4" + "'", str87, "4");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "tedesco (Germania)" + "'", str88, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "32" + "'", str89, "32");
        org.junit.Assert.assertNotNull(localDateTime91);
// flaky:         org.junit.Assert.assertTrue("'" + long93 + "' != '" + (-20455173654638L) + "'", long93 == (-20455173654638L));
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test01901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01901");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withMinuteOfHour(10);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.weekyear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusYears((int) (short) 1);
        int int21 = localDateTime9.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.minusYears(619);
        int int24 = localDateTime20.size();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
    }

    @Test
    public void test01902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01902");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.clockhourOfDay();
        org.joda.time.DurationField durationField11 = copticChronology9.weekyears();
        org.joda.time.DurationField durationField12 = copticChronology9.hours();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology9.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology9.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.clockhourOfDay();
        org.joda.time.DurationField durationField19 = copticChronology17.weekyears();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology17.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = copticChronology17.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField22 = copticChronology17.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone23 = copticChronology17.getZone();
        java.lang.String str25 = dateTimeZone23.getShortName(0L);
        int int27 = dateTimeZone23.getOffset(4346169777L);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.chrono.CopticChronology copticChronology29 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone28);
        org.joda.time.DateTimeField dateTimeField30 = copticChronology29.clockhourOfDay();
        org.joda.time.DurationField durationField31 = copticChronology29.weekyears();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology29.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone33 = copticChronology29.getZone();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology29);
        java.util.TimeZone timeZone35 = null;
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forTimeZone(timeZone35);
        org.joda.time.Chronology chronology37 = copticChronology29.withZone(dateTimeZone36);
        long long39 = dateTimeZone23.getMillisKeepLocal(dateTimeZone36, (long) 761);
        long long42 = dateTimeZone36.adjustOffset(242L, true);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(dateTimeZone36);
        java.lang.String str45 = dateTimeZone36.getName(4346175182L);
        org.joda.time.Chronology chronology46 = copticChronology9.withZone(dateTimeZone36);
        org.joda.time.Chronology chronology47 = copticChronology1.withZone(dateTimeZone36);
        org.joda.time.DateTimeField dateTimeField48 = copticChronology1.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            long long53 = copticChronology1.getDateTimeMillis(39, (-37384), 20276589, 436);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -37384 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+100:00" + "'", str25, "+100:00");
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 360000000 + "'", int27 == 360000000);
        org.junit.Assert.assertNotNull(copticChronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 761L + "'", long39 == 761L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 242L + "'", long42 == 242L);
        org.junit.Assert.assertNotNull(localDateTime43);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+100:00" + "'", str45, "+100:00");
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test01903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01903");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.weekOfWeekyear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime(readableInstant15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusMonths((int) '4');
        long long21 = copticChronology1.set((org.joda.time.ReadablePartial) localDateTime19, (long) 100);
        org.joda.time.DateTimeField dateTimeField22 = copticChronology1.year();
        org.joda.time.DurationField durationField23 = copticChronology1.months();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology1.hourOfDay();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10040483945684L + "'", long21 == 10040483945684L);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test01904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01904");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.weekyear();
        org.joda.time.DurationField durationField7 = copticChronology1.seconds();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.millisOfDay();
        long long10 = dateTimeField8.roundFloor((long) 256);
        long long12 = dateTimeField8.roundFloor(574L);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = copticChronology14.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.chrono.CopticChronology copticChronology17 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone16);
        org.joda.time.DateTimeField dateTimeField18 = copticChronology17.clockhourOfDay();
        org.joda.time.DurationField durationField19 = copticChronology17.weekyears();
        org.joda.time.DateTimeField dateTimeField20 = copticChronology17.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.clockhourOfDay();
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.lang.String str26 = dateTimeField23.getAsText((long) 'a', locale25);
        int int27 = dateTimeField20.getMaximumTextLength(locale25);
        int int29 = dateTimeField20.getMinimumValue((-3600001L));
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property35 = localDateTime33.centuryOfEra();
        java.lang.String str36 = localDateTime33.toString();
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.lang.String str39 = dateTimeField20.getAsShortText((org.joda.time.ReadablePartial) localDateTime33, (-292275054), locale38);
        java.lang.String str40 = localDateTime33.toString();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.chrono.CopticChronology copticChronology43 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone42);
        org.joda.time.DateTimeField dateTimeField44 = copticChronology43.clockhourOfDay();
        org.joda.time.DurationField durationField45 = copticChronology43.weekyears();
        org.joda.time.DateTimeField dateTimeField46 = copticChronology43.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone47 = copticChronology43.getZone();
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology43);
        org.joda.time.DurationField durationField49 = copticChronology43.weekyears();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(chronology50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.dayOfWeek();
        int[] intArray58 = copticChronology43.get((org.joda.time.ReadablePartial) localDateTime55, 0L);
        int[] intArray60 = dateTimeField15.addWrapPartial((org.joda.time.ReadablePartial) localDateTime33, (int) (short) 0, intArray58, (int) ' ');
        org.joda.time.LocalDateTime.Property property61 = localDateTime33.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime62 = property61.roundHalfCeilingCopy();
        int int63 = localDateTime62.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.withCenturyOfEra(2000);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.chrono.CopticChronology copticChronology68 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone67);
        org.joda.time.DateTimeField dateTimeField69 = copticChronology68.hourOfDay();
        org.joda.time.DateTimeField dateTimeField70 = copticChronology68.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone71 = null;
        org.joda.time.Chronology chronology72 = copticChronology68.withZone(dateTimeZone71);
        org.joda.time.DateTimeField dateTimeField73 = copticChronology68.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField74 = copticChronology68.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone75 = copticChronology68.getZone();
        org.joda.time.DateTimeField dateTimeField76 = copticChronology68.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField77 = copticChronology68.weekOfWeekyear();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime(chronology78);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime79.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime79.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property86 = localDateTime85.weekyear();
        org.joda.time.LocalDateTime localDateTime88 = property86.setCopy((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime88.minusDays(10);
        int int91 = localDateTime90.getSecondOfMinute();
        org.joda.time.Chronology chronology92 = null;
        org.joda.time.LocalDateTime localDateTime93 = new org.joda.time.LocalDateTime(chronology92);
        org.joda.time.LocalDateTime localDateTime95 = localDateTime93.minusSeconds((int) (short) -1);
        int[] intArray96 = localDateTime95.getValues();
        int int97 = dateTimeField77.getMinimumValue((org.joda.time.ReadablePartial) localDateTime90, intArray96);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray99 = dateTimeField8.add((org.joda.time.ReadablePartial) localDateTime65, 129, intArray96, 681);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 129");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 256L + "'", long10 == 256L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 574L + "'", long12 == 574L);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(copticChronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "4" + "'", str26, "4");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-19T11:19:05.704" + "'", str36, "2022-02-19T11:19:05.704");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "-292275054" + "'", str39, "-292275054");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-19T11:19:05.704" + "'", str40, "2022-02-19T11:19:05.704");
        org.junit.Assert.assertNotNull(copticChronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(intArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[18, 4, 27, 14400000]");
        org.junit.Assert.assertNotNull(intArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[18, 4, 27, 14400000]");
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime62);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 5 + "'", int63 == 5);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(copticChronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(localDateTime90);
// flaky:         org.junit.Assert.assertTrue("'" + int91 + "' != '" + 5 + "'", int91 == 5);
        org.junit.Assert.assertNotNull(localDateTime95);
        org.junit.Assert.assertNotNull(intArray96);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[2022, 2, 26, 40746704]");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
    }

    @Test
    public void test01905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01905");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.weekOfWeekyear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime(readableInstant15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusMonths((int) '4');
        long long21 = copticChronology1.set((org.joda.time.ReadablePartial) localDateTime19, (long) 100);
        org.joda.time.DateTimeField dateTimeField22 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField23 = dateTimeField22.getLeapDurationField();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10040483945788L + "'", long21 == 10040483945788L);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNull(durationField23);
    }

    @Test
    public void test01906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01906");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.dayOfWeek();
        int int6 = copticChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.hourOfHalfday();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = copticChronology15.dayOfMonth();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.weekyear();
        org.joda.time.LocalDateTime localDateTime28 = property26.setCopy((int) (byte) 1);
        long long29 = property26.remainder();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime31.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.DateTime dateTime39 = localDateTime37.toDateTime(readableInstant38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.millisOfDay();
        int int41 = property26.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        int int42 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.chrono.CopticChronology copticChronology44 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField45 = copticChronology44.hourOfDay();
        org.joda.time.DateTimeField dateTimeField46 = copticChronology44.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Chronology chronology48 = copticChronology44.withZone(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField49 = copticChronology44.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology44.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone51 = copticChronology44.getZone();
        long long55 = copticChronology44.add((long) 15, (-3600001L), 2);
        org.joda.time.DateTimeField dateTimeField56 = copticChronology44.minuteOfDay();
        java.lang.String str57 = copticChronology44.toString();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(chronology58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime59.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property64 = localDateTime63.dayOfWeek();
        org.joda.time.DurationField durationField65 = property64.getDurationField();
        java.util.Locale.Category category66 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.chrono.CopticChronology copticChronology68 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone67);
        org.joda.time.DateTimeField dateTimeField69 = copticChronology68.dayOfMonth();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime(chronology70);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime71.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime71.plusWeeks((int) (byte) 10);
        java.util.Locale locale78 = java.util.Locale.PRC;
        java.lang.String str79 = dateTimeField69.getAsText((org.joda.time.ReadablePartial) localDateTime77, locale78);
        java.util.Set<java.lang.String> strSet80 = locale78.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category66, locale78);
        java.util.Locale locale82 = java.util.Locale.CHINESE;
        java.lang.String str83 = locale78.getDisplayScript(locale82);
        java.lang.String str84 = locale82.getDisplayLanguage();
        int int85 = property64.getMaximumTextLength(locale82);
        boolean boolean86 = copticChronology44.equals((java.lang.Object) locale82);
        int int87 = dateTimeField17.getMaximumTextLength(locale82);
        java.lang.String str88 = dateTimeField7.getAsText((org.joda.time.ReadablePartial) localDateTime11, (int) 'x', locale82);
        java.util.Set<java.lang.String> strSet89 = locale82.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 4706345861L + "'", long29 == 4706345861L);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 30 + "'", int42 == 30);
        org.junit.Assert.assertNotNull(copticChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-7199987L) + "'", long55 == (-7199987L));
        org.junit.Assert.assertNotNull(dateTimeField56);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "CopticChronology[+100:00]" + "'", str57, "CopticChronology[+100:00]");
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertTrue("'" + category66 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category66.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(copticChronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "7" + "'", str79, "7");
        org.junit.Assert.assertNotNull(strSet80);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\u4e2d\u6587" + "'", str84, "\u4e2d\u6587");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 3 + "'", int85 == 3);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "120" + "'", str88, "120");
        org.junit.Assert.assertNotNull(strSet89);
    }

    @Test
    public void test01907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01907");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-15T07:16:41.805");
        java.lang.String str2 = timeZone1.getID();
        int int4 = timeZone1.getOffset(360000974L);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GMT" + "'", str2, "GMT");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test01908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01908");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DurationField durationField7 = copticChronology1.months();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds(14);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test01909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01909");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.minusYears(999);
        int int19 = localDateTime9.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime9.minusSeconds(30);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.millisOfDay();
        java.util.Locale locale24 = java.util.Locale.JAPAN;
        java.lang.String str25 = locale24.getCountry();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.chrono.CopticChronology copticChronology27 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField28 = copticChronology27.hourOfDay();
        org.joda.time.DateTimeField dateTimeField29 = copticChronology27.centuryOfEra();
        org.joda.time.DurationField durationField30 = copticChronology27.millis();
        org.joda.time.DateTimeField dateTimeField31 = copticChronology27.weekOfWeekyear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(chronology32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime33.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(chronology40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.withMillisOfSecond((int) (byte) 1);
        int int46 = localDateTime33.compareTo((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime.Property property47 = localDateTime41.weekyear();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime41.minusMillis(2022);
        int[] intArray51 = copticChronology27.get((org.joda.time.ReadablePartial) localDateTime41, (long) '#');
        org.joda.time.DateTimeField dateTimeField52 = copticChronology27.halfdayOfDay();
        java.util.Locale.Category category54 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.chrono.CopticChronology copticChronology56 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone55);
        org.joda.time.DateTimeField dateTimeField57 = copticChronology56.dayOfMonth();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(chronology58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime59.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime59.plusWeeks((int) (byte) 10);
        java.util.Locale locale66 = java.util.Locale.PRC;
        java.lang.String str67 = dateTimeField57.getAsText((org.joda.time.ReadablePartial) localDateTime65, locale66);
        java.util.Set<java.lang.String> strSet68 = locale66.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category54, locale66);
        java.lang.String str70 = dateTimeField52.getAsText(26172895, locale66);
        java.lang.String str71 = locale24.getDisplayScript(locale66);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime72 = property22.setCopy("\u82f1\u56fd", locale66);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"??\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 57 + "'", int19 == 57);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "JP" + "'", str25, "JP");
        org.junit.Assert.assertNotNull(copticChronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(intArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1686, 4, 27, 14400035]");
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + category54 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category54.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(copticChronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "7" + "'", str67, "7");
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "26172895" + "'", str70, "26172895");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
    }

    @Test
    public void test01910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01910");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.millisOfDay();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.era();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray10 = copticChronology1.get(readablePeriod7, 937094400000L, 4346240986L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
    }

    @Test
    public void test01911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01911");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.minuteOfDay();
        org.joda.time.Chronology chronology5 = copticChronology1.withUTC();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField8 = copticChronology1.centuries();
        long long10 = durationField8.getValueAsLong((long) 728);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test01912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01912");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property16.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.clockhourOfDay();
        org.joda.time.DurationField durationField22 = copticChronology20.weekyears();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology20.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology20.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology20.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone26 = copticChronology20.getZone();
        java.util.Locale locale28 = java.util.Locale.GERMANY;
        java.lang.String str29 = locale28.getScript();
        java.lang.String str30 = locale28.getScript();
        java.lang.String str31 = locale28.getDisplayCountry();
        java.lang.String str32 = locale28.getVariant();
        java.lang.String str33 = dateTimeZone26.getName(0L, locale28);
        org.joda.time.LocalDateTime localDateTime34 = property16.setCopy("26184577", locale28);
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.chrono.CopticChronology copticChronology36 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = copticChronology36.hourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology36.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology36.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology36);
        org.joda.time.DateTimeField dateTimeField41 = copticChronology36.weekOfWeekyear();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(chronology42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime43.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(chronology50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.withMillisOfSecond((int) (byte) 1);
        int int56 = localDateTime43.compareTo((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.LocalDateTime.Property property57 = localDateTime51.weekyear();
        int[] intArray59 = copticChronology36.get((org.joda.time.ReadablePartial) localDateTime51, (long) 22);
        org.joda.time.LocalDateTime.Property property60 = localDateTime51.year();
        java.lang.Object obj61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime(obj61);
        boolean boolean63 = localDateTime51.isAfter((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = localDateTime51.toDateTime(dateTimeZone64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime(chronology66);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime67.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime67.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = localDateTime73.toDateTime(readableInstant74);
        org.joda.time.LocalDateTime.Property property76 = localDateTime73.millisOfDay();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime73.plusMonths((int) '4');
        org.joda.time.LocalDateTime.Property property79 = localDateTime73.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime80 = property79.roundHalfFloorCopy();
        int int81 = property79.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = property79.getFieldType();
        int int83 = dateTime65.get(dateTimeFieldType82);
        boolean boolean85 = dateTime65.equals((java.lang.Object) (-1.0d));
        int int86 = property16.compareTo((org.joda.time.ReadableInstant) dateTime65);
        java.lang.String str87 = property16.getAsShortText();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u5fb7\u56fd" + "'", str31, "\u5fb7\u56fd");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+100:00" + "'", str33, "+100:00");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(copticChronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(intArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[1686, 4, 27, 14400022]");
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 99 + "'", int81 == 99);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 22 + "'", int83 == 22);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "40746044" + "'", str87, "40746044");
    }

    @Test
    public void test01913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01913");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(25856001);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01914");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = copticChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology1.era();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = copticChronology1.getDateTimeMillis((long) 620, 22, 463, 589, 40731924);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 463 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test01915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01915");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.clockhourOfDay();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.weekyear();
        org.joda.time.LocalDateTime localDateTime17 = property15.setCopy((int) (byte) 1);
        org.joda.time.DurationField durationField18 = property15.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime19 = property15.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.weekOfWeekyear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime22.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.weekyear();
        org.joda.time.LocalDateTime localDateTime31 = property29.setCopy((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusDays(10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withWeekyear((int) (byte) 0);
        int[] intArray36 = localDateTime35.getValues();
        copticChronology1.validate((org.joda.time.ReadablePartial) localDateTime19, intArray36);
        org.joda.time.DateTimeField dateTimeField38 = copticChronology1.weekyearOfCentury();
        java.util.Locale locale40 = java.util.Locale.JAPANESE;
        boolean boolean41 = locale40.hasExtensions();
        boolean boolean42 = locale40.hasExtensions();
        java.lang.String str43 = dateTimeField38.getAsText(0L, locale40);
        java.lang.String str44 = locale40.getDisplayLanguage();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 2, 16, 40746278]");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ja");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "87" + "'", str43, "87");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u65e5\u6587" + "'", str44, "\u65e5\u6587");
    }

    @Test
    public void test01916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01916");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = copticChronology1.hours();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 2000);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMonths(122663);
        int int11 = localDateTime10.getDayOfYear();
        int[] intArray13 = copticChronology1.get((org.joda.time.ReadablePartial) localDateTime10, 10598401646747L);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = copticChronology1.getDateTimeMillis(4706322269L, 8, 792, 2000, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 792 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 339 + "'", int11 == 339);
        org.junit.Assert.assertNotNull(intArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[2022, 2, 29, 73646747]");
    }

    @Test
    public void test01917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01917");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.minusYears(999);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusDays(24);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.plusWeeks(0);
        org.joda.time.LocalDateTime.Property property23 = localDateTime18.centuryOfEra();
        int int24 = property23.get();
        org.joda.time.LocalDateTime localDateTime25 = property23.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date26 = localDateTime25.toDate();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -668 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 10 + "'", int24 == 10);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test01918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01918");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        boolean boolean11 = dateTime9.isSupported(dateTimeFieldType10);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        boolean boolean22 = dateTime9.isAfter((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.weekyearOfCentury();
        org.joda.time.DurationField durationField26 = copticChronology24.minutes();
        boolean boolean27 = dateTime21.equals((java.lang.Object) copticChronology24);
        org.joda.time.DateTimeField dateTimeField28 = copticChronology24.yearOfEra();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(chronology29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.dayOfWeek();
        org.joda.time.DurationField durationField36 = property35.getRangeDurationField();
        org.joda.time.DurationField durationField37 = property35.getDurationField();
        java.util.Locale locale38 = java.util.Locale.GERMANY;
        java.lang.String str39 = locale38.getScript();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.chrono.CopticChronology copticChronology41 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField42 = copticChronology41.clockhourOfDay();
        java.util.Locale locale44 = java.util.Locale.ITALIAN;
        java.lang.String str45 = dateTimeField42.getAsText((long) 'a', locale44);
        java.lang.String str46 = locale38.getDisplayName(locale44);
        java.lang.String str47 = locale44.getISO3Language();
        boolean boolean48 = locale44.hasExtensions();
        java.lang.String str49 = locale44.getVariant();
        java.lang.String str50 = property35.getAsShortText(locale44);
        boolean boolean51 = copticChronology24.equals((java.lang.Object) property35);
        org.joda.time.LocalDateTime localDateTime52 = property35.withMinimumValue();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(chronology53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime54.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime54.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.weekyear();
        org.joda.time.LocalDateTime localDateTime63 = property61.setCopy((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusDays(10);
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.secondOfMinute();
        int int67 = localDateTime52.compareTo((org.joda.time.ReadablePartial) localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(copticChronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "4" + "'", str45, "4");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "tedesco (Germania)" + "'", str46, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ita" + "'", str47, "ita");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "sab" + "'", str50, "sab");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test01919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01919");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = copticChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.Chronology chronology9 = copticChronology1.withZone(dateTimeZone8);
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.dayOfMonth();
        org.joda.time.DurationField durationField12 = copticChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology10.weekOfWeekyear();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test01920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01920");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        long long6 = copticChronology1.add((long) '#', (long) 'a', (int) '#');
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.clockhourOfHalfday();
        boolean boolean9 = copticChronology1.equals((java.lang.Object) 1.0d);
        org.joda.time.DurationField durationField10 = copticChronology1.halfdays();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology1.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology1.year();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 3430L + "'", long6 == 3430L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test01921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01921");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray2 = localDateTime1.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withMillisOfDay((int) (byte) 0);
        int int5 = localDateTime4.getYear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.yearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusMonths(16601);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readablePeriod9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.era();
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.dayOfMonth();
        org.joda.time.DurationField durationField13 = property12.getRangeDurationField();
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test01922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01922");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.millisOfDay();
        java.lang.String str11 = property10.getName();
        org.joda.time.Interval interval12 = property10.toInterval();
        org.joda.time.LocalDateTime localDateTime13 = property10.getLocalDateTime();
        java.lang.String str14 = property10.toString();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "millisOfDay" + "'", str11, "millisOfDay");
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Property[millisOfDay]" + "'", str14, "Property[millisOfDay]");
    }

    @Test
    public void test01923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01923");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.lang.String str3 = dateTimeZone1.getNameKey((long) (byte) 0);
        boolean boolean4 = dateTimeZone1.isFixed();
        java.lang.String str6 = dateTimeZone1.getShortName(3430L);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        long long10 = dateTimeZone1.getMillisKeepLocal(dateTimeZone8, 82800001L);
        java.lang.Object obj11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(obj11);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = localDateTime14.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.chrono.CopticChronology copticChronology22 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone21);
        org.joda.time.DateTimeField dateTimeField23 = copticChronology22.hourOfDay();
        org.joda.time.DateTimeField dateTimeField24 = copticChronology22.secondOfDay();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology22.secondOfDay();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) copticChronology22);
        int int27 = localDateTime26.getDayOfYear();
        boolean boolean28 = localDateTime19.isEqual((org.joda.time.ReadablePartial) localDateTime26);
        int int29 = localDateTime19.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.chrono.CopticChronology copticChronology32 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone31);
        org.joda.time.DateTimeField dateTimeField33 = copticChronology32.hourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = copticChronology32.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.Chronology chronology36 = copticChronology32.withZone(dateTimeZone35);
        org.joda.time.DateTimeField dateTimeField37 = copticChronology32.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology32.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology32.year();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology32.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 761, (org.joda.time.Chronology) copticChronology32);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(chronology42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime43.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.weekyear();
        org.joda.time.LocalDateTime localDateTime52 = property50.setCopy((int) (byte) 1);
        long long53 = property50.remainder();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(chronology54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime55.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime55.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.DateTime dateTime63 = localDateTime61.toDateTime(readableInstant62);
        org.joda.time.LocalDateTime.Property property64 = localDateTime61.millisOfDay();
        int int65 = property50.compareTo((org.joda.time.ReadablePartial) localDateTime61);
        boolean boolean67 = property50.equals((java.lang.Object) 342L);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = property50.getFieldType();
        org.joda.time.LocalDateTime.Property property69 = localDateTime41.property(dateTimeFieldType68);
        int int70 = localDateTime19.get(dateTimeFieldType68);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime12.withField(dateTimeFieldType68, (int) 'a');
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.plusYears(0);
        boolean boolean75 = dateTimeZone8.isLocalDateTimeGap(localDateTime74);
        boolean boolean76 = dateTimeZone8.isFixed();
        java.util.TimeZone timeZone78 = null;
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forTimeZone(timeZone78);
        java.lang.String str81 = dateTimeZone79.getNameKey((long) (byte) 0);
        long long84 = dateTimeZone79.convertLocalToUTC((-9223318860868800000L), false);
        org.joda.time.DateTimeZone dateTimeZone86 = null;
        org.joda.time.chrono.CopticChronology copticChronology87 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone86);
        org.joda.time.DateTimeField dateTimeField88 = copticChronology87.dayOfMonth();
        java.util.Locale locale92 = new java.util.Locale("hi!", "hi!");
        java.lang.String str93 = dateTimeField88.getAsText((int) (byte) 10, locale92);
        java.lang.String str94 = dateTimeZone79.getName((long) 964, locale92);
        java.lang.String str95 = dateTimeZone8.getShortName(0L, locale92);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+100:00" + "'", str6, "+100:00");
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 442800001L + "'", long10 == 442800001L);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(copticChronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 117 + "'", int27 == 117);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 22 + "'", int29 == 22);
        org.junit.Assert.assertNotNull(copticChronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + 4706346647L + "'", long53 == 4706346647L);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2022 + "'", int70 == 2022);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(dateTimeZone79);
// flaky:         org.junit.Assert.assertNull(str81);
// flaky:         org.junit.Assert.assertTrue("'" + long84 + "' != '" + (-9223318861228800000L) + "'", long84 == (-9223318861228800000L));
        org.junit.Assert.assertNotNull(copticChronology87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertEquals(locale92.toString(), "hi!_HI!");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "10" + "'", str93, "10");
// flaky:         org.junit.Assert.assertEquals("'" + str94 + "' != '" + "+100:00" + "'", str94, "+100:00");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "+00:00" + "'", str95, "+00:00");
    }

    @Test
    public void test01924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01924");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.centuryOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime(readableInstant14);
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        boolean boolean17 = locale16.hasExtensions();
        boolean boolean18 = dateTime15.equals((java.lang.Object) locale16);
        int int19 = property5.getDifference((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalDateTime localDateTime20 = property5.roundHalfEvenCopy();
        int int21 = localDateTime20.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withEra(602);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 602 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test01925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01925");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = copticChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DurationField durationField7 = copticChronology1.weekyears();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        int[] intArray16 = copticChronology1.get((org.joda.time.ReadablePartial) localDateTime13, 0L);
        org.joda.time.DurationField durationField17 = copticChronology1.minutes();
        org.joda.time.Chronology chronology18 = copticChronology1.withUTC();
        long long22 = copticChronology1.add((-31449599999L), (long) 25855001, 24);
        java.lang.Object obj23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(obj23);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology25);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = localDateTime26.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusWeeks((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.chrono.CopticChronology copticChronology34 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = copticChronology34.hourOfDay();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology34.secondOfDay();
        org.joda.time.DateTimeField dateTimeField37 = copticChronology34.secondOfDay();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 10, (org.joda.time.Chronology) copticChronology34);
        int int39 = localDateTime38.getDayOfYear();
        boolean boolean40 = localDateTime31.isEqual((org.joda.time.ReadablePartial) localDateTime38);
        int int41 = localDateTime31.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.chrono.CopticChronology copticChronology44 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField45 = copticChronology44.hourOfDay();
        org.joda.time.DateTimeField dateTimeField46 = copticChronology44.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.Chronology chronology48 = copticChronology44.withZone(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField49 = copticChronology44.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField50 = copticChronology44.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField51 = copticChronology44.year();
        org.joda.time.DateTimeField dateTimeField52 = copticChronology44.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) 761, (org.joda.time.Chronology) copticChronology44);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(chronology54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime55.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime55.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property62 = localDateTime61.weekyear();
        org.joda.time.LocalDateTime localDateTime64 = property62.setCopy((int) (byte) 1);
        long long65 = property62.remainder();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime(chronology66);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime67.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime67.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.DateTime dateTime75 = localDateTime73.toDateTime(readableInstant74);
        org.joda.time.LocalDateTime.Property property76 = localDateTime73.millisOfDay();
        int int77 = property62.compareTo((org.joda.time.ReadablePartial) localDateTime73);
        boolean boolean79 = property62.equals((java.lang.Object) 342L);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = property62.getFieldType();
        org.joda.time.LocalDateTime.Property property81 = localDateTime53.property(dateTimeFieldType80);
        int int82 = localDateTime31.get(dateTimeFieldType80);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime24.withField(dateTimeFieldType80, (int) 'a');
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.plusYears(0);
        int[] intArray88 = copticChronology1.get((org.joda.time.ReadablePartial) localDateTime84, 4346153397L);
        org.joda.time.DateTimeField dateTimeField89 = copticChronology1.millisOfSecond();
        org.joda.time.ReadablePeriod readablePeriod90 = null;
        long long93 = copticChronology1.add(readablePeriod90, (long) 26185925, 50);
        org.joda.time.DateTimeField dateTimeField94 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField95 = copticChronology1.centuryOfEra();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(intArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[1686, 4, 27, 14400000]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-30829079975L) + "'", long22 == (-30829079975L));
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(copticChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 117 + "'", int39 == 117);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 22 + "'", int41 == 22);
        org.junit.Assert.assertNotNull(copticChronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
// flaky:         org.junit.Assert.assertTrue("'" + long65 + "' != '" + 4706346727L + "'", long65 == 4706346727L);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2022 + "'", int82 == 2022);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(intArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[1686, 6, 17, 40553397]");
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 26185925L + "'", long93 == 26185925L);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(dateTimeField95);
    }

    @Test
    public void test01926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01926");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology2.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.Chronology chronology6 = copticChronology2.withZone(dateTimeZone5);
        org.joda.time.DateTimeField dateTimeField7 = copticChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology2.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology2.year();
        org.joda.time.DateTimeField dateTimeField10 = copticChronology2.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 761, (org.joda.time.Chronology) copticChronology2);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.withPeriodAdded(readablePeriod12, 26217164);
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.millisOfDay();
        java.lang.String str16 = property15.getAsString();
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "14400761" + "'", str16, "14400761");
    }

    @Test
    public void test01927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01927");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-15T07:16:10.674");
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.era();
        org.joda.time.LocalDateTime localDateTime3 = property2.roundHalfCeilingCopy();
        int int4 = property2.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test01928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01928");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        org.joda.time.DurationField durationField11 = property8.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime12 = property8.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = property8.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test01929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01929");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("weekyear");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder6 = builder2.setExtension('u', "86");
        java.util.Locale.Builder builder7 = builder6.clear();
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.lang.String str9 = locale8.getDisplayLanguage();
        java.util.Locale.Builder builder10 = builder7.setLocale(locale8);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder10.setScript("2022-02-22T07:16:45.251");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2022-02-22T07:16:45.251 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u4e2d\u6587" + "'", str9, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test01930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01930");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.dayOfMonth();
        java.util.Locale locale6 = new java.util.Locale("hi!", "hi!");
        java.lang.String str7 = dateTimeField2.getAsText((int) (byte) 10, locale6);
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        java.lang.String str12 = dateTimeZone10.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(dateTimeZone10);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.chrono.CopticChronology copticChronology16 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField17 = copticChronology16.dayOfMonth();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime19.plusWeeks((int) (byte) 10);
        java.util.Locale locale26 = java.util.Locale.PRC;
        java.lang.String str27 = dateTimeField17.getAsText((org.joda.time.ReadablePartial) localDateTime25, locale26);
        java.lang.String str28 = dateTimeZone10.getName((long) 242, locale26);
        java.lang.String str29 = locale26.getISO3Country();
        java.lang.String str30 = dateTimeField2.getAsShortText((int) ' ', locale26);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = locale26.getUnicodeLocaleType("2022-02-22T07:18:02.187");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-22T07:18:02.187");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_HI!");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "10" + "'", str7, "10");
        org.junit.Assert.assertNotNull(dateTimeZone10);
// flaky:         org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(copticChronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "7" + "'", str27, "7");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+100:00" + "'", str28, "+100:00");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "CHN" + "'", str29, "CHN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "32" + "'", str30, "32");
    }

    @Test
    public void test01931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01931");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DurationField durationField4 = copticChronology1.hours();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone6 = copticChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.clockhourOfDay();
        org.joda.time.Chronology chronology8 = copticChronology1.withUTC();
        org.joda.time.DurationField durationField9 = copticChronology1.hours();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
    }

    @Test
    public void test01932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01932");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        int int4 = dateTimeZone2.getStandardOffset((long) 2922728);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(32054400000L, dateTimeZone2);
        int int7 = dateTimeZone2.getOffset(1972512000000L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test01933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01933");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.centuryOfEra();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime(readableInstant14);
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        boolean boolean17 = locale16.hasExtensions();
        boolean boolean18 = dateTime15.equals((java.lang.Object) locale16);
        int int19 = property5.getDifference((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalDateTime localDateTime20 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusWeeks(26272678);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField24 = localDateTime20.getField(192);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 192");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test01934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01934");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DurationField durationField4 = copticChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekyear();
        int int6 = dateTimeField5.getMinimumValue();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withMillisOfSecond((int) (byte) 1);
        int int21 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property22 = localDateTime16.weekyear();
        org.joda.time.LocalDateTime.Property property23 = localDateTime16.millisOfDay();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime(readableInstant32);
        java.util.Locale locale34 = java.util.Locale.GERMANY;
        boolean boolean35 = locale34.hasExtensions();
        boolean boolean36 = dateTime33.equals((java.lang.Object) locale34);
        java.lang.String str37 = dateTimeField5.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, locale34);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.chrono.CopticChronology copticChronology39 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField40 = copticChronology39.hourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = copticChronology39.centuryOfEra();
        org.joda.time.DurationField durationField42 = copticChronology39.millis();
        org.joda.time.DateTimeField dateTimeField43 = copticChronology39.weekOfWeekyear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(chronology44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime45.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime45.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(chronology52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime53.withMillisOfSecond((int) (byte) 1);
        int int58 = localDateTime45.compareTo((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.LocalDateTime.Property property59 = localDateTime53.weekyear();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime53.minusMillis(2022);
        int[] intArray63 = copticChronology39.get((org.joda.time.ReadablePartial) localDateTime53, (long) '#');
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        long long67 = copticChronology39.add(readablePeriod64, 4346143961L, 984);
        long long71 = copticChronology39.add((long) 242, (long) 246, 15);
        org.joda.time.DateTimeField dateTimeField72 = copticChronology39.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((java.lang.Object) dateTimeField5, (org.joda.time.Chronology) copticChronology39);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.ZonedChronology$ZonedDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-292269338) + "'", int6 == (-292269338));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022" + "'", str37, "2022");
        org.junit.Assert.assertNotNull(copticChronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(intArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1686, 4, 27, 14400035]");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 4346143961L + "'", long67 == 4346143961L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 3932L + "'", long71 == 3932L);
        org.junit.Assert.assertNotNull(dateTimeField72);
    }

    @Test
    public void test01935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01935");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = copticChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.weekOfWeekyear();
        long long12 = dateTimeField9.getDifferenceAsLong(311040000000500L, 3430L);
        boolean boolean14 = dateTimeField9.isLeap(2628588051734400000L);
        int int15 = dateTimeField9.getMinimumValue();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 514285L + "'", long12 == 514285L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test01936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01936");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DurationField durationField7 = copticChronology1.months();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.millisOfDay();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.hourOfHalfday();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test01937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01937");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = copticChronology1.getZone();
        org.joda.time.DurationField durationField9 = copticChronology1.seconds();
        org.joda.time.DurationField durationField10 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology1.secondOfDay();
        int int13 = copticChronology1.getMinimumDaysInFirstWeek();
        // The following exception was thrown during execution in test generation
        try {
            long long19 = copticChronology1.getDateTimeMillis(10598109048001L, 327, 25858001, 26242843, 443);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 327 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
    }

    @Test
    public void test01938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01938");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("weekyear");
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder6 = builder2.setExtension('u', "86");
        java.util.Locale.Builder builder8 = builder6.setVariant("");
        java.util.Locale.Builder builder10 = builder8.addUnicodeLocaleAttribute("halfdays");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder8.setScript("dopo Cristo");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: dopo Cristo [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test01939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01939");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("26226977");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=26226977");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01940");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        long long6 = copticChronology1.add((long) '#', (long) 'a', (int) '#');
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.era();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.chrono.CopticChronology copticChronology10 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone9);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology10.clockhourOfDay();
        org.joda.time.DurationField durationField12 = copticChronology10.weekyears();
        org.joda.time.DurationField durationField13 = copticChronology10.centuries();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology10.weekyear();
        int int15 = dateTimeField14.getMinimumValue();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withMillisOfSecond((int) (byte) 1);
        int int30 = localDateTime17.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime.Property property31 = localDateTime25.weekyear();
        org.joda.time.LocalDateTime.Property property32 = localDateTime25.millisOfDay();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(chronology33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDateTime40.toDateTime(readableInstant41);
        java.util.Locale locale43 = java.util.Locale.GERMANY;
        boolean boolean44 = locale43.hasExtensions();
        boolean boolean45 = dateTime42.equals((java.lang.Object) locale43);
        java.lang.String str46 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) localDateTime25, locale43);
        java.lang.String str47 = locale43.getDisplayCountry();
        java.lang.String str48 = locale43.getLanguage();
        java.lang.String str49 = locale43.getDisplayName();
        java.lang.String str50 = locale43.getLanguage();
        java.lang.String str51 = locale43.toLanguageTag();
        java.util.Locale locale52 = locale43.stripExtensions();
        java.lang.String str53 = dateTimeField7.getAsShortText((long) 201, locale52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(chronology54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime55.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime55.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property62 = localDateTime61.weekyear();
        org.joda.time.LocalDateTime localDateTime64 = property62.setCopy((int) (byte) 1);
        org.joda.time.DurationField durationField65 = property62.getDurationField();
        org.joda.time.LocalDateTime localDateTime66 = property62.roundHalfCeilingCopy();
        int int67 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localDateTime66);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 3430L + "'", long6 == 3430L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(copticChronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-292269338) + "'", int15 == (-292269338));
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022" + "'", str46, "2022");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u5fb7\u56fd" + "'", str47, "\u5fb7\u56fd");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "de" + "'", str48, "de");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u5fb7\u6587\u5fb7\u56fd)" + "'", str49, "\u5fb7\u6587\u5fb7\u56fd)");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "de" + "'", str50, "de");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "de-DE" + "'", str51, "de-DE");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "AM" + "'", str53, "AM");
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
    }

    @Test
    public void test01941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01941");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = property10.withMaximumValue();
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.lang.String str13 = locale12.getScript();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.chrono.CopticChronology copticChronology15 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField16 = copticChronology15.clockhourOfDay();
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.lang.String str19 = dateTimeField16.getAsText((long) 'a', locale18);
        java.lang.String str20 = locale12.getDisplayName(locale18);
        java.lang.String str21 = property10.getAsShortText(locale12);
        java.util.Locale.Category category22 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeZone dateTimeZone23 = null;
        org.joda.time.chrono.CopticChronology copticChronology24 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone23);
        org.joda.time.DateTimeField dateTimeField25 = copticChronology24.dayOfMonth();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime27.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.plusWeeks((int) (byte) 10);
        java.util.Locale locale34 = java.util.Locale.PRC;
        java.lang.String str35 = dateTimeField25.getAsText((org.joda.time.ReadablePartial) localDateTime33, locale34);
        java.util.Set<java.lang.String> strSet36 = locale34.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category22, locale34);
        java.util.Locale locale38 = java.util.Locale.CHINESE;
        java.lang.String str39 = locale34.getDisplayScript(locale38);
        java.lang.String str40 = locale38.getDisplayLanguage();
        int int41 = property10.getMaximumShortTextLength(locale38);
        java.util.Set<java.lang.String> strSet42 = locale38.getUnicodeLocaleKeys();
        java.util.stream.Stream<java.lang.String> strStream43 = strSet42.parallelStream();
        java.lang.Object[] objArray44 = strSet42.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator45 = strSet42.spliterator();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(copticChronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "4" + "'", str19, "4");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "tedesco (Germania)" + "'", str20, "tedesco (Germania)");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "40747694" + "'", str21, "40747694");
        org.junit.Assert.assertTrue("'" + category22 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category22.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(copticChronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "7" + "'", str35, "7");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u4e2d\u6587" + "'", str40, "\u4e2d\u6587");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 8 + "'", int41 == 8);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(strStream43);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertNotNull(strSpliterator45);
    }

    @Test
    public void test01942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01942");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.minuteOfDay();
        org.joda.time.DurationField durationField5 = copticChronology1.centuries();
        org.joda.time.DurationField durationField6 = copticChronology1.millis();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test01943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01943");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.clockhourOfDay();
        org.joda.time.DurationField durationField4 = copticChronology2.weekyears();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology2.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = copticChronology2.getZone();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology2);
        org.joda.time.DurationField durationField8 = copticChronology2.weekyears();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(4346159663L, (org.joda.time.Chronology) copticChronology2);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.minuteOfHour();
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test01944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01944");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("40698548");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '40698548' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01945");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.hourOfHalfday();
        long long9 = copticChronology1.add((long) 242, 0L, 766);
        org.joda.time.DurationField durationField10 = copticChronology1.minutes();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology1.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = copticChronology1.getDateTimeMillis(26284924, 16, 943, 40707113);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 16 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 242L + "'", long9 == 242L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test01946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01946");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusDays(783);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfEra(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test01947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01947");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        long long11 = property8.remainder();
        org.joda.time.LocalDateTime localDateTime12 = property8.withMinimumValue();
        int int13 = property8.getLeapAmount();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.weekOfWeekyear();
        java.lang.String str19 = property18.getAsText();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(readableInstant28);
        java.util.Locale locale30 = java.util.Locale.GERMANY;
        boolean boolean31 = locale30.hasExtensions();
        boolean boolean32 = dateTime29.equals((java.lang.Object) locale30);
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Collection<java.lang.String> strCollection36 = null;
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, strCollection36);
        java.util.Collection<java.lang.String> strCollection38 = null;
        java.util.List<java.lang.String> strList39 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, strCollection38);
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.util.Collection<java.lang.String> strCollection43 = null;
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, strCollection43);
        java.util.Collection<java.lang.String> strCollection45 = null;
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, strCollection45);
        java.util.Locale.FilteringMode filteringMode47 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList48 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, strCollection45, filteringMode47);
        boolean boolean49 = dateTime29.equals((java.lang.Object) languageRangeList34);
        int int50 = property18.compareTo((org.joda.time.ReadableInstant) dateTime29);
        long long51 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.LocalDateTime localDateTime52 = property8.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField54 = localDateTime52.getField(173);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 173");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4706348117L + "'", long11 == 4706348117L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "7" + "'", str19, "7");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(languageRangeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertTrue("'" + filteringMode47 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode47.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(localDateTime52);
    }

    @Test
    public void test01948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01948");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.dayOfMonth();
        org.joda.time.DurationField durationField4 = copticChronology1.weeks();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.halfdayOfDay();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test01949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01949");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = copticChronology1.getZone();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((org.joda.time.Chronology) copticChronology1);
        org.joda.time.DateTimeField dateTimeField11 = copticChronology1.centuryOfEra();
        java.lang.String str13 = dateTimeField11.getAsShortText(0L);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "17" + "'", str13, "17");
    }

    @Test
    public void test01950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01950");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusMonths((int) '4');
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.chrono.CopticChronology copticChronology14 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = copticChronology14.clockhourOfDay();
        org.joda.time.DurationField durationField16 = copticChronology14.months();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.Chronology chronology18 = copticChronology14.withZone(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.chrono.CopticChronology copticChronology20 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone19);
        org.joda.time.DateTimeField dateTimeField21 = copticChronology20.clockhourOfDay();
        org.joda.time.DurationField durationField22 = copticChronology20.weekyears();
        org.joda.time.DateTimeField dateTimeField23 = copticChronology20.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = copticChronology20.getZone();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology20);
        org.joda.time.DurationField durationField26 = copticChronology20.weekyears();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.dayOfWeek();
        int[] intArray35 = copticChronology20.get((org.joda.time.ReadablePartial) localDateTime32, 0L);
        org.joda.time.DurationField durationField36 = copticChronology20.minutes();
        org.joda.time.Chronology chronology37 = copticChronology20.withUTC();
        boolean boolean38 = copticChronology14.equals((java.lang.Object) copticChronology20);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime12, (org.joda.time.Chronology) copticChronology20);
        // The following exception was thrown during execution in test generation
        try {
            long long47 = copticChronology20.getDateTimeMillis((-292269338), (int) (short) 1, (-22), 19115, 281, 26209356, 246);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 19115 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(copticChronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(copticChronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(intArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[1686, 4, 27, 14400000]");
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test01951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01951");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime.Property property16 = localDateTime9.millisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField18 = property16.getDurationField();
        org.joda.time.LocalDateTime localDateTime19 = property16.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime20 = property16.roundHalfEvenCopy();
        java.lang.String str21 = property16.getName();
        int int22 = property16.getLeapAmount();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "millisOfDay" + "'", str21, "millisOfDay");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test01952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01952");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = copticChronology1.getZone();
        long long12 = copticChronology1.add((long) 15, (-3600001L), 2);
        org.joda.time.DateTimeField dateTimeField13 = copticChronology1.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long18 = copticChronology1.getDateTimeMillis(103, 1, 734, 193);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 734 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-7199987L) + "'", long12 == (-7199987L));
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test01953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01953");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = copticChronology1.millis();
        org.joda.time.DurationField durationField5 = copticChronology1.months();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.clockhourOfHalfday();
        org.joda.time.DurationField durationField7 = copticChronology1.seconds();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = localDateTime9.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withMillisOfDay((int) (byte) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withMillisOfSecond((int) (byte) 1);
        boolean boolean19 = localDateTime9.isAfter((org.joda.time.ReadablePartial) localDateTime14);
        int[] intArray21 = copticChronology1.get((org.joda.time.ReadablePartial) localDateTime14, 10598109404691L);
        org.joda.time.DurationField durationField22 = copticChronology1.halfdays();
        // The following exception was thrown during execution in test generation
        try {
            long long24 = durationField22.getMillis(10598109522110L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 10598109522110 * 43200000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[2022, 2, 26, 40604691]");
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test01954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01954");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusDays(100);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime14 = property12.addToCopy((long) 724);
        org.joda.time.LocalDateTime localDateTime16 = property12.addWrapFieldToCopy(112);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.yearOfEra();
        boolean boolean18 = property17.isLeap();
        org.joda.time.LocalDateTime localDateTime20 = property17.addToCopy(25802001);
        int int21 = localDateTime20.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 11 + "'", int21 == 11);
    }

    @Test
    public void test01955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01955");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.Chronology chronology5 = copticChronology1.withZone(dateTimeZone4);
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.millisOfSecond();
        org.joda.time.DurationField durationField7 = copticChronology1.hours();
        long long10 = durationField7.add(2419200559L, 964);
        long long13 = durationField7.getValueAsLong((long) 103, 10593316800000L);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 5889600559L + "'", long10 == 5889600559L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test01956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01956");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minus(readableDuration1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.plusYears(20);
        int int5 = localDateTime0.getMillisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 463 + "'", int5 == 463);
    }

    @Test
    public void test01957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01957");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        int int8 = localDateTime7.getMillisOfSecond();
        int int9 = localDateTime7.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.plusHours((int) (short) -1);
        int int12 = localDateTime11.size();
        int int13 = localDateTime11.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.minusDays(335);
        int int16 = localDateTime15.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 487 + "'", int8 == 487);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 487 + "'", int9 == 487);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 37148487 + "'", int13 == 37148487);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20 + "'", int16 == 20);
    }

    @Test
    public void test01958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01958");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2022-02-22T07:17:27.832", (double) 342L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=342.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01959");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DurationField durationField4 = copticChronology1.hours();
        int int5 = copticChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField6 = copticChronology1.centuries();
        boolean boolean7 = durationField6.isPrecise();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.hourOfDay();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology9.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField12 = copticChronology9.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField13 = copticChronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField14 = copticChronology9.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology9.dayOfWeek();
        org.joda.time.DurationField durationField16 = copticChronology9.minutes();
        int int17 = durationField6.compareTo(durationField16);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test01960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01960");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = copticChronology1.getZone();
        org.joda.time.DurationField durationField6 = copticChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.hourOfHalfday();
        org.joda.time.DurationField durationField8 = copticChronology1.centuries();
        long long11 = durationField8.getValueAsLong(10040483758014L, 4346192931L);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 3L + "'", long11 == 3L);
    }

    @Test
    public void test01961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01961");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("2019-02-22T07:17:54.001", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01962");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = property10.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withDate(9806, 984, 524);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 984 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test01963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01963");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset(0L);
        boolean boolean3 = timeZone0.observesDaylightTime();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        boolean boolean5 = timeZone0.hasSameRules(timeZone4);
        boolean boolean6 = timeZone4.observesDaylightTime();
        timeZone4.setRawOffset((int) (byte) -1);
        java.lang.String str9 = timeZone4.getDisplayName();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4" + "'", str9, "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
    }

    @Test
    public void test01964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01964");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime7.withHourOfDay(775);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 775 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test01965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01965");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.millisOfDay();
        org.joda.time.DurationField durationField6 = copticChronology1.weeks();
        org.joda.time.DurationFieldType durationFieldType7 = durationField6.getType();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.chrono.CopticChronology copticChronology9 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone8);
        org.joda.time.DateTimeField dateTimeField10 = copticChronology9.clockhourOfDay();
        org.joda.time.DurationField durationField11 = copticChronology9.weekyears();
        org.joda.time.DurationField durationField12 = copticChronology9.centuries();
        long long15 = durationField12.add((long) (byte) 100, (long) 2);
        long long18 = durationField12.subtract(2L, (int) (byte) -1);
        int int19 = durationField6.compareTo(durationField12);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(copticChronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 6311520000100L + "'", long15 == 6311520000100L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 3155760000002L + "'", long18 == 3155760000002L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test01966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01966");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.secondOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.yearOfCentury();
        org.joda.time.DurationField durationField6 = copticChronology1.eras();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.millisOfDay();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        int int9 = localDateTime8.getDayOfMonth();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 19 + "'", int9 == 19);
    }

    @Test
    public void test01967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01967");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet3);
    }

    @Test
    public void test01968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01968");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        int int2 = timeZone0.getOffset(0L);
        boolean boolean3 = timeZone0.observesDaylightTime();
        timeZone0.setRawOffset(514);
        java.lang.Object obj6 = timeZone0.clone();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(obj6);
// flaky:         org.junit.Assert.assertEquals(obj6.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=514,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=514,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=514,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test01969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01969");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("26226977", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=26226977");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01970");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime1.year();
        int int7 = localDateTime1.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime1.plusMonths(999);
        org.joda.time.LocalDateTime.Property property10 = localDateTime1.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime11 = property10.getLocalDateTime();
        java.lang.String str12 = property10.toString();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Property[dayOfWeek]" + "'", str12, "Property[dayOfWeek]");
    }

    @Test
    public void test01971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01971");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale.Builder builder4 = builder2.setLanguage("ita");
        java.util.Locale.Category category5 = java.util.Locale.Category.DISPLAY;
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.dayOfMonth();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.plusWeeks((int) (byte) 10);
        java.util.Locale locale17 = java.util.Locale.PRC;
        java.lang.String str18 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDateTime16, locale17);
        java.util.Set<java.lang.String> strSet19 = locale17.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category5, locale17);
        java.util.Locale locale21 = java.util.Locale.CHINESE;
        java.lang.String str22 = locale17.getDisplayScript(locale21);
        java.util.Locale.Builder builder23 = builder4.setLocale(locale17);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder25 = builder23.addUnicodeLocaleAttribute("2000-01-01T00:00:00.000");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2000-01-01T00:00:00.000 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category5.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "7" + "'", str18, "7");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test01972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01972");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(292272708, 673, 499, 2916391, 26213873);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2916391 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01973");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        long long6 = durationField3.subtract((long) (byte) 1, 1);
        java.lang.String str7 = durationField3.toString();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withMillisOfSecond((int) (byte) 1);
        int int22 = localDateTime9.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime.Property property23 = localDateTime17.weekyear();
        org.joda.time.LocalDateTime.Property property24 = localDateTime17.millisOfDay();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundHalfCeilingCopy();
        org.joda.time.DurationField durationField26 = property24.getDurationField();
        int int27 = durationField3.compareTo(durationField26);
        long long29 = durationField26.getMillis(40726001);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-31449599999L) + "'", long6 == (-31449599999L));
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DurationField[weekyears]" + "'", str7, "DurationField[weekyears]");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 40726001L + "'", long29 == 40726001L);
    }

    @Test
    public void test01974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01974");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.eras();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.weekOfWeekyear();
        java.util.Locale locale7 = new java.util.Locale("2022-02-15T07:15:51.406");
        java.lang.String str8 = dateTimeField4.getAsShortText(0, locale7);
        int int11 = dateTimeField4.getDifference(10598109519540L, 33208471094957L);
        long long13 = dateTimeField4.remainder(2489894640000000L);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals(locale7.toString(), "2022-02-15t07:15:51.406");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0" + "'", str8, "0");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-37384) + "'", int11 == (-37384));
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 187200000L + "'", long13 == 187200000L);
    }

    @Test
    public void test01975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01975");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.DurationField durationField16 = property15.getRangeDurationField();
        org.joda.time.DurationField durationField17 = property15.getDurationField();
        org.joda.time.LocalDateTime localDateTime18 = property15.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime19 = property15.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withDate(26286583, 26213873, 713);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26213873 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test01976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01976");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusYears((-292269338));
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withSecondOfMinute(1);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMinutes(764);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test01977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01977");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = copticChronology1.hours();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.millisOfSecond();
        org.joda.time.DurationField durationField6 = copticChronology1.eras();
        // The following exception was thrown during execution in test generation
        try {
            long long9 = durationField6.add((long) 54, (long) 742);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test01978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01978");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.chrono.CopticChronology copticChronology7 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone6);
        org.joda.time.DateTimeField dateTimeField8 = copticChronology7.hourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology7.centuryOfEra();
        org.joda.time.DurationField durationField10 = copticChronology7.millis();
        org.joda.time.DateTimeField dateTimeField11 = copticChronology7.weekOfWeekyear();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withMillisOfSecond((int) (byte) 1);
        int int26 = localDateTime13.compareTo((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime.Property property27 = localDateTime21.weekyear();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime21.minusMillis(2022);
        int[] intArray31 = copticChronology7.get((org.joda.time.ReadablePartial) localDateTime21, (long) '#');
        long long33 = copticChronology1.set((org.joda.time.ReadablePartial) localDateTime21, 32054400000L);
        org.joda.time.DateTimeField dateTimeField34 = copticChronology1.weekyearOfCentury();
        java.lang.String str35 = copticChronology1.toString();
        org.joda.time.DurationField durationField36 = copticChronology1.eras();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(copticChronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(intArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[1686, 4, 27, 14400035]");
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 10598109549262L + "'", long33 == 10598109549262L);
        org.junit.Assert.assertNotNull(dateTimeField34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "CopticChronology[+100:00]" + "'", str35, "CopticChronology[+100:00]");
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test01979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01979");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long15 = copticChronology1.getDateTimeMillis(10040483838470L, 889, (-70), 10, 40731924);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 889 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test01980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01980");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = copticChronology1.getZone();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology1);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.hourOfDay();
        int int8 = localDateTime6.getHourOfDay();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.minusDays(100);
        int int21 = localDateTime14.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime14.minusWeeks(20206271);
        boolean boolean24 = localDateTime6.isEqual((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime14.minusYears(3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime28 = localDateTime14.withWeekOfWeekyear((-292275054));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 11 + "'", int8 == 11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 57 + "'", int21 == 57);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test01981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01981");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField3 = copticChronology1.centuryOfEra();
        org.joda.time.DurationField durationField4 = copticChronology1.millis();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekOfWeekyear();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withMillisOfSecond((int) (byte) 1);
        int int20 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime.Property property21 = localDateTime15.weekyear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime15.minusMillis(2022);
        int[] intArray25 = copticChronology1.get((org.joda.time.ReadablePartial) localDateTime15, (long) '#');
        org.joda.time.DateTimeField dateTimeField26 = copticChronology1.halfdayOfDay();
        int int29 = dateTimeField26.getDifference((long) (short) 100, 10598109381517L);
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        int int31 = dateTimeField26.getMaximumTextLength(locale30);
        org.joda.time.DurationField durationField32 = dateTimeField26.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.chrono.CopticChronology copticChronology34 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = copticChronology34.hourOfDay();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology34.centuryOfEra();
        org.joda.time.DurationField durationField37 = copticChronology34.millis();
        org.joda.time.DateTimeField dateTimeField38 = copticChronology34.weekOfWeekyear();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(chronology39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime(chronology47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.withMillisOfSecond((int) (byte) 1);
        int int53 = localDateTime40.compareTo((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.LocalDateTime.Property property54 = localDateTime48.weekyear();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime48.minusMillis(2022);
        int[] intArray58 = copticChronology34.get((org.joda.time.ReadablePartial) localDateTime48, (long) '#');
        int int59 = localDateTime48.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime48.minusMonths(113);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) 2, dateTimeZone65);
        boolean boolean68 = dateTimeZone65.isStandardOffset(32054400000L);
        org.joda.time.tz.NameProvider nameProvider70 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider70);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.chrono.CopticChronology copticChronology73 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone72);
        org.joda.time.DateTimeField dateTimeField74 = copticChronology73.hourOfDay();
        org.joda.time.DateTimeField dateTimeField75 = copticChronology73.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.Chronology chronology77 = copticChronology73.withZone(dateTimeZone76);
        org.joda.time.DateTimeField dateTimeField78 = chronology77.yearOfCentury();
        java.util.Locale locale80 = java.util.Locale.ENGLISH;
        java.lang.String str81 = dateTimeField78.getAsText(100L, locale80);
        java.lang.String str84 = nameProvider70.getShortName(locale80, "2022-02-15T07:15:48.511", "UTC");
        java.util.Locale locale85 = java.util.Locale.GERMANY;
        java.lang.String str86 = locale85.getScript();
        org.joda.time.DateTimeZone dateTimeZone87 = null;
        org.joda.time.chrono.CopticChronology copticChronology88 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone87);
        org.joda.time.DateTimeField dateTimeField89 = copticChronology88.clockhourOfDay();
        java.util.Locale locale91 = java.util.Locale.ITALIAN;
        java.lang.String str92 = dateTimeField89.getAsText((long) 'a', locale91);
        java.lang.String str93 = locale85.getDisplayName(locale91);
        java.lang.String str96 = nameProvider70.getShortName(locale85, "Etc/UTC", "Property[weekyear]");
        java.lang.String str97 = dateTimeZone65.getShortName(4346252971L, locale85);
        java.lang.String str98 = dateTimeField26.getAsShortText((org.joda.time.ReadablePartial) localDateTime61, 451, locale85);
        java.util.Date date99 = localDateTime61.toDate();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[1686, 4, 27, 14400035]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-245326) + "'", int29 == (-245326));
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(copticChronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(intArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[1686, 4, 27, 14400035]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 22 + "'", int59 == 22);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(nameProvider70);
        org.junit.Assert.assertNotNull(copticChronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "86" + "'", str81, "86");
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(copticChronology88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str92 + "' != '" + "4" + "'", str92, "4");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "tedesco (Germania)" + "'", str93, "tedesco (Germania)");
        org.junit.Assert.assertNull(str96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "+100:00" + "'", str97, "+100:00");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "451" + "'", str98, "451");
        org.junit.Assert.assertNotNull(date99);
// flaky:         org.junit.Assert.assertEquals(date99.toString(), "Wed Sep 26 11:19:09 GMT 2012");
    }

    @Test
    public void test01982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01982");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone5 = copticChronology1.getZone();
        java.lang.String str6 = dateTimeZone5.getID();
        int int8 = dateTimeZone5.getStandardOffset((long) (-1));
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plus(readableDuration10);
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.hourOfDay();
        org.joda.time.DateTimeField dateTimeField15 = copticChronology13.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField16 = copticChronology13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology13);
        org.joda.time.DateTimeField dateTimeField18 = copticChronology13.weekOfWeekyear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withMillisOfSecond((int) (byte) 1);
        int int33 = localDateTime20.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime.Property property34 = localDateTime28.weekyear();
        int[] intArray36 = copticChronology13.get((org.joda.time.ReadablePartial) localDateTime28, (long) 22);
        org.joda.time.LocalDateTime.Property property37 = localDateTime28.year();
        java.lang.Object obj38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(obj38);
        boolean boolean40 = localDateTime28.isAfter((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = localDateTime28.toDateTime(dateTimeZone41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(chronology43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime44.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(chronology51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withMillisOfSecond((int) (byte) 1);
        int int57 = localDateTime44.compareTo((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.DateTimeZone dateTimeZone58 = null;
        org.joda.time.chrono.CopticChronology copticChronology59 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone58);
        org.joda.time.DateTimeField dateTimeField60 = copticChronology59.dayOfMonth();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime(chronology61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime62.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime62.plusWeeks((int) (byte) 10);
        java.util.Locale locale69 = java.util.Locale.PRC;
        java.lang.String str70 = dateTimeField60.getAsText((org.joda.time.ReadablePartial) localDateTime68, locale69);
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.LocalDateTime localDateTime72 = localDateTime68.plus(readablePeriod71);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime68.withCenturyOfEra(30);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.DateTime dateTime76 = localDateTime74.toDateTime(readableInstant75);
        org.joda.time.DateTime dateTime77 = localDateTime52.toDateTime((org.joda.time.ReadableInstant) dateTime76);
        int int78 = dateTime42.compareTo((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTime dateTime79 = localDateTime11.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime11.withSecondOfMinute(58);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+100:00" + "'", str6, "+100:00");
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 360000000 + "'", int8 == 360000000);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(intArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[1686, 4, 27, 14400022]");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(copticChronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "7" + "'", str70, "7");
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
    }

    @Test
    public void test01983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01983");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 0);
        java.util.TimeZone timeZone2 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.lang.String str5 = dateTimeZone3.getNameKey((long) (byte) 0);
        long long8 = dateTimeZone3.convertLocalToUTC((-9223318860868800000L), false);
        long long10 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (long) (short) 100);
        long long13 = dateTimeZone1.convertLocalToUTC(0L, false);
        long long16 = dateTimeZone1.adjustOffset((long) 366, false);
        java.lang.String str17 = dateTimeZone1.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertNull(str5);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-9223318861228800000L) + "'", long8 == (-9223318861228800000L));
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-359999900L) + "'", long10 == (-359999900L));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 366L + "'", long16 == 366L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
    }

    @Test
    public void test01984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01984");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology2.centuryOfEra();
        org.joda.time.DurationField durationField5 = copticChronology2.millis();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology2.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology2.clockhourOfDay();
        org.joda.time.Chronology chronology8 = copticChronology2.withUTC();
        org.joda.time.DurationField durationField9 = copticChronology2.years();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minus(readableDuration11);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 10);
        long long16 = dateTimeZone14.convertUTCToLocal((long) (short) 1);
        long long19 = dateTimeZone14.adjustOffset((long) 984, true);
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone14.getName((long) 242, locale21);
        org.joda.time.DateTime dateTime23 = localDateTime10.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology24 = copticChronology2.withZone(dateTimeZone14);
        org.joda.time.DateTimeField dateTimeField25 = copticChronology2.clockhourOfDay();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(10040483819387L, (org.joda.time.Chronology) copticChronology2);
        org.joda.time.DateTimeField dateTimeField27 = copticChronology2.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology2);
        java.lang.String str29 = copticChronology2.toString();
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 11L + "'", long16 == 11L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 984L + "'", long19 == 984L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.010" + "'", str22, "+00:00:00.010");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "CopticChronology[+100:00]" + "'", str29, "CopticChronology[+100:00]");
    }

    @Test
    public void test01985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01985");
        org.joda.time.Chronology chronology7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(292278993, (-2688), 463, 796, 117, 855, 26217947, chronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 796 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test01986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01986");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.dayOfMonth();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.plusWeeks((int) (byte) 10);
        java.util.Locale locale11 = java.util.Locale.PRC;
        java.lang.String str12 = dateTimeField2.getAsText((org.joda.time.ReadablePartial) localDateTime10, locale11);
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet14 = org.joda.time.DateTimeZone.getAvailableIDs();
        strSet14.clear();
        java.lang.Object[] objArray16 = strSet14.toArray();
        boolean boolean17 = strSet13.addAll((java.util.Collection<java.lang.String>) strSet14);
        java.lang.String[] strArray27 = new java.lang.String[] { "UTC", "UTC", "tedesco (Germania)", "Etc/UTC", "Etc/UTC", "", "", "10", "Etc/UTC" };
        java.util.LinkedHashSet<java.lang.String> strSet28 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet28, strArray27);
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.util.Collection<java.lang.String> strCollection33 = null;
        java.util.List<java.lang.String> strList34 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, strCollection33);
        boolean boolean35 = strSet28.retainAll((java.util.Collection<java.lang.String>) strList34);
        boolean boolean36 = strSet13.addAll((java.util.Collection<java.lang.String>) strSet28);
        java.util.Locale locale37 = java.util.Locale.GERMANY;
        java.lang.String str38 = locale37.getScript();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.chrono.CopticChronology copticChronology40 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField41 = copticChronology40.clockhourOfDay();
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        java.lang.String str44 = dateTimeField41.getAsText((long) 'a', locale43);
        java.lang.String str45 = locale37.getDisplayName(locale43);
        java.util.Set<java.lang.String> strSet46 = locale43.getUnicodeLocaleAttributes();
        org.joda.time.DateTimeZone dateTimeZone47 = null;
        org.joda.time.chrono.CopticChronology copticChronology48 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField49 = copticChronology48.clockhourOfDay();
        org.joda.time.DurationField durationField50 = copticChronology48.weekyears();
        org.joda.time.DurationField durationField51 = copticChronology48.hours();
        org.joda.time.DateTimeField dateTimeField52 = copticChronology48.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField53 = copticChronology48.weekyearOfCentury();
        boolean boolean54 = strSet46.remove((java.lang.Object) copticChronology48);
        boolean boolean55 = strSet28.addAll((java.util.Collection<java.lang.String>) strSet46);
        java.util.stream.Stream<java.lang.String> strStream56 = strSet46.parallelStream();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "7" + "'", str12, "7");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strList34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(copticChronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "4" + "'", str44, "4");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "tedesco (Germania)" + "'", str45, "tedesco (Germania)");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(copticChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strStream56);
    }

    @Test
    public void test01987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01987");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DurationField durationField4 = copticChronology1.hours();
        int int5 = copticChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.dayOfMonth();
        java.lang.String str8 = copticChronology1.toString();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.yearOfEra();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.plusWeeks((int) (byte) 10);
        int int18 = localDateTime17.getMillisOfSecond();
        int int19 = localDateTime17.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.plusHours((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.chrono.CopticChronology copticChronology23 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone22);
        org.joda.time.DateTimeField dateTimeField24 = copticChronology23.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = copticChronology23.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField26 = copticChronology23.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) copticChronology23);
        org.joda.time.DateTimeField dateTimeField28 = copticChronology23.weekOfWeekyear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(chronology29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(chronology37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withMillisOfSecond((int) (byte) 1);
        int int43 = localDateTime30.compareTo((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime.Property property44 = localDateTime38.weekyear();
        int[] intArray46 = copticChronology23.get((org.joda.time.ReadablePartial) localDateTime38, (long) 22);
        org.joda.time.LocalDateTime.Property property47 = localDateTime38.year();
        java.lang.Object obj48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(obj48);
        boolean boolean50 = localDateTime38.isAfter((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.chrono.CopticChronology copticChronology52 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField53 = copticChronology52.clockhourOfDay();
        org.joda.time.DurationField durationField54 = copticChronology52.weekyears();
        org.joda.time.DurationField durationField55 = copticChronology52.centuries();
        org.joda.time.DateTimeField dateTimeField56 = copticChronology52.weekyear();
        int int57 = dateTimeField56.getMinimumValue();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime(chronology58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime59.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime59.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime(chronology66);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime67.withMillisOfSecond((int) (byte) 1);
        int int72 = localDateTime59.compareTo((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.LocalDateTime.Property property73 = localDateTime67.weekyear();
        org.joda.time.LocalDateTime.Property property74 = localDateTime67.millisOfDay();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime(chronology75);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime76.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime76.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.DateTime dateTime84 = localDateTime82.toDateTime(readableInstant83);
        java.util.Locale locale85 = java.util.Locale.GERMANY;
        boolean boolean86 = locale85.hasExtensions();
        boolean boolean87 = dateTime84.equals((java.lang.Object) locale85);
        java.lang.String str88 = dateTimeField56.getAsShortText((org.joda.time.ReadablePartial) localDateTime67, locale85);
        org.joda.time.DateTimeFieldType dateTimeFieldType89 = dateTimeField56.getType();
        int int90 = localDateTime49.get(dateTimeFieldType89);
        org.joda.time.LocalDateTime.Property property91 = localDateTime21.property(dateTimeFieldType89);
        long long93 = copticChronology1.set((org.joda.time.ReadablePartial) localDateTime21, (long) 902);
        org.joda.time.LocalDateTime localDateTime95 = localDateTime21.withMillisOfDay(2916391);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime96 = new org.joda.time.LocalDateTime((java.lang.Object) 2916391);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CopticChronology[+100:00]" + "'", str8, "CopticChronology[+100:00]");
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 704 + "'", int18 == 704);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 704 + "'", int19 == 704);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(copticChronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(intArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1686, 4, 27, 14400022]");
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(copticChronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-292269338) + "'", int57 == (-292269338));
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "2022" + "'", str88, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2022 + "'", int90 == 2022);
        org.junit.Assert.assertNotNull(property91);
// flaky:         org.junit.Assert.assertTrue("'" + long93 + "' != '" + 10604240349704L + "'", long93 == 10604240349704L);
        org.junit.Assert.assertNotNull(localDateTime95);
    }

    @Test
    public void test01988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01988");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.months();
        org.joda.time.DurationField durationField4 = copticChronology1.minutes();
        org.joda.time.DurationField durationField5 = copticChronology1.seconds();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.year();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.yearOfEra();
        org.joda.time.DurationField durationField8 = copticChronology1.days();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.dayOfWeek();
        org.joda.time.DurationField durationField10 = dateTimeField9.getRangeDurationField();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test01989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01989");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusWeeks((int) (byte) -1);
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.lang.String str11 = locale10.getScript();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.chrono.CopticChronology copticChronology13 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField14 = copticChronology13.clockhourOfDay();
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.lang.String str17 = dateTimeField14.getAsText((long) 'a', locale16);
        java.lang.String str18 = locale10.getDisplayName(locale16);
        java.lang.String str19 = dateTimeField4.getAsShortText((org.joda.time.ReadablePartial) localDateTime8, (int) ' ', locale16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime8.minusYears(984);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime8.minusWeeks((int) '#');
        int int24 = localDateTime23.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.centuryOfEra();
        boolean boolean26 = property25.isLeap();
        org.joda.time.LocalDateTime localDateTime27 = property25.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime28 = property25.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.chrono.CopticChronology copticChronology30 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone29);
        org.joda.time.DateTimeField dateTimeField31 = copticChronology30.hourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = copticChronology30.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.Chronology chronology34 = copticChronology30.withZone(dateTimeZone33);
        org.joda.time.DateTimeField dateTimeField35 = copticChronology30.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField36 = copticChronology30.minuteOfHour();
        org.joda.time.DurationField durationField37 = copticChronology30.weeks();
        org.joda.time.DurationField durationField38 = copticChronology30.halfdays();
        org.joda.time.DateTimeField dateTimeField39 = copticChronology30.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField40 = copticChronology30.secondOfDay();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(chronology41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.minusYears((-292269338));
        java.lang.String str52 = localDateTime46.toString("1");
        java.util.Date date53 = localDateTime46.toDate();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.chrono.CopticChronology copticChronology55 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone54);
        org.joda.time.DateTimeField dateTimeField56 = copticChronology55.clockhourOfDay();
        org.joda.time.DurationField durationField57 = copticChronology55.weekyears();
        org.joda.time.DateTimeField dateTimeField58 = copticChronology55.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone59 = copticChronology55.getZone();
        java.lang.String str60 = dateTimeZone59.getID();
        java.lang.String str61 = dateTimeZone59.getID();
        java.util.TimeZone timeZone62 = dateTimeZone59.toTimeZone();
        java.lang.String str64 = dateTimeZone59.getShortName(242L);
        org.joda.time.DateTime dateTime65 = localDateTime46.toDateTime(dateTimeZone59);
        int[] intArray67 = copticChronology30.get((org.joda.time.ReadablePartial) localDateTime46, (long) 1);
        boolean boolean68 = localDateTime28.isAfter((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime.Property property69 = localDateTime28.dayOfYear();
        org.joda.time.LocalDateTime localDateTime71 = property69.addToCopy(4346189192L);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(copticChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "4" + "'", str17, "4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "tedesco (Germania)" + "'", str18, "tedesco (Germania)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "32" + "'", str19, "32");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(copticChronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1" + "'", str52, "1");
        org.junit.Assert.assertNotNull(date53);
// flaky:         org.junit.Assert.assertEquals(date53.toString(), "Sat Feb 26 11:19:09 GMT 2022");
        org.junit.Assert.assertNotNull(copticChronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+100:00" + "'", str60, "+100:00");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+100:00" + "'", str61, "+100:00");
        org.junit.Assert.assertNotNull(timeZone62);
// flaky:         org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "GMT+:0:00");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+100:00" + "'", str64, "+100:00");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(intArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[1686, 4, 27, 14400001]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDateTime71);
    }

    @Test
    public void test01990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01990");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.millisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusMonths((int) '4');
        int int13 = localDateTime7.getWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime7.minusWeeks(742);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMinuteOfHour(514);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 514 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2000 + "'", int13 == 2000);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test01991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01991");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime(readableInstant8);
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        boolean boolean11 = locale10.hasExtensions();
        boolean boolean12 = dateTime9.equals((java.lang.Object) locale10);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Collection<java.lang.String> strCollection16 = null;
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, strCollection16);
        java.util.Collection<java.lang.String> strCollection18 = null;
        java.util.List<java.lang.String> strList19 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, strCollection18);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Collection<java.lang.String> strCollection23 = null;
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strCollection23);
        java.util.Collection<java.lang.String> strCollection25 = null;
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, strCollection25);
        java.util.Locale.FilteringMode filteringMode27 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, strCollection25, filteringMode27);
        boolean boolean29 = dateTime9.equals((java.lang.Object) languageRangeList14);
        org.joda.time.Instant instant30 = dateTime9.toInstant();
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        long long32 = instant30.getMillis();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + filteringMode27 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode27.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology31);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 951203950013L + "'", long32 == 951203950013L);
    }

    @Test
    public void test01992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01992");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DateTimeField dateTimeField4 = copticChronology1.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.minuteOfDay();
        org.joda.time.DurationField durationField6 = copticChronology1.seconds();
        long long8 = durationField6.getMillis(843);
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 843000L + "'", long8 == 843000L);
    }

    @Test
    public void test01993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01993");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DurationField durationField4 = copticChronology1.hours();
        int int5 = copticChronology1.getMinimumDaysInFirstWeek();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology1.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology1.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = copticChronology1.minuteOfHour();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test01994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01994");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.withYearOfCentury(0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) (byte) 1);
        long long11 = property8.remainder();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime(readableInstant20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.millisOfDay();
        int int23 = property8.compareTo((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.Interval interval24 = property8.toInterval();
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder27 = builder26.clearExtensions();
        java.util.Locale locale28 = builder26.build();
        org.joda.time.LocalDateTime localDateTime29 = property8.setCopy("10", locale28);
        org.joda.time.LocalDateTime localDateTime30 = property8.roundHalfEvenCopy();
        int int31 = localDateTime30.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4706350262L + "'", long11 == 4706350262L);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
    }

    @Test
    public void test01995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01995");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withMinuteOfHour(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusDays(100);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime14 = property12.addToCopy((long) 724);
        org.joda.time.LocalDateTime localDateTime16 = property12.addWrapFieldToCopy(112);
        org.joda.time.DurationField durationField17 = property12.getDurationField();
        org.joda.time.LocalDateTime localDateTime19 = property12.addToCopy(19115);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime(readableInstant28);
        java.util.Locale locale30 = java.util.Locale.GERMANY;
        boolean boolean31 = locale30.hasExtensions();
        boolean boolean32 = dateTime29.equals((java.lang.Object) locale30);
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Collection<java.lang.String> strCollection36 = null;
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, strCollection36);
        java.util.Collection<java.lang.String> strCollection38 = null;
        java.util.List<java.lang.String> strList39 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, strCollection38);
        java.util.Locale.LanguageRange[] languageRangeArray40 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList41 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList41, languageRangeArray40);
        java.util.Collection<java.lang.String> strCollection43 = null;
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, strCollection43);
        java.util.Collection<java.lang.String> strCollection45 = null;
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList41, strCollection45);
        java.util.Locale.FilteringMode filteringMode47 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList48 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, strCollection45, filteringMode47);
        boolean boolean49 = dateTime29.equals((java.lang.Object) languageRangeList34);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(chronology50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property55 = localDateTime53.centuryOfEra();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(chronology56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime57.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime57.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.DateTime dateTime65 = localDateTime63.toDateTime(readableInstant64);
        java.util.Locale locale66 = java.util.Locale.GERMANY;
        boolean boolean67 = locale66.hasExtensions();
        boolean boolean68 = dateTime65.equals((java.lang.Object) locale66);
        int int69 = property55.getDifference((org.joda.time.ReadableInstant) dateTime65);
        int int70 = dateTime29.compareTo((org.joda.time.ReadableInstant) dateTime65);
        long long71 = dateTime65.getMillis();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(chronology72);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime73.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime73.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.DateTime dateTime81 = localDateTime79.toDateTime(readableInstant80);
        org.joda.time.LocalDateTime.Property property82 = localDateTime79.millisOfDay();
        org.joda.time.LocalDateTime localDateTime84 = localDateTime79.plusMonths((int) '4');
        org.joda.time.LocalDateTime.Property property85 = localDateTime79.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime86 = property85.roundHalfFloorCopy();
        int int87 = property85.getMaximumValueOverall();
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = property85.getFieldType();
        boolean boolean89 = dateTime65.isSupported(dateTimeFieldType88);
        int int90 = localDateTime19.indexOf(dateTimeFieldType88);
        int int91 = localDateTime19.size();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList39);
        org.junit.Assert.assertNotNull(languageRangeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertTrue("'" + filteringMode47 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode47.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long71 + "' != '" + 951203950334L + "'", long71 == 951203950334L);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 99 + "'", int87 == 99);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 4 + "'", int91 == 4);
    }

    @Test
    public void test01996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01996");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.weekOfWeekyear();
        int int5 = localDateTime3.getYear();
        int int6 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.yearOfEra();
        int int8 = localDateTime3.getMillisOfDay();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 40750437 + "'", int8 == 40750437);
    }

    @Test
    public void test01997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01997");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.chrono.CopticChronology copticChronology1 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone0);
        org.joda.time.DateTimeField dateTimeField2 = copticChronology1.clockhourOfDay();
        org.joda.time.DurationField durationField3 = copticChronology1.weekyears();
        org.joda.time.DurationField durationField4 = copticChronology1.centuries();
        org.joda.time.DateTimeField dateTimeField5 = copticChronology1.weekyear();
        int int6 = dateTimeField5.getMinimumValue();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withMillisOfSecond((int) (byte) 1);
        int int21 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property22 = localDateTime16.weekyear();
        org.joda.time.LocalDateTime.Property property23 = localDateTime16.millisOfDay();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.withYearOfCentury(0);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime(readableInstant32);
        java.util.Locale locale34 = java.util.Locale.GERMANY;
        boolean boolean35 = locale34.hasExtensions();
        boolean boolean36 = dateTime33.equals((java.lang.Object) locale34);
        java.lang.String str37 = dateTimeField5.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, locale34);
        java.lang.String str38 = locale34.getDisplayCountry();
        java.lang.String str39 = locale34.getLanguage();
        java.lang.String str40 = locale34.getDisplayName();
        java.lang.String str41 = locale34.getLanguage();
        java.lang.String str42 = locale34.toLanguageTag();
        java.util.Locale locale43 = locale34.stripExtensions();
        java.lang.String str44 = locale43.getVariant();
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        java.lang.String str48 = dateTimeZone46.getNameKey((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(dateTimeZone46);
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.chrono.CopticChronology copticChronology52 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField53 = copticChronology52.dayOfMonth();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(chronology54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime55.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime55.plusWeeks((int) (byte) 10);
        java.util.Locale locale62 = java.util.Locale.PRC;
        java.lang.String str63 = dateTimeField53.getAsText((org.joda.time.ReadablePartial) localDateTime61, locale62);
        java.lang.String str64 = dateTimeZone46.getName((long) 242, locale62);
        java.util.Set<java.lang.String> strSet65 = locale62.getUnicodeLocaleAttributes();
        java.lang.String str66 = locale62.getScript();
        java.lang.String str67 = locale62.getCountry();
        java.lang.String str68 = locale43.getDisplayName(locale62);
        java.lang.Object obj69 = locale43.clone();
        org.junit.Assert.assertNotNull(copticChronology1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-292269338) + "'", int6 == (-292269338));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022" + "'", str37, "2022");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u5fb7\u56fd" + "'", str38, "\u5fb7\u56fd");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "de" + "'", str39, "de");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u5fb7\u6587\u5fb7\u56fd)" + "'", str40, "\u5fb7\u6587\u5fb7\u56fd)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "de" + "'", str41, "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "de-DE" + "'", str42, "de-DE");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(dateTimeZone46);
// flaky:         org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(copticChronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "7" + "'", str63, "7");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+100:00" + "'", str64, "+100:00");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "CN" + "'", str67, "CN");
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\u5fb7\u6587\u5fb7\u56fd)" + "'", str68, "\u5fb7\u6587\u5fb7\u56fd)");
        org.junit.Assert.assertNotNull(obj69);
        org.junit.Assert.assertEquals(obj69.toString(), "de_DE");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj69), "de_DE");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj69), "de_DE");
    }

    @Test
    public void test01998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01998");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusWeeks((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withMillisOfSecond((int) (byte) 1);
        int int14 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.weekyear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusWeeks((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withMillisOfSecond((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withMinuteOfHour(10);
        boolean boolean26 = localDateTime9.isEqual((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.yearOfCentury();
        int int28 = property27.getMinimumValue();
        org.joda.time.DurationField durationField29 = property27.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime30 = property27.roundHalfFloorCopy();
        org.joda.time.DurationField durationField31 = property27.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime32 = property27.roundCeilingCopy();
        int int33 = localDateTime32.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNull(durationField29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNull(durationField31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test01999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test01999");
        java.lang.Object obj0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(obj0);
        java.lang.String str2 = localDateTime1.toString();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusWeeks(26177281);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfYear();
        java.lang.String str6 = property5.getAsText();
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "2022-02-26T11:19:10.736" + "'", str2, "2022-02-26T11:19:10.736");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "57" + "'", str6, "57");
    }

    @Test
    public void test02000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test02000");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.chrono.CopticChronology copticChronology2 = org.joda.time.chrono.CopticChronology.getInstance(dateTimeZone1);
        org.joda.time.DateTimeField dateTimeField3 = copticChronology2.clockhourOfDay();
        org.joda.time.DurationField durationField4 = copticChronology2.weekyears();
        org.joda.time.DurationField durationField5 = copticChronology2.hours();
        org.joda.time.DateTimeField dateTimeField6 = copticChronology2.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField7 = copticChronology2.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField8 = copticChronology2.hourOfHalfday();
        long long12 = copticChronology2.add((long) 54, 960897600000L, 0);
        org.joda.time.DurationField durationField13 = copticChronology2.weekyears();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, (org.joda.time.Chronology) copticChronology2);
        java.lang.String str15 = localDateTime14.toString();
        org.junit.Assert.assertNotNull(copticChronology2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 54L + "'", long12 == 54L);
        org.junit.Assert.assertNotNull(durationField13);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1686-04-27T04:00:00.000" + "'", str15, "1686-04-27T04:00:00.000");
    }
}

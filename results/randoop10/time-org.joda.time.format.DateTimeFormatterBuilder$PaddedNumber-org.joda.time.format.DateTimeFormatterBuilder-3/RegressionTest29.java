import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest29 {

    public static boolean debug = false;

    @Test
    public void test14501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14501");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category0, locale2);
        java.lang.String str5 = locale2.toLanguageTag();
        java.util.Set<java.lang.Character> charSet6 = locale2.getExtensionKeys();
        java.lang.String str7 = locale2.getDisplayCountry();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "zh-TW" + "'", str5, "zh-TW");
        org.junit.Assert.assertNotNull(charSet6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u53f0\u7063" + "'", str7, "\u53f0\u7063");
    }

    @Test
    public void test14502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14502");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder0.appendWeekyear(2000, 59);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder0.appendDayOfWeek(5);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder0.appendTwoDigitYear(999);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder12.appendMonthOfYearText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder12.appendEraText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder14.appendWeekOfWeekyear(84);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder14.appendMinuteOfDay(53);
        boolean boolean19 = dateTimeFormatterBuilder14.canBuildFormatter();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test14503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14503");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 102);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withPivotYear(79);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter6.withOffsetParsed();
        java.io.Writer writer10 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter6.printTo(writer10, (long) 1403);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
    }

    @Test
    public void test14504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14504");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime6.millisOfSecond();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 1, chronology12);
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded((long) (byte) 0, 292278993);
        int int17 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (-1), chronology20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        org.joda.time.DateTime dateTime25 = localDateTime21.toDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfDay();
        org.joda.time.DurationField durationField28 = chronology26.minutes();
        org.joda.time.DurationField durationField29 = chronology26.minutes();
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) 292278993, chronology26);
        org.joda.time.DateTime dateTime31 = dateTime6.toDateTime(chronology26);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMonths(86399);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = dateTime31.withZone(dateTimeZone34);
        org.joda.time.DateTime.Property property36 = dateTime35.yearOfEra();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test14505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14505");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minusWeeks(10);
        int int10 = localDateTime9.getSecondOfMinute();
        int int11 = localDateTime9.getYear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withWeekyear(54475052);
        int int14 = localDateTime9.getMillisOfSecond();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1969 + "'", int11 == 1969);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
    }

    @Test
    public void test14506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14506");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(52);
        org.joda.time.ReadableInstant readableInstant6 = null;
        boolean boolean7 = dateTime3.isBefore(readableInstant6);
        boolean boolean9 = dateTime3.isBefore((long) 16);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property13 = localDate11.property(dateTimeFieldType12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        boolean boolean15 = localDate11.isSupported(dateTimeFieldType14);
        org.joda.time.DateTime dateTime16 = localDate11.toDateTimeAtMidnight();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime();
        mutableDateTime17.add((long) 100);
        org.joda.time.Chronology chronology20 = null;
        mutableDateTime17.setChronology(chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        long long24 = dateTimeZone22.previousTransition((long) 1);
        mutableDateTime17.setZone(dateTimeZone22);
        java.lang.String str26 = dateTimeZone22.toString();
        org.joda.time.DateTime dateTime27 = localDate11.toDateTimeAtMidnight(dateTimeZone22);
        int int29 = dateTimeZone22.getStandardOffset((long) 5);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 575, dateTimeZone22);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 3, chronology32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType34.getDurationType();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType34.getRangeDurationType();
        boolean boolean37 = localDate33.isSupported(durationFieldType36);
        org.joda.time.LocalDate.Property property38 = localDate33.centuryOfEra();
        org.joda.time.LocalDate localDate39 = property38.roundCeilingCopy();
        org.joda.time.LocalDate localDate40 = property38.getLocalDate();
        org.joda.time.LocalDate localDate42 = localDate40.withYear(35);
        org.joda.time.Chronology chronology43 = localDate40.getChronology();
        long long47 = chronology43.add((long) 517200, 121320003L, 909);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(chronology43);
        boolean boolean49 = mutableDateTime48.isEqualNow();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime48.monthOfYear();
        int int51 = dateTimeZone22.getOffset((org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.DateTime dateTime52 = dateTime3.withZone(dateTimeZone22);
        int int53 = dateTime52.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.003" + "'", str26, "+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 3 + "'", int29 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 110280399927L + "'", long47 == 110280399927L);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(property50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3 + "'", int51 == 3);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 22 + "'", int53 == 22);
    }

    @Test
    public void test14507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14507");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DurationField durationField9 = chronology7.minutes();
        org.joda.time.DurationField durationField10 = chronology7.minutes();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.secondOfDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) (-1), chronology14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.weekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(dateTimeZone17);
        int int19 = property16.compareTo((org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime21.add(readableDuration22, 100);
        boolean boolean25 = mutableDateTime18.isBefore((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.ReadableDuration readableDuration26 = null;
        mutableDateTime21.add(readableDuration26, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 'x', dateTimeZone31);
        mutableDateTime21.setZone(dateTimeZone31);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.minuteOfHour();
        mutableDateTime21.set(dateTimeFieldType34, (int) '4');
        mutableDateTime11.setDate((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(10L);
        org.joda.time.DateTime.Property property40 = dateTime39.weekyear();
        org.joda.time.DateTime dateTime41 = property40.roundCeilingCopy();
        org.joda.time.DateTime dateTime42 = property40.withMaximumValue();
        mutableDateTime21.setTime((org.joda.time.ReadableInstant) dateTime42);
        boolean boolean44 = mutableDateTime21.isBeforeNow();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test14508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14508");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        strSet1.clear();
        int int3 = strSet1.size();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-1), chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMillisOfDay((int) 'u');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfMonth();
        boolean boolean13 = strSet1.contains((java.lang.Object) localDateTime11);
        int int14 = localDateTime11.getDayOfMonth();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (-1), chronology16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTime dateTime21 = localDateTime17.toDateTime(dateTimeZone19);
        java.lang.String str22 = dateTime21.toString();
        org.joda.time.DateTime dateTime24 = dateTime21.plus((long) 100);
        org.joda.time.DateTime.Property property25 = dateTime24.yearOfCentury();
        java.util.Locale locale26 = java.util.Locale.GERMANY;
        java.util.Calendar calendar27 = dateTime24.toCalendar(locale26);
        org.joda.time.DateTime.Property property28 = dateTime24.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime29 = dateTime24.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusMillis((int) 'a');
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withSecondOfMinute(0);
        int int34 = localDateTime31.getDayOfWeek();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (-1), chronology36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.plusYears(0);
        org.joda.time.LocalDateTime.Property property42 = localDateTime37.dayOfWeek();
        boolean boolean43 = localDateTime31.equals((java.lang.Object) localDateTime37);
        org.joda.time.LocalDateTime.Property property44 = localDateTime31.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime31.plus(readablePeriod45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime31.weekyear();
        int int48 = localDateTime11.compareTo((org.joda.time.ReadablePartial) localDateTime31);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str22, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
    }

    @Test
    public void test14509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14509");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTimeField dateTimeField1 = mutableDateTime0.getRoundingField();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime6 = property2.add((long) 86399999);
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime6.getZone();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.millisOfSecond();
        org.junit.Assert.assertNull(dateTimeField1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test14510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14510");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder0.appendWeekyear(2000, 59);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder8.appendTwoDigitWeekyear(9, true);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder8.appendDayOfMonth(18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatterBuilder8.toFormatter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder8.appendFractionOfSecond((-929), 54475);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
    }

    @Test
    public void test14511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14511");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(54771, 182, 912, 0, 42700796, 2525, (-54600286));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 42700796 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14512");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter3.getPrinter();
        org.joda.time.Chronology chronology5 = dateTimeFormatter3.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withPivotYear((java.lang.Integer) 102);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter7.withPivotYear((java.lang.Integer) 2090);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter7.withPivotYear((-5599584));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter7.withPivotYear((java.lang.Integer) 33);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime17 = localTime15.minusSeconds((int) (short) 10);
        int int18 = localTime15.getMinuteOfHour();
        org.joda.time.LocalTime.Property property19 = localTime15.hourOfDay();
        org.joda.time.LocalTime localTime20 = property19.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField21 = property19.getField();
        long long23 = dateTimeField21.roundCeiling(31243724946L);
        java.lang.String str25 = dateTimeField21.getAsText((long) 99);
        org.joda.time.DurationField durationField26 = dateTimeField21.getDurationField();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime28.set(dateTimeFieldType29, (-292275054));
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime28.yearOfEra();
        java.util.Locale locale34 = new java.util.Locale("hi!");
        java.lang.String str35 = property32.getAsText(locale34);
        int int36 = dateTimeField21.getMaximumShortTextLength(locale34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter7.withLocale(locale34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.parse("39600120", dateTimeFormatter7);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 31244400000L + "'", long23 == 31244400000L);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "0" + "'", str25, "0");
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertEquals(locale34.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "292275055" + "'", str35, "292275055");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
    }

    @Test
    public void test14513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14513");
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = null;
        org.joda.time.format.DateTimeParser dateTimeParser4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter3, dateTimeParser4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) (-1), chronology7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTime dateTime12 = localDateTime8.toDateTime(dateTimeZone10);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter5.withChronology(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField17 = chronology13.days();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 1970, chronology13);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.era();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime19.minuteOfHour();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (-1), chronology25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        org.joda.time.DateTime dateTime30 = localDateTime26.toDateTime(dateTimeZone28);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.DateTime dateTime33 = dateTime30.plus((long) 100);
        org.joda.time.DateTime.Property property34 = dateTime33.yearOfCentury();
        java.util.Locale locale35 = java.util.Locale.GERMANY;
        java.util.Calendar calendar36 = dateTime33.toCalendar(locale35);
        java.util.Locale locale37 = java.util.Locale.TAIWAN;
        java.lang.String str38 = locale37.toLanguageTag();
        java.lang.String str39 = locale35.getDisplayCountry(locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket41 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology23, locale35, (java.lang.Integer) 38);
        org.joda.time.format.DateTimePrinter dateTimePrinter42 = null;
        org.joda.time.format.DateTimeParser dateTimeParser43 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter42, dateTimeParser43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) (-1), chronology46);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone50 = dateTimeZone49.toTimeZone();
        org.joda.time.DateTime dateTime51 = localDateTime47.toDateTime(dateTimeZone49);
        org.joda.time.Chronology chronology52 = dateTime51.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter44.withChronology(chronology52);
        org.joda.time.DateTimeField dateTimeField54 = chronology52.monthOfYear();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.weekyearOfCentury();
        dateTimeParserBucket41.saveField(dateTimeField55, 19);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTimeField dateTimeField60 = dateTimeFieldType58.getField(chronology59);
        dateTimeParserBucket41.saveField(dateTimeFieldType58, 69);
        java.util.Locale locale63 = dateTimeParserBucket41.getLocale();
        dateTimeParserBucket41.setOffset((int) 'x');
        org.joda.time.DateTimeZone dateTimeZone66 = dateTimeParserBucket41.getZone();
        org.joda.time.MutableDateTime mutableDateTime67 = mutableDateTime19.toMutableDateTime(dateTimeZone66);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((-31533077250L), dateTimeZone66);
        long long72 = dateTimeZone66.convertLocalToUTC(421200000L, false, 30899L);
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(52L, dateTimeZone66);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str31, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "zh-TW" + "'", str38, "zh-TW");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u5fb7\u570b" + "'", str39, "\u5fb7\u570b");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de_DE");
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(mutableDateTime67);
// flaky:         org.junit.Assert.assertTrue("'" + long72 + "' != '" + 421199997L + "'", long72 == 421199997L);
    }

    @Test
    public void test14514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14514");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(946, 108665566, 176399972);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 946 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14515");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property2 = localDate0.property(dateTimeFieldType1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        boolean boolean4 = localDate0.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDate.Property property5 = localDate0.era();
        org.joda.time.LocalDate.Property property6 = localDate0.dayOfMonth();
        org.joda.time.LocalDate localDate8 = localDate0.minusWeeks(2000);
        org.joda.time.DateTime dateTime9 = localDate0.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate11 = localDate0.minusYears(9);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder12.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap16 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder12.appendTimeZoneShortName(strMap16);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder17.appendYear((int) (short) 1, 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder17.appendDayOfWeekShortText();
        boolean boolean22 = localDate11.equals((java.lang.Object) dateTimeFormatterBuilder21);
        dateTimeFormatterBuilder21.clear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder21.appendYear(1403, 30900001);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
    }

    @Test
    public void test14516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14516");
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (-1), chronology10);
        boolean boolean12 = dateTimeZone7.isLocalDateTimeGap(localDateTime11);
        java.lang.String str14 = dateTimeZone7.getName((long) 4);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(54625295, 0, 85512, 12, 22, 54475052, 514, dateTimeZone7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54475052 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.003" + "'", str14, "+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test14517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14517");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        boolean boolean7 = property5.isLeap();
        org.joda.time.LocalTime localTime8 = property5.roundFloorCopy();
        org.joda.time.LocalTime.Property property9 = localTime8.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime11.set(dateTimeFieldType12, (-292275054));
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutableDateTime11.add(readablePeriod15, 4);
        int int18 = mutableDateTime11.getMillisOfDay();
        long long19 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime11);
        java.lang.String str20 = property9.toString();
        org.joda.time.LocalTime localTime21 = property9.getLocalTime();
        org.joda.time.LocalTime localTime22 = property9.roundHalfEvenCopy();
        org.joda.time.LocalTime.Property property23 = localTime22.secondOfMinute();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalTime localTime25 = localTime22.minus(readablePeriod24);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalTime localTime27 = localTime25.minus(readablePeriod26);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 153722866950720L + "'", long19 == 153722866950720L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[minuteOfHour]" + "'", str20, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime27);
    }

    @Test
    public void test14518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14518");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Locale locale7 = new java.util.Locale("hi!");
        java.lang.String str8 = locale7.getScript();
        java.lang.String str9 = locale7.getDisplayLanguage();
        java.util.Locale locale11 = new java.util.Locale("hi!");
        java.lang.String str12 = locale11.getScript();
        java.lang.String str13 = locale11.getDisplayLanguage();
        java.util.Locale locale15 = new java.util.Locale("hi!");
        java.lang.String str16 = locale15.getScript();
        java.lang.String str17 = locale15.getDisplayLanguage();
        java.util.Locale[] localeArray18 = new java.util.Locale[] { locale3, locale4, locale5, locale7, locale11, locale15 };
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.Locale.FilteringMode filteringMode21 = null;
        java.util.List<java.util.Locale> localeList22 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList19, filteringMode21);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap23);
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleAttributes();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        long long32 = dateTimeZone27.convertLocalToUTC(10L, false, (long) 3);
        boolean boolean33 = strSet26.contains((java.lang.Object) false);
        java.util.Locale.FilteringMode filteringMode34 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList35 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet26, filteringMode34);
        int int36 = strSet26.size();
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = null;
        org.joda.time.format.DateTimeParser dateTimeParser39 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter38, dateTimeParser39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) (-1), chronology42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone46 = dateTimeZone45.toTimeZone();
        org.joda.time.DateTime dateTime47 = localDateTime43.toDateTime(dateTimeZone45);
        org.joda.time.Chronology chronology48 = dateTime47.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter40.withChronology(chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.monthOfYear();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.clockhourOfHalfday();
        org.joda.time.DurationField durationField52 = chronology48.days();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) 1970, chronology48);
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now(chronology48);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withWeekyear(10);
        int int57 = localDateTime54.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property58 = localDateTime54.dayOfMonth();
        boolean boolean59 = strSet26.contains((java.lang.Object) property58);
        org.joda.time.LocalDateTime localDateTime60 = property58.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime62 = property58.addWrapFieldToCopy(3600102);
        java.util.Locale.Category category63 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale65 = new java.util.Locale("365");
        java.lang.String str66 = locale65.getISO3Language();
        java.util.Locale.setDefault(category63, locale65);
        java.lang.String str68 = locale65.getISO3Country();
        java.lang.String str69 = property58.getAsText(locale65);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals(locale15.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localeList22);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 7L + "'", long32 == 7L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + filteringMode34 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode34.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 13 + "'", int57 == 13);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + category63 + "' != '" + java.util.Locale.Category.FORMAT + "'", category63.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale65.toString(), "365");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "365" + "'", str66, "365");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "21" + "'", str69, "21");
    }

    @Test
    public void test14519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14519");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.minuteOfHour();
        int int4 = localDateTime2.size();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMonths((-54600286));
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 4 + "'", int4 == 4);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test14520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14520");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder5.appendYear((int) (short) 1, 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder8.appendMinuteOfHour(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder10.appendFixedSignedDecimal(dateTimeFieldType11, 31);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder10.appendClockhourOfDay(99);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder10.appendEraText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder10.appendYearOfEra(1970, 20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder20.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap24 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder20.appendTimeZoneShortName(strMap24);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder20.appendFractionOfHour(19, 21);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = dateTimeFormatterBuilder29.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap33 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = dateTimeFormatterBuilder29.appendTimeZoneShortName(strMap33);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = dateTimeFormatterBuilder34.appendYear((int) (short) 1, 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = dateTimeFormatterBuilder37.appendMinuteOfHour(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = dateTimeFormatterBuilder39.appendFixedSignedDecimal(dateTimeFieldType40, 31);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = dateTimeFormatterBuilder42.appendYearOfCentury(999, (int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Chronology chronology48 = null;
        mutableDateTime47.setChronology(chronology48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTimeField dateTimeField52 = dateTimeFieldType50.getField(chronology51);
        mutableDateTime47.setRounding(dateTimeField52, (int) (short) 1);
        boolean boolean55 = dateTimeField52.isSupported();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = dateTimeField52.getType();
        java.lang.String str57 = dateTimeFieldType56.toString();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder60 = dateTimeFormatterBuilder45.appendDecimal(dateTimeFieldType56, 1969, 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder62 = dateTimeFormatterBuilder28.appendFixedDecimal(dateTimeFieldType56, 116);
        org.joda.time.format.DateTimeParser dateTimeParser63 = dateTimeFormatterBuilder62.toParser();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) (-1), chronology66);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone70 = dateTimeZone69.toTimeZone();
        org.joda.time.DateTime dateTime71 = localDateTime67.toDateTime(dateTimeZone69);
        org.joda.time.Chronology chronology72 = dateTime71.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.dayOfYear();
        org.joda.time.Chronology chronology74 = chronology72.withUTC();
        org.joda.time.LocalDateTime localDateTime75 = org.joda.time.LocalDateTime.now(chronology72);
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.plus(readableDuration76);
        org.joda.time.Chronology chronology78 = localDateTime77.getChronology();
        java.util.Locale locale82 = new java.util.Locale("yearOfEra", "2090-01-31T00:00:00.002+00:00:00.003", "1969-12-31T23:59:59.999");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket84 = new org.joda.time.format.DateTimeParserBucket((-107999990L), chronology78, locale82, (java.lang.Integer) 1969);
        int int87 = dateTimeParser63.parseInto(dateTimeParserBucket84, "2022-02-18T05:54:29.689Z", 1970);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder88 = dateTimeFormatterBuilder19.appendOptional(dateTimeParser63);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder90 = dateTimeFormatterBuilder88.appendDayOfYear(54545264);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder34);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder37);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder42);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder45);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "year" + "'", str57, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder60);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder62);
        org.junit.Assert.assertNotNull(dateTimeParser63);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertEquals(locale82.toString(), "yearofera_2090-01-31T00:00:00.002+00:00:00.003_1969-12-31T23:59:59.999");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + (-1971) + "'", int87 == (-1971));
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder88);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder90);
    }

    @Test
    public void test14521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14521");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minus(readablePeriod8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.withYearOfCentury(23);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withWeekOfWeekyear(23);
        int int14 = localDateTime11.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone16);
        java.util.Locale locale19 = java.util.Locale.ENGLISH;
        java.lang.String str20 = locale19.getDisplayScript();
        java.lang.String str21 = dateTimeZone16.getName((long) 5, locale19);
        org.joda.time.DateTime dateTime22 = localDateTime11.toDateTime(dateTimeZone16);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (-1), chronology24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTime dateTime29 = localDateTime25.toDateTime(dateTimeZone27);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfDay();
        org.joda.time.DurationField durationField32 = chronology30.minutes();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        long long37 = chronology30.add(readablePeriod34, (long) 31, 69);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (-1), chronology39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.weekyear();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withSecondOfMinute((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.plusYears(0);
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withPeriodAdded(readablePeriod46, 33);
        int[] intArray50 = chronology30.get((org.joda.time.ReadablePartial) localDateTime45, 315532800000L);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime11, chronology30);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.DateTimeField dateTimeField53 = chronology30.clockhourOfHalfday();
        org.joda.time.DurationField durationField54 = chronology30.seconds();
        org.joda.time.DurationFieldType durationFieldType55 = durationField54.getType();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.003" + "'", str21, "+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 31L + "'", long37 == 31L);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(intArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[1980, 1, 1, 3]");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationFieldType55);
    }

    @Test
    public void test14522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14522");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears(0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minusDays((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int11 = localDateTime2.get(dateTimeFieldType10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime14 = property12.addToCopy((long) 3600000);
        java.lang.String str16 = localDateTime14.toString("1403");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withHourOfDay(53325048);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53325048 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1403" + "'", str16, "1403");
    }

    @Test
    public void test14523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14523");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(10L);
        org.joda.time.DateMidnight dateMidnight2 = localDate1.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(5);
        org.joda.time.DateTime dateTime5 = localDate1.toDateTimeAtCurrentTime(dateTimeZone4);
        java.util.TimeZone timeZone6 = dateTimeZone4.toTimeZone();
        java.lang.String str7 = dateTimeZone4.getID();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.005" + "'", str7, "+00:00:00.005");
    }

    @Test
    public void test14524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14524");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds(0);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.minus(readablePeriod12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusHours((int) (byte) -1);
        java.util.Locale locale16 = java.util.Locale.TAIWAN;
        java.lang.String str17 = locale16.toLanguageTag();
        java.lang.String str18 = locale16.getDisplayScript();
        java.util.Calendar calendar19 = dateTime13.toCalendar(locale16);
        org.joda.time.DateTime dateTime21 = dateTime13.withCenturyOfEra(30);
        org.joda.time.DateTime dateTime26 = dateTime21.withTime(0, 31, 40, 14);
        int int27 = dateTime26.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh-TW" + "'", str17, "zh-TW");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
    }

    @Test
    public void test14525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14525");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfHour();
        long long14 = dateTimeField12.roundHalfFloor(205200000L);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeField12);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 205199997L + "'", long14 == 205199997L);
    }

    @Test
    public void test14526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14526");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minusWeeks(10);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        boolean boolean11 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 1, chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.withMillis((long) (-358));
        org.joda.time.DateTime dateTime17 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.plus(readablePeriod18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusWeeks(266);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test14527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14527");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder5.appendYear((int) (short) 1, 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder8.appendMinuteOfHour(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder10.appendFixedSignedDecimal(dateTimeFieldType11, 31);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder10.appendClockhourOfDay(99);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder10.appendEraText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder10.appendFractionOfDay(56, 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder10.appendCenturyOfEra(3240003, 3123);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder22.appendEraText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder22.appendFractionOfHour(54756223, 971);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
    }

    @Test
    public void test14528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14528");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 1);
        org.joda.time.LocalDate localDate3 = localDate1.plusMonths(33);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDate localDate5 = localDate3.plus(readablePeriod4);
        org.joda.time.LocalDate localDate7 = localDate5.withYear(40);
        org.joda.time.LocalDate.Property property8 = localDate7.centuryOfEra();
        org.joda.time.LocalDate.Property property9 = localDate7.weekOfWeekyear();
        org.joda.time.LocalDate localDate10 = property9.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test14529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14529");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 'x', dateTimeZone5);
        org.joda.time.DateTime dateTime7 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime7.minusYears(7);
        org.joda.time.DateTime.Property property10 = dateTime7.secondOfMinute();
        org.joda.time.DateTime.Property property11 = dateTime7.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight12 = dateTime7.toDateMidnight();
        org.joda.time.DateTime.Property property13 = dateTime7.secondOfDay();
        org.joda.time.DateTime dateTime14 = property13.roundHalfEvenCopy();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime16 = dateTime14.plus(readablePeriod15);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test14530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14530");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate.Property property8 = localDate2.era();
        int int9 = localDate2.getDayOfWeek();
        org.joda.time.DateMidnight dateMidnight10 = localDate2.toDateMidnight();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property13 = localDate11.property(dateTimeFieldType12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        boolean boolean15 = localDate11.isSupported(dateTimeFieldType14);
        org.joda.time.DateTime dateTime16 = localDate11.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate17 = localDate2.withFields((org.joda.time.ReadablePartial) localDate11);
        int int18 = localDate17.getYear();
        org.joda.time.LocalDate.Property property19 = localDate17.yearOfEra();
        org.joda.time.Chronology chronology20 = localDate17.getChronology();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
    }

    @Test
    public void test14531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14531");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate.Property property8 = localDate2.era();
        int int9 = localDate2.getDayOfWeek();
        org.joda.time.DateMidnight dateMidnight10 = localDate2.toDateMidnight();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property13 = localDate11.property(dateTimeFieldType12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        boolean boolean15 = localDate11.isSupported(dateTimeFieldType14);
        org.joda.time.DateTime dateTime16 = localDate11.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate17 = localDate2.withFields((org.joda.time.ReadablePartial) localDate11);
        int int18 = localDate2.size();
        org.joda.time.LocalDate localDate20 = localDate2.plusMonths(65);
        org.joda.time.LocalDate localDate22 = localDate20.minusDays(69);
        int int23 = localDate22.getCenturyOfEra();
        org.joda.time.LocalDate.Property property24 = localDate22.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 19 + "'", int23 == 19);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test14532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14532");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusYears(40);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime9.withDate(9970, 910, 347760517);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 910 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test14533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14533");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        boolean boolean4 = dateTimeField2.isLeap(100L);
        long long6 = dateTimeField2.roundHalfEven(1L);
        long long8 = dateTimeField2.roundCeiling(300000L);
        java.lang.String str9 = dateTimeField2.toString();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (-1), chronology12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        org.joda.time.DateTime dateTime17 = localDateTime13.toDateTime(dateTimeZone15);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.DateTime dateTime20 = dateTime17.plus((long) 100);
        org.joda.time.DateTime.Property property21 = dateTime17.millisOfSecond();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) (short) 1, chronology23);
        org.joda.time.DateTime dateTime27 = dateTime24.withDurationAdded((long) (byte) 0, 292278993);
        int int28 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) (-1), chronology31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone35 = dateTimeZone34.toTimeZone();
        org.joda.time.DateTime dateTime36 = localDateTime32.toDateTime(dateTimeZone34);
        org.joda.time.Chronology chronology37 = dateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfDay();
        org.joda.time.DurationField durationField39 = chronology37.minutes();
        org.joda.time.DurationField durationField40 = chronology37.minutes();
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((long) 292278993, chronology37);
        org.joda.time.DateTime dateTime42 = dateTime17.toDateTime(chronology37);
        org.joda.time.DateTimeField dateTimeField43 = chronology37.dayOfYear();
        java.util.Locale locale44 = java.util.Locale.TAIWAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket(10629L, chronology37, locale44, (java.lang.Integer) 69, 42);
        java.util.Locale locale48 = dateTimeParserBucket47.getLocale();
        int int49 = dateTimeField2.getMaximumTextLength(locale48);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-3L) + "'", long6 == (-3L));
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 31535999997L + "'", long8 == 31535999997L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DateTimeField[year]" + "'", str9, "DateTimeField[year]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str18, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 9 + "'", int49 == 9);
    }

    @Test
    public void test14534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14534");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds(0);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.withChronology(chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = property14.setCopy("");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test14535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14535");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("729000000000000February3");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test14536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14536");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add(70);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.minuteOfDay();
        boolean boolean6 = mutableDateTime4.isAfterNow();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime4.yearOfCentury();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test14537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14537");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("Taiwan", (double) 0L);
        double double3 = languageRange2.getWeight();
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] { languageRange2 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleAttributes();
        java.util.Iterator<java.lang.String> strItor9 = strSet8.iterator();
        java.lang.String[] strArray13 = new java.lang.String[] { "1969-12-31T23:59:59.999Z", "365", "1969-12-31T23:59:59.999Z" };
        java.util.ArrayList<java.lang.String> strList14 = new java.util.ArrayList<java.lang.String>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList14, strArray13);
        boolean boolean16 = strSet8.containsAll((java.util.Collection<java.lang.String>) strList14);
        java.util.Iterator<java.lang.String> strItor17 = strSet8.iterator();
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strSet8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, strMap19);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList22 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList20, strMap21);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Locale locale27 = java.util.Locale.GERMANY;
        java.util.Locale locale28 = java.util.Locale.GERMANY;
        java.util.Locale locale30 = new java.util.Locale("hi!");
        java.lang.String str31 = locale30.getScript();
        java.lang.String str32 = locale30.getDisplayLanguage();
        java.util.Locale locale34 = new java.util.Locale("hi!");
        java.lang.String str35 = locale34.getScript();
        java.lang.String str36 = locale34.getDisplayLanguage();
        java.util.Locale locale38 = new java.util.Locale("hi!");
        java.lang.String str39 = locale38.getScript();
        java.lang.String str40 = locale38.getDisplayLanguage();
        java.util.Locale[] localeArray41 = new java.util.Locale[] { locale26, locale27, locale28, locale30, locale34, locale38 };
        java.util.ArrayList<java.util.Locale> localeList42 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList42, localeArray41);
        java.util.Locale.FilteringMode filteringMode44 = null;
        java.util.List<java.util.Locale> localeList45 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList42, filteringMode44);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap46 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList47 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, strMap46);
        java.util.Locale locale48 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone51 = dateTimeZone50.toTimeZone();
        long long55 = dateTimeZone50.convertLocalToUTC(10L, false, (long) 3);
        boolean boolean56 = strSet49.contains((java.lang.Object) false);
        java.util.Locale.FilteringMode filteringMode57 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList58 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strSet49, filteringMode57);
        java.util.Locale locale62 = new java.util.Locale("", "1969-12-31T23:59:59.999Z", "1969-12-31T23:59:59.999Z");
        java.util.Locale locale63 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet64 = locale63.getUnicodeLocaleAttributes();
        java.lang.String str65 = locale63.getDisplayCountry();
        java.lang.String str66 = locale62.getDisplayScript(locale63);
        java.util.Locale[] localeArray67 = new java.util.Locale[] { locale63 };
        java.util.ArrayList<java.util.Locale> localeList68 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList68, localeArray67);
        java.util.Locale.FilteringMode filteringMode70 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList71 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList68, filteringMode70);
        java.util.Collection<java.util.Locale> localeCollection72 = null;
        java.util.List<java.util.Locale> localeList73 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, localeCollection72);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale> localeList74 = java.util.Locale.filter(languageRangeList22, localeCollection72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strItor9);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(languageRangeList22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de_DE");
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals(locale34.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "hi!" + "'", str36, "hi!");
        org.junit.Assert.assertEquals(locale38.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "hi!" + "'", str40, "hi!");
        org.junit.Assert.assertNotNull(localeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(localeList45);
        org.junit.Assert.assertNotNull(languageRangeList47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long55 + "' != '" + 7L + "'", long55 == 7L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + filteringMode57 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode57.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertEquals(locale62.toString(), "_1969-12-31T23:59:59.999Z_1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet64);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u53f0\u7063" + "'", str65, "\u53f0\u7063");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(localeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + filteringMode70 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode70.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList71);
        org.junit.Assert.assertNotNull(localeList73);
    }

    @Test
    public void test14538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14538");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.Interval interval5 = property3.toInterval();
        long long6 = property3.remainder();
        java.util.Locale locale8 = new java.util.Locale("hi!");
        int int9 = property3.getMaximumShortTextLength(locale8);
        org.joda.time.LocalDateTime localDateTime11 = property3.addToCopy(292278993);
        java.lang.String str12 = property3.getName();
        org.joda.time.LocalDateTime localDateTime13 = property3.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMonths(116);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withDayOfWeek(54711);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54711 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "dayOfYear" + "'", str12, "dayOfYear");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test14539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14539");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(9, 2, 30, (int) (short) 0);
        org.joda.time.LocalTime localTime6 = localTime4.minusMillis(12);
        org.joda.time.LocalTime localTime8 = localTime6.plusHours((int) (byte) 0);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = localTime6.getFieldTypes();
        org.joda.time.LocalTime localTime11 = localTime6.minusMinutes((-2033));
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfSecond();
        int int13 = property12.getMaximumValue();
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 999 + "'", int13 == 999);
    }

    @Test
    public void test14540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14540");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property2 = localDate0.property(dateTimeFieldType1);
        java.util.Locale locale6 = new java.util.Locale("Property[dayOfYear]", "");
        org.joda.time.LocalDate localDate7 = property2.setCopy("365", locale6);
        org.joda.time.LocalDate localDate9 = property2.setCopy((int) 'a');
        org.joda.time.LocalDate localDate11 = property2.setCopy((-1));
        org.joda.time.LocalDate localDate13 = localDate11.withYearOfEra(1999);
        org.joda.time.DateTime dateTime14 = localDate13.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property15 = localDate13.weekOfWeekyear();
        org.joda.time.LocalDate localDate16 = property15.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate17 = property15.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals(locale6.toString(), "property[dayofyear]");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test14541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14541");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTimeField dateTimeField2 = mutableDateTime1.getRoundingField();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        mutableDateTime1.add(durationFieldType4, 100);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (-1), chronology11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        org.joda.time.DateTime dateTime16 = localDateTime12.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter9.withChronology(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.monthOfYear();
        org.joda.time.DurationField durationField20 = durationFieldType4.getField(chronology17);
        org.joda.time.DateTimeField dateTimeField21 = chronology17.yearOfCentury();
        java.util.Locale locale22 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket25 = new org.joda.time.format.DateTimeParserBucket((long) 31, chronology17, locale22, (java.lang.Integer) 12, 49);
        int int26 = dateTimeParserBucket25.getOffset();
        org.junit.Assert.assertNull(dateTimeField2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test14542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14542");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.plus(readableDuration8);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime11.set(dateTimeFieldType12, (-292275054));
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime11.yearOfEra();
        mutableDateTime11.setYear((int) '#');
        mutableDateTime11.setYear(292278993);
        int int20 = dateTime9.compareTo((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime11.centuryOfEra();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime23.withDayOfMonth(5);
        java.util.Locale locale26 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar calendar27 = dateTime25.toCalendar(locale26);
        mutableDateTime11.setTime((org.joda.time.ReadableInstant) dateTime25);
        boolean boolean29 = dateTime25.isAfterNow();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(calendar27);
// flaky:         org.junit.Assert.assertEquals(calendar27.toString(), "java.util.GregorianCalendar[time=1644073982923,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=5,DAY_OF_YEAR=36,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=13,SECOND=2,MILLISECOND=926,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test14543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14543");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-21T15:06:44.756+00:00:00.003");
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = null;
        org.joda.time.format.DateTimeParser dateTimeParser5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter4, dateTimeParser5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (-1), chronology8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTime dateTime13 = localDateTime9.toDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter6.withChronology(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.monthOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.clockhourOfHalfday();
        org.joda.time.DurationField durationField18 = chronology14.days();
        org.joda.time.DateTimeField dateTimeField19 = chronology14.secondOfDay();
        org.joda.time.Chronology chronology20 = chronology14.withUTC();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(259200004L, chronology20);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 82798033, chronology20);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime22.toMutableDateTime();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (-1), chronology26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.minusMonths(58);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (-1), chronology32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone36 = dateTimeZone35.toTimeZone();
        org.joda.time.DateTime dateTime37 = localDateTime33.toDateTime(dateTimeZone35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (-1), chronology39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.weekyear();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.minusHours((-1));
        org.joda.time.LocalDateTime localDateTime44 = localDateTime33.withFields((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime33.withYearOfEra(906);
        boolean boolean47 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime30.plusMillis(297);
        org.joda.time.format.DateTimePrinter dateTimePrinter50 = null;
        org.joda.time.format.DateTimeParser dateTimeParser51 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter50, dateTimeParser51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) (-1), chronology54);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone58 = dateTimeZone57.toTimeZone();
        org.joda.time.DateTime dateTime59 = localDateTime55.toDateTime(dateTimeZone57);
        org.joda.time.Chronology chronology60 = dateTime59.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter52.withChronology(chronology60);
        org.joda.time.DateTimeField dateTimeField62 = chronology60.monthOfYear();
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now(chronology60);
        org.joda.time.DateTimeField dateTimeField64 = chronology60.clockhourOfHalfday();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = dateTimeField64.getType();
        org.joda.time.LocalDateTime.Property property66 = localDateTime30.property(dateTimeFieldType65);
        int int67 = mutableDateTime22.get(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(timeZone58);
// flaky:         org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 10 + "'", int67 == 10);
    }

    @Test
    public void test14544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14544");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.dayOfYear();
        org.joda.time.LocalDate localDate9 = property7.addWrapFieldToCopy(33);
        org.joda.time.LocalDate localDate10 = property7.getLocalDate();
        org.joda.time.LocalDate.Property property11 = localDate10.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate13 = property11.setCopy(54703098);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54703098 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test14545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14545");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        org.joda.time.DateTime dateTime7 = localTime6.toDateTimeToday();
        int int8 = localTime6.size();
        org.joda.time.LocalTime localTime10 = localTime6.plusHours((-1));
        org.joda.time.Chronology chronology11 = localTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.millisOfDay();
        org.joda.time.DurationField durationField13 = chronology11.years();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        long long17 = chronology11.add(readablePeriod14, (long) 100, 12);
        org.joda.time.DateTimeField dateTimeField18 = chronology11.halfdayOfDay();
        org.joda.time.DurationField durationField19 = chronology11.minutes();
        org.joda.time.DateTimeField dateTimeField20 = chronology11.millisOfSecond();
        java.lang.String str21 = chronology11.toString();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray25 = chronology11.get(readablePeriod22, 45L, (-1000L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L + "'", long17 == 100L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[UTC]" + "'", str21, "ISOChronology[UTC]");
    }

    @Test
    public void test14546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14546");
        java.io.IOException iOException1 = new java.io.IOException("Coordinated Universal Time");
        java.io.IOException iOException2 = new java.io.IOException();
        iOException1.addSuppressed((java.lang.Throwable) iOException2);
        java.io.IOException iOException5 = new java.io.IOException("UTC");
        java.lang.Throwable[] throwableArray6 = iOException5.getSuppressed();
        java.lang.Throwable[] throwableArray7 = iOException5.getSuppressed();
        iOException1.addSuppressed((java.lang.Throwable) iOException5);
        java.lang.Throwable[] throwableArray9 = iOException1.getSuppressed();
        java.lang.Throwable[] throwableArray10 = iOException1.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray6);
        org.junit.Assert.assertNotNull(throwableArray7);
        org.junit.Assert.assertNotNull(throwableArray9);
        org.junit.Assert.assertNotNull(throwableArray10);
    }

    @Test
    public void test14547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14547");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.plus(readableDuration8);
        org.joda.time.DateTime dateTime11 = dateTime6.minusWeeks(10);
        boolean boolean13 = dateTime6.isBefore((long) (-1));
        org.joda.time.DateTime dateTime18 = dateTime6.withTime(3, 23, 2, 30);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        org.joda.time.DateTime.Property property21 = dateTime18.dayOfYear();
        org.joda.time.DateTime dateTime22 = property21.getDateTime();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.DateTime dateTime25 = dateTime22.withPeriodAdded(readablePeriod23, 262);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = dateTime22.withDayOfWeek(79);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test14548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14548");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        org.joda.time.DateTime dateTime7 = localTime6.toDateTimeToday();
        int int8 = localTime6.size();
        org.joda.time.LocalTime localTime10 = localTime6.plusHours((-1));
        org.joda.time.Chronology chronology11 = localTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Chronology chronology14 = chronology11.withZone(dateTimeZone13);
        org.joda.time.DateTimeField dateTimeField15 = chronology14.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.yearOfEra();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.year();
        org.joda.time.DurationField durationField18 = chronology14.seconds();
        long long20 = durationField18.getValueAsLong(110280399927L);
        long long23 = durationField18.add(16329600120L, 1728001953L);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 110280399L + "'", long20 == 110280399L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1744331553120L + "'", long23 == 1744331553120L);
    }

    @Test
    public void test14549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14549");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds(0);
        org.joda.time.DateTime dateTime13 = dateTime11.withHourOfDay(1);
        int int14 = dateTime11.getMinuteOfDay();
        org.joda.time.DateTime.Property property15 = dateTime11.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime11.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        int int19 = dateTimeZone17.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plus(readableDuration21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusDays(5);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.withFieldAdded(durationFieldType25, (int) '4');
        mutableDateTime16.add(durationFieldType25, 9);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime16.centuryOfEra();
        java.util.Locale.Builder builder31 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder32 = builder31.clearExtensions();
        java.util.Locale.Builder builder33 = builder31.clear();
        java.util.Locale locale34 = builder31.build();
        java.util.Locale.Category category35 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale37 = new java.util.Locale("365");
        java.lang.String str38 = locale37.getISO3Language();
        java.util.Locale.setDefault(category35, locale37);
        java.util.Locale locale43 = new java.util.Locale("", "1969-12-31T23:59:59.999Z", "1969-12-31T23:59:59.999Z");
        java.util.Locale.setDefault(category35, locale43);
        java.util.Locale locale45 = java.util.Locale.getDefault(category35);
        java.util.Locale locale46 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) (-1), chronology49);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.dayOfYear();
        org.joda.time.DurationField durationField52 = property51.getLeapDurationField();
        org.joda.time.Interval interval53 = property51.toInterval();
        long long54 = property51.remainder();
        java.lang.String str55 = property51.toString();
        org.joda.time.LocalDateTime localDateTime57 = property51.setCopy((int) (short) 1);
        java.util.Locale locale59 = new java.util.Locale("hi!");
        java.lang.String str60 = locale59.getScript();
        java.util.Locale locale61 = locale59.stripExtensions();
        int int62 = property51.getMaximumShortTextLength(locale59);
        java.lang.String str63 = locale46.getDisplayLanguage(locale59);
        java.util.Locale.setDefault(category35, locale46);
        java.lang.String str65 = locale46.getScript();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime(dateTimeZone67);
        java.util.Locale locale70 = java.util.Locale.ENGLISH;
        java.lang.String str71 = locale70.getDisplayScript();
        java.lang.String str72 = dateTimeZone67.getName((long) 5, locale70);
        java.lang.String str73 = locale70.getDisplayCountry();
        java.lang.String str74 = locale46.getDisplayName(locale70);
        java.lang.String str75 = locale34.getDisplayVariant(locale46);
        int int76 = property30.getMaximumTextLength(locale34);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertTrue("'" + category35 + "' != '" + java.util.Locale.Category.FORMAT + "'", category35.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale37.toString(), "365");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "365" + "'", str38, "365");
        org.junit.Assert.assertEquals(locale43.toString(), "_1969-12-31T23:59:59.999Z_1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "_1969-12-31T23:59:59.999Z_1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNull(durationField52);
        org.junit.Assert.assertNotNull(interval53);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 2L + "'", long54 == 2L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Property[dayOfYear]" + "'", str55, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertEquals(locale59.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Chinese" + "'", str63, "Chinese");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00:00.003" + "'", str72, "+00:00:00.003");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Chinese (Taiwan)" + "'", str74, "Chinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 7 + "'", int76 == 7);
    }

    @Test
    public void test14550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14550");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        long long6 = dateTimeZone1.convertLocalToUTC(10L, false, (long) 3);
        java.util.TimeZone timeZone7 = dateTimeZone1.toTimeZone();
        java.util.TimeZone timeZone8 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(66L, dateTimeZone1);
        org.joda.time.DateTime dateTime11 = dateTime9.withCenturyOfEra((int) (short) 10);
        org.joda.time.DateTime dateTime14 = dateTime11.withDurationAdded((long) 42, 20);
        org.joda.time.DateTime.Property property15 = dateTime14.secondOfMinute();
        org.joda.time.DateTime dateTime17 = property15.addWrapFieldToCopy(53325048);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 7L + "'", long6 == 7L);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test14551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14551");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.secondOfMinute();
        mutableDateTime2.setTime((org.joda.time.ReadableInstant) mutableDateTime5);
        boolean boolean8 = mutableDateTime5.isBeforeNow();
        mutableDateTime5.setMinuteOfDay(7);
        mutableDateTime5.setWeekyear((int) (byte) 100);
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = null;
        org.joda.time.format.DateTimeParser dateTimeParser14 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter13, dateTimeParser14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (-1), chronology17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        org.joda.time.DateTime dateTime22 = localDateTime18.toDateTime(dateTimeZone20);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter15.withChronology(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime5.toMutableDateTime(chronology23);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(31536000000L, chronology23);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.monthOfYear();
        org.joda.time.LocalDateTime.Property property31 = localDateTime29.centuryOfEra();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test14552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14552");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder0.appendWeekyear(2000, 59);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder0.appendDayOfWeek(5);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder10.appendLiteral(' ');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder10.appendTimeZoneOffset("eng", false, 12, 117);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder10.appendHourOfDay(19044);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
    }

    @Test
    public void test14553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14553");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-1), chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDateTime6.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter3.withChronology(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.monthOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.clockhourOfHalfday();
        org.joda.time.DurationField durationField15 = chronology11.days();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 1970, chronology11);
        org.joda.time.DurationField durationField17 = chronology11.weekyears();
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(chronology11);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime21 = property19.add((long) (-51));
        org.joda.time.MutableDateTime mutableDateTime22 = property19.roundHalfCeiling();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime22.setDate(0, 85509434, 13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 85509434 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
    }

    @Test
    public void test14554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14554");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendMonthOfYearText();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getRangeDurationType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder4.appendShortText(dateTimeFieldType5);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder7.appendSecondOfDay(0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder7.appendTwoDigitYear(1439);
        boolean boolean12 = dateTimeFormatterBuilder11.canBuildPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder11.appendMillisOfDay(12);
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = null;
        org.joda.time.format.DateTimeParser dateTimeParser16 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter15, dateTimeParser16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        org.joda.time.DateTime dateTime24 = localDateTime20.toDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter17.withChronology(chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (-1), chronology30);
        boolean boolean32 = dateTimeZone27.isLocalDateTimeGap(localDateTime31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) (-1), chronology34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.weekyear();
        boolean boolean37 = dateTimeZone27.isLocalDateTimeGap(localDateTime35);
        long long39 = dateTimeZone27.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter17.withZone(dateTimeZone27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter40.withPivotYear((java.lang.Integer) 86399999);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) (-1), chronology44);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone48 = dateTimeZone47.toTimeZone();
        org.joda.time.DateTime dateTime49 = localDateTime45.toDateTime(dateTimeZone47);
        org.joda.time.Chronology chronology50 = dateTime49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.hours();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.secondOfMinute();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) (-1), chronology54);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.weekyear();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.minusHours((-1));
        java.util.Locale locale59 = java.util.Locale.JAPANESE;
        java.lang.String str60 = dateTimeField52.getAsText((org.joda.time.ReadablePartial) localDateTime55, locale59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter42.withLocale(locale59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter42.withPivotYear((java.lang.Integer) 58);
        java.util.Locale locale64 = dateTimeFormatter42.getLocale();
        boolean boolean65 = dateTimeFormatter42.isParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder66 = dateTimeFormatterBuilder11.append(dateTimeFormatter42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter42.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime69 = dateTimeFormatter42.parseLocalDateTime("2022-02-21T15:05:41.443Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 3L + "'", long39 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0" + "'", str60, "0");
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNull(locale64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder66);
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
    }

    @Test
    public void test14555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14555");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property2 = localDate0.property(dateTimeFieldType1);
        org.joda.time.LocalDate localDate4 = localDate0.withDayOfMonth(10);
        org.joda.time.LocalDate localDate6 = localDate0.withYearOfEra(99);
        org.joda.time.LocalDate localDate8 = localDate0.plusWeeks(19);
        org.joda.time.LocalDate localDate10 = localDate0.plusDays(3);
        org.joda.time.LocalDate.Property property11 = localDate10.yearOfCentury();
        org.joda.time.LocalDate localDate13 = property11.addWrapFieldToCopy(2922789);
        org.joda.time.Interval interval14 = localDate13.toInterval();
        org.joda.time.LocalDate.Property property15 = localDate13.dayOfMonth();
        org.joda.time.LocalDate localDate16 = property15.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test14556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14556");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DurationField durationField9 = chronology7.minutes();
        org.joda.time.DurationField durationField10 = chronology7.minutes();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.secondOfDay();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime11.year();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test14557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14557");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        mutableDateTime2.add((long) '#');
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Chronology chronology8 = null;
        mutableDateTime7.setChronology(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType10.getField(chronology11);
        mutableDateTime7.setRounding(dateTimeField12, (int) (short) 1);
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) mutableDateTime7);
        mutableDateTime2.setDayOfWeek(5);
        mutableDateTime2.setDayOfWeek((int) (short) 1);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime2.centuryOfEra();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime2.yearOfEra();
        int int22 = property21.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 292278993 + "'", int22 == 292278993);
    }

    @Test
    public void test14558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14558");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.Chronology chronology9 = chronology7.withUTC();
        org.joda.time.DurationField durationField10 = chronology7.months();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.hourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.minuteOfHour();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test14559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14559");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.parse("+00:00:00.001");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"+00:00:00.001\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14560");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 5);
        int int2 = localDate1.getDayOfMonth();
        org.joda.time.LocalDate localDate4 = localDate1.minusWeeks((int) (byte) 100);
        int int5 = localDate1.getDayOfYear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test14561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14561");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime1.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime1.add(readableDuration4, (int) (short) 100);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (-1), chronology11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        org.joda.time.DateTime dateTime16 = localDateTime12.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter9.withChronology(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekyearOfCentury();
        mutableDateTime1.setChronology(chronology17);
        org.joda.time.Chronology chronology22 = chronology17.withUTC();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.millisOfSecond();
        java.lang.String str24 = dateTimeField23.toString();
        int int25 = dateTimeField23.getMinimumValue();
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DateTimeField[millisOfSecond]" + "'", str24, "DateTimeField[millisOfSecond]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test14562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14562");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        org.joda.time.DateTime.Property property13 = dateTime9.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = dateTime9.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMillis((int) 'a');
        java.lang.String str17 = localDateTime16.toString();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withPeriodAdded(readablePeriod18, 0);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withDurationAdded(readableDuration21, 97);
        org.joda.time.LocalDateTime.Property property24 = localDateTime20.weekyear();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T00:00:00.199" + "'", str17, "1970-01-01T00:00:00.199");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField25);
    }

    @Test
    public void test14563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14563");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder0.appendWeekyear(2000, 59);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder0.appendDayOfWeek(5);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder10.appendYear(21, 116);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder13.appendWeekyear(43, 3600000);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder13.appendTwoDigitYear(59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatterBuilder18.toFormatter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder18.appendClockhourOfDay(46);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap22 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder18.appendTimeZoneName(strMap22);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder18.appendTimeZoneId();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = dateTimeFormatterBuilder24.appendFractionOfMinute(54625295, 3123);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder24.appendMinuteOfDay(19044);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder27);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
    }

    @Test
    public void test14564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14564");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        boolean boolean5 = dateTimeZone0.isLocalDateTimeGap(localDateTime4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plus(readablePeriod6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.withMillisOfDay(1969);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime();
        mutableDateTime10.add((long) 100);
        org.joda.time.Chronology chronology13 = null;
        mutableDateTime10.setChronology(chronology13);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        long long17 = dateTimeZone15.previousTransition((long) 1);
        mutableDateTime10.setZone(dateTimeZone15);
        boolean boolean20 = dateTimeZone15.isStandardOffset((long) 14);
        org.joda.time.DateTime dateTime21 = localDateTime9.toDateTime(dateTimeZone15);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (-1), chronology23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.weekyear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withSecondOfMinute((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusMinutes(292278993);
        org.joda.time.LocalDateTime.Property property30 = localDateTime24.yearOfEra();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime24.plusMillis(575);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusSeconds(0);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plusMillis((int) (short) -1);
        boolean boolean37 = localDateTime9.equals((java.lang.Object) localDateTime36);
        int int38 = localDateTime9.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime9.withMillisOfDay(71);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 969 + "'", int38 == 969);
        org.junit.Assert.assertNotNull(localDateTime40);
    }

    @Test
    public void test14565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14565");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds((int) (byte) 100);
        int int5 = localDateTime4.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.era();
        java.lang.String str7 = property6.getAsText();
        org.joda.time.LocalDateTime localDateTime8 = property6.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime9 = property6.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField10 = property6.getField();
        org.joda.time.LocalDateTime localDateTime11 = property6.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = property6.addToCopy((long) 1439);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u897f\u5143" + "'", str7, "\u897f\u5143");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test14566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14566");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale2 = new java.util.Locale("365");
        java.lang.String str3 = locale2.getISO3Language();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale8 = new java.util.Locale("", "1969-12-31T23:59:59.999Z", "1969-12-31T23:59:59.999Z");
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale10 = java.util.Locale.getDefault(category0);
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleKeys();
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.util.Iterator<java.lang.String> strItor14 = strSet13.iterator();
        java.util.stream.Stream<java.lang.String> strStream15 = strSet13.stream();
        boolean boolean16 = strSet11.addAll((java.util.Collection<java.lang.String>) strSet13);
        java.util.Spliterator<java.lang.String> strSpliterator17 = strSet13.spliterator();
        org.joda.time.format.DateTimePrinter dateTimePrinter18 = null;
        org.joda.time.format.DateTimeParser dateTimeParser19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter18, dateTimeParser19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (-1), chronology22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        org.joda.time.DateTime dateTime27 = localDateTime23.toDateTime(dateTimeZone25);
        org.joda.time.Chronology chronology28 = dateTime27.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter20.withChronology(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.monthOfYear();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(chronology28);
        org.joda.time.DateTimeField dateTimeField32 = chronology28.weekOfWeekyear();
        org.joda.time.DurationField durationField33 = chronology28.centuries();
        org.joda.time.DateTimeField dateTimeField34 = chronology28.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField35 = chronology28.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField36 = chronology28.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((java.lang.Object) strSpliterator17, chronology28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.util.Spliterators$EmptySpliterator$OfRef");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale2.toString(), "365");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "365" + "'", str3, "365");
        org.junit.Assert.assertEquals(locale8.toString(), "_1969-12-31T23:59:59.999Z_1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "_1969-12-31T23:59:59.999Z_1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(strStream15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strSpliterator17);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test14567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14567");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        long long5 = dateTimeZone0.convertLocalToUTC(10L, false, (long) 3);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        java.util.TimeZone.setDefault(timeZone6);
        timeZone6.setID("1969");
        boolean boolean10 = timeZone6.observesDaylightTime();
        int int11 = timeZone6.getRawOffset();
        // The following exception was thrown during execution in test generation
        try {
            int int18 = timeZone6.getOffset((-1971), 102, 5270, 0, 13, 32400000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era -1971");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 7L + "'", long5 == 7L);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
    }

    @Test
    public void test14568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14568");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.plus(readableDuration11);
        int int13 = dateTime12.getDayOfMonth();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.lang.String str18 = locale15.getDisplayVariant(locale17);
        java.lang.String str19 = dateTime12.toString("365", locale17);
        org.joda.time.DateTime dateTime21 = dateTime12.plusMonths(1969);
        org.joda.time.DateTime dateTime22 = dateTime12.withLaterOffsetAtOverlap();
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.DateTime.Property property24 = dateTime22.era();
        org.joda.time.DateTime dateTime26 = property24.setCopy(0);
        org.joda.time.DateTime dateTime28 = dateTime26.minusWeeks((-1));
        org.joda.time.DateTime dateTime30 = dateTime28.withYearOfEra(42);
        org.joda.time.format.DateTimePrinter dateTimePrinter31 = null;
        org.joda.time.format.DateTimeParser dateTimeParser32 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter31, dateTimeParser32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (-1), chronology35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone39 = dateTimeZone38.toTimeZone();
        org.joda.time.DateTime dateTime40 = localDateTime36.toDateTime(dateTimeZone38);
        org.joda.time.Chronology chronology41 = dateTime40.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter33.withChronology(chronology41);
        org.joda.time.DateTimeField dateTimeField43 = chronology41.monthOfYear();
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(chronology41);
        org.joda.time.DateTimeField dateTimeField45 = chronology41.weekOfWeekyear();
        java.util.Locale locale46 = null;
        int int47 = dateTimeField45.getMaximumTextLength(locale46);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (-1));
        org.joda.time.DateTime dateTime51 = dateTime49.plusWeeks(5);
        java.util.Locale locale52 = java.util.Locale.TAIWAN;
        java.lang.String str53 = locale52.toLanguageTag();
        java.util.Locale locale54 = java.util.Locale.GERMANY;
        java.lang.String str55 = locale52.getDisplayScript(locale54);
        java.lang.String str56 = locale54.getVariant();
        java.util.Calendar calendar57 = dateTime51.toCalendar(locale54);
        int int58 = dateTimeField45.getMaximumShortTextLength(locale54);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = dateTimeField45.getType();
        org.joda.time.DateTime.Property property60 = dateTime30.property(dateTimeFieldType59);
        org.joda.time.DateTime dateTime61 = property60.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime62 = dateTime61.toDateTime();
        int int63 = dateTime61.getWeekyear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "365" + "'", str19, "365");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T00:00:00.102+00:00:00.003" + "'", str23, "1970-01-01T00:00:00.102+00:00:00.003");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "zh-TW" + "'", str53, "zh-TW");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(calendar57);
// flaky:         org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=3023999999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=5,DAY_OF_YEAR=36,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=2,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-41) + "'", int63 == (-41));
    }

    @Test
    public void test14569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14569");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        int int2 = mutableDateTime1.getYearOfCentury();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.plus(readableDuration11);
        org.joda.time.DateTime dateTime14 = dateTime9.minusWeeks(10);
        org.joda.time.DateTime.Property property15 = dateTime9.hourOfDay();
        org.joda.time.DateTime dateTime17 = dateTime9.withYear(0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        org.joda.time.DateTime dateTime24 = localDateTime20.toDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.dayOfYear();
        org.joda.time.Chronology chronology27 = chronology25.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.clockhourOfDay();
        org.joda.time.DurationField durationField29 = chronology27.halfdays();
        org.joda.time.DurationFieldType durationFieldType30 = durationField29.getType();
        org.joda.time.DurationFieldType durationFieldType31 = durationField29.getType();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (-1), chronology33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone37 = dateTimeZone36.toTimeZone();
        org.joda.time.DateTime dateTime38 = localDateTime34.toDateTime(dateTimeZone36);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.DateTime dateTime41 = dateTime38.plus((long) 100);
        org.joda.time.DateTime.Property property42 = dateTime41.yearOfCentury();
        java.util.Locale locale43 = java.util.Locale.GERMANY;
        java.util.Calendar calendar44 = dateTime41.toCalendar(locale43);
        int int45 = dateTime41.getMinuteOfHour();
        org.joda.time.DateTime dateTime47 = dateTime41.withYearOfEra((int) 'u');
        org.joda.time.DateTime dateTime49 = dateTime47.plus((long) (-292275054));
        org.joda.time.DateTime.Property property50 = dateTime47.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTimeField dateTimeField52 = mutableDateTime51.getRoundingField();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType54 = dateTimeFieldType53.getDurationType();
        mutableDateTime51.add(durationFieldType54, 100);
        org.joda.time.format.DateTimePrinter dateTimePrinter57 = null;
        org.joda.time.format.DateTimeParser dateTimeParser58 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter57, dateTimeParser58);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) (-1), chronology61);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone65 = dateTimeZone64.toTimeZone();
        org.joda.time.DateTime dateTime66 = localDateTime62.toDateTime(dateTimeZone64);
        org.joda.time.Chronology chronology67 = dateTime66.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter59.withChronology(chronology67);
        org.joda.time.DateTimeField dateTimeField69 = chronology67.monthOfYear();
        org.joda.time.DurationField durationField70 = durationFieldType54.getField(chronology67);
        org.joda.time.DateTime dateTime71 = dateTime47.toDateTime(chronology67);
        boolean boolean72 = durationFieldType31.isSupported(chronology67);
        org.joda.time.DateTime dateTime74 = dateTime9.withFieldAdded(durationFieldType31, 906);
        java.lang.String str75 = durationFieldType31.getName();
        mutableDateTime1.add(durationFieldType31, 54452002);
        org.joda.time.MutableDateTime.Property property78 = mutableDateTime1.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str10, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str39, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "halfdays" + "'", str75, "halfdays");
        org.junit.Assert.assertNotNull(property78);
    }

    @Test
    public void test14570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14570");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        boolean boolean17 = dateTimeZone12.isLocalDateTimeGap(localDateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.weekyear();
        boolean boolean22 = dateTimeZone12.isLocalDateTimeGap(localDateTime20);
        long long24 = dateTimeZone12.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter25.withPivotYear((java.lang.Integer) 86399999);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (-1), chronology29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        org.joda.time.DateTime dateTime34 = localDateTime30.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = dateTime34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.hours();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.secondOfMinute();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (-1), chronology39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.weekyear();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.minusHours((-1));
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.lang.String str45 = dateTimeField37.getAsText((org.joda.time.ReadablePartial) localDateTime40, locale44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter27.withLocale(locale44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter27.withPivotYear((java.lang.Integer) 58);
        java.util.Locale locale49 = dateTimeFormatter27.getLocale();
        boolean boolean50 = dateTimeFormatter27.isParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter51 = dateTimeFormatter27.getPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser52 = dateTimeFormatter27.getParser();
        java.io.Writer writer53 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter27.printTo(writer53, 16997L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3L + "'", long24 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0" + "'", str45, "0");
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNull(locale49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(dateTimePrinter51);
        org.junit.Assert.assertNull(dateTimeParser52);
    }

    @Test
    public void test14571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14571");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate10 = property7.addToCopy((int) ' ');
        int int11 = localDate10.size();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 3, chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType15.getDurationType();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType15.getRangeDurationType();
        boolean boolean18 = localDate14.isSupported(durationFieldType17);
        org.joda.time.LocalDate.Property property19 = localDate14.centuryOfEra();
        org.joda.time.LocalDate localDate20 = property19.roundCeilingCopy();
        org.joda.time.LocalDate localDate21 = property19.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = localDate21.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.Interval interval26 = localDate10.toInterval(dateTimeZone23);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
    }

    @Test
    public void test14572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14572");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        boolean boolean7 = property5.isLeap();
        org.joda.time.LocalTime localTime8 = property5.roundFloorCopy();
        org.joda.time.LocalTime.Property property9 = localTime8.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime11.set(dateTimeFieldType12, (-292275054));
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutableDateTime11.add(readablePeriod15, 4);
        int int18 = mutableDateTime11.getMillisOfDay();
        long long19 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime11);
        java.lang.String str20 = property9.toString();
        org.joda.time.LocalTime localTime21 = property9.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime22 = property9.withMinimumValue();
        org.joda.time.LocalTime localTime24 = property9.addCopy(13);
        org.joda.time.LocalTime localTime26 = property9.addWrapFieldToCopy(0);
        java.lang.String str27 = localTime26.toString();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 153722866950720L + "'", long19 == 153722866950720L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[minuteOfHour]" + "'", str20, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "00:00:00.000" + "'", str27, "00:00:00.000");
    }

    @Test
    public void test14573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14573");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.plus(readableDuration8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (-1), chronology11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        org.joda.time.DateTime dateTime16 = localDateTime12.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.clockhourOfDay();
        org.joda.time.DateTime dateTime22 = dateTime9.toDateTime(chronology17);
        org.joda.time.DateTimeField dateTimeField23 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.secondOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test14574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14574");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        long long5 = dateTimeZone0.convertLocalToUTC(10L, false, (long) 3);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime7.copy();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime8.hourOfDay();
        java.lang.String str11 = property10.getAsShortText();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 7L + "'", long5 == 7L);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "15" + "'", str11, "15");
    }

    @Test
    public void test14575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14575");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = dateTimeFormatter3.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone5 = dateTimeFormatter3.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatter3.withPivotYear(2);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = null;
        org.joda.time.format.DateTimeParser dateTimeParser10 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter9, dateTimeParser10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (-1), chronology13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        org.joda.time.DateTime dateTime18 = localDateTime14.toDateTime(dateTimeZone16);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter11.withChronology(chronology19);
        org.joda.time.DateTimeField dateTimeField21 = chronology19.monthOfYear();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.DurationField durationField24 = chronology19.eras();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(888L, chronology19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter7.withChronology(chronology19);
        org.joda.time.DateTimeZone dateTimeZone27 = dateTimeFormatter26.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.parse("French", dateTimeFormatter26);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter4);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNull(dateTimeZone27);
    }

    @Test
    public void test14576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14576");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime8 = property6.addToCopy(365);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.era();
        org.joda.time.LocalDateTime localDateTime10 = property9.getLocalDateTime();
        int int11 = localDateTime10.getDayOfMonth();
        int int12 = localDateTime10.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusMillis(248);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMonthOfYear(56);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 56 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 19 + "'", int12 == 19);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test14577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14577");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (-1), chronology9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTime dateTime14 = localDateTime10.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.dayOfYear();
        org.joda.time.Chronology chronology17 = chronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.clockhourOfDay();
        long long20 = dateTimeField18.roundHalfEven((long) 19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (-1), chronology24);
        boolean boolean26 = dateTimeZone21.isLocalDateTimeGap(localDateTime25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.withMillisOfDay(5);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.plusHours((int) (short) 1);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (-1), chronology35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone39 = dateTimeZone38.toTimeZone();
        org.joda.time.DateTime dateTime40 = localDateTime36.toDateTime(dateTimeZone38);
        java.lang.String str41 = dateTime40.toString();
        org.joda.time.DateTime dateTime43 = dateTime40.plus((long) 100);
        org.joda.time.DateTime.Property property44 = dateTime43.yearOfCentury();
        java.util.Locale locale45 = java.util.Locale.GERMANY;
        java.util.Calendar calendar46 = dateTime43.toCalendar(locale45);
        int int47 = dateTime43.getMinuteOfHour();
        org.joda.time.DateTime dateTime49 = dateTime43.withYearOfEra((int) 'u');
        org.joda.time.DateTime.Property property50 = dateTime43.era();
        org.joda.time.DateTime dateTime51 = property50.roundHalfEvenCopy();
        org.joda.time.DurationField durationField52 = property50.getLeapDurationField();
        java.util.Locale locale54 = new java.util.Locale("hi!");
        java.lang.String str55 = locale54.getScript();
        java.lang.String str56 = locale54.getDisplayLanguage();
        java.lang.String str57 = locale54.getDisplayCountry();
        java.lang.String str58 = property50.getAsText(locale54);
        java.lang.String str59 = dateTimeField18.getAsText((org.joda.time.ReadablePartial) localDateTime25, 0, locale54);
        java.lang.String str60 = dateTimeZone4.getShortName((long) 0, locale54);
        long long63 = dateTimeZone4.convertLocalToUTC((long) 30, true);
        int int65 = dateTimeZone4.getStandardOffset((long) 56);
        org.joda.time.LocalDateTime localDateTime66 = org.joda.time.LocalDateTime.now(dateTimeZone4);
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.secondOfMinute();
        org.joda.time.LocalDateTime.Property property68 = localDateTime66.dayOfWeek();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str41, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNull(durationField52);
        org.junit.Assert.assertEquals(locale54.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "AD" + "'", str58, "AD");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "0" + "'", str59, "0");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00:00.003" + "'", str60, "+00:00:00.003");
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + 27L + "'", long63 == 27L);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(property68);
    }

    @Test
    public void test14578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14578");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        int int4 = dateTimeZone2.getOffsetFromLocal((long) (byte) 0);
        mutableDateTime1.setZoneRetainFields(dateTimeZone2);
        org.joda.time.Chronology chronology6 = mutableDateTime1.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.year();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (-1), chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMillisOfSecond((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.plusHours(0);
        java.lang.String str20 = localDateTime18.toString("1972-10-01");
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withSecondOfMinute(31);
        long long24 = chronology6.set((org.joda.time.ReadablePartial) localDateTime22, 1967L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1972-10-01" + "'", str20, "1972-10-01");
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-89001L) + "'", long24 == (-89001L));
    }

    @Test
    public void test14579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14579");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = null;
        org.joda.time.format.DateTimeParser dateTimeParser3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter2, dateTimeParser3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (-1), chronology6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTime dateTime11 = localDateTime7.toDateTime(dateTimeZone9);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter4.withChronology(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.monthOfYear();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField16 = chronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField17 = chronology12.centuries();
        org.joda.time.DateTime dateTime18 = dateTime1.toDateTime(chronology12);
        org.joda.time.Chronology chronology19 = dateTime1.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.millis();
        java.lang.String str21 = durationField20.getName();
        org.joda.time.DurationFieldType durationFieldType22 = durationField20.getType();
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "millis" + "'", str21, "millis");
        org.junit.Assert.assertNotNull(durationFieldType22);
    }

    @Test
    public void test14580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14580");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.Interval interval5 = property3.toInterval();
        long long6 = property3.remainder();
        java.lang.String str7 = property3.toString();
        org.joda.time.LocalDateTime localDateTime9 = property3.setCopy((int) (short) 1);
        int int10 = localDateTime9.getDayOfMonth();
        int int11 = localDateTime9.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withYearOfCentury((int) (short) 0);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plus(readablePeriod14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMonthOfYear(2086);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2086 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[dayOfYear]" + "'", str7, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test14581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14581");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTimeField dateTimeField1 = mutableDateTime0.getRoundingField();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.dayOfWeek();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime6 = localTime4.minusSeconds((int) (short) 10);
        int int7 = localTime4.getMinuteOfHour();
        org.joda.time.LocalTime.Property property8 = localTime4.hourOfDay();
        org.joda.time.LocalTime localTime9 = property8.withMaximumValue();
        org.joda.time.DateTime dateTime10 = localTime9.toDateTimeToday();
        long long11 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime10.plusDays(19);
        org.joda.time.DateTime.Property property14 = dateTime10.yearOfCentury();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((java.lang.Object) dateTime10);
        org.joda.time.DateTime dateTime17 = dateTime10.minusMinutes(79);
        org.junit.Assert.assertNull(dateTimeField1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test14582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14582");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        boolean boolean17 = dateTimeZone12.isLocalDateTimeGap(localDateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.weekyear();
        boolean boolean22 = dateTimeZone12.isLocalDateTimeGap(localDateTime20);
        long long24 = dateTimeZone12.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZone(dateTimeZone12);
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        java.util.Locale locale28 = java.util.Locale.GERMANY;
        java.lang.String str29 = locale26.getDisplayVariant(locale28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter2.withLocale(locale26);
        org.joda.time.Chronology chronology31 = dateTimeFormatter2.getChronolgy();
        org.joda.time.Chronology chronology32 = dateTimeFormatter2.getChronolgy();
        boolean boolean33 = dateTimeFormatter2.isPrinter();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (-1), chronology35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone39 = dateTimeZone38.toTimeZone();
        org.joda.time.DateTime dateTime40 = localDateTime36.toDateTime(dateTimeZone38);
        org.joda.time.Chronology chronology41 = dateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.secondOfDay();
        long long44 = dateTimeField42.roundCeiling((long) 58);
        java.util.Locale locale46 = java.util.Locale.GERMANY;
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) (-1), chronology48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone52 = dateTimeZone51.toTimeZone();
        org.joda.time.DateTime dateTime53 = localDateTime49.toDateTime(dateTimeZone51);
        java.lang.String str54 = dateTime53.toString();
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateTime dateTime56 = dateTime53.plus(readableDuration55);
        org.joda.time.DateTime dateTime58 = dateTime53.minusWeeks(10);
        boolean boolean60 = dateTime53.isBefore((long) (-1));
        int int61 = dateTime53.getYearOfEra();
        org.joda.time.DateTime dateTime63 = dateTime53.plusDays(1969);
        org.joda.time.DateTime.Property property64 = dateTime63.weekOfWeekyear();
        java.util.Locale locale65 = java.util.Locale.US;
        int int66 = property64.getMaximumShortTextLength(locale65);
        java.lang.String str67 = locale46.getDisplayScript(locale65);
        java.lang.String str68 = dateTimeField42.getAsShortText(116, locale46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = dateTimeFormatter2.withLocale(locale46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter69.withPivotYear(1599000);
        org.joda.time.format.DateTimeParser dateTimeParser72 = dateTimeFormatter69.getParser();
        org.joda.time.Chronology chronology73 = dateTimeFormatter69.getChronolgy();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3L + "'", long24 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNull(chronology31);
        org.junit.Assert.assertNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 997L + "'", long44 == 997L);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de_DE");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime53);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str54, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1970 + "'", int61 == 1970);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "116" + "'", str68, "116");
        org.junit.Assert.assertNotNull(dateTimeFormatter69);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNull(dateTimeParser72);
        org.junit.Assert.assertNull(chronology73);
    }

    @Test
    public void test14583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14583");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears(0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minusDays((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int11 = localDateTime2.get(dateTimeFieldType10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime14 = property12.addToCopy((long) 3600000);
        org.joda.time.LocalDateTime localDateTime15 = property12.roundHalfFloorCopy();
        int int16 = property12.getMinimumValueOverall();
        int int17 = property12.getLeapAmount();
        java.util.Locale locale19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = property12.setCopy("+04:29:00.003", locale19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"+04:29:00.003\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-292275054) + "'", int16 == (-292275054));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test14584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14584");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears(0);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withPeriodAdded(readablePeriod8, 33);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusHours(29);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) (-1), chronology14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        org.joda.time.DateTime dateTime19 = localDateTime15.toDateTime(dateTimeZone17);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.plus(readableDuration21);
        org.joda.time.DateTime dateTime24 = dateTime19.minusWeeks(10);
        boolean boolean26 = dateTime19.isBefore((long) (-1));
        org.joda.time.DateTime dateTime31 = dateTime19.withTime(3, 23, 2, 30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMillis((int) ' ');
        int int34 = dateTime33.getCenturyOfEra();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime36 = dateTime33.minus(readableDuration35);
        org.joda.time.DateTime dateTime37 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime40 = dateTime37.withDurationAdded(readableDuration38, 7);
        org.joda.time.DateTime dateTime42 = dateTime40.plusWeeks(2024);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str20, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 19 + "'", int34 == 19);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test14585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14585");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 'x');
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.Chronology chronology3 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        long long5 = durationField4.getUnitMillis();
        long long6 = durationField4.getUnitMillis();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 3600000L + "'", long5 == 3600000L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 3600000L + "'", long6 == 3600000L);
    }

    @Test
    public void test14586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14586");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1969-12-31T23:59:59.999");
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfSecond();
        org.joda.time.DateTime dateTime4 = dateTime1.minus((long) 30899999);
        int int5 = dateTime4.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 19 + "'", int5 == 19);
    }

    @Test
    public void test14587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14587");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears(0);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withPeriodAdded(readablePeriod8, 33);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusHours(29);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) (-1), chronology14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        org.joda.time.DateTime dateTime19 = localDateTime15.toDateTime(dateTimeZone17);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.plus(readableDuration21);
        org.joda.time.DateTime dateTime24 = dateTime19.minusWeeks(10);
        boolean boolean26 = dateTime19.isBefore((long) (-1));
        org.joda.time.DateTime dateTime31 = dateTime19.withTime(3, 23, 2, 30);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMillis((int) ' ');
        int int34 = dateTime33.getCenturyOfEra();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime36 = dateTime33.minus(readableDuration35);
        org.joda.time.DateTime dateTime37 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.DateTime dateTime40 = dateTime37.withDurationAdded(readableDuration38, 7);
        org.joda.time.DateTime.Property property41 = dateTime37.minuteOfHour();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str20, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 19 + "'", int34 == 19);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test14588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14588");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendMonthOfYearText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendSecondOfMinute(69);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatterBuilder4.toFormatter();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (-1), chronology9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.weekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property16 = localDateTime10.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean18 = localDateTime10.isSupported(dateTimeFieldType17);
        int int19 = localDateTime10.getDayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime10.withPeriodAdded(readablePeriod20, 21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfDay();
        int int24 = localDateTime22.get(dateTimeFieldType23);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder4.appendFixedDecimal(dateTimeFieldType23, 42);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder26.appendMillisOfSecond(909);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = dateTimeFormatterBuilder26.appendMillisOfSecond(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = dateTimeFormatterBuilder26.appendDayOfYear((-1971));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder30);
    }

    @Test
    public void test14589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14589");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        boolean boolean7 = property5.isLeap();
        org.joda.time.LocalTime localTime8 = property5.roundFloorCopy();
        org.joda.time.LocalTime.Property property9 = localTime8.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime11.set(dateTimeFieldType12, (-292275054));
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutableDateTime11.add(readablePeriod15, 4);
        int int18 = mutableDateTime11.getMillisOfDay();
        long long19 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.LocalTime localTime21 = property9.setCopy(36);
        org.joda.time.LocalTime localTime23 = property9.addCopy(63145439999997L);
        org.joda.time.LocalTime localTime25 = localTime23.plusMillis(2027);
        org.joda.time.LocalTime.Property property26 = localTime23.millisOfSecond();
        org.joda.time.Chronology chronology27 = localTime23.getChronology();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 153722866950720L + "'", long19 == 153722866950720L);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(chronology27);
    }

    @Test
    public void test14590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14590");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("999");
        mutableDateTime1.setSecondOfDay((int) (short) 10);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundCeiling();
        org.joda.time.Chronology chronology6 = mutableDateTime5.getChronology();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime8.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime8.add(readableDuration11, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int15 = mutableDateTime8.get(dateTimeFieldType14);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(dateTimeZone17);
        mutableDateTime8.setTime((org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime23 = localTime21.minusSeconds((int) (short) 10);
        int int24 = localTime21.getMinuteOfHour();
        org.joda.time.LocalTime.Property property25 = localTime21.hourOfDay();
        org.joda.time.LocalTime localTime26 = property25.withMaximumValue();
        boolean boolean27 = property25.isLeap();
        org.joda.time.LocalTime localTime28 = property25.roundFloorCopy();
        org.joda.time.LocalTime.Property property29 = localTime28.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime31.set(dateTimeFieldType32, (-292275054));
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        mutableDateTime31.add(readablePeriod35, 4);
        int int38 = mutableDateTime31.getMillisOfDay();
        long long39 = property29.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime31);
        mutableDateTime8.setMillis((org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime8.millisOfSecond();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        int int43 = property41.compareTo((org.joda.time.ReadableInstant) dateTime42);
        mutableDateTime5.setTime((org.joda.time.ReadableInstant) dateTime42);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime5.setHourOfDay(40339105);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 40339105 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 153722866950720L + "'", long39 == 153722866950720L);
        org.junit.Assert.assertNotNull(property41);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
    }

    @Test
    public void test14591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14591");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(6, 193, 43, 13, 54748, 33, 54649);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54748 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14592");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property2 = localDate0.property(dateTimeFieldType1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        boolean boolean4 = localDate0.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDate.Property property5 = localDate0.era();
        org.joda.time.LocalDate.Property property6 = localDate0.dayOfMonth();
        org.joda.time.LocalDate localDate8 = localDate0.minusWeeks(2000);
        int int10 = localDate0.getValue((int) (short) 0);
        org.joda.time.LocalDate localDate12 = localDate0.plusDays(1439);
        org.joda.time.Chronology chronology13 = localDate0.getChronology();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        int int15 = dateTime14.getYearOfEra();
        org.joda.time.DateTime dateTime17 = dateTime14.minus((long) 17);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime18.getRoundingField();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType20.getDurationType();
        mutableDateTime18.add(durationFieldType21, 100);
        mutableDateTime18.addYears(10);
        boolean boolean26 = dateTime17.isAfter((org.joda.time.ReadableInstant) mutableDateTime18);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime18.setWeekOfWeekyear(53325);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53325 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test14593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14593");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder1.appendFractionOfSecond(33, (int) (short) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendMonthOfYearText();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType7 = dateTimeFieldType6.getRangeDurationType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder5.appendShortText(dateTimeFieldType6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatterBuilder5.toFormatter();
        org.joda.time.DateTimeZone dateTimeZone10 = dateTimeFormatter9.getZone();
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = dateTimeFormatter9.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone12 = dateTimeFormatter9.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(dateTimeZone13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (-1), chronology16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTime dateTime21 = localDateTime17.toDateTime(dateTimeZone19);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.hours();
        org.joda.time.DateTimeField dateTimeField24 = chronology22.secondOfMinute();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (-1), chronology26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.weekyear();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.minusHours((-1));
        java.util.Locale locale31 = java.util.Locale.JAPANESE;
        java.lang.String str32 = dateTimeField24.getAsText((org.joda.time.ReadablePartial) localDateTime27, locale31);
        int int34 = dateTimeField24.getLeapAmount((long) (-1));
        int int35 = mutableDateTime14.get(dateTimeField24);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (-1), chronology37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone41 = dateTimeZone40.toTimeZone();
        org.joda.time.DateTime dateTime42 = localDateTime38.toDateTime(dateTimeZone40);
        org.joda.time.Chronology chronology43 = dateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.dayOfYear();
        org.joda.time.Chronology chronology45 = chronology43.withUTC();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.clockhourOfDay();
        mutableDateTime14.setChronology(chronology45);
        org.joda.time.DateTimeField dateTimeField48 = chronology45.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter9.withChronology(chronology45);
        boolean boolean50 = dateTimeFormatter49.isParser();
        java.util.Locale locale51 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter49.withLocale(locale51);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.parse("China", dateTimeFormatter49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"China\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimePrinter11);
        org.junit.Assert.assertNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "0" + "'", str32, "0");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
    }

    @Test
    public void test14594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14594");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(690, 1999, (int) 'u', 86399, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14595");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((-86390001L));
    }

    @Test
    public void test14596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14596");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        boolean boolean17 = dateTimeZone12.isLocalDateTimeGap(localDateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.weekyear();
        boolean boolean22 = dateTimeZone12.isLocalDateTimeGap(localDateTime20);
        long long24 = dateTimeZone12.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter25.withPivotYear(0);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (-1), chronology29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.weekyear();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withSecondOfMinute((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusMinutes(292278993);
        org.joda.time.LocalDateTime.Property property36 = localDateTime30.yearOfEra();
        org.joda.time.format.DateTimePrinter dateTimePrinter37 = null;
        org.joda.time.format.DateTimeParser dateTimeParser38 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter37, dateTimeParser38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) (-1), chronology41);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone45 = dateTimeZone44.toTimeZone();
        org.joda.time.DateTime dateTime46 = localDateTime42.toDateTime(dateTimeZone44);
        org.joda.time.Chronology chronology47 = dateTime46.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter39.withChronology(chronology47);
        boolean boolean49 = localDateTime30.equals((java.lang.Object) chronology47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter27.withChronology(chronology47);
        org.joda.time.DurationField durationField51 = chronology47.halfdays();
        org.joda.time.DateTimeField dateTimeField52 = chronology47.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale56 = java.util.Locale.TAIWAN;
        java.lang.String str57 = locale56.toLanguageTag();
        java.util.Locale locale58 = java.util.Locale.GERMANY;
        java.lang.String str59 = locale56.getDisplayScript(locale58);
        java.lang.String str60 = locale58.getVariant();
        java.lang.String str61 = dateTimeZone54.getName(0L, locale58);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((-1L), dateTimeZone54);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder63 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder66 = dateTimeFormatterBuilder63.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap67 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder68 = dateTimeFormatterBuilder63.appendTimeZoneShortName(strMap67);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder71 = dateTimeFormatterBuilder68.appendYear((int) (short) 1, 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder72 = dateTimeFormatterBuilder71.appendDayOfWeekText();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType74 = dateTimeFieldType73.getDurationType();
        org.joda.time.DurationFieldType durationFieldType75 = dateTimeFieldType73.getRangeDurationType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder76 = dateTimeFormatterBuilder72.appendText(dateTimeFieldType73);
        int int77 = localDateTime62.get(dateTimeFieldType73);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime62.plusWeeks(18);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime62.minusMillis(56);
        long long83 = chronology47.set((org.joda.time.ReadablePartial) localDateTime62, (-16299360L));
        org.joda.time.DurationField durationField84 = chronology47.seconds();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3L + "'", long24 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "zh-TW" + "'", str57, "zh-TW");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00:00.003" + "'", str61, "+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder66);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder68);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder71);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder76);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + (-1L) + "'", long83 == (-1L));
        org.junit.Assert.assertNotNull(durationField84);
    }

    @Test
    public void test14597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14597");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder5.appendYear((int) (short) 1, 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder8.appendMinuteOfHour(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder10.appendFixedSignedDecimal(dateTimeFieldType11, 31);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder13.appendYearOfCentury(999, (int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Chronology chronology19 = null;
        mutableDateTime18.setChronology(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        mutableDateTime18.setRounding(dateTimeField23, (int) (short) 1);
        boolean boolean26 = dateTimeField23.isSupported();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = dateTimeField23.getType();
        java.lang.String str28 = dateTimeFieldType27.toString();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder16.appendDecimal(dateTimeFieldType27, 1969, 0);
        org.joda.time.format.DateTimePrinter dateTimePrinter32 = dateTimeFormatterBuilder16.toPrinter();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = dateTimeFormatterBuilder16.appendSignedDecimal(dateTimeFieldType33, 575, 69);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = dateTimeFormatterBuilder16.appendEraText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = dateTimeFormatterBuilder37.appendHalfdayOfDayText();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = dateTimeFormatterBuilder38.appendClockhourOfDay((-1872));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "year" + "'", str28, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertNotNull(dateTimePrinter32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder36);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder37);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder38);
    }

    @Test
    public void test14598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14598");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        int int13 = dateTime9.getMinuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime9.withYearOfEra((int) 'u');
        org.joda.time.DateTime dateTime17 = dateTime15.plus((long) (-292275054));
        org.joda.time.DateTime dateTime19 = dateTime15.minusSeconds(1969);
        int int20 = dateTime19.getMillisOfSecond();
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTimeISO();
        org.joda.time.DateTime dateTime22 = dateTime21.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property23 = dateTime22.secondOfMinute();
        org.joda.time.DateTime dateTime25 = dateTime22.minus(100002L);
        org.joda.time.DateTime dateTime27 = dateTime22.withYearOfEra(54392);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 102 + "'", int20 == 102);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test14599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14599");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime1.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime1.add(readableDuration4, (int) (short) 100);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.addWrapField((int) (byte) -1);
        java.lang.String str10 = mutableDateTime9.toString();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        long long17 = dateTimeZone12.convertLocalToUTC(10L, false, (long) 3);
        java.util.TimeZone timeZone18 = dateTimeZone12.toTimeZone();
        java.util.TimeZone timeZone19 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(66L, dateTimeZone12);
        boolean boolean21 = mutableDateTime9.isBefore((org.joda.time.ReadableInstant) dateTime20);
        int int22 = mutableDateTime9.getWeekyear();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime9.weekyear();
        mutableDateTime9.add(227210141145600000L);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime();
        mutableDateTime26.add((long) 100);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime26.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime31 = property29.add((long) 4);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime34.set(dateTimeFieldType35, (-292275054));
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        mutableDateTime34.add(readablePeriod38, 4);
        int int41 = mutableDateTime34.getMillisOfDay();
        org.joda.time.ReadableDuration readableDuration42 = null;
        mutableDateTime34.add(readableDuration42);
        int int44 = property32.compareTo((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) (-1), chronology46);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone50 = dateTimeZone49.toTimeZone();
        org.joda.time.DateTime dateTime51 = localDateTime47.toDateTime(dateTimeZone49);
        java.lang.String str52 = dateTime51.toString();
        org.joda.time.DateTime dateTime54 = dateTime51.plus((long) 100);
        org.joda.time.DateTime.Property property55 = dateTime51.dayOfMonth();
        org.joda.time.DateTime dateTime56 = property55.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight57 = dateTime56.toDateMidnight();
        int int58 = property32.compareTo((org.joda.time.ReadableInstant) dateMidnight57);
        mutableDateTime9.setTime((org.joda.time.ReadableInstant) dateMidnight57);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2090-01-31T00:00:00.002+00:00:00.003" + "'", str10, "2090-01-31T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 7L + "'", long17 == 7L);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2090 + "'", int22 == 2090);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str52, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
    }

    @Test
    public void test14600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14600");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DurationField durationField9 = chronology7.minutes();
        org.joda.time.DurationField durationField10 = chronology7.minutes();
        org.joda.time.Chronology chronology11 = chronology7.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = chronology11.getDateTimeMillis(0L, 46240798, 54686, 10003, 515);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 46240798 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(chronology11);
    }

    @Test
    public void test14601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14601");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) (byte) 1);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 1);
        org.joda.time.LocalDate localDate8 = localDate6.withDayOfYear((int) (byte) 10);
        org.joda.time.LocalDate localDate10 = localDate8.plusWeeks((-292275054));
        int int11 = dateTimeField2.getMaximumValue((org.joda.time.ReadablePartial) localDate8);
        java.lang.String str12 = dateTimeField2.toString();
        long long14 = dateTimeField2.roundHalfCeiling(153722866425120L);
        boolean boolean16 = dateTimeField2.isLeap((long) 1968);
        boolean boolean17 = dateTimeField2.isLenient();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 292278993 + "'", int11 == 292278993);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DateTimeField[year]" + "'", str12, "DateTimeField[year]");
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 153713980799997L + "'", long14 == 153713980799997L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test14602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14602");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.format.DateTimeParser dateTimeParser12 = dateTimeFormatter2.getParser();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) (-1), chronology14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        org.joda.time.DateTime dateTime19 = localDateTime15.toDateTime(dateTimeZone17);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.secondOfDay();
        org.joda.time.DurationField durationField22 = chronology20.minutes();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = chronology20.add(readablePeriod24, (long) 31, 69);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (-1), chronology29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.weekyear();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withSecondOfMinute((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusYears(0);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withPeriodAdded(readablePeriod36, 33);
        int[] intArray40 = chronology20.get((org.joda.time.ReadablePartial) localDateTime35, 315532800000L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter2.withChronology(chronology20);
        org.joda.time.DateTimeField dateTimeField42 = chronology20.weekyear();
        org.joda.time.DateTimeField dateTimeField43 = chronology20.secondOfMinute();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(dateTimeParser12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 31L + "'", long27 == 31L);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(intArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1980, 1, 1, 3]");
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test14603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14603");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) (short) 0);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.monthOfYear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.minusMillis(9);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (-1), chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plusYears(0);
        org.joda.time.LocalDateTime.Property property16 = localDateTime11.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.withHourOfDay(0);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTimeField dateTimeField20 = mutableDateTime19.getRoundingField();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime19.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime23 = property21.add((long) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime25 = property21.add((long) 86399999);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType26.getRangeDurationType();
        mutableDateTime25.add(durationFieldType27, (-1));
        boolean boolean30 = localDateTime11.isSupported(durationFieldType27);
        java.lang.String str31 = durationFieldType27.toString();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime8.withFieldAdded(durationFieldType27, 969);
        int int34 = localDateTime33.getYearOfEra();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNull(dateTimeField20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "weekyears" + "'", str31, "weekyears");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2938 + "'", int34 == 2938);
    }

    @Test
    public void test14604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14604");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        mutableDateTime2.add((long) '#');
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Chronology chronology8 = null;
        mutableDateTime7.setChronology(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType10.getField(chronology11);
        mutableDateTime7.setRounding(dateTimeField12, (int) (short) 1);
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) mutableDateTime7);
        mutableDateTime2.setDayOfWeek(5);
        mutableDateTime2.setDayOfWeek((int) (short) 1);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime2.centuryOfEra();
        int int21 = mutableDateTime2.getYearOfEra();
        boolean boolean22 = mutableDateTime2.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(property20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1969 + "'", int21 == 1969);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test14605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14605");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property2 = localDate0.property(dateTimeFieldType1);
        org.joda.time.LocalDate localDate4 = localDate0.withDayOfMonth(10);
        org.joda.time.LocalDate localDate6 = localDate0.withYearOfEra(99);
        java.util.Date date7 = localDate6.toDate();
        org.joda.time.LocalDate localDate9 = localDate6.plusMonths(202);
        org.joda.time.DateTimeField[] dateTimeFieldArray10 = localDate6.getFields();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Thu Feb 21 00:00:00 GMT+00:00 99");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFieldArray10);
    }

    @Test
    public void test14606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14606");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-1), chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDateTime6.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter3.withChronology(chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (-1), chronology16);
        boolean boolean18 = dateTimeZone13.isLocalDateTimeGap(localDateTime17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (-1), chronology20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.weekyear();
        boolean boolean23 = dateTimeZone13.isLocalDateTimeGap(localDateTime21);
        long long25 = dateTimeZone13.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter3.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter26.withPivotYear(2022);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter26.withPivotYear((java.lang.Integer) 33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter30.withOffsetParsed();
        java.util.Locale locale32 = dateTimeFormatter30.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter30.withPivotYear(26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter34.withPivotYear(43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.parse("099000000000000gennaio12", dateTimeFormatter34);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3L + "'", long25 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNull(locale32);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
    }

    @Test
    public void test14607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14607");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property3 = localDate1.property(dateTimeFieldType2);
        java.util.Locale locale7 = new java.util.Locale("Property[dayOfYear]", "");
        org.joda.time.LocalDate localDate8 = property3.setCopy("365", locale7);
        org.joda.time.LocalDate localDate10 = property3.setCopy((int) 'a');
        int int11 = localDate10.getWeekyear();
        org.joda.time.Chronology chronology12 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.minuteOfDay();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(61202053L, chronology12);
        org.joda.time.DateTime dateTime15 = localDate14.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 5);
        int int18 = localDate17.getDayOfMonth();
        org.joda.time.LocalDate localDate20 = localDate17.minusWeeks((int) (byte) 100);
        org.joda.time.LocalDate localDate22 = localDate20.withDayOfYear(9);
        org.joda.time.LocalDate.Property property23 = localDate20.yearOfEra();
        org.joda.time.LocalDate.Property property24 = localDate20.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder25.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap29 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = dateTimeFormatterBuilder25.appendTimeZoneShortName(strMap29);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder33 = dateTimeFormatterBuilder30.appendYear((int) (short) 1, 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = dateTimeFormatterBuilder33.appendMinuteOfHour(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = dateTimeFormatterBuilder35.appendFixedSignedDecimal(dateTimeFieldType36, 31);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder41 = dateTimeFormatterBuilder38.appendYearOfCentury(999, (int) (byte) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder43 = dateTimeFormatterBuilder41.appendWeekOfWeekyear(86399999);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatterBuilder43.toFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter44.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone46 = dateTimeFormatter45.getZone();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(dateTimeZone49);
        org.joda.time.LocalDate localDate51 = org.joda.time.LocalDate.now(dateTimeZone49);
        org.joda.time.MutableDateTime mutableDateTime52 = org.joda.time.MutableDateTime.now(dateTimeZone49);
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(0L, dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone54 = mutableDateTime53.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter45.withZone(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = localDate20.toDateTimeAtStartOfDay(dateTimeZone54);
        org.joda.time.DateTime dateTime57 = localDate14.toDateTimeAtMidnight(dateTimeZone54);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.LocalDate localDate59 = localDate14.minus(readablePeriod58);
        int int60 = localDate59.size();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals(locale7.toString(), "property[dayofyear]");
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 97 + "'", int11 == 97);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder30);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder33);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder38);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder41);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 3 + "'", int60 == 3);
    }

    @Test
    public void test14608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14608");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendMonthOfYearText();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getRangeDurationType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder4.appendShortText(dateTimeFieldType5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatterBuilder4.toFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withPivotYear((java.lang.Integer) 5);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (-1), chronology12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        org.joda.time.DateTime dateTime17 = localDateTime13.toDateTime(dateTimeZone15);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.DateTime dateTime20 = dateTime17.plus((long) 100);
        org.joda.time.DateTime dateTime22 = dateTime20.withYear(10);
        org.joda.time.DateTime.Property property23 = dateTime20.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime();
        mutableDateTime24.add((long) 100);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime24.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime29 = property27.add((long) 4);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.yearOfCentury();
        int int31 = dateTime20.compareTo((org.joda.time.ReadableInstant) mutableDateTime29);
        int int34 = dateTimeFormatter8.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime29, "DateTimeField[yearOfCentury]", 65);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime36.setMillisOfDay(10);
        mutableDateTime36.setMillisOfSecond((int) (short) 1);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime36.dayOfYear();
        int int44 = dateTimeFormatter8.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime36, "Koordinierte Universalzeit", 86390000);
        int int45 = mutableDateTime36.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str18, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-66) + "'", int34 == (-66));
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-86390001) + "'", int44 == (-86390001));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test14609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14609");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime1.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime1.add(readableDuration4, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int8 = mutableDateTime1.get(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime16 = localTime14.minusSeconds((int) (short) 10);
        int int17 = localTime14.getMinuteOfHour();
        org.joda.time.LocalTime.Property property18 = localTime14.hourOfDay();
        org.joda.time.LocalTime localTime19 = property18.withMaximumValue();
        boolean boolean20 = property18.isLeap();
        org.joda.time.LocalTime localTime21 = property18.roundFloorCopy();
        org.joda.time.LocalTime.Property property22 = localTime21.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime24.set(dateTimeFieldType25, (-292275054));
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutableDateTime24.add(readablePeriod28, 4);
        int int31 = mutableDateTime24.getMillisOfDay();
        long long32 = property22.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime24);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime24);
        mutableDateTime1.addMonths(38);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime37 = property36.getMutableDateTime();
        mutableDateTime37.add(13L);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 153722866950720L + "'", long32 == 153722866950720L);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
    }

    @Test
    public void test14610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14610");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("java.io.IOException");
        int int2 = timeZone1.getRawOffset();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u6642\u9593");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test14611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14611");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter2.withPivotYear(2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatter6.withDefaultYear(30849);
        java.lang.Appendable appendable9 = null;
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (-1), chronology11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.weekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property18 = localDateTime12.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime12.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime12.minusWeeks(116);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusYears((int) '4');
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.minusMinutes(1403);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter8.printTo(appendable9, (org.joda.time.ReadablePartial) localDateTime26);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test14612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14612");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.secondOfMinute();
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime4);
        int int7 = mutableDateTime1.getHourOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology8);
        org.joda.time.LocalDate localDate10 = dateTime9.toLocalDate();
        org.joda.time.DateTime dateTime12 = dateTime9.minusDays((int) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime9.minusMinutes((int) '#');
        org.joda.time.DateTime dateTime16 = dateTime9.plus(31243724946L);
        boolean boolean17 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) dateTime16);
        int int18 = dateTime16.getYearOfEra();
        int int19 = dateTime16.getDayOfYear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2023 + "'", int18 == 2023);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 49 + "'", int19 == 49);
    }

    @Test
    public void test14613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14613");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((-457071L));
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(21);
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = null;
        org.joda.time.format.DateTimeParser dateTimeParser5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter4, dateTimeParser5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (-1), chronology8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTime dateTime13 = localDateTime9.toDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter6.withChronology(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.monthOfYear();
        org.joda.time.DurationField durationField17 = chronology14.weekyears();
        org.joda.time.format.DateTimePrinter dateTimePrinter18 = null;
        org.joda.time.format.DateTimeParser dateTimeParser19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter18, dateTimeParser19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (-1), chronology22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        org.joda.time.DateTime dateTime27 = localDateTime23.toDateTime(dateTimeZone25);
        org.joda.time.Chronology chronology28 = dateTime27.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter20.withChronology(chronology28);
        org.joda.time.DateTimeField dateTimeField30 = chronology28.monthOfYear();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(chronology28);
        org.joda.time.DateTimeField dateTimeField32 = chronology28.clockhourOfHalfday();
        org.joda.time.DurationField durationField33 = chronology28.days();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (-1), chronology35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.weekyear();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.plusWeeks((int) (short) 1);
        int[] intArray43 = chronology28.get((org.joda.time.ReadablePartial) localDateTime41, (long) 3600000);
        long long45 = chronology14.set((org.joda.time.ReadablePartial) localDateTime41, 48536L);
        org.joda.time.DateTimeField dateTimeField46 = chronology14.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime47 = dateTime3.toMutableDateTime(chronology14);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(intArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[1970, 1, 1, 3600003]");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 604799999L + "'", long45 == 604799999L);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
    }

    @Test
    public void test14614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14614");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.Interval interval5 = property3.toInterval();
        long long6 = property3.remainder();
        java.lang.String str7 = property3.toString();
        java.lang.String str8 = property3.getAsText();
        org.joda.time.LocalDateTime localDateTime9 = property3.withMinimumValue();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withDurationAdded(readableDuration10, 1439);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime14 = property13.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime15 = property13.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[dayOfYear]" + "'", str7, "Property[dayOfYear]");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test14615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14615");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) 'x', chronology1);
        boolean boolean4 = mutableDateTime2.isEqual(38459899L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test14616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14616");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withDayOfMonth(5);
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar calendar5 = dateTime3.toCalendar(locale4);
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromCalendarFields(calendar5);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime9 = localTime6.withSecondOfMinute(86399);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(calendar5);
// flaky:         org.junit.Assert.assertEquals(calendar5.toString(), "java.util.GregorianCalendar[time=1644073984150,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=5,DAY_OF_YEAR=36,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=13,SECOND=4,MILLISECOND=153,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test14617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14617");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        int int6 = localDateTime5.getWeekyear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.plusWeeks(575);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds(11);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.era();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusHours(25);
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.yearOfCentury();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test14618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14618");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime1.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime1.add(readableDuration4, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int8 = mutableDateTime1.get(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime16 = localTime14.minusSeconds((int) (short) 10);
        int int17 = localTime14.getMinuteOfHour();
        org.joda.time.LocalTime.Property property18 = localTime14.hourOfDay();
        org.joda.time.LocalTime localTime19 = property18.withMaximumValue();
        boolean boolean20 = property18.isLeap();
        org.joda.time.LocalTime localTime21 = property18.roundFloorCopy();
        org.joda.time.LocalTime.Property property22 = localTime21.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime24.set(dateTimeFieldType25, (-292275054));
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutableDateTime24.add(readablePeriod28, 4);
        int int31 = mutableDateTime24.getMillisOfDay();
        long long32 = property22.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime24);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime24);
        mutableDateTime1.addMonths(5);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean37 = mutableDateTime1.isSupported(dateTimeFieldType36);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime1.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime40 = property38.set(30900098);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 30900098 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 153722866950720L + "'", long32 == 153722866950720L);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test14619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14619");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (-1), chronology16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTime dateTime21 = localDateTime17.toDateTime(dateTimeZone19);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter14.withChronology(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.monthOfYear();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.clockhourOfHalfday();
        org.joda.time.DurationField durationField26 = chronology22.days();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((java.lang.Object) dateTime9, chronology22);
        org.joda.time.DateTimeField dateTimeField28 = chronology22.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField29 = chronology22.minuteOfHour();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology22);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test14620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14620");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category0, locale2);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (-1), chronology6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property13 = localDateTime7.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean15 = localDateTime7.isSupported(dateTimeFieldType14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (-1), chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusSeconds((int) (byte) 100);
        int int21 = localDateTime20.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.era();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.minusYears((int) (short) -1);
        boolean boolean25 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        int int32 = dateTimeZone30.getOffsetFromLocal((long) (byte) 0);
        mutableDateTime29.setZoneRetainFields(dateTimeZone30);
        org.joda.time.Chronology chronology34 = mutableDateTime29.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.halfdays();
        java.util.Locale locale36 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (-1), chronology39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.dayOfYear();
        org.joda.time.DurationField durationField42 = property41.getLeapDurationField();
        org.joda.time.Interval interval43 = property41.toInterval();
        long long44 = property41.remainder();
        java.lang.String str45 = property41.toString();
        org.joda.time.LocalDateTime localDateTime47 = property41.setCopy((int) (short) 1);
        java.util.Locale locale49 = new java.util.Locale("hi!");
        java.lang.String str50 = locale49.getScript();
        java.util.Locale locale51 = locale49.stripExtensions();
        int int52 = property41.getMaximumShortTextLength(locale49);
        java.lang.String str53 = locale36.getDisplayLanguage(locale49);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((long) 6, chronology34, locale36, (java.lang.Integer) 48, 42);
        java.lang.String str57 = localDateTime20.toString("59", locale36);
        java.util.Locale.setDefault(category0, locale36);
        org.joda.time.tz.NameProvider nameProvider59 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) (-1), chronology61);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.dayOfYear();
        org.joda.time.DurationField durationField64 = property63.getLeapDurationField();
        org.joda.time.Interval interval65 = property63.toInterval();
        long long66 = property63.remainder();
        java.util.Locale locale68 = new java.util.Locale("hi!");
        int int69 = property63.getMaximumShortTextLength(locale68);
        java.lang.String str70 = locale68.getVariant();
        java.lang.String str73 = nameProvider59.getName(locale68, "clockhourOfHalfday", "1");
        java.util.Locale locale74 = java.util.Locale.ITALIAN;
        java.util.Set<java.lang.Character> charSet75 = locale74.getExtensionKeys();
        java.lang.String str78 = nameProvider59.getShortName(locale74, "2022-02-21T15:05:59.596Z", "dayOfMonth");
        java.lang.String str79 = locale74.getDisplayVariant();
        java.util.Locale.setDefault(category0, locale74);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "_1969-12-31T23:59:59.999Z_1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeZone30);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNull(durationField42);
        org.junit.Assert.assertNotNull(interval43);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 2L + "'", long44 == 2L);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Property[dayOfYear]" + "'", str45, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertEquals(locale49.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Chinese" + "'", str53, "Chinese");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "59" + "'", str57, "59");
        org.junit.Assert.assertNotNull(nameProvider59);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNull(durationField64);
        org.junit.Assert.assertNotNull(interval65);
// flaky:         org.junit.Assert.assertTrue("'" + long66 + "' != '" + 2L + "'", long66 == 2L);
        org.junit.Assert.assertEquals(locale68.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "it");
        org.junit.Assert.assertNotNull(charSet75);
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
    }

    @Test
    public void test14621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14621");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        boolean boolean17 = dateTimeZone12.isLocalDateTimeGap(localDateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.weekyear();
        boolean boolean22 = dateTimeZone12.isLocalDateTimeGap(localDateTime20);
        long long24 = dateTimeZone12.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter25.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate28 = dateTimeFormatter26.parseLocalDate("2022-02-21T15:08:43.472+00:00:00.003");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3L + "'", long24 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
    }

    @Test
    public void test14622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14622");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder5.appendYear((int) (short) 1, 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder5.appendDayOfWeekShortText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder5.appendLiteral(' ');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder5.appendCenturyOfEra(10, 30900069);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
    }

    @Test
    public void test14623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14623");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder5.appendYear((int) (short) 1, 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder8.appendMinuteOfHour(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder10.appendFixedSignedDecimal(dateTimeFieldType11, 31);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder10.appendClockhourOfDay(99);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder10.appendEraText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder17.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap21 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder17.appendTimeZoneShortName(strMap21);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder23.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap27 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder23.appendTimeZoneShortName(strMap27);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder28.appendYear((int) (short) 1, 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = dateTimeFormatterBuilder31.appendDayOfWeekText();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType34 = dateTimeFieldType33.getDurationType();
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType33.getRangeDurationType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = dateTimeFormatterBuilder32.appendText(dateTimeFieldType33);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = dateTimeFormatterBuilder17.appendShortText(dateTimeFieldType33);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = dateTimeFormatterBuilder37.appendMillisOfDay(21);
        boolean boolean40 = dateTimeFormatterBuilder37.canBuildParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = dateTimeFormatterBuilder37.appendDayOfYear(33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatterBuilder42.toFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter43.withPivotYear((java.lang.Integer) 86399999);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter45.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter45.withOffsetParsed();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder48 = dateTimeFormatterBuilder10.append(dateTimeFormatter47);
        java.lang.Appendable appendable49 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter47.printTo(appendable49, (long) 36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder36);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder37);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder42);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder48);
    }

    @Test
    public void test14624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14624");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.add((long) 100);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add((long) 4);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime8.set(dateTimeFieldType9, (-292275054));
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        mutableDateTime8.add(readablePeriod12, 4);
        int int15 = mutableDateTime8.getMillisOfDay();
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime8.add(readableDuration16);
        int int18 = property6.compareTo((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (-1), chronology20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        org.joda.time.DateTime dateTime25 = localDateTime21.toDateTime(dateTimeZone23);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.DateTime dateTime28 = dateTime25.plus((long) 100);
        org.joda.time.DateTime.Property property29 = dateTime25.dayOfMonth();
        org.joda.time.DateTime dateTime30 = property29.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight31 = dateTime30.toDateMidnight();
        int int32 = property6.compareTo((org.joda.time.ReadableInstant) dateMidnight31);
        java.util.Locale locale33 = java.util.Locale.getDefault();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (-1), chronology35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone39 = dateTimeZone38.toTimeZone();
        org.joda.time.DateTime dateTime40 = localDateTime36.toDateTime(dateTimeZone38);
        org.joda.time.Chronology chronology41 = dateTime40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.hours();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.secondOfMinute();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (-1), chronology45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.weekyear();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.minusHours((-1));
        java.util.Locale locale50 = java.util.Locale.JAPANESE;
        java.lang.String str51 = dateTimeField43.getAsText((org.joda.time.ReadablePartial) localDateTime46, locale50);
        java.lang.String str52 = locale33.getDisplayScript(locale50);
        java.lang.String str53 = locale33.getISO3Language();
        int int54 = property6.getMaximumTextLength(locale33);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str26, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(locale33);
// flaky:         org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0" + "'", str51, "0");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "zho" + "'", str53, "zho");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
    }

    @Test
    public void test14625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14625");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale locale3 = builder0.build();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-1), chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDateTime6.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.hours();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.secondOfMinute();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.weekyear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.minusHours((-1));
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.lang.String str21 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDateTime16, locale20);
        java.util.Locale.Builder builder22 = builder0.setLocale(locale20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (-1), chronology24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.weekyear();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.dayOfMonth();
        int int30 = property29.get();
        org.joda.time.DateTimeField dateTimeField31 = property29.getField();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime34.withDayOfMonth(5);
        java.util.Locale locale37 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar calendar38 = dateTime36.toCalendar(locale37);
        java.lang.String str39 = dateTimeField31.getAsShortText((long) 1970, locale37);
        java.lang.String str40 = locale37.getDisplayLanguage();
        java.util.Locale.Builder builder41 = builder22.setLocale(locale37);
        java.util.Locale locale42 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale42);
        java.util.Locale.Builder builder44 = builder22.setLocale(locale42);
        java.util.Locale.Builder builder45 = builder44.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder47 = builder44.setScript("2022-02-21T15:05:59.255Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2022-02-21T15:05:59.255Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1644073984305,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=5,DAY_OF_YEAR=36,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=13,SECOND=4,MILLISECOND=308,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1" + "'", str39, "1");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\u6cd5\u6587" + "'", str40, "\u6cd5\u6587");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test14626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14626");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusMinutes(292278993);
        org.joda.time.LocalDateTime.Property property8 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.plusMillis(575);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.centuryOfEra();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withYear(26);
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = localDateTime14.getFields();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = localDateTime14.toString("DurationField[centuries]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: u");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
    }

    @Test
    public void test14627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14627");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) (byte) 1);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 1);
        org.joda.time.LocalDate localDate8 = localDate6.withDayOfYear((int) (byte) 10);
        org.joda.time.LocalDate localDate10 = localDate8.plusWeeks((-292275054));
        int int11 = dateTimeField2.getMaximumValue((org.joda.time.ReadablePartial) localDate8);
        java.lang.String str12 = dateTimeField2.toString();
        java.util.Locale locale13 = java.util.Locale.CANADA;
        int int14 = dateTimeField2.getMaximumShortTextLength(locale13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType15.getField(chronology16);
        int int19 = dateTimeField17.getLeapAmount((long) (byte) 1);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 1);
        org.joda.time.LocalDate localDate23 = localDate21.withDayOfYear((int) (byte) 10);
        org.joda.time.LocalDate localDate25 = localDate23.plusWeeks((-292275054));
        int int26 = dateTimeField17.getMaximumValue((org.joda.time.ReadablePartial) localDate23);
        java.lang.String str27 = dateTimeField17.toString();
        java.util.Locale locale28 = java.util.Locale.CANADA;
        int int29 = dateTimeField17.getMaximumShortTextLength(locale28);
        java.lang.String str30 = locale13.getDisplayName(locale28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = locale13.getUnicodeLocaleType("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 292278993 + "'", int11 == 292278993);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DateTimeField[year]" + "'", str12, "DateTimeField[year]");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 292278993 + "'", int26 == 292278993);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "DateTimeField[year]" + "'", str27, "DateTimeField[year]");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 9 + "'", int29 == 9);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "English (Canada)" + "'", str30, "English (Canada)");
    }

    @Test
    public void test14628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14628");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate10 = property7.addToCopy((int) ' ');
        org.joda.time.LocalDate localDate12 = localDate10.withWeekyear(2);
        int int13 = localDate12.getMonthOfYear();
        org.joda.time.DateTime dateTime14 = localDate12.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property15 = localDate12.dayOfYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test14629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14629");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale locale3 = builder0.build();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale4.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet6 = locale4.getUnicodeLocaleKeys();
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.getDefault(category7);
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category7, locale9);
        java.util.Locale locale12 = locale9.stripExtensions();
        java.lang.String str13 = locale4.getDisplayVariant(locale9);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale9);
        java.util.Locale.Builder builder16 = builder0.setLanguageTag("Germany");
        java.util.Locale.Builder builder18 = builder0.addUnicodeLocaleAttribute("fra");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder0.setLanguageTag("ISOChronology[+56:35]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: ISOChronology[+56:35] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "francese" + "'", str5, "francese");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test14630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14630");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2022-02-21T15:08:12.094+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime1);
    }

    @Test
    public void test14631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14631");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.yearOfEra();
        org.joda.time.DurationField durationField10 = chronology7.eras();
        boolean boolean11 = durationField10.isSupported();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test14632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14632");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = null;
        org.joda.time.format.DateTimeParser dateTimeParser3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter2, dateTimeParser3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (-1), chronology6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTime dateTime11 = localDateTime7.toDateTime(dateTimeZone9);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter4.withChronology(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.monthOfYear();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField16 = chronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField17 = chronology12.centuries();
        org.joda.time.DateTime dateTime18 = dateTime1.toDateTime(chronology12);
        org.joda.time.DateTime dateTime20 = dateTime1.minusMillis((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime21 = dateTime20.toLocalDateTime();
        org.joda.time.DateTime.Property property22 = dateTime20.secondOfMinute();
        org.joda.time.DateTime dateTime23 = property22.getDateTime();
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test14633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14633");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 1);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear((int) (byte) 10);
        org.joda.time.LocalDate localDate5 = localDate3.plusWeeks((-292275054));
        org.joda.time.LocalDate localDate7 = localDate5.withYearOfEra(10);
        org.joda.time.LocalDate localDate9 = localDate5.withWeekyear(31);
        int int10 = localDate5.getEra();
        org.joda.time.LocalDate localDate12 = localDate5.withYearOfCentury(69);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = localDate12.withDayOfMonth(54653370);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54653370 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test14634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14634");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (-1), chronology9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTime dateTime14 = localDateTime10.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.dayOfYear();
        org.joda.time.Chronology chronology17 = chronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.clockhourOfDay();
        long long20 = dateTimeField18.roundHalfEven((long) 19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (-1), chronology24);
        boolean boolean26 = dateTimeZone21.isLocalDateTimeGap(localDateTime25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.withMillisOfDay(5);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.plusHours((int) (short) 1);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (-1), chronology35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone39 = dateTimeZone38.toTimeZone();
        org.joda.time.DateTime dateTime40 = localDateTime36.toDateTime(dateTimeZone38);
        java.lang.String str41 = dateTime40.toString();
        org.joda.time.DateTime dateTime43 = dateTime40.plus((long) 100);
        org.joda.time.DateTime.Property property44 = dateTime43.yearOfCentury();
        java.util.Locale locale45 = java.util.Locale.GERMANY;
        java.util.Calendar calendar46 = dateTime43.toCalendar(locale45);
        int int47 = dateTime43.getMinuteOfHour();
        org.joda.time.DateTime dateTime49 = dateTime43.withYearOfEra((int) 'u');
        org.joda.time.DateTime.Property property50 = dateTime43.era();
        org.joda.time.DateTime dateTime51 = property50.roundHalfEvenCopy();
        org.joda.time.DurationField durationField52 = property50.getLeapDurationField();
        java.util.Locale locale54 = new java.util.Locale("hi!");
        java.lang.String str55 = locale54.getScript();
        java.lang.String str56 = locale54.getDisplayLanguage();
        java.lang.String str57 = locale54.getDisplayCountry();
        java.lang.String str58 = property50.getAsText(locale54);
        java.lang.String str59 = dateTimeField18.getAsText((org.joda.time.ReadablePartial) localDateTime25, 0, locale54);
        java.lang.String str60 = dateTimeZone4.getShortName((long) 0, locale54);
        java.util.Set<java.lang.Character> charSet61 = locale54.getExtensionKeys();
        java.lang.String str62 = locale54.getDisplayScript();
        java.lang.String str63 = locale54.toLanguageTag();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str41, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNull(durationField52);
        org.junit.Assert.assertEquals(locale54.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "AD" + "'", str58, "AD");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "0" + "'", str59, "0");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00:00.003" + "'", str60, "+00:00:00.003");
        org.junit.Assert.assertNotNull(charSet61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "und" + "'", str63, "und");
    }

    @Test
    public void test14635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14635");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        java.util.Iterator<java.lang.String> strItor5 = strSet4.iterator();
        java.util.stream.Stream<java.lang.String> strStream6 = strSet4.stream();
        java.lang.Object[] objArray7 = strSet4.toArray();
        boolean boolean8 = strSet2.retainAll((java.util.Collection<java.lang.String>) strSet4);
        java.util.stream.Stream<java.lang.String> strStream9 = strSet2.parallelStream();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "coreano" + "'", str1, "coreano");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strItor5);
        org.junit.Assert.assertNotNull(strStream6);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strStream9);
    }

    @Test
    public void test14636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14636");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) 10);
        java.lang.String str2 = dateTimeZone1.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+10:00" + "'", str2, "+10:00");
    }

    @Test
    public void test14637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14637");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2022-02-21T15:10:29.780+00:00:00.003");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-21t15:10:29.780+00:00:00.003");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14638");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.secondOfMinute();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (-1), chronology11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.weekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minusHours((-1));
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime12, locale16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.plus(readableDuration18);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test14639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14639");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.plus(readableDuration8);
        org.joda.time.DateTime dateTime11 = dateTime6.minusWeeks(10);
        boolean boolean13 = dateTime6.isBefore((long) (-1));
        org.joda.time.DateTime dateTime15 = dateTime6.plusMinutes(1970);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime18 = dateTime6.withPeriodAdded(readablePeriod16, 0);
        int int19 = dateTime6.getYearOfEra();
        int int20 = dateTime6.getCenturyOfEra();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 19 + "'", int20 == 19);
    }

    @Test
    public void test14640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14640");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder4.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("Property[weekOfWeekyear]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: Property[weekOfWeekyear] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test14641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14641");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusMinutes(292278993);
        org.joda.time.LocalDateTime.Property property8 = localDateTime2.yearOfEra();
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = null;
        org.joda.time.format.DateTimeParser dateTimeParser10 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter9, dateTimeParser10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (-1), chronology13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        org.joda.time.DateTime dateTime18 = localDateTime14.toDateTime(dateTimeZone16);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter11.withChronology(chronology19);
        boolean boolean21 = localDateTime2.equals((java.lang.Object) chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.monthOfYear();
        org.joda.time.DurationField durationField24 = chronology19.centuries();
        org.joda.time.DateTimeField dateTimeField25 = chronology19.hourOfDay();
        org.joda.time.DurationField durationField26 = dateTimeField25.getDurationField();
        long long29 = dateTimeField25.getDifferenceAsLong(4978799997L, 14400000L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1378L + "'", long29 == 1378L);
    }

    @Test
    public void test14642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14642");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-1), chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDateTime6.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter3.withChronology(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.monthOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.clockhourOfHalfday();
        org.joda.time.DurationField durationField15 = chronology11.days();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 1970, chronology11);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.Chronology chronology18 = chronology11.withUTC();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (-1), chronology20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        org.joda.time.DateTime dateTime25 = localDateTime21.toDateTime(dateTimeZone23);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.DateTime dateTime28 = dateTime25.plus((long) 100);
        org.joda.time.DateTime.Property property29 = dateTime28.yearOfCentury();
        java.util.Locale locale30 = java.util.Locale.GERMANY;
        java.util.Calendar calendar31 = dateTime28.toCalendar(locale30);
        org.joda.time.DateTime.Property property32 = dateTime28.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime33 = dateTime28.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusMillis((int) 'a');
        org.joda.time.Chronology chronology36 = localDateTime35.getChronology();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.minusHours(7);
        int[] intArray40 = chronology18.get((org.joda.time.ReadablePartial) localDateTime38, (long) (-66));
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.yearOfCentury();
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str26, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[1969, 12, 31, 86399934]");
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test14643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14643");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.getLocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.withYear(35);
        org.joda.time.LocalDate.Property property12 = localDate11.dayOfMonth();
        int int13 = localDate11.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
    }

    @Test
    public void test14644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14644");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale.Category category1 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = new java.util.Locale("365");
        java.lang.String str4 = locale3.getISO3Language();
        java.util.Locale.setDefault(category1, locale3);
        java.lang.String str6 = locale3.getISO3Country();
        java.util.Set<java.lang.String> strSet7 = locale3.getUnicodeLocaleKeys();
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.util.Iterator<java.lang.String> strItor10 = strSet9.iterator();
        java.lang.String[] strArray14 = new java.lang.String[] { "1969-12-31T23:59:59.999Z", "365", "1969-12-31T23:59:59.999Z" };
        java.util.ArrayList<java.lang.String> strList15 = new java.util.ArrayList<java.lang.String>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList15, strArray14);
        boolean boolean17 = strSet9.containsAll((java.util.Collection<java.lang.String>) strList15);
        java.lang.Object[] objArray18 = strSet9.toArray();
        boolean boolean19 = strSet9.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale locale23 = java.util.Locale.TAIWAN;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.util.Locale locale25 = java.util.Locale.GERMANY;
        java.util.Locale locale27 = new java.util.Locale("hi!");
        java.lang.String str28 = locale27.getScript();
        java.lang.String str29 = locale27.getDisplayLanguage();
        java.util.Locale locale31 = new java.util.Locale("hi!");
        java.lang.String str32 = locale31.getScript();
        java.lang.String str33 = locale31.getDisplayLanguage();
        java.util.Locale locale35 = new java.util.Locale("hi!");
        java.lang.String str36 = locale35.getScript();
        java.lang.String str37 = locale35.getDisplayLanguage();
        java.util.Locale[] localeArray38 = new java.util.Locale[] { locale23, locale24, locale25, locale27, locale31, locale35 };
        java.util.ArrayList<java.util.Locale> localeList39 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList39, localeArray38);
        java.util.Locale.FilteringMode filteringMode41 = null;
        java.util.List<java.util.Locale> localeList42 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList39, filteringMode41);
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.util.Locale locale46 = java.util.Locale.TAIWAN;
        java.util.Locale locale47 = java.util.Locale.GERMANY;
        java.util.Locale locale48 = java.util.Locale.GERMANY;
        java.util.Locale locale50 = new java.util.Locale("hi!");
        java.lang.String str51 = locale50.getScript();
        java.lang.String str52 = locale50.getDisplayLanguage();
        java.util.Locale locale54 = new java.util.Locale("hi!");
        java.lang.String str55 = locale54.getScript();
        java.lang.String str56 = locale54.getDisplayLanguage();
        java.util.Locale locale58 = new java.util.Locale("hi!");
        java.lang.String str59 = locale58.getScript();
        java.lang.String str60 = locale58.getDisplayLanguage();
        java.util.Locale[] localeArray61 = new java.util.Locale[] { locale46, locale47, locale48, locale50, locale54, locale58 };
        java.util.ArrayList<java.util.Locale> localeList62 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList62, localeArray61);
        java.util.Locale.FilteringMode filteringMode64 = null;
        java.util.List<java.util.Locale> localeList65 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.util.Locale>) localeList62, filteringMode64);
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList62);
        java.util.Set<java.lang.String> strSet67 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.lang.String str68 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strSet67);
        boolean boolean69 = strSet9.retainAll((java.util.Collection<java.lang.String>) strSet67);
        java.util.Locale locale70 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet71 = locale70.getUnicodeLocaleAttributes();
        java.util.Iterator<java.lang.String> strItor72 = strSet71.iterator();
        java.lang.String[] strArray76 = new java.lang.String[] { "1969-12-31T23:59:59.999Z", "365", "1969-12-31T23:59:59.999Z" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        boolean boolean79 = strSet71.containsAll((java.util.Collection<java.lang.String>) strList77);
        boolean boolean80 = strSet9.retainAll((java.util.Collection<java.lang.String>) strSet71);
        boolean boolean81 = strSet7.equals((java.lang.Object) strSet71);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList82 = java.util.Locale.filterTags(languageRangeList0, (java.util.Collection<java.lang.String>) strSet7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category1 + "' != '" + java.util.Locale.Category.FORMAT + "'", category1.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale3.toString(), "365");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "365" + "'", str4, "365");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(strItor10);
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de_DE");
        org.junit.Assert.assertEquals(locale27.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi!" + "'", str29, "hi!");
        org.junit.Assert.assertEquals(locale31.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "hi!" + "'", str33, "hi!");
        org.junit.Assert.assertEquals(locale35.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "hi!" + "'", str37, "hi!");
        org.junit.Assert.assertNotNull(localeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(localeList42);
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de_DE");
        org.junit.Assert.assertEquals(locale50.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "hi!" + "'", str52, "hi!");
        org.junit.Assert.assertEquals(locale54.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "hi!" + "'", str56, "hi!");
        org.junit.Assert.assertEquals(locale58.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "hi!" + "'", str60, "hi!");
        org.junit.Assert.assertNotNull(localeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(localeList65);
        org.junit.Assert.assertNotNull(localeList66);
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertNotNull(strItor72);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test14645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14645");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendMonthOfYearText();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getRangeDurationType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder4.appendShortText(dateTimeFieldType5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatterBuilder4.toFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withDefaultYear(53);
        java.lang.Appendable appendable11 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter8.printTo(appendable11, 997L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
    }

    @Test
    public void test14646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14646");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder5.appendYear((int) (short) 1, 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder8.appendMinuteOfHour(0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder10.appendDayOfYear((int) (byte) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder10.appendClockhourOfHalfday(18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
    }

    @Test
    public void test14647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14647");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        boolean boolean12 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = null;
        org.joda.time.format.DateTimeParser dateTimeParser15 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter14, dateTimeParser15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (-1), chronology18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        org.joda.time.DateTime dateTime23 = localDateTime19.toDateTime(dateTimeZone21);
        org.joda.time.Chronology chronology24 = dateTime23.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter16.withChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.monthOfYear();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.clockhourOfHalfday();
        org.joda.time.DurationField durationField28 = chronology24.days();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 1970, chronology24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter2.withChronology(chronology24);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter2.withChronology(chronology31);
        org.joda.time.Chronology chronology33 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeParser dateTimeParser34 = dateTimeFormatter2.getParser();
        org.joda.time.DateTimeZone dateTimeZone35 = dateTimeFormatter2.getZone();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNull(chronology33);
        org.junit.Assert.assertNull(dateTimeParser34);
        org.junit.Assert.assertNull(dateTimeZone35);
    }

    @Test
    public void test14648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14648");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.plus(readableDuration11);
        int int13 = dateTime12.getDayOfMonth();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.lang.String str18 = locale15.getDisplayVariant(locale17);
        java.lang.String str19 = dateTime12.toString("365", locale17);
        org.joda.time.DateTime dateTime21 = dateTime12.plusMonths(1969);
        org.joda.time.DateTime dateTime22 = dateTime12.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime24 = dateTime22.withYearOfEra(2022);
        org.joda.time.DateTime dateTime26 = dateTime22.withCenturyOfEra(947);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "365" + "'", str19, "365");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
    }

    @Test
    public void test14649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14649");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        org.joda.time.LocalTime localTime5 = localTime1.minusSeconds((int) (byte) 100);
        org.joda.time.LocalTime localTime7 = localTime5.withMillisOfSecond(3);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime5.plus(readablePeriod8);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalTime localTime11 = localTime9.plus(readablePeriod10);
        org.joda.time.Chronology chronology12 = localTime11.getChronology();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalTime localTime14 = localTime11.plus(readablePeriod13);
        org.joda.time.LocalTime localTime16 = localTime14.minusHours(88563);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalTime localTime18 = localTime16.plus(readablePeriod17);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test14650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14650");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendMonthOfYearText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendDayOfYear(517200);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (-1), chronology8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(dateTimeZone11);
        int int13 = property10.compareTo((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime15.add(readableDuration16, 100);
        boolean boolean19 = mutableDateTime12.isBefore((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableDateTime15.add(readableDuration20, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 'x', dateTimeZone25);
        mutableDateTime15.setZone(dateTimeZone25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.minuteOfHour();
        mutableDateTime15.set(dateTimeFieldType28, (int) '4');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder4.appendText(dateTimeFieldType28);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = dateTimeFormatterBuilder4.appendHalfdayOfDayText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder33 = dateTimeFormatterBuilder4.appendTimeZoneId();
        org.joda.time.format.DateTimePrinter dateTimePrinter34 = null;
        org.joda.time.format.DateTimeParser dateTimeParser35 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter34, dateTimeParser35);
        java.lang.Integer int37 = dateTimeFormatter36.getPivotYear();
        org.joda.time.tz.NameProvider nameProvider38 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) (-1), chronology40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.dayOfYear();
        org.joda.time.DurationField durationField43 = property42.getLeapDurationField();
        org.joda.time.Interval interval44 = property42.toInterval();
        long long45 = property42.remainder();
        java.util.Locale locale47 = new java.util.Locale("hi!");
        int int48 = property42.getMaximumShortTextLength(locale47);
        java.lang.String str49 = locale47.getVariant();
        java.lang.String str52 = nameProvider38.getName(locale47, "clockhourOfHalfday", "1");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter36.withLocale(locale47);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder54 = dateTimeFormatterBuilder4.append(dateTimeFormatter53);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatterBuilder4.toFormatter();
        java.lang.StringBuffer stringBuffer56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter55.printTo(stringBuffer56, readableInstant57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder33);
        org.junit.Assert.assertNull(int37);
        org.junit.Assert.assertNotNull(nameProvider38);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNull(durationField43);
        org.junit.Assert.assertNotNull(interval44);
// flaky:         org.junit.Assert.assertTrue("'" + long45 + "' != '" + 2L + "'", long45 == 2L);
        org.junit.Assert.assertEquals(locale47.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder54);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
    }

    @Test
    public void test14651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14651");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.addWrapField((-1));
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (-1), chronology6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTime dateTime11 = localDateTime7.toDateTime(dateTimeZone9);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.plus((long) 100);
        org.joda.time.DateTime.Property property15 = dateTime11.dayOfMonth();
        org.joda.time.DateTime dateTime16 = property15.withMaximumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfEvenCopy();
        mutableDateTime4.setMillis((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime20 = dateTime17.plusMillis((int) (byte) 1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str12, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test14652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14652");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime2.millisOfSecond();
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.lang.String str10 = property8.getAsShortText(locale9);
        java.lang.String str11 = locale9.getLanguage();
        java.util.Locale locale13 = new java.util.Locale("-292275054-01-03T00:00:10.999+56:35");
        org.joda.time.tz.NameProvider nameProvider14 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale16 = new java.util.Locale("365");
        java.lang.String str17 = locale16.getVariant();
        java.lang.String str20 = nameProvider14.getShortName(locale16, "", "2022-02-21T15:05:43.974Z");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider14);
        java.util.Locale locale24 = new java.util.Locale("Property[dayOfYear]", "");
        java.lang.String str25 = locale24.getLanguage();
        java.lang.String str28 = nameProvider14.getShortName(locale24, "java.io.IOException: 1969-12-31T23:59:59.999", "1970-01-01T00:00:00.196");
        java.util.Locale locale29 = null;
        java.lang.String str32 = nameProvider14.getShortName(locale29, "Chinese", "DEU");
        java.util.Locale.Category category33 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale35 = new java.util.Locale("365");
        java.lang.String str36 = locale35.getISO3Language();
        java.util.Locale.setDefault(category33, locale35);
        java.lang.String str38 = locale35.getISO3Country();
        java.lang.String str41 = nameProvider14.getName(locale35, "", "23");
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) (-1), chronology43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withMillisOfSecond((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.plusHours(0);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.weekyear();
        org.joda.time.LocalDateTime.Property property52 = localDateTime50.secondOfMinute();
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTimeField dateTimeField55 = mutableDateTime54.getRoundingField();
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime54.dayOfWeek();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) (-1), chronology58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.dayOfYear();
        org.joda.time.DurationField durationField61 = property60.getLeapDurationField();
        org.joda.time.Interval interval62 = property60.toInterval();
        long long63 = property60.remainder();
        java.util.Locale locale65 = new java.util.Locale("hi!");
        int int66 = property60.getMaximumShortTextLength(locale65);
        java.lang.String str67 = property56.getAsShortText(locale65);
        int int68 = property53.getMaximumTextLength(locale65);
        java.util.Locale locale69 = locale65.stripExtensions();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) (-1), chronology71);
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.dayOfYear();
        org.joda.time.DurationField durationField74 = property73.getLeapDurationField();
        org.joda.time.Interval interval75 = property73.toInterval();
        long long76 = property73.remainder();
        java.util.Locale locale78 = new java.util.Locale("hi!");
        int int79 = property73.getMaximumShortTextLength(locale78);
        java.lang.String str80 = locale78.getDisplayScript();
        java.util.Locale locale81 = java.util.Locale.ENGLISH;
        java.lang.String str82 = locale78.getDisplayVariant(locale81);
        java.lang.String str83 = locale65.getDisplayCountry(locale81);
        java.lang.String str84 = locale35.getDisplayVariant(locale81);
        java.lang.String str85 = locale13.getDisplayName(locale35);
        java.lang.String str86 = locale9.getDisplayScript(locale13);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2" + "'", str10, "2");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ja" + "'", str11, "ja");
        org.junit.Assert.assertEquals(locale13.toString(), "-292275054-01-03t00:00:10.999+56:35");
        org.junit.Assert.assertNotNull(nameProvider14);
        org.junit.Assert.assertEquals(locale16.toString(), "365");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals(locale24.toString(), "property[dayofyear]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "property[dayofyear]" + "'", str25, "property[dayofyear]");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + category33 + "' != '" + java.util.Locale.Category.FORMAT + "'", category33.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale35.toString(), "365");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "365" + "'", str36, "365");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNull(dateTimeField55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNull(durationField61);
        org.junit.Assert.assertNotNull(interval62);
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + 2L + "'", long63 == 2L);
        org.junit.Assert.assertEquals(locale65.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Mon" + "'", str67, "Mon");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 3 + "'", int68 == 3);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "hi!");
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNull(durationField74);
        org.junit.Assert.assertNotNull(interval75);
// flaky:         org.junit.Assert.assertTrue("'" + long76 + "' != '" + 2L + "'", long76 == 2L);
        org.junit.Assert.assertEquals(locale78.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3 + "'", int79 == 3);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "-292275054-01-03t00:00:10.999+56:35" + "'", str85, "-292275054-01-03t00:00:10.999+56:35");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
    }

    @Test
    public void test14653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14653");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.format.DateTimeParser dateTimeParser12 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 21);
        java.io.Writer writer15 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter14.printTo(writer15, (long) 97);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(dateTimeParser12);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
    }

    @Test
    public void test14654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14654");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(10L);
        org.joda.time.LocalDate.Property property2 = localDate1.yearOfCentury();
        org.joda.time.LocalDate localDate3 = property2.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate5 = localDate3.withMonthOfYear(10);
        org.joda.time.LocalDate localDate7 = localDate3.minusMonths(1645456355);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDate localDate9 = localDate3.minus(readablePeriod8);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test14655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14655");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        long long5 = dateTimeZone0.convertLocalToUTC(10L, false, (long) 3);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        java.util.TimeZone.setDefault(timeZone6);
        int int9 = timeZone6.getOffset((long) 2022);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        long long15 = dateTimeZone10.convertLocalToUTC(10L, false, (long) 3);
        java.util.TimeZone timeZone16 = dateTimeZone10.toTimeZone();
        java.util.TimeZone.setDefault(timeZone16);
        int int19 = timeZone16.getOffset((long) 2022);
        boolean boolean20 = timeZone6.hasSameRules(timeZone16);
        boolean boolean21 = timeZone16.observesDaylightTime();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        java.lang.String str24 = timeZone23.getID();
        java.util.TimeZone.setDefault(timeZone23);
        java.lang.String str26 = timeZone23.getID();
        boolean boolean27 = timeZone16.hasSameRules(timeZone23);
        timeZone23.setRawOffset((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '+00:00:00.003' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 7L + "'", long5 == 7L);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 7L + "'", long15 == 7L);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.003" + "'", str24, "+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.003" + "'", str26, "+00:00:00.003");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test14656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14656");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        int int13 = dateTime9.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime15.setTime((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime15.getZone();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.secondOfMinute();
        mutableDateTime20.setTime((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone27 = dateTimeZone26.toTimeZone();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (-1), chronology29);
        boolean boolean31 = dateTimeZone26.isLocalDateTimeGap(localDateTime30);
        java.lang.String str33 = dateTimeZone26.getName((long) 4);
        mutableDateTime23.setZoneRetainFields(dateTimeZone26);
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone26);
        long long37 = dateTimeZone18.getMillisKeepLocal(dateTimeZone26, (long) 9);
        org.joda.time.DateTime dateTime38 = dateTime9.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime40 = dateTime38.plusWeeks(49);
        org.joda.time.DateTime.Property property41 = dateTime40.secondOfDay();
        int int42 = dateTime40.getHourOfDay();
        org.joda.time.DateTime dateTime44 = dateTime40.withYearOfEra(1655696);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.003" + "'", str33, "+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 9L + "'", long37 == 9L);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test14657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14657");
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.millis();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (-1), chronology8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTime dateTime13 = localDateTime9.toDateTime(dateTimeZone11);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.DateTime dateTime16 = dateTime13.plus((long) 100);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfCentury();
        org.joda.time.DateTime dateTime19 = dateTime16.withWeekyear((int) 'x');
        org.joda.time.DateTime dateTime21 = dateTime19.plusWeeks((int) (byte) 0);
        org.joda.time.Chronology chronology22 = dateTime19.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.months();
        boolean boolean24 = durationFieldType6.isSupported(chronology22);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 85336, chronology22);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology22);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (-1), chronology28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.dayOfYear();
        org.joda.time.DurationField durationField31 = property30.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime33 = property30.addToCopy((-1));
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.era();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 'x', dateTimeZone37);
        boolean boolean40 = dateTimeZone37.isStandardOffset((long) 2);
        java.util.TimeZone timeZone41 = dateTimeZone37.toTimeZone();
        java.util.TimeZone timeZone42 = dateTimeZone37.toTimeZone();
        org.joda.time.DateTime dateTime43 = localDateTime33.toDateTime(dateTimeZone37);
        org.joda.time.Chronology chronology44 = chronology22.withZone(dateTimeZone37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(2000, 17, 2000, 3123, 86300003, chronology44);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3123 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str14, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNull(durationField31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
    }

    @Test
    public void test14658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14658");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone4 = dateTimeFormatter2.getZone();
        boolean boolean5 = dateTimeFormatter2.isPrinter();
        org.joda.time.Chronology chronology6 = dateTimeFormatter2.getChronolgy();
        java.lang.Appendable appendable7 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable7, 54408L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(chronology6);
    }

    @Test
    public void test14659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14659");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setMillisOfDay(10);
        mutableDateTime1.setMillisOfSecond((int) (short) 1);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.roundCeiling();
        int int9 = property6.getMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime11 = property6.set(36);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime11);
    }

    @Test
    public void test14660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14660");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        org.joda.time.LocalTime localTime5 = localTime1.minusSeconds((int) (byte) 100);
        org.joda.time.Chronology chronology6 = localTime1.getChronology();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.weekyear();
        int int9 = dateTimeField8.getMaximumValue();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 292278993 + "'", int9 == 292278993);
    }

    @Test
    public void test14661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14661");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet6 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone9 = provider0.getZone("2022-02-18T05:54:29.689Z");
        java.util.Set<java.lang.String> strSet10 = provider0.getAvailableIDs();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(strSet10);
    }

    @Test
    public void test14662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14662");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.getLocalDate();
        org.joda.time.DateTimeField dateTimeField10 = property7.getField();
        int int11 = property7.getMinimumValueOverall();
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property15 = localDate13.property(dateTimeFieldType14);
        java.util.Locale locale19 = new java.util.Locale("Property[dayOfYear]", "");
        org.joda.time.LocalDate localDate20 = property15.setCopy("365", locale19);
        java.lang.String str21 = locale12.getDisplayCountry(locale19);
        int int22 = property7.getMaximumTextLength(locale12);
        org.joda.time.LocalDate localDate24 = property7.addToCopy(1970);
        org.joda.time.LocalDate.Property property25 = localDate24.weekyear();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate28 = localDate24.withPeriodAdded(readablePeriod26, 0);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDate localDate30 = localDate28.plus(readablePeriod29);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals(locale19.toString(), "property[dayofyear]");
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Germany" + "'", str21, "Germany");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 7 + "'", int22 == 7);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
    }

    @Test
    public void test14663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14663");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setTime(100L);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.yearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutableDateTime1.add(readablePeriod5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (-1), chronology8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTime dateTime13 = localDateTime9.toDateTime(dateTimeZone11);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.DateTime dateTime16 = dateTime13.plus((long) 100);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfCentury();
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.util.Calendar calendar19 = dateTime16.toCalendar(locale18);
        int int20 = dateTime16.getMinuteOfHour();
        org.joda.time.DateTime dateTime22 = dateTime16.withYearOfEra((int) 'u');
        org.joda.time.DateTime.Property property23 = dateTime16.era();
        boolean boolean25 = dateTime16.isEqual((long) 100);
        org.joda.time.DateTime dateTime26 = dateTime16.toDateTime();
        org.joda.time.DateTime dateTime28 = dateTime26.minusHours((-292275054));
        boolean boolean29 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        mutableDateTime1.setZone(dateTimeZone30);
        mutableDateTime1.setMillisOfDay(0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str14, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test14664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14664");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        boolean boolean6 = dateTimeZone1.isLocalDateTimeGap(localDateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (-1), chronology8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekyear();
        boolean boolean11 = dateTimeZone1.isLocalDateTimeGap(localDateTime9);
        long long13 = dateTimeZone1.convertUTCToLocal(0L);
        java.lang.String str15 = dateTimeZone1.getNameKey((long) 575);
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime17 = dateTime0.toDateTime(dateTimeZone1);
        org.joda.time.DateTime.Property property18 = dateTime17.secondOfDay();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.DateTime dateTime21 = dateTime17.withDurationAdded(readableDuration19, 85515);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = dateTime21.withTime(54771, 18, 54775943, 911);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54771 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 3L + "'", long13 == 3L);
// flaky:         org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test14665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14665");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.util.Locale locale7 = new java.util.Locale("hi!");
        java.lang.String str8 = locale7.getScript();
        java.lang.String str9 = locale7.getDisplayLanguage();
        java.util.Locale locale11 = new java.util.Locale("hi!");
        java.lang.String str12 = locale11.getScript();
        java.lang.String str13 = locale11.getDisplayLanguage();
        java.util.Locale locale15 = new java.util.Locale("hi!");
        java.lang.String str16 = locale15.getScript();
        java.lang.String str17 = locale15.getDisplayLanguage();
        java.util.Locale[] localeArray18 = new java.util.Locale[] { locale3, locale4, locale5, locale7, locale11, locale15 };
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.Locale.FilteringMode filteringMode21 = null;
        java.util.List<java.util.Locale> localeList22 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList19, filteringMode21);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap23);
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleAttributes();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        long long32 = dateTimeZone27.convertLocalToUTC(10L, false, (long) 3);
        boolean boolean33 = strSet26.contains((java.lang.Object) false);
        java.util.Locale.FilteringMode filteringMode34 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList35 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet26, filteringMode34);
        int int36 = strSet26.size();
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = null;
        org.joda.time.format.DateTimeParser dateTimeParser39 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter38, dateTimeParser39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) (-1), chronology42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone46 = dateTimeZone45.toTimeZone();
        org.joda.time.DateTime dateTime47 = localDateTime43.toDateTime(dateTimeZone45);
        org.joda.time.Chronology chronology48 = dateTime47.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter40.withChronology(chronology48);
        org.joda.time.DateTimeField dateTimeField50 = chronology48.monthOfYear();
        org.joda.time.DateTimeField dateTimeField51 = chronology48.clockhourOfHalfday();
        org.joda.time.DurationField durationField52 = chronology48.days();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) 1970, chronology48);
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now(chronology48);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withWeekyear(10);
        int int57 = localDateTime54.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property58 = localDateTime54.dayOfMonth();
        boolean boolean59 = strSet26.contains((java.lang.Object) property58);
        org.joda.time.LocalDateTime localDateTime60 = property58.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime62 = property58.addWrapFieldToCopy(3600102);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.millisOfDay();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertEquals(locale15.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "hi!" + "'", str17, "hi!");
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localeList22);
        org.junit.Assert.assertNotNull(languageRangeList24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 7L + "'", long32 == 7L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + filteringMode34 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode34.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 13 + "'", int57 == 13);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
    }

    @Test
    public void test14666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14666");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 1);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear((int) (byte) 10);
        org.joda.time.LocalDate localDate5 = localDate1.withWeekyear(30);
        int int6 = localDate5.getCenturyOfEra();
        int int7 = localDate5.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property8 = localDate5.monthOfYear();
        org.joda.time.LocalDate localDate9 = property8.getLocalDate();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test14667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14667");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        java.lang.String str7 = localTime6.toString();
        org.joda.time.LocalTime localTime9 = localTime6.minusMillis(0);
        org.joda.time.LocalTime.Property property10 = localTime9.minuteOfHour();
        org.joda.time.LocalTime localTime12 = property10.setCopy(0);
        org.joda.time.LocalTime localTime14 = localTime12.minusMinutes(2138);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime16 = localTime14.withSecondOfMinute(54696);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54696 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "23:00:00.003" + "'", str7, "23:00:00.003");
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test14668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14668");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.addMillis((-292275054));
        java.lang.Object obj3 = mutableDateTime0.clone();
        mutableDateTime0.setMillis((long) 1972);
        org.joda.time.DateTime dateTime6 = mutableDateTime0.toDateTimeISO();
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "2022-02-18T06:01:49.907+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "2022-02-18T06:01:49.907+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "2022-02-18T06:01:49.907+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test14669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14669");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime1.set(dateTimeFieldType2, (-292275054));
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.yearOfEra();
        org.joda.time.DurationField durationField6 = property5.getDurationField();
        org.joda.time.MutableDateTime mutableDateTime8 = property5.set(2);
        mutableDateTime8.addWeekyears(115202063);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
    }

    @Test
    public void test14670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14670");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths(31);
        org.joda.time.LocalDate.Property property3 = localDate2.dayOfMonth();
        org.joda.time.LocalDate localDate4 = property3.withMinimumValue();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder5.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap9 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder5.appendTimeZoneShortName(strMap9);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder10.appendYear((int) (short) 1, 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder13.appendMinuteOfHour(0);
        boolean boolean16 = property3.equals((java.lang.Object) dateTimeFormatterBuilder15);
        org.joda.time.LocalDate localDate17 = property3.getLocalDate();
        org.joda.time.LocalDate localDate19 = property3.addWrapFieldToCopy(111);
        org.joda.time.LocalDate.Property property20 = localDate19.monthOfYear();
        org.joda.time.LocalDate localDate22 = localDate19.minusMonths(116);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate22);
    }

    @Test
    public void test14671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14671");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        boolean boolean5 = dateTimeZone0.isLocalDateTimeGap(localDateTime4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.minusHours((int) 'a');
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond(53);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusHours(1972);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime18 = localTime16.minusSeconds((int) (short) 10);
        int int19 = localTime16.getMinuteOfHour();
        org.joda.time.LocalTime.Property property20 = localTime16.hourOfDay();
        org.joda.time.LocalTime localTime21 = property20.withMaximumValue();
        org.joda.time.DateTime dateTime22 = localTime21.toDateTimeToday();
        org.joda.time.LocalTime localTime24 = localTime21.minusMillis((int) (short) 1);
        org.joda.time.LocalTime localTime26 = localTime21.plusMillis((-292275054));
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean27 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localTime26);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
    }

    @Test
    public void test14672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14672");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.plus(readableDuration8);
        org.joda.time.DateTime dateTime11 = dateTime6.minusWeeks(10);
        org.joda.time.DateTime.Property property12 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime6.withYear(0);
        int int15 = dateTime6.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime17.set(dateTimeFieldType18, (-292275054));
        java.lang.String str21 = dateTimeFieldType18.toString();
        org.joda.time.DateTime dateTime23 = dateTime6.withField(dateTimeFieldType18, 45);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (-1), chronology25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        org.joda.time.DateTime dateTime30 = localDateTime26.toDateTime(dateTimeZone28);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.DateTime dateTime33 = dateTime30.plus((long) 100);
        org.joda.time.DateTime.Property property34 = dateTime33.yearOfCentury();
        java.util.Locale locale35 = java.util.Locale.GERMANY;
        java.util.Calendar calendar36 = dateTime33.toCalendar(locale35);
        int int37 = dateTime33.getMinuteOfHour();
        org.joda.time.DateTime dateTime39 = dateTime33.withYearOfEra((int) 'u');
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.plus(readablePeriod40);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone43 = dateTimeZone42.toTimeZone();
        long long47 = dateTimeZone42.convertLocalToUTC(10L, false, (long) 3);
        int int49 = dateTimeZone42.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.DateTime dateTime50 = dateTime39.withZone(dateTimeZone42);
        org.joda.time.DateTime dateTime52 = dateTime39.minus(11518416000116L);
        boolean boolean53 = dateTime6.equals((java.lang.Object) 11518416000116L);
        org.joda.time.format.DateTimePrinter dateTimePrinter55 = null;
        org.joda.time.format.DateTimeParser dateTimeParser56 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter55, dateTimeParser56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) (-1), chronology59);
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone63 = dateTimeZone62.toTimeZone();
        org.joda.time.DateTime dateTime64 = localDateTime60.toDateTime(dateTimeZone62);
        org.joda.time.Chronology chronology65 = dateTime64.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter57.withChronology(chronology65);
        org.joda.time.DateTimeField dateTimeField67 = chronology65.monthOfYear();
        org.joda.time.DateTimeField dateTimeField68 = chronology65.clockhourOfHalfday();
        org.joda.time.DurationField durationField69 = chronology65.days();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((long) 1970, chronology65);
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime(chronology65);
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime();
        mutableDateTime72.add((long) 100);
        org.joda.time.Chronology chronology75 = null;
        mutableDateTime72.setChronology(chronology75);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.getDefault();
        long long79 = dateTimeZone77.previousTransition((long) 1);
        mutableDateTime72.setZone(dateTimeZone77);
        mutableDateTime72.setMillisOfSecond((int) ' ');
        org.joda.time.MutableDateTime.Property property83 = mutableDateTime72.millisOfDay();
        boolean boolean84 = mutableDateTime71.isBefore((org.joda.time.ReadableInstant) mutableDateTime72);
        boolean boolean85 = dateTime6.isEqual((org.joda.time.ReadableInstant) mutableDateTime72);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "year" + "'", str21, "year");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str31, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar36);
// flaky:         org.junit.Assert.assertEquals(calendar36.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 7L + "'", long47 == 7L);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(timeZone63);
// flaky:         org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1L + "'", long79 == 1L);
        org.junit.Assert.assertNotNull(property83);
// flaky:         org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test14673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14673");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds((int) (byte) 100);
        int int5 = localDateTime4.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.era();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minusYears((int) (short) -1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime4.millisOfDay();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test14674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14674");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = null;
        org.joda.time.format.DateTimeParser dateTimeParser3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter2, dateTimeParser3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (-1), chronology6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTime dateTime11 = localDateTime7.toDateTime(dateTimeZone9);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter4.withChronology(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.monthOfYear();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField16 = chronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField17 = chronology12.centuries();
        org.joda.time.DateTime dateTime18 = dateTime1.toDateTime(chronology12);
        org.joda.time.Chronology chronology19 = dateTime1.getChronology();
        org.joda.time.Chronology chronology20 = chronology19.withUTC();
        org.joda.time.DateTimeZone dateTimeZone21 = chronology19.getZone();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = dateTimeField22.getType();
        // The following exception was thrown during execution in test generation
        try {
            long long26 = dateTimeField22.set((-3600000L), "jpn");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"jpn\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
    }

    @Test
    public void test14675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14675");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder5.appendYear((int) (short) 1, 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder8.appendMinuteOfHour(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder10.appendFixedSignedDecimal(dateTimeFieldType11, 31);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder10.appendClockhourOfDay(99);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder15.appendHourOfDay(38);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder15.appendTimeZoneShortName();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder18.appendSecondOfMinute(630);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder20.appendTimeZoneOffset("2022-02-21T15:58:56.444+00:00:00.003", false, 53325048, 910);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
    }

    @Test
    public void test14676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14676");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder0.appendWeekyear(2000, 59);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder0.appendDayOfWeek(5);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder10.appendYear(21, 116);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder10.appendFractionOfHour(12, 2022);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder17.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap21 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder17.appendTimeZoneShortName(strMap21);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder22.appendYear((int) (short) 1, 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder25.appendDayOfWeekText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder25.appendClockhourOfHalfday(47);
        org.joda.time.format.DateTimeParser dateTimeParser29 = dateTimeFormatterBuilder25.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = dateTimeFormatterBuilder10.appendOptional(dateTimeParser29);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder33 = dateTimeFormatterBuilder10.appendFractionOfDay(6, 38);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = dateTimeFormatterBuilder33.appendFractionOfDay(54493, 36219);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = dateTimeFormatterBuilder36.appendClockhourOfDay(999);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(dateTimeParser29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder30);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder33);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder36);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder38);
    }

    @Test
    public void test14677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14677");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder0.appendWeekyear(2000, 59);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder0.appendDayOfWeek(5);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder10.appendYear(21, 116);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder13.appendWeekyear(43, 3600000);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder13.appendClockhourOfHalfday(85509434);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder13.appendHourOfHalfday((int) 'a');
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
    }

    @Test
    public void test14678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14678");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        boolean boolean7 = property5.isLeap();
        org.joda.time.LocalTime localTime8 = property5.roundFloorCopy();
        org.joda.time.LocalTime localTime9 = property5.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime10 = property5.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime14 = localTime12.minusSeconds((int) (short) 10);
        int int15 = localTime12.getMinuteOfHour();
        org.joda.time.LocalTime.Property property16 = localTime12.hourOfDay();
        org.joda.time.LocalTime localTime17 = property16.withMaximumValue();
        boolean boolean18 = property16.isLeap();
        org.joda.time.LocalTime localTime19 = property16.roundFloorCopy();
        org.joda.time.LocalTime localTime21 = localTime19.plusHours((int) (short) 1);
        org.joda.time.LocalTime localTime22 = localTime10.withFields((org.joda.time.ReadablePartial) localTime21);
        org.joda.time.LocalTime localTime24 = localTime10.plusMinutes((int) (byte) 1);
        org.joda.time.LocalTime localTime26 = localTime24.minusMillis(292278993);
        org.joda.time.LocalTime localTime28 = localTime24.withMillisOfDay((int) (byte) 100);
        org.joda.time.LocalTime localTime30 = localTime28.withMillisOfSecond(10);
        org.joda.time.LocalTime.Property property31 = localTime30.minuteOfHour();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test14679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14679");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale2 = new java.util.Locale("365");
        java.lang.String str3 = locale2.getISO3Language();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale8 = new java.util.Locale("", "1969-12-31T23:59:59.999Z", "1969-12-31T23:59:59.999Z");
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale10 = java.util.Locale.getDefault(category0);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime14 = localTime12.minusSeconds((int) (short) 10);
        int int15 = localTime12.getMinuteOfHour();
        org.joda.time.LocalTime.Property property16 = localTime12.hourOfDay();
        org.joda.time.LocalTime localTime17 = property16.withMaximumValue();
        boolean boolean18 = property16.isLeap();
        java.util.Locale locale22 = new java.util.Locale("", "1969-12-31T23:59:59.999Z", "1969-12-31T23:59:59.999Z");
        java.lang.String str23 = property16.getAsShortText(locale22);
        java.lang.String str24 = locale22.getDisplayScript();
        java.util.Locale locale25 = null;
        java.lang.String str26 = locale22.getDisplayScript(locale25);
        java.lang.String str28 = locale22.getExtension('u');
        java.util.Set<java.lang.String> strSet29 = locale22.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category0, locale22);
        java.util.Locale locale31 = java.util.Locale.getDefault(category0);
        java.util.Locale locale33 = new java.util.Locale("365");
        java.lang.String str34 = locale33.getISO3Language();
        java.lang.String str35 = locale33.getDisplayLanguage();
        java.lang.String str36 = locale31.getDisplayCountry(locale33);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale2.toString(), "365");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "365" + "'", str3, "365");
        org.junit.Assert.assertEquals(locale8.toString(), "_1969-12-31T23:59:59.999Z_1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "_1969-12-31T23:59:59.999Z_1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals(locale22.toString(), "_1969-12-31T23:59:59.999Z_1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0" + "'", str23, "0");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "_1969-12-31T23:59:59.999Z_1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertEquals(locale33.toString(), "365");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "365" + "'", str34, "365");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "365" + "'", str35, "365");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str36, "1969-12-31T23:59:59.999Z");
    }

    @Test
    public void test14680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14680");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property2 = localDate0.property(dateTimeFieldType1);
        java.util.Locale locale6 = new java.util.Locale("Property[dayOfYear]", "");
        org.joda.time.LocalDate localDate7 = property2.setCopy("365", locale6);
        org.joda.time.LocalDate localDate9 = property2.setCopy((int) 'a');
        org.joda.time.LocalDate localDate11 = property2.setCopy((-1));
        org.joda.time.LocalDate localDate12 = property2.roundCeilingCopy();
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths(32);
        org.joda.time.LocalDate localDate16 = localDate14.withWeekyear(928);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate18 = localDate14.withDayOfWeek(5270);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 5270 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals(locale6.toString(), "property[dayofyear]");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test14681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14681");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDateTime4.toDateTime(dateTimeZone6);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.plus((long) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfCentury();
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.util.Calendar calendar14 = dateTime11.toCalendar(locale13);
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale15.toLanguageTag();
        java.lang.String str17 = locale13.getDisplayCountry(locale15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology1, locale13, (java.lang.Integer) 38);
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = null;
        org.joda.time.format.DateTimeParser dateTimeParser21 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter20, dateTimeParser21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (-1), chronology24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTime dateTime29 = localDateTime25.toDateTime(dateTimeZone27);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter22.withChronology(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.monthOfYear();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.weekyearOfCentury();
        dateTimeParserBucket19.saveField(dateTimeField33, 19);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType36.getField(chronology37);
        dateTimeParserBucket19.saveField(dateTimeFieldType36, 69);
        java.util.Locale locale41 = dateTimeParserBucket19.getLocale();
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Chronology chronology44 = null;
        mutableDateTime43.setChronology(chronology44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType46.getField(chronology47);
        mutableDateTime43.setRounding(dateTimeField48, (int) (short) 1);
        boolean boolean51 = dateTimeField48.isSupported();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = dateTimeField48.getType();
        int int54 = dateTimeField48.getLeapAmount(0L);
        java.util.Locale locale56 = java.util.Locale.GERMANY;
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) (-1), chronology58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone62 = dateTimeZone61.toTimeZone();
        org.joda.time.DateTime dateTime63 = localDateTime59.toDateTime(dateTimeZone61);
        java.lang.String str64 = dateTime63.toString();
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.DateTime dateTime66 = dateTime63.plus(readableDuration65);
        org.joda.time.DateTime dateTime68 = dateTime63.minusWeeks(10);
        boolean boolean70 = dateTime63.isBefore((long) (-1));
        int int71 = dateTime63.getYearOfEra();
        org.joda.time.DateTime dateTime73 = dateTime63.plusDays(1969);
        org.joda.time.DateTime.Property property74 = dateTime73.weekOfWeekyear();
        java.util.Locale locale75 = java.util.Locale.US;
        int int76 = property74.getMaximumShortTextLength(locale75);
        java.lang.String str77 = locale56.getDisplayScript(locale75);
        java.lang.String str78 = dateTimeField48.getAsShortText((long) 2, locale75);
        dateTimeParserBucket19.saveField(dateTimeField48, 53);
        java.util.Locale locale81 = dateTimeParserBucket19.getLocale();
        long long82 = dateTimeParserBucket19.computeMillis();
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str9, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh-TW" + "'", str16, "zh-TW");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u5fb7\u570b" + "'", str17, "\u5fb7\u570b");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de_DE");
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de_DE");
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(timeZone62);
// flaky:         org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime63);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str64, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1970 + "'", int71 == 1970);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "1970" + "'", str78, "1970");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "de_DE");
// flaky:         org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-61567603198033L) + "'", long82 == (-61567603198033L));
    }

    @Test
    public void test14682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14682");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        java.util.GregorianCalendar gregorianCalendar2 = mutableDateTime1.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now(dateTimeZone3);
        java.util.GregorianCalendar gregorianCalendar5 = mutableDateTime4.toGregorianCalendar();
        boolean boolean6 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime4.getZone();
        mutableDateTime4.addMillis(48);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (short) -1);
        long long12 = mutableDateTime11.getMillis();
        java.lang.Object obj13 = mutableDateTime11.clone();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTime dateTime20 = localDateTime16.toDateTime(dateTimeZone18);
        int int22 = dateTimeZone18.getOffsetFromLocal((long) (byte) 10);
        long long24 = dateTimeZone18.nextTransition((long) 59);
        mutableDateTime11.setZone(dateTimeZone18);
        mutableDateTime4.setZone(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime29.set(dateTimeFieldType30, (-292275054));
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        mutableDateTime29.add(readablePeriod33, 4);
        int int36 = mutableDateTime29.getMillisOfDay();
        int int37 = mutableDateTime29.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime();
        mutableDateTime38.add((long) 100);
        org.joda.time.Chronology chronology41 = null;
        mutableDateTime38.setChronology(chronology41);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        long long45 = dateTimeZone43.previousTransition((long) 1);
        mutableDateTime38.setZone(dateTimeZone43);
        java.lang.String str47 = dateTimeZone43.toString();
        mutableDateTime29.setZoneRetainFields(dateTimeZone43);
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(0L, dateTimeZone43);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((java.lang.Object) mutableDateTime4, dateTimeZone43);
        mutableDateTime4.add(37L);
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime((long) (short) -1);
        long long55 = mutableDateTime54.getMillis();
        java.lang.Object obj56 = mutableDateTime54.clone();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) (-1), chronology58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone62 = dateTimeZone61.toTimeZone();
        org.joda.time.DateTime dateTime63 = localDateTime59.toDateTime(dateTimeZone61);
        int int65 = dateTimeZone61.getOffsetFromLocal((long) (byte) 10);
        long long67 = dateTimeZone61.nextTransition((long) 59);
        mutableDateTime54.setZone(dateTimeZone61);
        int int69 = mutableDateTime54.getYearOfCentury();
        java.lang.String str71 = mutableDateTime54.toString("00:00:00.005");
        mutableDateTime54.addYears(999);
        boolean boolean74 = mutableDateTime4.isAfter((org.joda.time.ReadableInstant) mutableDateTime54);
        mutableDateTime54.setMillisOfDay(54493);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(gregorianCalendar5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNotNull(obj13);
// flaky:         org.junit.Assert.assertEquals(obj13.toString(), "1970-01-01T00:00:00.002+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "1970-01-01T00:00:00.002+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 59L + "'", long24 == 59L);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2922750 + "'", int37 == 2922750);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.003" + "'", str47, "+00:00:00.003");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertNotNull(obj56);
// flaky:         org.junit.Assert.assertEquals(obj56.toString(), "1970-01-01T00:00:00.002+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "1970-01-01T00:00:00.002+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(timeZone62);
// flaky:         org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime63);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 59L + "'", long67 == 59L);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 70 + "'", int69 == 70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "00:00:00.005" + "'", str71, "00:00:00.005");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test14683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14683");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.plus(readableDuration8);
        org.joda.time.DateTime dateTime11 = dateTime6.minusWeeks(10);
        boolean boolean13 = dateTime6.isBefore((long) (-1));
        org.joda.time.DateTime dateTime18 = dateTime6.withTime(3, 23, 2, 30);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        int int21 = dateTime20.getCenturyOfEra();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.minus(readableDuration22);
        org.joda.time.DateTimeZone dateTimeZone24 = dateTime20.getZone();
        org.joda.time.DateTime.Property property25 = dateTime20.dayOfMonth();
        int int26 = dateTime20.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 19 + "'", int21 == 19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test14684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14684");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (-1), chronology2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTime dateTime7 = localDateTime3.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.secondOfDay();
        org.joda.time.DurationField durationField10 = chronology8.minutes();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        long long15 = chronology8.add(readablePeriod12, (long) 31, 69);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (-1), chronology17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.weekyear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withSecondOfMinute((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusYears(0);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withPeriodAdded(readablePeriod24, 33);
        int[] intArray28 = chronology8.get((org.joda.time.ReadablePartial) localDateTime23, 315532800000L);
        java.util.Locale locale29 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket32 = new org.joda.time.format.DateTimeParserBucket(0L, chronology8, locale29, (java.lang.Integer) 117, 0);
        org.joda.time.DateTimeField dateTimeField33 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField34 = chronology8.clockhourOfHalfday();
        long long36 = dateTimeField34.roundFloor(0L);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 31L + "'", long15 == 31L);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[1980, 1, 1, 3]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-3L) + "'", long36 == (-3L));
    }

    @Test
    public void test14685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14685");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property2 = localDate0.property(dateTimeFieldType1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        boolean boolean4 = localDate0.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDate.Property property5 = localDate0.era();
        org.joda.time.LocalDate.Property property6 = localDate0.era();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((java.lang.Object) localDate0);
        org.joda.time.DateTime dateTime8 = localDate0.toDateTimeAtStartOfDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder9.appendFractionOfSecond(33, (int) (short) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder12.appendMonthOfYearText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder13.appendDayOfYear(517200);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (-1), chronology17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.weekyear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        int int22 = property19.compareTo((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(dateTimeZone23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        mutableDateTime24.add(readableDuration25, 100);
        boolean boolean28 = mutableDateTime21.isBefore((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.ReadableDuration readableDuration29 = null;
        mutableDateTime24.add(readableDuration29, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 'x', dateTimeZone34);
        mutableDateTime24.setZone(dateTimeZone34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.minuteOfHour();
        mutableDateTime24.set(dateTimeFieldType37, (int) '4');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = dateTimeFormatterBuilder13.appendText(dateTimeFieldType37);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder41 = dateTimeFormatterBuilder13.appendHalfdayOfDayText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = dateTimeFormatterBuilder13.appendTimeZoneId();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder44 = dateTimeFormatterBuilder13.appendMillisOfDay(517200);
        boolean boolean45 = dateTimeFormatterBuilder13.canBuildPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder46 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder49 = dateTimeFormatterBuilder46.appendFractionOfSecond(33, (int) (short) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder50 = dateTimeFormatterBuilder49.appendMonthOfYearText();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType52 = dateTimeFieldType51.getRangeDurationType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder53 = dateTimeFormatterBuilder50.appendShortText(dateTimeFieldType51);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder54 = dateTimeFormatterBuilder13.appendText(dateTimeFieldType51);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder55 = dateTimeFormatterBuilder13.appendMonthOfYearText();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) (-1), chronology57);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.weekyear();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime63 = localDateTime58.plusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property64 = localDateTime58.millisOfSecond();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) (-1), chronology66);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.weekyear();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime67.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime72 = localDateTime67.plusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod73 = null;
        org.joda.time.LocalDateTime localDateTime74 = localDateTime67.minus(readablePeriod73);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime67.withYearOfCentury(23);
        int int77 = localDateTime58.compareTo((org.joda.time.ReadablePartial) localDateTime67);
        int int78 = localDateTime67.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property79 = localDateTime67.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean81 = localDateTime67.isSupported(dateTimeFieldType80);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder82 = dateTimeFormatterBuilder13.appendText(dateTimeFieldType80);
        // The following exception was thrown during execution in test generation
        try {
            int int83 = localDate0.get(dateTimeFieldType80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'clockhourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder40);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder41);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder42);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder49);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder53);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder54);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder55);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 19 + "'", int78 == 19);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder82);
    }

    @Test
    public void test14686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14686");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime6.millisOfSecond();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 1, chronology12);
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded((long) (byte) 0, 292278993);
        int int17 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime19 = dateTime6.plus((long) 86390000);
        org.joda.time.DateTime dateTime21 = dateTime6.minusMinutes((int) 'u');
        org.joda.time.DateTime dateTime22 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (-1), chronology24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTime dateTime29 = localDateTime25.toDateTime(dateTimeZone27);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfDay();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.yearOfEra();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) (-1), chronology34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone38 = dateTimeZone37.toTimeZone();
        org.joda.time.DateTime dateTime39 = localDateTime35.toDateTime(dateTimeZone37);
        int int41 = dateTimeZone37.getOffsetFromLocal((long) (byte) 10);
        long long43 = dateTimeZone37.nextTransition((long) 59);
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now(dateTimeZone37);
        org.joda.time.Chronology chronology45 = chronology30.withZone(dateTimeZone37);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) (-1), chronology47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone51 = dateTimeZone50.toTimeZone();
        org.joda.time.DateTime dateTime52 = localDateTime48.toDateTime(dateTimeZone50);
        java.lang.String str53 = dateTime52.toString();
        org.joda.time.DateTime dateTime55 = dateTime52.plus((long) 100);
        org.joda.time.DateTime.Property property56 = dateTime52.millisOfSecond();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) (short) 1, chronology58);
        org.joda.time.DateTime dateTime62 = dateTime59.withDurationAdded((long) (byte) 0, 292278993);
        int int63 = dateTime52.compareTo((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime dateTime65 = dateTime52.plus((long) 86390000);
        org.joda.time.DateTime dateTime67 = dateTime52.minusMinutes((int) 'u');
        int int68 = dateTimeZone37.getOffset((org.joda.time.ReadableInstant) dateTime52);
        int int69 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTime.Property property70 = dateTime52.dayOfWeek();
        boolean boolean71 = dateTime52.isEqualNow();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 59L + "'", long43 == 59L);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str53, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 3 + "'", int68 == 3);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test14687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14687");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        boolean boolean7 = property5.isLeap();
        org.joda.time.LocalTime localTime9 = property5.addCopy((int) (byte) -1);
        org.joda.time.LocalTime localTime10 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime11 = property5.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime13 = property5.addCopy((-529875054L));
        org.joda.time.LocalTime localTime14 = property5.roundHalfFloorCopy();
        org.joda.time.LocalTime.Property property15 = localTime14.minuteOfHour();
        org.joda.time.LocalTime localTime17 = property15.addCopy((long) (-1971));
        int int18 = property15.getMinimumValue();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test14688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14688");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 5);
        int int2 = localDate1.getDayOfMonth();
        org.joda.time.LocalDate localDate4 = localDate1.minusWeeks((int) (byte) 100);
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate((java.lang.Object) localDate4);
        int int6 = localDate5.getCenturyOfEra();
        org.joda.time.LocalDate.Property property7 = localDate5.dayOfYear();
        org.joda.time.LocalDate localDate9 = localDate5.minusMonths(54449);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 19 + "'", int6 == 19);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test14689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14689");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        int int13 = dateTime9.getMinuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime9.withYearOfEra((int) 'u');
        org.joda.time.DateTime dateTime17 = dateTime15.withMillis((-1L));
        int int18 = dateTime17.getMinuteOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test14690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14690");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        boolean boolean6 = dateTimeZone1.isLocalDateTimeGap(localDateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (-1), chronology8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekyear();
        boolean boolean11 = dateTimeZone1.isLocalDateTimeGap(localDateTime9);
        long long13 = dateTimeZone1.convertUTCToLocal(0L);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusYears(265);
        java.lang.String str17 = localDateTime16.toString();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 3L + "'", long13 == 3L);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1757-02-21T15:13:05.415" + "'", str17, "1757-02-21T15:13:05.415");
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test14691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14691");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime2.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean10 = localDateTime2.isSupported(dateTimeFieldType9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (-1), chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusSeconds((int) (byte) 100);
        int int16 = localDateTime15.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.era();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.minusYears((int) (short) -1);
        boolean boolean20 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (-1), chronology22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.weekyear();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.plusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property29 = localDateTime23.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean31 = localDateTime23.isSupported(dateTimeFieldType30);
        int int32 = localDateTime23.getDayOfWeek();
        int int33 = localDateTime23.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now(dateTimeZone34);
        java.util.GregorianCalendar gregorianCalendar36 = mutableDateTime35.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now(dateTimeZone37);
        java.util.GregorianCalendar gregorianCalendar39 = mutableDateTime38.toGregorianCalendar();
        boolean boolean40 = mutableDateTime35.isAfter((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.DateTimeZone dateTimeZone41 = mutableDateTime38.getZone();
        mutableDateTime38.addMillis(48);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) (short) -1);
        long long46 = mutableDateTime45.getMillis();
        java.lang.Object obj47 = mutableDateTime45.clone();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) (-1), chronology49);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone53 = dateTimeZone52.toTimeZone();
        org.joda.time.DateTime dateTime54 = localDateTime50.toDateTime(dateTimeZone52);
        int int56 = dateTimeZone52.getOffsetFromLocal((long) (byte) 10);
        long long58 = dateTimeZone52.nextTransition((long) 59);
        mutableDateTime45.setZone(dateTimeZone52);
        mutableDateTime38.setZone(dateTimeZone52);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime38.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime38.property(dateTimeFieldType62);
        int int64 = localDateTime23.get(dateTimeFieldType62);
        org.joda.time.LocalDateTime.Property property65 = localDateTime23.weekOfWeekyear();
        int int66 = localDateTime2.compareTo((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.Chronology chronology67 = localDateTime23.getChronology();
        int int68 = localDateTime23.getDayOfYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 70 + "'", int33 == 70);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(gregorianCalendar36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(gregorianCalendar39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertNotNull(obj47);
// flaky:         org.junit.Assert.assertEquals(obj47.toString(), "1970-01-01T00:00:00.002+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "1970-01-01T00:00:00.002+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 3 + "'", int56 == 3);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 59L + "'", long58 == 59L);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 70 + "'", int64 == 70);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(chronology67);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
    }

    @Test
    public void test14692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14692");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(16329600000L);
    }

    @Test
    public void test14693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14693");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.clockhourOfHalfday();
        org.joda.time.DurationField durationField14 = chronology10.days();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.secondOfDay();
        org.joda.time.Chronology chronology16 = chronology10.withUTC();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfHalfday();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test14694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14694");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfCeiling();
        mutableDateTime3.setMinuteOfDay(4);
        mutableDateTime3.add(0L);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime3.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        mutableDateTime11.add((long) '#');
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime11.monthOfYear();
        mutableDateTime11.addDays(999);
        mutableDateTime11.add((-1L));
        mutableDateTime3.setDate((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime21.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration24 = null;
        mutableDateTime21.add(readableDuration24, (int) (short) 100);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime21.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime29 = property27.addWrapField((int) (byte) -1);
        java.lang.String str30 = mutableDateTime29.toString();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        long long37 = dateTimeZone32.convertLocalToUTC(10L, false, (long) 3);
        java.util.TimeZone timeZone38 = dateTimeZone32.toTimeZone();
        java.util.TimeZone timeZone39 = dateTimeZone32.toTimeZone();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(66L, dateTimeZone32);
        boolean boolean41 = mutableDateTime29.isBefore((org.joda.time.ReadableInstant) dateTime40);
        int int42 = mutableDateTime29.getWeekyear();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime29.weekyear();
        int int44 = mutableDateTime29.getRoundingMode();
        mutableDateTime3.setTime((org.joda.time.ReadableInstant) mutableDateTime29);
        mutableDateTime3.setTime(203699964L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2090-01-31T00:00:00.002+00:00:00.003" + "'", str30, "2090-01-31T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 7L + "'", long37 == 7L);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2090 + "'", int42 == 2090);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
    }

    @Test
    public void test14695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14695");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        org.joda.time.LocalTime.Property property4 = localTime3.hourOfDay();
        org.joda.time.LocalTime localTime6 = localTime3.plusMinutes((-94));
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
    }

    @Test
    public void test14696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14696");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDateTime4.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.secondOfDay();
        org.joda.time.DurationField durationField11 = chronology9.minutes();
        org.joda.time.DurationField durationField12 = chronology9.minutes();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 292278993, chronology9);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 'a', chronology9);
        org.joda.time.DateTimeField dateTimeField15 = chronology9.centuryOfEra();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        org.joda.time.DateTime dateTime24 = localDateTime20.toDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfDay();
        org.joda.time.DurationField durationField27 = chronology25.minutes();
        org.joda.time.DurationField durationField28 = chronology25.minutes();
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 292278993, chronology25);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 'a', chronology25);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withCenturyOfEra(2922750);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.minusMonths(888);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.plusMinutes(359);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (-1), chronology39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusSeconds((int) (byte) 100);
        int int43 = localDateTime42.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property44 = localDateTime42.era();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.minusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withYear(30);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.hourOfDay();
        org.joda.time.LocalDateTime localDateTime50 = property49.roundHalfEvenCopy();
        int[] intArray51 = localDateTime50.getValues();
        int[] intArray53 = dateTimeField15.add((org.joda.time.ReadablePartial) localDateTime30, 0, intArray51, 7);
        int int54 = dateTimeField15.getMaximumValue();
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[1978, 1, 1, 0]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[1978, 1, 1, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2922789 + "'", int54 == 2922789);
    }

    @Test
    public void test14697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14697");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property2 = localDate0.property(dateTimeFieldType1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        boolean boolean4 = localDate0.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDate.Property property5 = localDate0.era();
        org.joda.time.LocalDate.Property property6 = localDate0.dayOfMonth();
        org.joda.time.DurationField durationField7 = property6.getDurationField();
        org.joda.time.LocalDate localDate8 = property6.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate9 = property6.roundCeilingCopy();
        org.joda.time.LocalDate localDate10 = property6.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate11 = property6.withMaximumValue();
        org.joda.time.LocalDate.Property property12 = localDate11.dayOfYear();
        org.joda.time.LocalDate localDate14 = property12.setCopy(82);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test14698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14698");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime1.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime1.add(readableDuration4, (int) (short) 100);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.getMutableDateTime();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.dayOfMonth();
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test14699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14699");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-1), chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDateTime6.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter3.withChronology(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.monthOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.clockhourOfHalfday();
        org.joda.time.DurationField durationField15 = chronology11.days();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 1970, chronology11);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(chronology11);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withWeekyear(10);
        int int20 = localDateTime17.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property21 = localDateTime17.dayOfMonth();
        org.joda.time.DurationField durationField22 = property21.getLeapDurationField();
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 13 + "'", int20 == 13);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNull(durationField22);
    }

    @Test
    public void test14700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14700");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.getLocalDate();
        org.joda.time.DateTimeField dateTimeField10 = property7.getField();
        org.joda.time.LocalDate localDate12 = property7.addWrapFieldToCopy(910);
        org.joda.time.LocalDate localDate14 = localDate12.minusDays((int) (short) 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test14701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14701");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder5.appendYear((int) (short) 1, 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder8.appendMinuteOfHour(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder10.appendFixedSignedDecimal(dateTimeFieldType11, 31);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder13.appendYearOfCentury(999, (int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Chronology chronology19 = null;
        mutableDateTime18.setChronology(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        mutableDateTime18.setRounding(dateTimeField23, (int) (short) 1);
        boolean boolean26 = dateTimeField23.isSupported();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = dateTimeField23.getType();
        java.lang.String str28 = dateTimeFieldType27.toString();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder16.appendDecimal(dateTimeFieldType27, 1969, 0);
        org.joda.time.format.DateTimePrinter dateTimePrinter32 = dateTimeFormatterBuilder16.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder33 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = dateTimeFormatterBuilder33.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap37 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = dateTimeFormatterBuilder33.appendTimeZoneShortName(strMap37);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder41 = dateTimeFormatterBuilder33.appendWeekyear(2000, 59);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder43 = dateTimeFormatterBuilder33.appendDayOfWeek(5);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (-1), chronology45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone49 = dateTimeZone48.toTimeZone();
        org.joda.time.DateTime dateTime50 = localDateTime46.toDateTime(dateTimeZone48);
        org.joda.time.Chronology chronology51 = dateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.secondOfDay();
        org.joda.time.DurationField durationField53 = chronology51.minutes();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField55 = chronology51.hourOfDay();
        org.joda.time.DurationField durationField56 = dateTimeField55.getLeapDurationField();
        java.util.Locale locale58 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.Character> charSet59 = locale58.getExtensionKeys();
        java.lang.String str60 = dateTimeField55.getAsText(19, locale58);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = dateTimeField55.getType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder63 = dateTimeFormatterBuilder43.appendFixedDecimal(dateTimeFieldType61, 1969);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder66 = dateTimeFormatterBuilder16.appendDecimal(dateTimeFieldType61, 116, 365);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder69 = dateTimeFormatterBuilder16.appendFractionOfMinute(54451, 2027);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder71 = dateTimeFormatterBuilder16.appendMillisOfDay(5270);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder73 = dateTimeFormatterBuilder16.appendSecondOfMinute((-1987));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "year" + "'", str28, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertNotNull(dateTimePrinter32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder36);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder38);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder41);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder43);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNull(durationField56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ja");
        org.junit.Assert.assertNotNull(charSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "19" + "'", str60, "19");
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder63);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder66);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder69);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder71);
    }

    @Test
    public void test14702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14702");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder0.appendWeekyear(2000, 59);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (-1), chronology10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.weekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(dateTimeZone13);
        int int15 = property12.compareTo((org.joda.time.ReadableInstant) mutableDateTime14);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime17.add(readableDuration18, 100);
        boolean boolean21 = mutableDateTime14.isBefore((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime17.add(readableDuration22, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 'x', dateTimeZone27);
        mutableDateTime17.setZone(dateTimeZone27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfHour();
        mutableDateTime17.set(dateTimeFieldType30, (int) '4');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = dateTimeFormatterBuilder8.appendFraction(dateTimeFieldType30, 2922750, 1969);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = dateTimeFormatterBuilder35.appendYearOfEra(86399, 1970);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = dateTimeFormatterBuilder35.appendHourOfHalfday((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = dateTimeFormatterBuilder35.appendClockhourOfDay(2922750);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = dateTimeFormatterBuilder42.appendYear((int) (short) 10, 54397508);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder47 = dateTimeFormatterBuilder42.appendMillisOfDay(0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder50 = dateTimeFormatterBuilder42.appendFractionOfHour(33, (int) ' ');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder52 = dateTimeFormatterBuilder50.appendLiteral("Germany");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder55 = dateTimeFormatterBuilder50.appendFractionOfDay(645, (-2526));
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder35);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder38);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder40);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder42);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder45);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder47);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder50);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder52);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder55);
    }

    @Test
    public void test14703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14703");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property2 = localDate0.property(dateTimeFieldType1);
        org.joda.time.LocalDate localDate4 = localDate0.withDayOfMonth(10);
        org.joda.time.LocalDate localDate6 = localDate0.withYearOfEra(99);
        org.joda.time.LocalDate.Property property7 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate9 = localDate0.minusDays(2089);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder10.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap14 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder10.appendTimeZoneShortName(strMap14);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder15.appendYear((int) (short) 1, 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder18.appendDayOfWeekText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder18.appendClockhourOfDay(86390000);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder18.appendDayOfWeekText();
        dateTimeFormatterBuilder18.clear();
        boolean boolean24 = localDate9.equals((java.lang.Object) dateTimeFormatterBuilder18);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder18.appendMinuteOfHour(1403);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = dateTimeFormatterBuilder26.appendTimeZoneShortName();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder27);
    }

    @Test
    public void test14704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14704");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendMonthOfYearText();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getRangeDurationType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder4.appendShortText(dateTimeFieldType5);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTimeField dateTimeField9 = mutableDateTime8.getRoundingField();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType10.getDurationType();
        mutableDateTime8.add(durationFieldType11, 100);
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = null;
        org.joda.time.format.DateTimeParser dateTimeParser15 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter14, dateTimeParser15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (-1), chronology18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        org.joda.time.DateTime dateTime23 = localDateTime19.toDateTime(dateTimeZone21);
        org.joda.time.Chronology chronology24 = dateTime23.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter16.withChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.monthOfYear();
        org.joda.time.DurationField durationField27 = durationFieldType11.getField(chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType5.getField(chronology24);
        java.lang.String str30 = dateTimeFieldType5.getName();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "clockhourOfHalfday" + "'", str30, "clockhourOfHalfday");
    }

    @Test
    public void test14705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14705");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale locale3 = builder0.build();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-1), chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDateTime6.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.hours();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.secondOfMinute();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.weekyear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.minusHours((-1));
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.lang.String str21 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDateTime16, locale20);
        java.util.Locale.Builder builder22 = builder0.setLocale(locale20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (-1), chronology24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.weekyear();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.dayOfMonth();
        int int30 = property29.get();
        org.joda.time.DateTimeField dateTimeField31 = property29.getField();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime34.withDayOfMonth(5);
        java.util.Locale locale37 = java.util.Locale.CANADA_FRENCH;
        java.util.Calendar calendar38 = dateTime36.toCalendar(locale37);
        java.lang.String str39 = dateTimeField31.getAsShortText((long) 1970, locale37);
        java.lang.String str40 = locale37.getDisplayLanguage();
        java.util.Locale.Builder builder41 = builder22.setLocale(locale37);
        java.util.Locale.Builder builder42 = builder41.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder45 = builder42.setUnicodeLocaleKeyword("12", "2022-02-23T23:43:18.806+56:35");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword type: 2022-02-23T23:43:18.806+56:35 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1644073985658,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=5,DAY_OF_YEAR=36,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=13,SECOND=5,MILLISECOND=661,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1" + "'", str39, "1");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "francese" + "'", str40, "francese");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test14706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14706");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds(1);
        int int8 = localDateTime7.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.year();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        long long15 = dateTimeZone10.convertLocalToUTC(10L, false, (long) 3);
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str18 = dateTimeZone10.getShortName(0L, locale17);
        int int20 = dateTimeZone10.getOffsetFromLocal((long) 25);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property24 = localDate22.property(dateTimeFieldType23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        boolean boolean26 = localDate22.isSupported(dateTimeFieldType25);
        org.joda.time.LocalDate.Property property27 = localDate22.era();
        org.joda.time.LocalDate.Property property28 = localDate22.dayOfMonth();
        org.joda.time.LocalDate localDate30 = localDate22.minusWeeks(2000);
        int int32 = localDate22.getValue((int) (short) 0);
        org.joda.time.LocalDate localDate34 = localDate22.plusDays(1439);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = org.joda.time.DateTime.now(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = localDate22.toDateTimeAtStartOfDay(dateTimeZone36);
        int int41 = dateTimeZone36.getOffset(0L);
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime21.toMutableDateTime(dateTimeZone36);
        int int44 = dateTimeZone36.getStandardOffset((long) (-2033));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((java.lang.Object) property9, dateTimeZone36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 7L + "'", long15 == 7L);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.003" + "'", str18, "+00:00:00.003");
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
    }

    @Test
    public void test14707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14707");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder0.appendLiteral("DateTimeField[weekyearOfCentury]");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder0.appendMillisOfDay(15);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder9.appendMillisOfSecond(39);
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTime dateTime20 = localDateTime16.toDateTime(dateTimeZone18);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.DateTime dateTime23 = dateTime20.plus((long) 100);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfCentury();
        boolean boolean25 = strSet13.equals((java.lang.Object) dateTime23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (-1), chronology27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.weekyear();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withSecondOfMinute((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.plusYears(0);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime28.minusDays((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int37 = localDateTime28.get(dateTimeFieldType36);
        org.joda.time.DateTime dateTime39 = dateTime23.withField(dateTimeFieldType36, 10);
        org.joda.time.DateTime dateTime41 = dateTime23.minusDays((int) 'u');
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int43 = dateTime23.get(dateTimeFieldType42);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = dateTimeFormatterBuilder9.appendFixedDecimal(dateTimeFieldType42, 2090);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap46 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder47 = dateTimeFormatterBuilder45.appendTimeZoneName(strMap46);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder50 = dateTimeFormatterBuilder47.appendFractionOfHour(1659808, 405);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str21, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder45);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder47);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder50);
    }

    @Test
    public void test14708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14708");
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 30);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getOffsetFromLocal((long) (byte) 0);
        mutableDateTime10.setZoneRetainFields(dateTimeZone11);
        long long18 = dateTimeZone11.convertLocalToUTC((long) 116, true, (long) 38);
        long long22 = dateTimeZone11.convertLocalToUTC(315705600365L, false, (long) (short) 1);
        org.joda.time.DateTime dateTime23 = dateTime8.withZone(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(32002, 85512, 27, 3870, (-33), 472, 50, dateTimeZone11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3870 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 113L + "'", long18 == 113L);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 315705600362L + "'", long22 == 315705600362L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test14709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14709");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        boolean boolean4 = dateTimeField2.isLeap(100L);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 3, chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType8.getDurationType();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType8.getRangeDurationType();
        boolean boolean11 = localDate7.isSupported(durationFieldType10);
        org.joda.time.LocalDate.Property property12 = localDate7.centuryOfEra();
        org.joda.time.LocalDate localDate13 = property12.roundCeilingCopy();
        org.joda.time.LocalDate localDate14 = property12.getLocalDate();
        int int15 = localDate14.getDayOfMonth();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 3, chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType20 = dateTimeFieldType19.getDurationType();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType19.getRangeDurationType();
        boolean boolean22 = localDate18.isSupported(durationFieldType21);
        org.joda.time.LocalDate.Property property23 = localDate18.centuryOfEra();
        org.joda.time.LocalDate localDate24 = property23.roundCeilingCopy();
        org.joda.time.LocalDate localDate25 = property23.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = localDate25.toDateTimeAtCurrentTime(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = localDate14.toDateTimeAtMidnight(dateTimeZone27);
        int int31 = dateTimeField2.getMinimumValue((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = dateTimeField2.getType();
        java.util.Locale locale36 = new java.util.Locale("999", "\u4e00\u6708");
        java.util.Locale.setDefault(locale36);
        java.lang.String str38 = dateTimeField2.getAsText((long) 1438, locale36);
        java.lang.String str40 = dateTimeField2.getAsText((long) 46);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-292275054) + "'", int31 == (-292275054));
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
// flaky:         org.junit.Assert.assertEquals(locale36.toString(), "\u4e00\u6708");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970" + "'", str38, "1970");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970" + "'", str40, "1970");
    }

    @Test
    public void test14710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14710");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-1), chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDateTime6.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter3.withChronology(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.monthOfYear();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology11);
        org.joda.time.DateTimeField dateTimeField15 = chronology11.clockhourOfHalfday();
        org.joda.time.DurationField durationField16 = chronology11.days();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology11);
        java.lang.String str18 = chronology11.toString();
        java.lang.String str19 = chronology11.toString();
        org.joda.time.DateTimeField dateTimeField20 = chronology11.era();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 1440, chronology11);
        org.joda.time.DateTime dateTime22 = dateTime21.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime23 = dateTime21.toDateTimeISO();
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[+00:00:00.003]" + "'", str18, "ISOChronology[+00:00:00.003]");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+00:00:00.003]" + "'", str19, "ISOChronology[+00:00:00.003]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test14711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14711");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.Interval interval5 = property3.toInterval();
        long long6 = property3.remainder();
        org.joda.time.DateTimeField dateTimeField7 = property3.getField();
        org.joda.time.LocalDateTime localDateTime9 = property3.addToCopy(70);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusHours(50400003);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test14712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14712");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (-1), chronology2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTime dateTime7 = localDateTime3.toDateTime(dateTimeZone5);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.DateTime dateTime10 = dateTime7.plus((long) 100);
        org.joda.time.DateTime.Property property11 = dateTime7.millisOfSecond();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 1, chronology13);
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded((long) (byte) 0, 292278993);
        int int18 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (-1), chronology21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTime dateTime26 = localDateTime22.toDateTime(dateTimeZone24);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.secondOfDay();
        org.joda.time.DurationField durationField29 = chronology27.minutes();
        org.joda.time.DurationField durationField30 = chronology27.minutes();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) 292278993, chronology27);
        org.joda.time.DateTime dateTime32 = dateTime7.toDateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField33 = chronology27.dayOfYear();
        java.util.Locale locale34 = java.util.Locale.TAIWAN;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(10629L, chronology27, locale34, (java.lang.Integer) 69, 42);
        org.joda.time.DurationField durationField38 = chronology27.seconds();
        org.joda.time.DateTimeField dateTimeField39 = chronology27.era();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str8, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test14713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14713");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property2 = localDate0.property(dateTimeFieldType1);
        org.joda.time.LocalDate localDate4 = localDate0.withDayOfMonth(10);
        org.joda.time.LocalDate.Property property5 = localDate0.year();
        org.joda.time.LocalDate localDate6 = property5.withMinimumValue();
        org.joda.time.LocalDate localDate7 = property5.withMinimumValue();
        org.joda.time.LocalDate localDate9 = localDate7.withWeekyear(64);
        org.joda.time.LocalDate localDate11 = localDate7.plusWeeks(22);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test14714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14714");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property2 = localDate0.property(dateTimeFieldType1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        boolean boolean4 = localDate0.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDate.Property property5 = localDate0.era();
        org.joda.time.LocalDate localDate6 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate8 = localDate6.plusYears((-292275054));
        org.joda.time.DateTime dateTime9 = localDate8.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test14715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14715");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        int int4 = dateTimeZone2.getOffsetFromLocal((long) (byte) 0);
        mutableDateTime1.setZoneRetainFields(dateTimeZone2);
        long long9 = dateTimeZone2.convertLocalToUTC((long) 116, true, (long) 38);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate(dateTimeZone2);
        org.joda.time.LocalDate localDate12 = localDate10.withDayOfYear((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate15 = localDate10.withPeriodAdded(readablePeriod13, 2922789);
        int int16 = localDate10.getYearOfEra();
        org.joda.time.LocalDate.Property property17 = localDate10.year();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((-62135800500000L));
        long long20 = property17.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 113L + "'", long9 == 113L);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2021L + "'", long20 == 2021L);
    }

    @Test
    public void test14716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14716");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate.Property property8 = localDate2.era();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.joda.time.LocalDate localDate10 = property8.roundFloorCopy();
        org.joda.time.LocalDate localDate11 = property8.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test14717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14717");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        long long7 = dateTimeZone2.convertLocalToUTC(10L, false, (long) 3);
        java.util.TimeZone timeZone8 = dateTimeZone2.toTimeZone();
        java.util.TimeZone timeZone9 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(66L, dateTimeZone2);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 359, dateTimeZone2);
        org.joda.time.DateTime dateTime13 = dateTime11.minusYears(405);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 7L + "'", long7 == 7L);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test14718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14718");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(1655696, (-101), 906, 10003, 347760517, 40372687, 15960000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 10003 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14719");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property2 = localDate0.property(dateTimeFieldType1);
        java.util.Locale locale6 = new java.util.Locale("Property[dayOfYear]", "");
        org.joda.time.LocalDate localDate7 = property2.setCopy("365", locale6);
        org.joda.time.LocalDate localDate9 = property2.setCopy((int) 'a');
        int int10 = localDate9.getWeekyear();
        org.joda.time.Chronology chronology11 = localDate9.getChronology();
        org.joda.time.LocalDate.Property property12 = localDate9.dayOfWeek();
        java.util.Locale locale13 = java.util.Locale.TAIWAN;
        java.lang.String str14 = locale13.toLanguageTag();
        java.util.Locale locale15 = java.util.Locale.GERMANY;
        java.lang.String str16 = locale13.getDisplayScript(locale15);
        java.util.Set<java.lang.Character> charSet17 = locale13.getExtensionKeys();
        java.lang.String str18 = locale13.getDisplayScript();
        int int19 = property12.getMaximumTextLength(locale13);
        java.util.Set<java.lang.String> strSet20 = locale13.getUnicodeLocaleKeys();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime22.set(dateTimeFieldType23, (-292275054));
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        mutableDateTime22.add(readablePeriod26, 4);
        int int29 = mutableDateTime22.getMillisOfDay();
        int int30 = mutableDateTime22.getCenturyOfEra();
        java.util.Date date31 = mutableDateTime22.toDate();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTimeField dateTimeField33 = mutableDateTime32.getRoundingField();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType34.getDurationType();
        mutableDateTime32.add(durationFieldType35, 100);
        mutableDateTime32.addYears(10);
        org.joda.time.MutableDateTime mutableDateTime40 = mutableDateTime32.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime();
        mutableDateTime41.add((long) 100);
        org.joda.time.Chronology chronology44 = null;
        mutableDateTime41.setChronology(chronology44);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        long long48 = dateTimeZone46.previousTransition((long) 1);
        mutableDateTime41.setZone(dateTimeZone46);
        org.joda.time.DateTime dateTime50 = mutableDateTime40.toDateTime(dateTimeZone46);
        boolean boolean51 = dateTime50.isEqualNow();
        org.joda.time.DateTimeZone dateTimeZone52 = dateTime50.getZone();
        mutableDateTime22.setZoneRetainFields(dateTimeZone52);
        boolean boolean54 = strSet20.contains((java.lang.Object) mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals(locale6.toString(), "property[dayofyear]");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 97 + "'", int10 == 97);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh-TW" + "'", str14, "zh-TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(charSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2922750 + "'", int30 == 2922750);
        org.junit.Assert.assertNotNull(date31);
// flaky:         org.junit.Assert.assertEquals(date31.toString(), "Sat Jul 20 00:00:00 GMT+00:00 292269054");
        org.junit.Assert.assertNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test14720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14720");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        java.util.GregorianCalendar gregorianCalendar2 = mutableDateTime1.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now(dateTimeZone3);
        java.util.GregorianCalendar gregorianCalendar5 = mutableDateTime4.toGregorianCalendar();
        boolean boolean6 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime4.getZone();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        java.util.TimeZone.setDefault(timeZone8);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone("DateTimeField[year]");
        boolean boolean12 = timeZone8.hasSameRules(timeZone11);
        java.util.TimeZone.setDefault(timeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(gregorianCalendar5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test14721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14721");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(54554, (-24118058), (-86390001), 79, 86300002, 54711);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 79 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14722");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        org.joda.time.DateTime dateTime7 = localTime6.toDateTimeToday();
        org.joda.time.LocalTime localTime9 = localTime6.minusMillis((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalTime localTime11 = localTime6.minus(readablePeriod10);
        org.joda.time.DateTime dateTime12 = localTime11.toDateTimeToday();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test14723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14723");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) (byte) 1);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 1);
        org.joda.time.LocalDate localDate8 = localDate6.withDayOfYear((int) (byte) 10);
        org.joda.time.LocalDate localDate10 = localDate8.plusWeeks((-292275054));
        int int11 = dateTimeField2.getMaximumValue((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate localDate13 = localDate8.withWeekyear((int) '4');
        org.joda.time.DateMidnight dateMidnight14 = localDate8.toDateMidnight();
        int int15 = localDate8.getMonthOfYear();
        org.joda.time.LocalDate localDate17 = localDate8.plusMonths(44);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 292278993 + "'", int11 == 292278993);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test14724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14724");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate localDate8 = localDate2.minusDays(59);
        int[] intArray9 = localDate8.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = localDate8.withWeekOfWeekyear((-2526));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2526 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[1969, 11, 3]");
    }

    @Test
    public void test14725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14725");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.getLocalDate();
        int int10 = localDate9.getDayOfMonth();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 3, chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType14.getRangeDurationType();
        boolean boolean17 = localDate13.isSupported(durationFieldType16);
        org.joda.time.LocalDate.Property property18 = localDate13.centuryOfEra();
        org.joda.time.LocalDate localDate19 = property18.roundCeilingCopy();
        org.joda.time.LocalDate localDate20 = property18.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = localDate20.toDateTimeAtCurrentTime(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = localDate9.toDateTimeAtMidnight(dateTimeZone22);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate28 = localDate9.withPeriodAdded(readablePeriod26, (int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDate.Property property30 = localDate28.property(dateTimeFieldType29);
        org.joda.time.LocalDate localDate31 = property30.withMinimumValue();
        org.joda.time.LocalDate.Property property32 = localDate31.centuryOfEra();
        org.joda.time.LocalDate localDate33 = property32.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate33);
    }

    @Test
    public void test14726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14726");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.getLocalDate();
        int int10 = localDate9.getDayOfMonth();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 3, chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType14.getRangeDurationType();
        boolean boolean17 = localDate13.isSupported(durationFieldType16);
        org.joda.time.LocalDate.Property property18 = localDate13.centuryOfEra();
        org.joda.time.LocalDate localDate19 = property18.roundCeilingCopy();
        org.joda.time.LocalDate localDate20 = property18.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = localDate20.toDateTimeAtCurrentTime(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = localDate9.toDateTimeAtMidnight(dateTimeZone22);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate28 = localDate9.withPeriodAdded(readablePeriod26, (int) ' ');
        java.util.Date date29 = localDate28.toDate();
        org.joda.time.LocalDate localDate30 = org.joda.time.LocalDate.fromDateFields(date29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDate localDate33 = localDate30.withPeriodAdded(readablePeriod31, 2023);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        long long37 = dateTimeZone34.convertLocalToUTC(30L, true);
        int int39 = dateTimeZone34.getStandardOffset(51L);
        org.joda.time.DateTime dateTime40 = localDate30.toDateTimeAtMidnight(dateTimeZone34);
        java.lang.String str42 = dateTimeZone34.getName(121320000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(date29);
        org.junit.Assert.assertEquals(date29.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 27L + "'", long37 == 27L);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.003" + "'", str42, "+00:00:00.003");
    }

    @Test
    public void test14727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14727");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime1.set(dateTimeFieldType2, (-292275054));
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutableDateTime1.add(readablePeriod5, 4);
        int int8 = mutableDateTime1.getMillisOfDay();
        int int9 = mutableDateTime1.getCenturyOfEra();
        java.util.Date date10 = mutableDateTime1.toDate();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder11.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap15 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder11.appendTimeZoneShortName(strMap15);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder16.appendYear((int) (short) 1, 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder19.appendMinuteOfHour(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder21.appendFixedSignedDecimal(dateTimeFieldType22, 31);
        mutableDateTime1.set(dateTimeFieldType22, 6);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime1.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2922750 + "'", int9 == 2922750);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Fri Jul 19 23:59:59 GMT 292269054");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test14728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14728");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundHalfCeiling();
        mutableDateTime3.setMinuteOfDay(4);
        mutableDateTime3.add(0L);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.weekyears();
        mutableDateTime3.add(durationFieldType8, 6);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime14 = localTime12.minusSeconds((int) (short) 10);
        org.joda.time.LocalTime localTime16 = localTime12.minusSeconds((int) (byte) 100);
        org.joda.time.Chronology chronology17 = localTime12.getChronology();
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(chronology17);
        mutableDateTime3.setChronology(chronology17);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology17);
        java.lang.String str21 = chronology17.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[UTC]" + "'", str21, "ISOChronology[UTC]");
    }

    @Test
    public void test14729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14729");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder6.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap10 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder6.appendTimeZoneShortName(strMap10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder11.appendYear((int) (short) 1, 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder14.appendDayOfWeekText();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getDurationType();
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType16.getRangeDurationType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder15.appendText(dateTimeFieldType16);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder0.appendShortText(dateTimeFieldType16);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder21.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap25 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder21.appendTimeZoneShortName(strMap25);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder21.appendWeekyear(2000, 59);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder21.appendDayOfWeek(5);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = dateTimeFormatterBuilder31.appendYear(21, 116);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = dateTimeFormatterBuilder31.appendLiteral("hi!");
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = dateTimeFormatterBuilder36.appendText(dateTimeFieldType37);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder41 = dateTimeFormatterBuilder20.appendDecimal(dateTimeFieldType37, 55995, 1599000);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) (-1), chronology43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone47 = dateTimeZone46.toTimeZone();
        org.joda.time.DateTime dateTime48 = localDateTime44.toDateTime(dateTimeZone46);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DateTime.Property property50 = dateTime48.property(dateTimeFieldType49);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder51 = dateTimeFormatterBuilder41.appendText(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder34);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder38);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder41);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(timeZone47);
// flaky:         org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder51);
    }

    @Test
    public void test14730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14730");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.ROOT;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((-1609459200003L), chronology1, locale2, (java.lang.Integer) 99, (int) (byte) 1);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) (-1), chronology7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTime dateTime12 = localDateTime8.toDateTime(dateTimeZone10);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.DateTime dateTime15 = dateTime12.plus((long) 100);
        org.joda.time.DateTime.Property property16 = dateTime15.yearOfCentury();
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.util.Calendar calendar18 = dateTime15.toCalendar(locale17);
        int int19 = dateTime15.getMinuteOfHour();
        org.joda.time.DateTime dateTime21 = dateTime15.withYearOfEra((int) 'u');
        org.joda.time.DateTime dateTime23 = dateTime21.plus((long) (-292275054));
        org.joda.time.DateTime dateTime25 = dateTime23.plusMonths(30);
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime25.getZone();
        dateTimeParserBucket5.setZone(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str13, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
    }

    @Test
    public void test14731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14731");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((-345529L));
    }

    @Test
    public void test14732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14732");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears(0);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withPeriodAdded(readablePeriod8, 33);
        int int11 = localDateTime10.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusMonths(49);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.minusWeeks(0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test14733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14733");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        long long3 = dateTimeZone1.previousTransition((long) 1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone1);
        long long6 = dateTimeZone1.nextTransition((long) 54460417);
        long long10 = dateTimeZone1.convertLocalToUTC((long) (-23375), true, 1728000000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 54460417L + "'", long6 == 54460417L);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-23378L) + "'", long10 == (-23378L));
    }

    @Test
    public void test14734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14734");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder5.appendYear((int) (short) 1, 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder5.appendDayOfWeekShortText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder5.appendHalfdayOfDayText();
        boolean boolean11 = dateTimeFormatterBuilder10.canBuildFormatter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder10.appendHourOfHalfday((int) (short) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder13.appendDayOfYear(196);
        org.joda.time.format.DateTimePrinter dateTimePrinter16 = dateTimeFormatterBuilder15.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder17.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap21 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder17.appendTimeZoneShortName(strMap21);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder17.appendWeekyear(2000, 59);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = dateTimeFormatterBuilder17.appendDayOfWeek(5);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder27.appendClockhourOfDay(2922750);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder27.appendMillisOfDay(71);
        org.joda.time.format.DateTimeParser dateTimeParser32 = dateTimeFormatterBuilder27.toParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter16, dateTimeParser32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimePrinter16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder27);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertNotNull(dateTimeParser32);
    }

    @Test
    public void test14735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14735");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendMonthOfYearText();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getRangeDurationType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder4.appendShortText(dateTimeFieldType5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = dateTimeFormatterBuilder4.toFormatter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter8.withDefaultYear(53);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter8.withDefaultYear(575);
        java.lang.String str14 = dateTimeFormatter12.print(11518416000116L);
        boolean boolean15 = dateTimeFormatter12.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = null;
        org.joda.time.format.DateTimeParser dateTimeParser18 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter17, dateTimeParser18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (-1), chronology21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTime dateTime26 = localDateTime22.toDateTime(dateTimeZone24);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter19.withChronology(chronology27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (-1), chronology32);
        boolean boolean34 = dateTimeZone29.isLocalDateTimeGap(localDateTime33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (-1), chronology36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.weekyear();
        boolean boolean39 = dateTimeZone29.isLocalDateTimeGap(localDateTime37);
        long long41 = dateTimeZone29.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter19.withZone(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(300000L, dateTimeZone29);
        long long45 = dateTimeZone29.previousTransition((long) 2922750);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter12.withZone(dateTimeZone29);
        org.joda.time.format.DateTimeParser dateTimeParser47 = dateTimeFormatter46.getParser();
        // The following exception was thrown during execution in test generation
        try {
            long long49 = dateTimeFormatter46.parseMillis("hourOfHalfday");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"hourOfHalfday\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "119000000000000January12" + "'", str14, "119000000000000January12");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 3L + "'", long41 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 2922750L + "'", long45 == 2922750L);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(dateTimeParser47);
    }

    @Test
    public void test14736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14736");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(dateTimeZone4);
        int int6 = property3.compareTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now(dateTimeZone7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime8.add(readableDuration9, 100);
        boolean boolean12 = mutableDateTime5.isBefore((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime8.minuteOfHour();
        int int14 = mutableDateTime8.getSecondOfMinute();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) (short) 1, chronology16);
        org.joda.time.DateTime dateTime20 = dateTime17.withDurationAdded((long) (byte) 0, 292278993);
        org.joda.time.DateMidnight dateMidnight21 = dateTime20.toDateMidnight();
        mutableDateTime8.setDate((org.joda.time.ReadableInstant) dateMidnight21);
        int int23 = mutableDateTime8.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime8.setSecondOfMinute(1970);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 6 + "'", int14 == 6);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 15 + "'", int23 == 15);
    }

    @Test
    public void test14737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14737");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        org.joda.time.LocalTime localTime5 = localTime1.minusSeconds((int) (byte) 100);
        org.joda.time.Chronology chronology6 = localTime1.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField8 = localTime1.getField(949);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 949");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(chronology6);
    }

    @Test
    public void test14738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14738");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        int int6 = localDateTime5.getWeekyear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.plusWeeks(575);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds(11);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withEra((-36161));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -36161 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test14739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14739");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property2 = localDate0.property(dateTimeFieldType1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        boolean boolean4 = localDate0.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDate.Property property5 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate6 = property5.roundCeilingCopy();
        org.joda.time.LocalDate localDate8 = localDate6.withDayOfYear(19);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDate localDate10 = localDate6.minus(readablePeriod9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDate localDate12 = localDate10.minus(readablePeriod11);
        org.joda.time.LocalDate.Property property13 = localDate10.dayOfWeek();
        org.joda.time.LocalDate localDate15 = property13.addToCopy(42700796);
        org.joda.time.LocalDate localDate16 = property13.getLocalDate();
        org.joda.time.LocalDate localDate17 = property13.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test14740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14740");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDateTime4.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.secondOfDay();
        org.joda.time.DurationField durationField11 = chronology9.minutes();
        org.joda.time.DurationField durationField12 = chronology9.minutes();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 292278993, chronology9);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(2022L, chronology9);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readablePeriod15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.withDurationAdded(readableDuration17, 120);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test14741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14741");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        java.util.GregorianCalendar gregorianCalendar2 = mutableDateTime1.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now(dateTimeZone3);
        java.util.GregorianCalendar gregorianCalendar5 = mutableDateTime4.toGregorianCalendar();
        boolean boolean6 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime4.getZone();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime4.dayOfYear();
        int int9 = mutableDateTime4.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime4.setTime(16500, (-19044), (int) (short) 10, 2922789);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 16500 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(gregorianCalendar5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
    }

    @Test
    public void test14742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14742");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime1.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime1.add(readableDuration4, (int) (short) 100);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (-1), chronology11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        org.joda.time.DateTime dateTime16 = localDateTime12.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter9.withChronology(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.weekyearOfCentury();
        mutableDateTime1.setChronology(chronology17);
        org.joda.time.DateTimeField dateTimeField22 = chronology17.monthOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (-1), chronology24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.weekyear();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withSecondOfMinute((int) (short) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = dateTimeFormatterBuilder29.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap33 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = dateTimeFormatterBuilder29.appendTimeZoneShortName(strMap33);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = dateTimeFormatterBuilder29.appendWeekyear(2000, 59);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (-1), chronology39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.weekyear();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now(dateTimeZone42);
        int int44 = property41.compareTo((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now(dateTimeZone45);
        org.joda.time.ReadableDuration readableDuration47 = null;
        mutableDateTime46.add(readableDuration47, 100);
        boolean boolean50 = mutableDateTime43.isBefore((org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.ReadableDuration readableDuration51 = null;
        mutableDateTime46.add(readableDuration51, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) 'x', dateTimeZone56);
        mutableDateTime46.setZone(dateTimeZone56);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.minuteOfHour();
        mutableDateTime46.set(dateTimeFieldType59, (int) '4');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder64 = dateTimeFormatterBuilder37.appendFraction(dateTimeFieldType59, 2922750, 1969);
        int int65 = localDateTime28.get(dateTimeFieldType59);
        java.lang.String str66 = localDateTime28.toString();
        int int67 = localDateTime28.getMonthOfYear();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((long) (-1), chronology69);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.minusSeconds((int) (byte) 100);
        int int73 = localDateTime72.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property74 = localDateTime72.era();
        int[] intArray75 = localDateTime72.getValues();
        int int76 = dateTimeField22.getMinimumValue((org.joda.time.ReadablePartial) localDateTime28, intArray75);
        java.lang.String str77 = localDateTime28.toString();
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder34);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder37);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder64);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1970-01-01T00:00:00.002" + "'", str66, "1970-01-01T00:00:00.002");
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(intArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1969, 12, 31, 86300002]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1970-01-01T00:00:00.002" + "'", str77, "1970-01-01T00:00:00.002");
    }

    @Test
    public void test14743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14743");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (-19044));
    }

    @Test
    public void test14744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14744");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        java.lang.String str7 = localTime6.toString();
        org.joda.time.LocalTime localTime9 = localTime6.minusMillis(0);
        org.joda.time.LocalTime.Property property10 = localTime9.minuteOfHour();
        org.joda.time.LocalTime localTime12 = property10.addCopy((int) (byte) 100);
        org.joda.time.LocalTime localTime14 = localTime12.minusSeconds((int) 'u');
        org.joda.time.LocalTime localTime16 = localTime12.plusMinutes((int) '#');
        org.joda.time.LocalTime localTime18 = localTime16.plusMinutes(1999);
        org.joda.time.LocalTime localTime20 = localTime18.plusHours(19);
        org.joda.time.LocalTime localTime22 = localTime18.minusMillis((-929));
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "23:00:00.003" + "'", str7, "23:00:00.003");
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test14745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14745");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType7.getDurationType();
        boolean boolean9 = localDateTime2.isSupported(dateTimeFieldType7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.plusMillis(1438);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withHourOfDay(576);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 576 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test14746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14746");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        boolean boolean17 = dateTimeZone12.isLocalDateTimeGap(localDateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.weekyear();
        boolean boolean22 = dateTimeZone12.isLocalDateTimeGap(localDateTime20);
        long long24 = dateTimeZone12.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter25.withPivotYear((java.lang.Integer) 86399999);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (-1), chronology29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        org.joda.time.DateTime dateTime34 = localDateTime30.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = dateTime34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.hours();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.secondOfMinute();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (-1), chronology39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.weekyear();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.minusHours((-1));
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.lang.String str45 = dateTimeField37.getAsText((org.joda.time.ReadablePartial) localDateTime40, locale44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter27.withLocale(locale44);
        org.joda.time.DateTimeZone dateTimeZone47 = dateTimeFormatter27.getZone();
        org.joda.time.DateTimeZone dateTimeZone48 = dateTimeFormatter27.getZone();
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now(dateTimeZone48);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(chronology50);
        org.joda.time.format.DateTimePrinter dateTimePrinter52 = null;
        org.joda.time.format.DateTimeParser dateTimeParser53 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter52, dateTimeParser53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) (-1), chronology56);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone60 = dateTimeZone59.toTimeZone();
        org.joda.time.DateTime dateTime61 = localDateTime57.toDateTime(dateTimeZone59);
        org.joda.time.Chronology chronology62 = dateTime61.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter54.withChronology(chronology62);
        org.joda.time.DateTimeField dateTimeField64 = chronology62.monthOfYear();
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now(chronology62);
        org.joda.time.DateTimeField dateTimeField66 = chronology62.weekOfWeekyear();
        org.joda.time.DurationField durationField67 = chronology62.centuries();
        org.joda.time.DateTime dateTime68 = dateTime51.toDateTime(chronology62);
        org.joda.time.Chronology chronology69 = dateTime51.getChronology();
        org.joda.time.DurationField durationField70 = chronology69.minutes();
        org.joda.time.MutableDateTime mutableDateTime71 = mutableDateTime49.toMutableDateTime(chronology69);
        java.lang.Object obj72 = mutableDateTime71.clone();
        int int73 = mutableDateTime71.getCenturyOfEra();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3L + "'", long24 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0" + "'", str45, "0");
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertNotNull(obj72);
// flaky:         org.junit.Assert.assertEquals(obj72.toString(), "2022-02-21T15:13:06.329+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj72), "2022-02-21T15:13:06.329+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj72), "2022-02-21T15:13:06.329+00:00:00.003");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 20 + "'", int73 == 20);
    }

    @Test
    public void test14747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14747");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime6.millisOfSecond();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 1, chronology12);
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded((long) (byte) 0, 292278993);
        int int17 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTime dateTime20 = dateTime16.withFieldAdded(durationFieldType18, 1969);
        org.joda.time.DateTime dateTime22 = dateTime16.minusMinutes(1);
        org.joda.time.DateTime.Property property23 = dateTime16.weekOfWeekyear();
        org.joda.time.DurationField durationField24 = property23.getLeapDurationField();
        org.joda.time.DateTime dateTime26 = property23.setCopy(12);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (-1), chronology30);
        boolean boolean32 = dateTimeZone27.isLocalDateTimeGap(localDateTime31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) (-1), chronology34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.weekyear();
        boolean boolean37 = dateTimeZone27.isLocalDateTimeGap(localDateTime35);
        long long39 = dateTimeZone27.convertUTCToLocal(0L);
        java.lang.String str41 = dateTimeZone27.getNameKey((long) 575);
        long long44 = dateTimeZone27.convertLocalToUTC((long) 9, true);
        int int46 = dateTimeZone27.getOffset(0L);
        org.joda.time.DateTime dateTime47 = dateTime26.withZoneRetainFields(dateTimeZone27);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNull(durationField24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 3L + "'", long39 == 3L);
// flaky:         org.junit.Assert.assertNull(str41);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 6L + "'", long44 == 6L);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test14748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14748");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime6.millisOfSecond();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 1, chronology12);
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded((long) (byte) 0, 292278993);
        int int17 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (-1), chronology20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        org.joda.time.DateTime dateTime25 = localDateTime21.toDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfDay();
        org.joda.time.DurationField durationField28 = chronology26.minutes();
        org.joda.time.DurationField durationField29 = chronology26.minutes();
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) 292278993, chronology26);
        org.joda.time.DateTime dateTime31 = dateTime6.toDateTime(chronology26);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMonths(86399);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = dateTime31.withZone(dateTimeZone34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.DateTime dateTime37 = dateTime31.plus(readablePeriod36);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test14749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14749");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusMinutes(292278993);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withMillisOfDay(0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.yearOfEra();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minus(readableDuration13);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test14750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14750");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        boolean boolean7 = property5.isLeap();
        org.joda.time.LocalTime localTime8 = property5.roundFloorCopy();
        org.joda.time.LocalTime localTime9 = property5.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime10 = property5.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime11 = property5.withMinimumValue();
        org.joda.time.LocalTime localTime13 = property5.addCopy((-1));
        org.joda.time.LocalTime localTime15 = property5.addNoWrapToCopy((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime17 = property5.setCopy("096000000000000January8");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"096000000000000January8\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test14751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14751");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        mutableDateTime2.add((long) '#');
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime6 = property5.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.secondOfMinute();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (-1), chronology9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfYear();
        org.joda.time.DurationField durationField12 = property11.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime14 = property11.addToCopy((-1));
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.era();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 'x', dateTimeZone18);
        boolean boolean21 = dateTimeZone18.isStandardOffset((long) 2);
        java.util.TimeZone timeZone22 = dateTimeZone18.toTimeZone();
        java.util.TimeZone timeZone23 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTime dateTime24 = localDateTime14.toDateTime(dateTimeZone18);
        java.lang.String str25 = dateTimeZone18.getID();
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime6.toMutableDateTime(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNull(durationField12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.003" + "'", str25, "+00:00:00.003");
        org.junit.Assert.assertNotNull(mutableDateTime26);
    }

    @Test
    public void test14752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14752");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) '4');
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 30);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        int int8 = dateTimeZone6.getOffsetFromLocal((long) (byte) 0);
        mutableDateTime5.setZoneRetainFields(dateTimeZone6);
        long long13 = dateTimeZone6.convertLocalToUTC((long) 116, true, (long) 38);
        long long17 = dateTimeZone6.convertLocalToUTC(315705600365L, false, (long) (short) 1);
        org.joda.time.DateTime dateTime18 = dateTime3.withZone(dateTimeZone6);
        java.lang.String str20 = dateTimeZone6.getShortName(1969L);
        org.joda.time.DateTime dateTime21 = localTime1.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime.Property property22 = dateTime21.yearOfCentury();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(dateTimeZone6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 113L + "'", long13 == 113L);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 315705600362L + "'", long17 == 315705600362L);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.003" + "'", str20, "+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test14753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14753");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(dateTimeZone4);
        int int6 = property3.compareTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now(dateTimeZone7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime8.add(readableDuration9, 100);
        boolean boolean12 = mutableDateTime5.isBefore((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime8.add(readableDuration13, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 'x', dateTimeZone18);
        mutableDateTime8.setZone(dateTimeZone18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        mutableDateTime8.set(dateTimeFieldType21, (int) '4');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (-1), chronology25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        org.joda.time.DateTime dateTime30 = localDateTime26.toDateTime(dateTimeZone28);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.DateTime dateTime33 = dateTime30.plus((long) 100);
        org.joda.time.DateTime dateTime35 = dateTime33.minusSeconds(0);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.withChronology(chronology36);
        mutableDateTime8.setMillis((org.joda.time.ReadableInstant) dateTime37);
        mutableDateTime8.addHours((int) (byte) 10);
        java.lang.String str41 = mutableDateTime8.toString();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        mutableDateTime8.add(readablePeriod42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (-1), chronology45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone49 = dateTimeZone48.toTimeZone();
        org.joda.time.DateTime dateTime50 = localDateTime46.toDateTime(dateTimeZone48);
        java.lang.String str51 = dateTime50.toString();
        org.joda.time.DateTime dateTime53 = dateTime50.plus((long) 100);
        org.joda.time.DateTime.Property property54 = dateTime53.yearOfCentury();
        java.util.Locale locale55 = java.util.Locale.GERMANY;
        java.util.Calendar calendar56 = dateTime53.toCalendar(locale55);
        int int57 = dateTime53.getMinuteOfHour();
        org.joda.time.DateTime dateTime59 = dateTime53.withYearOfEra((int) 'u');
        org.joda.time.DateTime.Property property60 = dateTime53.era();
        boolean boolean62 = dateTime53.isEqual((long) 100);
        org.joda.time.DateTime dateTime63 = dateTime53.toDateTime();
        java.util.Date date64 = dateTime53.toDate();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone66 = dateTimeZone65.toTimeZone();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) (-1), chronology68);
        boolean boolean70 = dateTimeZone65.isLocalDateTimeGap(localDateTime69);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime69.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime69.withMillisOfDay(5);
        org.joda.time.DurationFieldType durationFieldType75 = org.joda.time.DurationFieldType.seconds();
        boolean boolean76 = localDateTime69.isSupported(durationFieldType75);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((long) (-1), chronology78);
        org.joda.time.LocalDateTime.Property property80 = localDateTime79.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone82 = dateTimeZone81.toTimeZone();
        org.joda.time.DateTime dateTime83 = localDateTime79.toDateTime(dateTimeZone81);
        org.joda.time.Chronology chronology84 = dateTime83.getChronology();
        org.joda.time.DateTimeField dateTimeField85 = chronology84.dayOfYear();
        org.joda.time.Chronology chronology86 = chronology84.withUTC();
        org.joda.time.DateTimeField dateTimeField87 = chronology86.clockhourOfDay();
        org.joda.time.DurationField durationField88 = chronology86.halfdays();
        boolean boolean89 = durationFieldType75.isSupported(chronology86);
        java.lang.String str90 = durationFieldType75.getName();
        org.joda.time.DateTime dateTime92 = dateTime53.withFieldAdded(durationFieldType75, 0);
        mutableDateTime8.add(durationFieldType75, 2027);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str31, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970-01-01T10:00:00.102+00:00:00.003" + "'", str41, "1970-01-01T10:00:00.102+00:00:00.003");
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str51, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(date64);
        org.junit.Assert.assertEquals(date64.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(timeZone82);
// flaky:         org.junit.Assert.assertEquals(timeZone82.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "seconds" + "'", str90, "seconds");
        org.junit.Assert.assertNotNull(dateTime92);
    }

    @Test
    public void test14754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14754");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds((int) (byte) 100);
        int int5 = localDateTime4.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.era();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYear(30);
        int int11 = localDateTime8.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 58 + "'", int11 == 58);
    }

    @Test
    public void test14755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14755");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("2");
        org.joda.time.LocalDate localDate3 = localDate1.minusMonths(17);
        org.joda.time.LocalDate.Property property4 = localDate1.yearOfCentury();
        org.joda.time.LocalDate.Property property5 = localDate1.yearOfCentury();
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test14756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14756");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        boolean boolean7 = property5.isLeap();
        org.joda.time.LocalTime localTime8 = property5.roundFloorCopy();
        org.joda.time.LocalTime.Property property9 = localTime8.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime11.set(dateTimeFieldType12, (-292275054));
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutableDateTime11.add(readablePeriod15, 4);
        int int18 = mutableDateTime11.getMillisOfDay();
        long long19 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.Chronology chronology20 = mutableDateTime11.getChronology();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.now(chronology20);
        org.joda.time.DurationField durationField22 = chronology20.minutes();
        long long25 = durationField22.getMillis(10802025L, (long) 108665566);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 153722866950720L + "'", long19 == 153722866950720L);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 648121500000L + "'", long25 == 648121500000L);
    }

    @Test
    public void test14757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14757");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        org.joda.time.LocalTime localTime5 = localTime1.minusSeconds((int) (byte) 100);
        java.lang.String str6 = localTime1.toString();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalTime localTime9 = localTime1.withPeriodAdded(readablePeriod7, 0);
        org.joda.time.LocalTime localTime11 = localTime1.minusHours((int) (byte) 10);
        org.joda.time.LocalTime.Property property12 = localTime11.millisOfSecond();
        org.joda.time.LocalTime localTime13 = property12.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime14 = property12.roundCeilingCopy();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "00:00:00.003" + "'", str6, "00:00:00.003");
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test14758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14758");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minusWeeks(10);
        int int10 = localDateTime9.getSecondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime12.setTime(100L);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime12.yearOfCentury();
        mutableDateTime12.setDayOfWeek(7);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        org.joda.time.DateTime dateTime24 = localDateTime20.toDateTime(dateTimeZone22);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.DateTime dateTime27 = dateTime24.plus((long) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.withMillisOfSecond(69);
        int int30 = dateTime29.getWeekOfWeekyear();
        boolean boolean31 = mutableDateTime12.isAfter((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime32 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) mutableDateTime12);
        mutableDateTime12.addWeekyears(54);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime36.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration39 = null;
        mutableDateTime36.add(readableDuration39, (int) (short) 100);
        org.joda.time.format.DateTimePrinter dateTimePrinter42 = null;
        org.joda.time.format.DateTimeParser dateTimeParser43 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter42, dateTimeParser43);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) (-1), chronology46);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone50 = dateTimeZone49.toTimeZone();
        org.joda.time.DateTime dateTime51 = localDateTime47.toDateTime(dateTimeZone49);
        org.joda.time.Chronology chronology52 = dateTime51.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter44.withChronology(chronology52);
        org.joda.time.DateTimeField dateTimeField54 = chronology52.monthOfYear();
        org.joda.time.DateTimeField dateTimeField55 = chronology52.weekyearOfCentury();
        mutableDateTime36.setChronology(chronology52);
        org.joda.time.Chronology chronology57 = chronology52.withUTC();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.millisOfSecond();
        java.lang.String str59 = dateTimeField58.toString();
        mutableDateTime12.setRounding(dateTimeField58);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str25, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "DateTimeField[millisOfSecond]" + "'", str59, "DateTimeField[millisOfSecond]");
    }

    @Test
    public void test14759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14759");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.add((long) 100);
        org.joda.time.Chronology chronology3 = null;
        mutableDateTime0.setChronology(chronology3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.minuteOfHour();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.weekyear();
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test14760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14760");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate10 = property7.setCopy((int) (byte) 1);
        org.joda.time.LocalDate localDate12 = localDate10.withCenturyOfEra((int) '4');
        org.joda.time.LocalDate localDate14 = localDate12.withYear((int) (byte) 0);
        org.joda.time.LocalDate.Property property15 = localDate14.year();
        java.lang.String str16 = property15.getAsShortText();
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (-1), chronology20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        org.joda.time.DateTime dateTime25 = localDateTime21.toDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfDay();
        org.joda.time.DurationField durationField28 = chronology26.minutes();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.hourOfDay();
        org.joda.time.DurationField durationField31 = dateTimeField30.getLeapDurationField();
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.Character> charSet34 = locale33.getExtensionKeys();
        java.lang.String str35 = dateTimeField30.getAsText(19, locale33);
        java.lang.String str36 = locale18.getDisplayCountry(locale33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate37 = property15.setCopy("DateTimeField[minuteOfHour]", locale18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"DateTimeField[minuteOfHour]\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0" + "'", str16, "0");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNull(durationField31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertNotNull(charSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "19" + "'", str35, "19");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test14761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14761");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.Interval interval5 = property3.toInterval();
        long long6 = property3.remainder();
        java.lang.String str7 = property3.toString();
        org.joda.time.LocalDateTime localDateTime9 = property3.setCopy((int) (short) 1);
        int int10 = localDateTime9.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withCenturyOfEra(0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusYears(53);
        int int15 = localDateTime12.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.withYear(38);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[dayOfYear]" + "'", str7, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test14762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14762");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        java.lang.String str7 = localTime6.toString();
        org.joda.time.LocalTime localTime9 = localTime6.minusMillis(0);
        org.joda.time.LocalTime.Property property10 = localTime9.minuteOfHour();
        org.joda.time.LocalTime localTime12 = property10.addCopy((int) (byte) 100);
        org.joda.time.LocalTime.Property property13 = localTime12.secondOfMinute();
        org.joda.time.LocalTime localTime15 = localTime12.plusMillis(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime17 = localTime12.withMillisOfSecond(54696);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54696 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "23:00:00.003" + "'", str7, "23:00:00.003");
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test14763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14763");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendMonthOfYearText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendDayOfYear(517200);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder4.appendFractionOfHour((int) (byte) 100, 48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder4.appendPattern("2022-02-21T15:08:12.094+00:00:00.003");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
    }

    @Test
    public void test14764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14764");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds((int) (byte) 100);
        int int5 = localDateTime4.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.era();
        java.lang.String str7 = property6.getAsText();
        org.joda.time.LocalDateTime localDateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.monthOfYear();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withDayOfYear(97);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusMillis(2090);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withYear((-36161));
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.minusYears(0);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "AD" + "'", str7, "AD");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test14765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14765");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate10 = property7.addToCopy((int) ' ');
        org.joda.time.LocalDate localDate12 = localDate10.withWeekyear(2);
        org.joda.time.LocalDate localDate14 = localDate12.plusWeeks(86390000);
        int int15 = localDate12.getDayOfWeek();
        org.joda.time.Interval interval16 = localDate12.toInterval();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(interval16);
    }

    @Test
    public void test14766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14766");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendMonthOfYearText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendSecondOfMinute(69);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatterBuilder4.toFormatter();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (-1), chronology9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.weekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property16 = localDateTime10.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean18 = localDateTime10.isSupported(dateTimeFieldType17);
        int int19 = localDateTime10.getDayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime10.withPeriodAdded(readablePeriod20, 21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfDay();
        int int24 = localDateTime22.get(dateTimeFieldType23);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder4.appendFixedDecimal(dateTimeFieldType23, 42);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder26.appendMillisOfSecond(909);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = dateTimeFormatterBuilder26.appendMillisOfSecond(0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (-1), chronology32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.weekyear();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.plusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property39 = localDateTime33.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType41.getField(chronology42);
        int int45 = dateTimeField43.getLeapAmount((long) (byte) 1);
        long long47 = dateTimeField43.remainder((long) (-292275054));
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) (-1), chronology49);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.weekyear();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime55 = localDateTime50.plusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime50.minus(readablePeriod56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime50.withMonthOfYear(1);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.plusMinutes(292278993);
        int int62 = dateTimeField43.getMinimumValue((org.joda.time.ReadablePartial) localDateTime59);
        java.util.Locale locale66 = new java.util.Locale("Taiwan", "1", "999");
        int int67 = dateTimeField43.getMaximumShortTextLength(locale66);
        org.joda.time.LocalDateTime localDateTime68 = property39.setCopy("116", locale66);
        org.joda.time.LocalDateTime localDateTime69 = property39.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.plusMillis(68);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder72 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder75 = dateTimeFormatterBuilder72.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap76 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder77 = dateTimeFormatterBuilder72.appendTimeZoneShortName(strMap76);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder80 = dateTimeFormatterBuilder72.appendWeekyear(2000, 59);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder82 = dateTimeFormatterBuilder72.appendDayOfWeek(5);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder85 = dateTimeFormatterBuilder82.appendYear(21, 116);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder87 = dateTimeFormatterBuilder82.appendLiteral("hi!");
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder89 = dateTimeFormatterBuilder87.appendText(dateTimeFieldType88);
        boolean boolean90 = localDateTime69.isSupported(dateTimeFieldType88);
        java.lang.String str91 = dateTimeFieldType88.getName();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder93 = dateTimeFormatterBuilder30.appendFixedDecimal(dateTimeFieldType88, 48);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder95 = dateTimeFormatterBuilder93.appendMonthOfYear(0);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder30);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 31243724949L + "'", long47 == 31243724949L);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-292275054) + "'", int62 == (-292275054));
        org.junit.Assert.assertEquals(locale66.toString(), "taiwan_1_999");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 9 + "'", int67 == 9);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder75);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder77);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder80);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder82);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder85);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder87);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "yearOfCentury" + "'", str91, "yearOfCentury");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder93);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder95);
    }

    @Test
    public void test14767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14767");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property2 = localDate0.property(dateTimeFieldType1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        boolean boolean4 = localDate0.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDate.Property property5 = localDate0.era();
        org.joda.time.LocalDate.Property property6 = localDate0.dayOfMonth();
        org.joda.time.LocalDate localDate8 = localDate0.withYearOfEra(1);
        int int9 = localDate8.getYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test14768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14768");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        boolean boolean7 = property5.isLeap();
        java.util.Locale locale11 = new java.util.Locale("", "1969-12-31T23:59:59.999Z", "1969-12-31T23:59:59.999Z");
        java.lang.String str12 = property5.getAsShortText(locale11);
        boolean boolean13 = property5.isLeap();
        org.joda.time.LocalTime localTime15 = property5.addCopy(70);
        org.joda.time.LocalTime localTime17 = property5.addCopy(10802022L);
        org.joda.time.LocalTime localTime18 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime20 = localTime18.plusHours(3);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime24 = localTime22.minusSeconds((int) (short) 10);
        int int25 = localTime22.getMinuteOfHour();
        org.joda.time.LocalTime.Property property26 = localTime22.hourOfDay();
        org.joda.time.LocalTime localTime27 = property26.withMaximumValue();
        boolean boolean28 = property26.isLeap();
        org.joda.time.LocalTime localTime29 = property26.roundFloorCopy();
        org.joda.time.LocalTime localTime30 = property26.roundHalfEvenCopy();
        java.util.Locale locale32 = new java.util.Locale("365");
        java.lang.String str33 = locale32.getISO3Language();
        int int34 = property26.getMaximumShortTextLength(locale32);
        org.joda.time.LocalTime localTime35 = property26.withMaximumValue();
        org.joda.time.LocalTime localTime36 = property26.roundCeilingCopy();
        org.joda.time.LocalTime localTime38 = localTime36.plusSeconds(52);
        int int39 = localTime38.getHourOfDay();
        boolean boolean40 = localTime18.isEqual((org.joda.time.ReadablePartial) localTime38);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals(locale11.toString(), "_1969-12-31T23:59:59.999Z_1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertEquals(locale32.toString(), "365");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "365" + "'", str33, "365");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test14769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14769");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime6.millisOfSecond();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 1, chronology12);
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded((long) (byte) 0, 292278993);
        int int17 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (-1), chronology20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        org.joda.time.DateTime dateTime25 = localDateTime21.toDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfDay();
        org.joda.time.DurationField durationField28 = chronology26.minutes();
        org.joda.time.DurationField durationField29 = chronology26.minutes();
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) 292278993, chronology26);
        org.joda.time.DateTime dateTime31 = dateTime6.toDateTime(chronology26);
        org.joda.time.DateTime dateTime33 = dateTime6.plusMonths(33);
        org.joda.time.DateTime dateTime35 = dateTime33.withWeekyear(1972);
        int int36 = dateTime33.getCenturyOfEra();
        org.joda.time.DateTime.Property property37 = dateTime33.secondOfMinute();
        org.joda.time.DateTime.Property property38 = dateTime33.yearOfEra();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 19 + "'", int36 == 19);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test14770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14770");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("2068");
        org.junit.Assert.assertNotNull(localDate1);
    }

    @Test
    public void test14771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14771");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder5.appendTimeZoneOffset("1969-01-01T23:59:59.999", "monthOfYear", true, 10, (int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder5.appendFractionOfDay(54, (int) (byte) 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder14.appendLiteral("");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
    }

    @Test
    public void test14772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14772");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(2053, 2720, 57600003, 54729, (-1998), 86300002);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54729 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14773");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        boolean boolean7 = property5.isLeap();
        org.joda.time.LocalTime localTime8 = property5.roundFloorCopy();
        org.joda.time.LocalTime.Property property9 = localTime8.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.lang.String str13 = locale12.toLanguageTag();
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.lang.String str15 = locale12.getDisplayScript(locale14);
        java.lang.String str16 = locale14.getVariant();
        java.lang.String str17 = dateTimeZone10.getName(0L, locale14);
        java.lang.String str18 = locale14.getDisplayCountry();
        int int19 = property9.getMaximumShortTextLength(locale14);
        org.joda.time.LocalTime localTime21 = property9.addCopy(10L);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime25 = localTime23.minusSeconds((int) (short) 10);
        int int26 = localTime23.getMinuteOfHour();
        org.joda.time.LocalTime.Property property27 = localTime23.hourOfDay();
        org.joda.time.LocalTime localTime28 = property27.withMaximumValue();
        boolean boolean29 = property27.isLeap();
        org.joda.time.LocalTime localTime31 = property27.addCopy((int) (byte) -1);
        org.joda.time.LocalTime localTime33 = property27.addNoWrapToCopy(0);
        org.joda.time.LocalTime localTime35 = property27.addCopy(999);
        org.joda.time.LocalTime localTime37 = localTime35.minusSeconds(0);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime();
        mutableDateTime39.add((long) 100);
        org.joda.time.Chronology chronology42 = null;
        mutableDateTime39.setChronology(chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        long long46 = dateTimeZone44.previousTransition((long) 1);
        mutableDateTime39.setZone(dateTimeZone44);
        int int48 = mutableDateTime39.getSecondOfMinute();
        java.util.Locale locale49 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.Character> charSet50 = locale49.getExtensionKeys();
        java.util.Calendar calendar51 = mutableDateTime39.toCalendar(locale49);
        java.lang.String str52 = localTime35.toString("\u5354\u8abf\u4e16\u754c\u6642\u9593", locale49);
        java.lang.String str53 = property9.getAsShortText(locale49);
        org.joda.time.LocalTime localTime55 = property9.addCopy((long) 1);
        org.joda.time.LocalTime localTime57 = property9.addNoWrapToCopy(514);
        int int58 = localTime57.size();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zh-TW" + "'", str13, "zh-TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.003" + "'", str17, "+00:00:00.003");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Germany" + "'", str18, "Germany");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 6 + "'", int48 == 6);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja");
        org.junit.Assert.assertNotNull(charSet50);
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1645456386930,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=13,SECOND=6,MILLISECOND=933,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u5354\u8abf\u4e16\u754c\u6642\u9593" + "'", str52, "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0" + "'", str53, "0");
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
    }

    @Test
    public void test14774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14774");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property2 = localDate0.property(dateTimeFieldType1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        boolean boolean4 = localDate0.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDate.Property property5 = localDate0.era();
        org.joda.time.LocalDate.Property property6 = localDate0.dayOfMonth();
        org.joda.time.LocalDate localDate8 = localDate0.minusWeeks(2000);
        int int10 = localDate0.getValue((int) (short) 0);
        org.joda.time.LocalDate localDate12 = localDate0.plusDays(1439);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = localDate0.toDateTimeAtStartOfDay(dateTimeZone14);
        int int19 = dateTimeZone14.getOffset(0L);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
    }

    @Test
    public void test14775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14775");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        int int13 = dateTime9.getMinuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime9.withYearOfEra((int) 'u');
        org.joda.time.DateTime dateTime17 = dateTime15.plus((long) (-292275054));
        org.joda.time.DateTime.Property property18 = dateTime15.secondOfMinute();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (-1), chronology20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        org.joda.time.DateTime dateTime25 = localDateTime21.toDateTime(dateTimeZone23);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.DateTime dateTime28 = dateTime25.plus((long) 100);
        org.joda.time.DateTime.Property property29 = dateTime28.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime28.plus(readableDuration30);
        int int32 = dateTime31.getDayOfMonth();
        java.util.Locale locale34 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        java.lang.String str37 = locale34.getDisplayVariant(locale36);
        java.lang.String str38 = dateTime31.toString("365", locale36);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        long long41 = dateTimeZone39.previousTransition((long) 1);
        org.joda.time.DateTime dateTime42 = dateTime31.withZone(dateTimeZone39);
        org.joda.time.DateTime dateTime43 = dateTime15.toDateTime(dateTimeZone39);
        long long45 = dateTimeZone39.nextTransition(31536000000L);
        java.lang.String str46 = dateTimeZone39.getID();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str26, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "365" + "'", str38, "365");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 31536000000L + "'", long45 == 31536000000L);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.003" + "'", str46, "+00:00:00.003");
    }

    @Test
    public void test14776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14776");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime1.set(dateTimeFieldType2, (-292275054));
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutableDateTime1.add(readablePeriod5, 4);
        mutableDateTime1.addWeekyears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 'x', dateTimeZone13);
        java.lang.String str16 = dateTimeZone13.getShortName((long) 2);
        int int18 = dateTimeZone13.getStandardOffset((-457071L));
        mutableDateTime1.setZone(dateTimeZone13);
        long long22 = dateTimeZone13.adjustOffset((long) 3123, false);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.003" + "'", str16, "+00:00:00.003");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 3123L + "'", long22 == 3123L);
    }

    @Test
    public void test14777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14777");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds(0);
        org.joda.time.DateTime dateTime13 = dateTime11.withHourOfDay(1);
        org.joda.time.DateTime.Property property14 = dateTime13.monthOfYear();
        org.joda.time.DateTime dateTime16 = property14.addToCopy((long) (-292275054));
        org.joda.time.DateTimeField dateTimeField17 = property14.getField();
        org.joda.time.DurationField durationField18 = dateTimeField17.getDurationField();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test14778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14778");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime4 = localTime2.minusSeconds((int) (short) 10);
        int int5 = localTime2.getMinuteOfHour();
        org.joda.time.LocalTime.Property property6 = localTime2.hourOfDay();
        org.joda.time.LocalTime localTime7 = property6.withMaximumValue();
        java.lang.String str8 = localTime7.toString();
        org.joda.time.LocalTime localTime10 = localTime7.minusMillis(0);
        org.joda.time.LocalTime.Property property11 = localTime10.minuteOfHour();
        org.joda.time.LocalTime localTime13 = property11.addCopy((int) (byte) 100);
        org.joda.time.LocalTime.Property property14 = localTime13.secondOfMinute();
        org.joda.time.LocalTime localTime16 = property14.addWrapFieldToCopy(33);
        int int17 = localTime16.getHourOfDay();
        org.joda.time.Chronology chronology18 = localTime16.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime20.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime20.add(readableDuration23, (int) (short) 100);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime20.minuteOfDay();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime20.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField28 = property27.getField();
        int int29 = property27.getMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime31 = property27.add(29);
        java.lang.String str32 = property27.toString();
        java.util.Locale locale33 = java.util.Locale.ENGLISH;
        java.lang.String str34 = locale33.getDisplayScript();
        java.lang.String str35 = locale33.getDisplayCountry();
        int int36 = property27.getMaximumTextLength(locale33);
        java.lang.String str37 = locale33.getCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket(61200100L, chronology18, locale33);
        java.util.Locale.Builder builder39 = new java.util.Locale.Builder();
        java.util.Locale locale40 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleAttributes();
        java.util.Locale locale42 = java.util.Locale.GERMANY;
        java.lang.String str43 = locale40.getDisplayVariant(locale42);
        java.util.Locale.Builder builder44 = builder39.setLocale(locale40);
        java.util.Locale.Builder builder46 = builder44.setLanguageTag("francese");
        java.util.Locale.Builder builder47 = builder46.clear();
        boolean boolean48 = dateTimeParserBucket38.restoreState((java.lang.Object) builder47);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder50 = builder47.setVariant("70");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 70 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "23:00:00.003" + "'", str8, "23:00:00.003");
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Property[yearOfCentury]" + "'", str32, "Property[yearOfCentury]");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test14779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14779");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (short) 100);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minus(readableDuration2);
        java.lang.String str4 = localDateTime1.toString();
        org.junit.Assert.assertNotNull(localDateTime3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:00.103" + "'", str4, "1970-01-01T00:00:00.103");
    }

    @Test
    public void test14780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14780");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        boolean boolean5 = dateTimeZone0.isLocalDateTimeGap(localDateTime4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.withMillisOfDay(5);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.plusHours((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime4.withPeriodAdded(readablePeriod12, 3);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime4.plusSeconds(59);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusDays((-1));
        org.joda.time.Chronology chronology19 = localDateTime18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.eras();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.secondOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test14781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14781");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        int int13 = dateTime9.getMinuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime9.withYearOfEra((int) 'u');
        org.joda.time.DateTime.Property property16 = dateTime9.era();
        org.joda.time.DateTime dateTime17 = property16.roundHalfEvenCopy();
        java.lang.String str18 = property16.getAsShortText();
        org.joda.time.DateTime dateTime19 = property16.roundCeilingCopy();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTime(chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusDays(0);
        org.joda.time.DateTime dateTime25 = dateTime21.minusMonths(57);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "AD" + "'", str18, "AD");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test14782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14782");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.Interval interval5 = property3.toInterval();
        long long6 = property3.remainder();
        java.lang.String str7 = property3.toString();
        org.joda.time.LocalDateTime localDateTime9 = property3.setCopy((int) (short) 1);
        int int10 = localDateTime9.getDayOfMonth();
        int int11 = localDateTime9.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withYearOfCentury((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTimeField dateTimeField15 = mutableDateTime14.getRoundingField();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getDurationType();
        mutableDateTime14.add(durationFieldType17, 100);
        mutableDateTime14.addYears(10);
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime14.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime();
        mutableDateTime23.add((long) 100);
        org.joda.time.Chronology chronology26 = null;
        mutableDateTime23.setChronology(chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        long long30 = dateTimeZone28.previousTransition((long) 1);
        mutableDateTime23.setZone(dateTimeZone28);
        org.joda.time.DateTime dateTime32 = mutableDateTime22.toDateTime(dateTimeZone28);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime35 = dateTime32.withFieldAdded(durationFieldType33, 7);
        java.lang.String str36 = durationFieldType33.toString();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime9.withFieldAdded(durationFieldType33, 71);
        java.lang.String str39 = durationFieldType33.getName();
        java.lang.String str40 = durationFieldType33.toString();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[dayOfYear]" + "'", str7, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "minutes" + "'", str36, "minutes");
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "minutes" + "'", str39, "minutes");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "minutes" + "'", str40, "minutes");
    }

    @Test
    public void test14783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14783");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime2.millisOfSecond();
        org.joda.time.LocalDateTime.Property property9 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime.Property property10 = localDateTime2.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime2.withMinuteOfHour(54546);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54546 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test14784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14784");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(dateTimeZone4);
        int int6 = property3.compareTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now(dateTimeZone7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime8.add(readableDuration9, 100);
        boolean boolean12 = mutableDateTime5.isBefore((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime8.add(readableDuration13, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 'x', dateTimeZone18);
        mutableDateTime8.setZone(dateTimeZone18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        mutableDateTime8.set(dateTimeFieldType21, (int) '4');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (-1), chronology25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        org.joda.time.DateTime dateTime30 = localDateTime26.toDateTime(dateTimeZone28);
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.DateTime dateTime33 = dateTime30.plus((long) 100);
        org.joda.time.DateTime dateTime35 = dateTime33.minusSeconds(0);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = dateTime35.withChronology(chronology36);
        mutableDateTime8.setMillis((org.joda.time.ReadableInstant) dateTime37);
        java.lang.Object obj39 = mutableDateTime8.clone();
        org.joda.time.ReadablePeriod readablePeriod40 = null;
        mutableDateTime8.add(readablePeriod40, 3240003);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) (-1), chronology44);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.weekyear();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.withSecondOfMinute((int) ' ');
        int int49 = localDateTime48.getWeekyear();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.plusWeeks(575);
        int int52 = localDateTime51.getYearOfEra();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) (-1), chronology54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusSeconds((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withWeekOfWeekyear(5);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime57.withField(dateTimeFieldType60, 3600000);
        boolean boolean63 = localDateTime51.isSupported(dateTimeFieldType60);
        mutableDateTime8.set(dateTimeFieldType60, 514);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str31, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "1970-01-01T00:00:00.102+00:00:00.003");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "1970-01-01T00:00:00.102+00:00:00.003");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "1970-01-01T00:00:00.102+00:00:00.003");
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1970 + "'", int49 == 1970);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1981 + "'", int52 == 1981);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test14785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14785");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 162);
        java.util.Locale locale5 = new java.util.Locale("1972-10-01", "Property[dayOfMonth]");
        java.lang.String str6 = dateTime1.toString("2000-02-21", locale5);
        java.lang.String str7 = locale5.getCountry();
        org.junit.Assert.assertEquals(locale5.toString(), "1972-10-01_PROPERTY[DAYOFMONTH]");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2000-02-21" + "'", str6, "2000-02-21");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PROPERTY[DAYOFMONTH]" + "'", str7, "PROPERTY[DAYOFMONTH]");
    }

    @Test
    public void test14786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14786");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property2 = localDate0.property(dateTimeFieldType1);
        org.joda.time.LocalDate localDate4 = localDate0.withDayOfMonth(10);
        org.joda.time.LocalDate localDate6 = localDate0.withYearOfEra(99);
        org.joda.time.LocalDate localDate8 = localDate0.withWeekyear(70);
        org.joda.time.LocalDate.Property property9 = localDate8.monthOfYear();
        org.joda.time.LocalDate.Property property10 = localDate8.monthOfYear();
        org.joda.time.LocalDate localDate11 = property10.roundCeilingCopy();
        org.joda.time.Interval interval12 = localDate11.toInterval();
        org.joda.time.DateTime dateTime13 = localDate11.toDateTimeAtMidnight();
        int int14 = localDate11.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 6 + "'", int14 == 6);
    }

    @Test
    public void test14787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14787");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        org.joda.time.DateTime dateTime7 = localTime6.toDateTimeToday();
        int int8 = localTime6.size();
        org.joda.time.LocalTime localTime10 = localTime6.plusHours((-1));
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfDay();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 3, chronology14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getDurationType();
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType16.getRangeDurationType();
        boolean boolean19 = localDate15.isSupported(durationFieldType18);
        org.joda.time.LocalDate.Property property20 = localDate15.centuryOfEra();
        org.joda.time.LocalDate localDate21 = property20.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate23 = property20.setCopy((int) (byte) 1);
        org.joda.time.LocalDate localDate24 = property20.roundFloorCopy();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 3, chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType28.getDurationType();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType28.getRangeDurationType();
        boolean boolean31 = localDate27.isSupported(durationFieldType30);
        org.joda.time.LocalDate.Property property32 = localDate27.centuryOfEra();
        org.joda.time.LocalDate localDate33 = property32.roundCeilingCopy();
        org.joda.time.LocalDate localDate34 = property32.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = localDate34.toDateTimeAtCurrentTime(dateTimeZone36);
        org.joda.time.Interval interval39 = localDate24.toInterval(dateTimeZone36);
        long long41 = dateTimeZone36.nextTransition(35L);
        int int43 = dateTimeZone36.getOffsetFromLocal((long) 'u');
        java.lang.String str45 = dateTimeZone36.getNameKey(248402022L);
        boolean boolean46 = dateTimeZone36.isFixed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((java.lang.Object) property11, dateTimeZone36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 35L + "'", long41 == 35L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test14788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14788");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(dateTimeZone4);
        int int6 = property3.compareTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now(dateTimeZone7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime8.add(readableDuration9, 100);
        boolean boolean12 = mutableDateTime5.isBefore((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) (-1), chronology14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        org.joda.time.DateTime dateTime19 = localDateTime15.toDateTime(dateTimeZone17);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.DateTime dateTime22 = dateTime19.plus((long) 100);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime25 = dateTime22.plus(readableDuration24);
        int int26 = dateTime25.getDayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DateTime.Property property28 = dateTime25.property(dateTimeFieldType27);
        mutableDateTime8.setMillis((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime.Property property30 = dateTime25.centuryOfEra();
        org.joda.time.DateTime dateTime31 = property30.withMinimumValue();
        org.joda.time.DateTime dateTime32 = property30.roundCeilingCopy();
        org.joda.time.DateTime.Property property33 = dateTime32.secondOfMinute();
        org.joda.time.DateTime dateTime35 = property33.addToCopy(2661L);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (-1), chronology37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone41 = dateTimeZone40.toTimeZone();
        org.joda.time.DateTime dateTime42 = localDateTime38.toDateTime(dateTimeZone40);
        org.joda.time.Chronology chronology43 = dateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.secondOfDay();
        org.joda.time.Chronology chronology45 = chronology43.withUTC();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.dayOfWeek();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) (-1), chronology48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusSeconds((int) (byte) 100);
        int int52 = localDateTime51.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property53 = localDateTime51.era();
        java.lang.String str54 = property53.getAsText();
        org.joda.time.LocalDateTime localDateTime55 = property53.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.monthOfYear();
        java.util.Locale locale57 = java.util.Locale.ENGLISH;
        java.lang.String str58 = dateTimeField46.getAsShortText((org.joda.time.ReadablePartial) localDateTime55, locale57);
        java.util.Locale locale59 = locale57.stripExtensions();
        int int60 = property33.getMaximumShortTextLength(locale59);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str20, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "AD" + "'", str54, "AD");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Mon" + "'", str58, "Mon");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
    }

    @Test
    public void test14789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14789");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDateTime4.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.secondOfDay();
        org.joda.time.DurationField durationField11 = chronology9.minutes();
        org.joda.time.DurationField durationField12 = chronology9.minutes();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 292278993, chronology9);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 'a', chronology9);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra(2922750);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.plusWeeks((int) 'u');
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withYear(999);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.minus(readablePeriod21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withMillisOfSecond((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusWeeks(86390000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withMinuteOfHour(292277076);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292277076 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test14790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14790");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        boolean boolean17 = dateTimeZone12.isLocalDateTimeGap(localDateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.weekyear();
        boolean boolean22 = dateTimeZone12.isLocalDateTimeGap(localDateTime20);
        long long24 = dateTimeZone12.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter25.withPivotYear(0);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (-1), chronology29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.weekyear();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withSecondOfMinute((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusMinutes(292278993);
        org.joda.time.LocalDateTime.Property property36 = localDateTime30.yearOfEra();
        org.joda.time.format.DateTimePrinter dateTimePrinter37 = null;
        org.joda.time.format.DateTimeParser dateTimeParser38 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter37, dateTimeParser38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) (-1), chronology41);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone45 = dateTimeZone44.toTimeZone();
        org.joda.time.DateTime dateTime46 = localDateTime42.toDateTime(dateTimeZone44);
        org.joda.time.Chronology chronology47 = dateTime46.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter39.withChronology(chronology47);
        boolean boolean49 = localDateTime30.equals((java.lang.Object) chronology47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter27.withChronology(chronology47);
        org.joda.time.DurationField durationField51 = chronology47.halfdays();
        org.joda.time.DateTimeField dateTimeField52 = chronology47.yearOfEra();
        java.lang.String str54 = dateTimeField52.getAsShortText(1967L);
        long long57 = dateTimeField52.getDifferenceAsLong(54383L, (long) 24);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) (-1), chronology59);
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone63 = dateTimeZone62.toTimeZone();
        org.joda.time.DateTime dateTime64 = localDateTime60.toDateTime(dateTimeZone62);
        java.lang.String str65 = dateTime64.toString();
        org.joda.time.DateTime dateTime67 = dateTime64.plus((long) 100);
        org.joda.time.DateTime.Property property68 = dateTime67.yearOfCentury();
        java.util.Locale locale69 = java.util.Locale.GERMANY;
        java.util.Calendar calendar70 = dateTime67.toCalendar(locale69);
        org.joda.time.DateTime.Property property71 = dateTime67.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime72 = dateTime67.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.plusMillis((int) 'a');
        org.joda.time.Chronology chronology75 = localDateTime74.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType77 = dateTimeFieldType76.getDurationType();
        org.joda.time.DurationFieldType durationFieldType78 = dateTimeFieldType76.getRangeDurationType();
        boolean boolean79 = localDateTime74.isSupported(durationFieldType78);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime74.withDayOfYear((int) 'a');
        java.util.Locale locale82 = java.util.Locale.TAIWAN;
        java.util.Locale locale83 = locale82.stripExtensions();
        java.lang.String str84 = locale82.getCountry();
        java.lang.String str85 = locale82.getVariant();
        java.lang.String str86 = dateTimeField52.getAsText((org.joda.time.ReadablePartial) localDateTime74, locale82);
        long long88 = dateTimeField52.roundHalfEven(9223247714227231102L);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3L + "'", long24 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1970" + "'", str54, "1970");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(timeZone63);
// flaky:         org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime64);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str65, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar70);
// flaky:         org.junit.Assert.assertEquals(calendar70.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertNotNull(durationFieldType78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "TW" + "'", str84, "TW");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "1970" + "'", str86, "1970");
// flaky:         org.junit.Assert.assertTrue("'" + long88 + "' != '" + 9223247714227199997L + "'", long88 == 9223247714227199997L);
    }

    @Test
    public void test14791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14791");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 1);
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(3499999L, dateTimeZone2);
        mutableDateTime4.setDate((long) 54682);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
    }

    @Test
    public void test14792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14792");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1973);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime5 = localTime3.minusSeconds((int) (short) 10);
        int int6 = localTime3.getMinuteOfHour();
        org.joda.time.LocalTime.Property property7 = localTime3.hourOfDay();
        org.joda.time.LocalTime localTime8 = property7.withMaximumValue();
        boolean boolean9 = property7.isLeap();
        org.joda.time.LocalTime localTime10 = property7.roundFloorCopy();
        org.joda.time.LocalTime localTime11 = property7.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime12 = property7.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime13 = property7.withMinimumValue();
        org.joda.time.LocalTime localTime15 = property7.addCopy((-1));
        org.joda.time.LocalTime localTime17 = property7.addCopy(116);
        org.joda.time.LocalTime localTime19 = property7.addCopy(248402022L);
        org.joda.time.LocalTime localTime20 = property7.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField21 = property7.getField();
        boolean boolean22 = dateTimeField21.isLenient();
        int int23 = dateTime1.get(dateTimeField21);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test14793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14793");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (-1));
        org.joda.time.DateTime dateTime3 = dateTime1.plusWeeks(5);
        org.joda.time.DateTime.Property property4 = dateTime3.minuteOfHour();
        org.joda.time.DateTime.Property property5 = dateTime3.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test14794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14794");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime2.set(dateTimeFieldType3, (-292275054));
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        mutableDateTime2.add(readablePeriod6, 4);
        int int9 = mutableDateTime2.getMillisOfDay();
        int int10 = mutableDateTime2.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime();
        mutableDateTime11.add((long) 100);
        org.joda.time.Chronology chronology14 = null;
        mutableDateTime11.setChronology(chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        long long18 = dateTimeZone16.previousTransition((long) 1);
        mutableDateTime11.setZone(dateTimeZone16);
        java.lang.String str20 = dateTimeZone16.toString();
        mutableDateTime2.setZoneRetainFields(dateTimeZone16);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(0L, dateTimeZone16);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((-203697981L), chronology24);
        int int26 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2922750 + "'", int10 == 2922750);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.003" + "'", str20, "+00:00:00.003");
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
    }

    @Test
    public void test14795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14795");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 5);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(10802022L);
        org.joda.time.LocalTime localTime4 = localTime1.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.LocalTime.Property property5 = localTime1.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addNoWrapToCopy(90);
        org.joda.time.DateTimeField dateTimeField8 = property5.getField();
        int int9 = dateTimeField8.getMinimumValue();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test14796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14796");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDateTime4.toDateTime(dateTimeZone6);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.plus((long) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfCentury();
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.util.Calendar calendar14 = dateTime11.toCalendar(locale13);
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale15.toLanguageTag();
        java.lang.String str17 = locale13.getDisplayCountry(locale15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology1, locale13, (java.lang.Integer) 38);
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = null;
        org.joda.time.format.DateTimeParser dateTimeParser21 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter20, dateTimeParser21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (-1), chronology24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTime dateTime29 = localDateTime25.toDateTime(dateTimeZone27);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter22.withChronology(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.monthOfYear();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.weekyearOfCentury();
        dateTimeParserBucket19.saveField(dateTimeField33, 19);
        int int36 = dateTimeParserBucket19.getOffset();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        dateTimeParserBucket19.saveField(dateTimeFieldType37, 0);
        dateTimeParserBucket19.setOffset((java.lang.Integer) 0);
        int int42 = dateTimeParserBucket19.getOffset();
        int int43 = dateTimeParserBucket19.getOffset();
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str9, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh-TW" + "'", str16, "zh-TW");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u5fb7\u570b" + "'", str17, "\u5fb7\u570b");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test14797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14797");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        strSet1.clear();
        java.util.Iterator<java.lang.String> strItor3 = strSet1.iterator();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-1), chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDateTime6.toDateTime(dateTimeZone8);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.plus(readableDuration12);
        org.joda.time.DateTime dateTime15 = dateTime10.minusWeeks(10);
        boolean boolean17 = dateTime10.isBefore((long) (-1));
        int int18 = dateTime10.getYearOfEra();
        org.joda.time.DateTime dateTime20 = dateTime10.plusDays(1969);
        boolean boolean21 = strSet1.equals((java.lang.Object) dateTime10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (-1), chronology23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone27 = dateTimeZone26.toTimeZone();
        org.joda.time.DateTime dateTime28 = localDateTime24.toDateTime(dateTimeZone26);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.DateTime dateTime31 = dateTime28.plus((long) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minusSeconds(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter34 = null;
        org.joda.time.format.DateTimeParser dateTimeParser35 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter34, dateTimeParser35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) (-1), chronology38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone42 = dateTimeZone41.toTimeZone();
        org.joda.time.DateTime dateTime43 = localDateTime39.toDateTime(dateTimeZone41);
        org.joda.time.Chronology chronology44 = dateTime43.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter36.withChronology(chronology44);
        org.joda.time.DateTimeField dateTimeField46 = chronology44.monthOfYear();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.clockhourOfHalfday();
        org.joda.time.DurationField durationField48 = chronology44.days();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((java.lang.Object) dateTime31, chronology44);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone51 = dateTimeZone50.toTimeZone();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) (-1), chronology53);
        boolean boolean55 = dateTimeZone50.isLocalDateTimeGap(localDateTime54);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) (-1), chronology57);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.weekyear();
        boolean boolean60 = dateTimeZone50.isLocalDateTimeGap(localDateTime58);
        boolean boolean62 = dateTimeZone50.isStandardOffset(86399999L);
        long long66 = dateTimeZone50.convertLocalToUTC((long) 35, true, 2022L);
        org.joda.time.DateTime dateTime67 = dateTime49.toDateTime(dateTimeZone50);
        long long69 = dateTimeZone50.nextTransition((long) 43);
        org.joda.time.DateTime dateTime70 = dateTime10.withZoneRetainFields(dateTimeZone50);
        org.joda.time.DateTimeZone dateTimeZone71 = dateTime10.getZone();
        org.joda.time.Chronology chronology72 = dateTime10.getChronology();
        int int73 = dateTime10.getYearOfEra();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strItor3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str11, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1970 + "'", int18 == 1970);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str29, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long66 + "' != '" + 32L + "'", long66 == 32L);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 43L + "'", long69 == 43L);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(chronology72);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1970 + "'", int73 == 1970);
    }

    @Test
    public void test14798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14798");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.secondOfMinute();
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime4);
        int int7 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addWeeks(35);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setTime(53, 1900, 2190, 54625295);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test14799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14799");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 86300003);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusMillis(59);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusMillis(16140003);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) (-1), chronology7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.weekyear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property14 = localDateTime8.millisOfSecond();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (-1), chronology16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.weekyear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.minus(readablePeriod23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime17.withYearOfCentury(23);
        int int27 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime17);
        int int29 = localDateTime17.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime17.plusSeconds(82);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withYear(32400000);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusWeeks(86390000);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime1.withCenturyOfEra(2027);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withMonthOfYear(54771);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54771 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
    }

    @Test
    public void test14800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14800");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.add((long) 100);
        org.joda.time.Chronology chronology3 = null;
        mutableDateTime0.setChronology(chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        long long7 = dateTimeZone5.previousTransition((long) 1);
        mutableDateTime0.setZone(dateTimeZone5);
        java.lang.String str9 = dateTimeZone5.toString();
        long long11 = dateTimeZone5.previousTransition((-60000L));
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime14.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime14.add(readableDuration17, (int) (short) 100);
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = null;
        org.joda.time.format.DateTimeParser dateTimeParser21 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter20, dateTimeParser21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (-1), chronology24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTime dateTime29 = localDateTime25.toDateTime(dateTimeZone27);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter22.withChronology(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.monthOfYear();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.weekyearOfCentury();
        mutableDateTime14.setChronology(chronology30);
        org.joda.time.Chronology chronology35 = chronology30.withUTC();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.secondOfMinute();
        java.util.Locale locale38 = java.util.Locale.TAIWAN;
        java.lang.String str39 = locale38.toLanguageTag();
        java.util.Locale locale40 = java.util.Locale.GERMANY;
        java.lang.String str41 = locale38.getDisplayScript(locale40);
        java.util.Set<java.lang.Character> charSet42 = locale38.getExtensionKeys();
        java.lang.String str43 = locale38.getDisplayScript();
        java.lang.String str44 = dateTimeField36.getAsShortText(0L, locale38);
        java.lang.String str45 = dateTimeZone5.getShortName(6122228L, locale38);
        int int47 = dateTimeZone5.getOffset(153722880000000L);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "+00:00:00.003" + "'", str9, "+00:00:00.003");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-60000L) + "'", long11 == (-60000L));
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "zh-TW" + "'", str39, "zh-TW");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(charSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "0" + "'", str44, "0");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.003" + "'", str45, "+00:00:00.003");
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
    }

    @Test
    public void test14801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14801");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.getLocalDate();
        int int10 = localDate9.getDayOfMonth();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 3, chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType14.getRangeDurationType();
        boolean boolean17 = localDate13.isSupported(durationFieldType16);
        org.joda.time.LocalDate.Property property18 = localDate13.centuryOfEra();
        org.joda.time.LocalDate localDate19 = property18.roundCeilingCopy();
        org.joda.time.LocalDate localDate20 = property18.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = localDate20.toDateTimeAtCurrentTime(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = localDate9.toDateTimeAtMidnight(dateTimeZone22);
        org.joda.time.DateTime dateTime27 = dateTime25.withMillisOfDay(20);
        org.joda.time.DateTime dateTime29 = dateTime25.withYearOfCentury(5);
        org.joda.time.DateTime dateTime31 = dateTime29.plusSeconds(30899999);
        org.joda.time.DateTime dateTime32 = dateTime31.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property33 = dateTime32.millisOfDay();
        java.util.Locale locale36 = new java.util.Locale("hi!");
        java.lang.String str37 = locale36.getScript();
        java.lang.String str38 = locale36.getDisplayLanguage();
        java.lang.String str39 = locale36.getDisplayCountry();
        java.util.Locale locale41 = new java.util.Locale("365");
        java.lang.String str42 = locale41.getISO3Language();
        java.lang.String str43 = locale36.getDisplayLanguage(locale41);
        java.util.Locale locale44 = java.util.Locale.TAIWAN;
        java.lang.String str45 = locale44.getISO3Language();
        java.lang.String str46 = locale41.getDisplayLanguage(locale44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime47 = property33.setCopy("Property[minuteOfDay]", locale41);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[minuteOfDay]\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertEquals(locale36.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!" + "'", str38, "hi!");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals(locale41.toString(), "365");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "365" + "'", str42, "365");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "hi!" + "'", str43, "hi!");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "zho" + "'", str45, "zho");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "365" + "'", str46, "365");
    }

    @Test
    public void test14802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14802");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        mutableDateTime2.add((long) '#');
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Chronology chronology8 = null;
        mutableDateTime7.setChronology(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType10.getField(chronology11);
        mutableDateTime7.setRounding(dateTimeField12, (int) (short) 1);
        mutableDateTime2.setDate((org.joda.time.ReadableInstant) mutableDateTime7);
        mutableDateTime2.setDayOfWeek(5);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime21 = localTime19.minusSeconds((int) (short) 10);
        int int22 = localTime19.getMinuteOfHour();
        org.joda.time.LocalTime.Property property23 = localTime19.hourOfDay();
        org.joda.time.LocalTime localTime24 = property23.withMaximumValue();
        org.joda.time.DateTime dateTime25 = localTime24.toDateTimeToday();
        int int26 = localTime24.size();
        org.joda.time.LocalTime localTime28 = localTime24.plusHours((-1));
        org.joda.time.Chronology chronology29 = localTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.millisOfDay();
        org.joda.time.DurationField durationField31 = chronology29.years();
        org.joda.time.DurationField durationField32 = chronology29.weeks();
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime2.toMutableDateTime(chronology29);
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        mutableDateTime2.add(readablePeriod34);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime2.year();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 4 + "'", int26 == 4);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test14803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14803");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.plus(readableDuration8);
        org.joda.time.DateTime dateTime11 = dateTime6.minusWeeks(10);
        boolean boolean13 = dateTime6.isBefore((long) (-1));
        int int14 = dateTime6.getYearOfEra();
        org.joda.time.DateTime dateTime16 = dateTime6.plusDays(1969);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.DateTime dateTime18 = dateTime6.minus(readablePeriod17);
        org.joda.time.DateTime dateTime20 = dateTime18.minusYears(42);
        int int21 = dateTime18.getEra();
        org.joda.time.DateTime dateTime23 = dateTime18.plusWeeks(1);
        org.joda.time.format.DateTimePrinter dateTimePrinter24 = null;
        org.joda.time.format.DateTimeParser dateTimeParser25 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter24, dateTimeParser25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (-1), chronology28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone32 = dateTimeZone31.toTimeZone();
        org.joda.time.DateTime dateTime33 = localDateTime29.toDateTime(dateTimeZone31);
        org.joda.time.Chronology chronology34 = dateTime33.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter26.withChronology(chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.monthOfYear();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime(chronology34);
        org.joda.time.DateTimeField dateTimeField39 = chronology34.secondOfDay();
        org.joda.time.DateTime dateTime40 = dateTime18.withChronology(chronology34);
        org.joda.time.DateTime.Property property41 = dateTime18.dayOfWeek();
        org.joda.time.DateTime.Property property42 = dateTime18.dayOfYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test14804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14804");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.plus(readableDuration8);
        org.joda.time.DateTime dateTime11 = dateTime6.minusWeeks(10);
        org.joda.time.DateTime.Property property12 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime6.withYear(0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime17 = dateTime6.withDurationAdded(readableDuration15, 5);
        org.joda.time.DateTime dateTime18 = dateTime6.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property19 = dateTime6.hourOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test14805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14805");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.plus(readableDuration11);
        int int13 = dateTime12.getDayOfMonth();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.lang.String str18 = locale15.getDisplayVariant(locale17);
        java.lang.String str19 = dateTime12.toString("365", locale17);
        org.joda.time.DateTime dateTime21 = dateTime12.plusMonths(1969);
        org.joda.time.DateTime dateTime22 = dateTime12.withLaterOffsetAtOverlap();
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.DateTime.Property property24 = dateTime22.era();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.DateTime dateTime26 = dateTime22.minus(readablePeriod25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.DateTime dateTime28 = dateTime22.minus(readablePeriod27);
        java.lang.String str30 = dateTime28.toString("+00:00");
        org.joda.time.DateTime dateTime32 = dateTime28.plusYears(54383);
        org.joda.time.DateTime dateTime35 = dateTime32.withDurationAdded((long) 58, 34);
        org.joda.time.DateTime dateTime37 = dateTime35.minusDays(42);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.DateTime dateTime40 = dateTime35.withPeriodAdded(readablePeriod38, 3699000);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "365" + "'", str19, "365");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T00:00:00.102+00:00:00.003" + "'", str23, "1970-01-01T00:00:00.102+00:00:00.003");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test14806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14806");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.add((long) 100);
        org.joda.time.Chronology chronology3 = null;
        mutableDateTime0.setChronology(chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        long long7 = dateTimeZone5.previousTransition((long) 1);
        mutableDateTime0.setZone(dateTimeZone5);
        mutableDateTime0.setMillisOfSecond((int) ' ');
        java.util.Date date11 = mutableDateTime0.toDate();
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.fromDateFields(date11);
        org.joda.time.LocalDate localDate14 = localDate12.plusDays((int) '4');
        int int15 = localDate12.size();
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Mon Feb 21 15:13:07 GMT 2022");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
    }

    @Test
    public void test14807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14807");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        int int13 = dateTime9.getMinuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime9.withYearOfEra((int) 'u');
        org.joda.time.DateTime.Property property16 = dateTime9.era();
        boolean boolean18 = dateTime9.isEqual((long) 100);
        org.joda.time.DateTime.Property property19 = dateTime9.era();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime9.plus(readablePeriod20);
        org.joda.time.DateTime dateTime23 = dateTime21.withYearOfEra(74);
        int int24 = dateTime21.getDayOfMonth();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test14808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14808");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minusWeeks(10);
        int int10 = localDateTime9.getSecondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime12.setTime(100L);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime12.yearOfCentury();
        mutableDateTime12.setDayOfWeek(7);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        org.joda.time.DateTime dateTime24 = localDateTime20.toDateTime(dateTimeZone22);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.DateTime dateTime27 = dateTime24.plus((long) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.withMillisOfSecond(69);
        int int30 = dateTime29.getWeekOfWeekyear();
        boolean boolean31 = mutableDateTime12.isAfter((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTime dateTime32 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) mutableDateTime12);
        mutableDateTime12.addWeekyears(54);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime12.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime36 = property35.roundFloor();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str25, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
    }

    @Test
    public void test14809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14809");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        int int13 = dateTime9.getMinuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime9.withYearOfEra((int) 'u');
        org.joda.time.DateTime dateTime17 = dateTime15.plus((long) (-292275054));
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) (byte) -1);
        int int20 = dateTime19.getYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (-1), chronology22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        org.joda.time.DateTime dateTime27 = localDateTime23.toDateTime(dateTimeZone25);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.DateTime dateTime30 = dateTime27.plus((long) 100);
        org.joda.time.DateTime.Property property31 = dateTime27.millisOfSecond();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 1, chronology33);
        org.joda.time.DateTime dateTime37 = dateTime34.withDurationAdded((long) (byte) 0, 292278993);
        int int38 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis((int) (byte) 1);
        long long42 = dateTimeZone40.convertUTCToLocal((long) 2000);
        org.joda.time.DateTime dateTime43 = dateTime27.withZone(dateTimeZone40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((java.lang.Object) int20, dateTimeZone40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 116 + "'", int20 == 116);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str28, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 2001L + "'", long42 == 2001L);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test14810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14810");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds(0);
        org.joda.time.DateTime dateTime13 = dateTime11.withHourOfDay(1);
        int int14 = dateTime11.getMinuteOfDay();
        org.joda.time.DateTime.Property property15 = dateTime11.dayOfWeek();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (-1), chronology17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        org.joda.time.DateTime dateTime22 = localDateTime18.toDateTime(dateTimeZone20);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime25 = dateTime22.plus(readableDuration24);
        org.joda.time.DateTime dateTime27 = dateTime22.minusWeeks(10);
        boolean boolean29 = dateTime22.isBefore((long) (-1));
        int int30 = dateTime22.getYearOfEra();
        org.joda.time.DateTime dateTime32 = dateTime22.withYear((int) (byte) 0);
        int int33 = dateTime22.getDayOfWeek();
        org.joda.time.DateTime.Property property34 = dateTime22.millisOfDay();
        long long35 = property15.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property36 = dateTime22.secondOfMinute();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) (-1), chronology38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone42 = dateTimeZone41.toTimeZone();
        org.joda.time.DateTime dateTime43 = localDateTime39.toDateTime(dateTimeZone41);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.DateTime dateTime46 = dateTime43.plus((long) 100);
        org.joda.time.DateTime.Property property47 = dateTime46.yearOfCentury();
        java.util.Locale locale48 = java.util.Locale.GERMANY;
        java.util.Calendar calendar49 = dateTime46.toCalendar(locale48);
        int int50 = dateTime46.getMinuteOfHour();
        org.joda.time.DateTime dateTime52 = dateTime46.withYearOfEra((int) 'u');
        org.joda.time.DateTime.Property property53 = dateTime46.era();
        org.joda.time.DateTime dateTime55 = property53.setCopy(1);
        org.joda.time.DateTime dateTime56 = property53.roundCeilingCopy();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) (-1), chronology58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone62 = dateTimeZone61.toTimeZone();
        org.joda.time.DateTime dateTime63 = localDateTime59.toDateTime(dateTimeZone61);
        org.joda.time.Chronology chronology64 = dateTime63.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.secondOfDay();
        org.joda.time.Chronology chronology66 = chronology64.withUTC();
        org.joda.time.DurationField durationField67 = chronology64.months();
        org.joda.time.DateTime dateTime68 = dateTime56.toDateTime(chronology64);
        org.joda.time.DateTime dateTime69 = dateTime22.toDateTime(chronology64);
        org.joda.time.DateTime.Property property70 = dateTime69.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField71 = property70.getField();
        long long74 = dateTimeField71.addWrapField(645L, (int) '#');
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str23, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str44, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(timeZone62);
// flaky:         org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 2100645L + "'", long74 == 2100645L);
    }

    @Test
    public void test14811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14811");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds(0);
        org.joda.time.DateTime dateTime13 = dateTime11.withHourOfDay(1);
        int int14 = dateTime11.getMinuteOfDay();
        org.joda.time.DateTime.Property property15 = dateTime11.dayOfWeek();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (-1), chronology17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        org.joda.time.DateTime dateTime22 = localDateTime18.toDateTime(dateTimeZone20);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime25 = dateTime22.plus(readableDuration24);
        org.joda.time.DateTime dateTime27 = dateTime22.minusWeeks(10);
        boolean boolean29 = dateTime22.isBefore((long) (-1));
        int int30 = dateTime22.getYearOfEra();
        org.joda.time.DateTime dateTime32 = dateTime22.withYear((int) (byte) 0);
        int int33 = dateTime22.getDayOfWeek();
        org.joda.time.DateTime.Property property34 = dateTime22.millisOfDay();
        long long35 = property15.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime dateTime37 = property15.addToCopy(58);
        org.joda.time.DateTime.Property property38 = dateTime37.dayOfMonth();
        int int39 = dateTime37.getDayOfWeek();
        org.joda.time.DateTime.Property property40 = dateTime37.dayOfMonth();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str23, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertNotNull(property40);
    }

    @Test
    public void test14812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14812");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.dayOfYear();
        org.joda.time.LocalDate localDate9 = property7.addWrapFieldToCopy(33);
        org.joda.time.LocalDate localDate10 = property7.getLocalDate();
        org.joda.time.LocalDate localDate12 = localDate10.withDayOfYear(9);
        org.joda.time.LocalDate localDate14 = localDate10.plusDays(2138);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test14813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14813");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        org.joda.time.DateTime.Property property13 = dateTime9.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = dateTime9.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMillis((int) 'a');
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withSecondOfMinute(0);
        java.lang.String str19 = localDateTime18.toString();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusSeconds(28470);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01T00:00:00.199" + "'", str19, "1970-01-01T00:00:00.199");
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test14814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14814");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        boolean boolean17 = dateTimeZone12.isLocalDateTimeGap(localDateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.weekyear();
        boolean boolean22 = dateTimeZone12.isLocalDateTimeGap(localDateTime20);
        long long24 = dateTimeZone12.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZone(dateTimeZone12);
        long long27 = dateTimeZone12.nextTransition((long) (byte) -1);
        long long29 = dateTimeZone12.nextTransition((long) 1969);
        int int31 = dateTimeZone12.getOffset((long) 56);
        java.util.Locale locale33 = null;
        java.lang.String str34 = dateTimeZone12.getShortName((-61567603200006L), locale33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (-1), chronology37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone41 = dateTimeZone40.toTimeZone();
        org.joda.time.DateTime dateTime42 = localDateTime38.toDateTime(dateTimeZone40);
        java.lang.String str43 = dateTime42.toString();
        org.joda.time.DateTime dateTime45 = dateTime42.plus((long) 100);
        org.joda.time.DateTime.Property property46 = dateTime45.yearOfCentury();
        java.util.Locale locale47 = java.util.Locale.GERMANY;
        java.util.Calendar calendar48 = dateTime45.toCalendar(locale47);
        int int49 = dateTime45.getMinuteOfHour();
        org.joda.time.DateTime dateTime51 = dateTime45.withYearOfEra((int) 'u');
        org.joda.time.DateTime.Property property52 = dateTime45.era();
        org.joda.time.DateTime dateTime53 = property52.roundHalfEvenCopy();
        org.joda.time.DurationField durationField54 = property52.getLeapDurationField();
        java.util.Locale locale56 = new java.util.Locale("hi!");
        java.lang.String str57 = locale56.getScript();
        java.lang.String str58 = locale56.getDisplayLanguage();
        java.lang.String str59 = locale56.getDisplayCountry();
        java.lang.String str60 = property52.getAsText(locale56);
        java.lang.String str61 = dateTimeZone12.getShortName(0L, locale56);
        java.lang.String str62 = locale56.getDisplayScript();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3L + "'", long24 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1969L + "'", long29 == 1969L);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.003" + "'", str34, "+00:00:00.003");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str43, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNull(durationField54);
        org.junit.Assert.assertEquals(locale56.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "AD" + "'", str60, "AD");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00:00.003" + "'", str61, "+00:00:00.003");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
    }

    @Test
    public void test14815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14815");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime1.set(dateTimeFieldType2, (-292275054));
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutableDateTime1.add(readablePeriod5, 4);
        int int8 = mutableDateTime1.getMillisOfDay();
        int int9 = mutableDateTime1.getCenturyOfEra();
        boolean boolean11 = mutableDateTime1.isBefore((long) 42);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundHalfCeiling();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTime dateTime20 = localDateTime16.toDateTime(dateTimeZone18);
        org.joda.time.Chronology chronology21 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.secondOfDay();
        org.joda.time.DurationField durationField23 = chronology21.minutes();
        long long25 = durationField23.getMillis(5);
        int int28 = durationField23.getValue((long) (byte) -1, (long) 3);
        org.joda.time.DurationFieldType durationFieldType29 = durationField23.getType();
        mutableDateTime13.add(durationFieldType29, 23);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2922750 + "'", int9 == 2922750);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 300000L + "'", long25 == 300000L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(durationFieldType29);
    }

    @Test
    public void test14816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14816");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.Interval interval5 = property3.toInterval();
        long long6 = property3.remainder();
        java.util.Locale locale8 = new java.util.Locale("hi!");
        int int9 = property3.getMaximumShortTextLength(locale8);
        org.joda.time.LocalDateTime localDateTime11 = property3.addToCopy((long) 'u');
        org.joda.time.LocalDateTime localDateTime13 = property3.addToCopy((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMillis(10);
        int int17 = localDateTime16.getYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1969 + "'", int17 == 1969);
    }

    @Test
    public void test14817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14817");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.plus(readableDuration8);
        org.joda.time.DateTime dateTime11 = dateTime6.minusWeeks(10);
        boolean boolean13 = dateTime6.isBefore((long) (-1));
        int int14 = dateTime6.getYearOfEra();
        org.joda.time.DateTime dateTime15 = dateTime6.withTimeAtStartOfDay();
        int int16 = dateTime15.getEra();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test14818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14818");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDateTime4.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.secondOfDay();
        org.joda.time.Chronology chronology11 = chronology9.withUTC();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) 575, chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.clockhourOfHalfday();
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = null;
        org.joda.time.format.DateTimeParser dateTimeParser16 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter15, dateTimeParser16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        org.joda.time.DateTime dateTime24 = localDateTime20.toDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter17.withChronology(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.monthOfYear();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.clockhourOfHalfday();
        org.joda.time.DurationField durationField29 = chronology25.days();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 1970, chronology25);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.era();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime31.minuteOfHour();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime31.yearOfEra();
        mutableDateTime31.setWeekyear(35);
        java.util.Locale locale38 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) (-1), chronology41);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.dayOfYear();
        org.joda.time.DurationField durationField44 = property43.getLeapDurationField();
        org.joda.time.Interval interval45 = property43.toInterval();
        long long46 = property43.remainder();
        java.lang.String str47 = property43.toString();
        org.joda.time.LocalDateTime localDateTime49 = property43.setCopy((int) (short) 1);
        java.util.Locale locale51 = new java.util.Locale("hi!");
        java.lang.String str52 = locale51.getScript();
        java.util.Locale locale53 = locale51.stripExtensions();
        int int54 = property43.getMaximumShortTextLength(locale51);
        java.lang.String str55 = locale38.getDisplayLanguage(locale51);
        java.lang.String str56 = mutableDateTime31.toString("4", locale38);
        boolean boolean57 = locale38.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket(0L, chronology11, locale38, (java.lang.Integer) (-1982));
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNull(durationField44);
        org.junit.Assert.assertNotNull(interval45);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 2L + "'", long46 == 2L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Property[dayOfYear]" + "'", str47, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertEquals(locale51.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 3 + "'", int54 == 3);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Chinese" + "'", str55, "Chinese");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "4" + "'", str56, "4");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test14819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14819");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMillisOfSecond((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusHours(0);
        java.lang.String str10 = localDateTime8.toString("1972-10-01");
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = property11.setCopy("cinese (Taiwan)");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"cinese (Taiwan)\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1972-10-01" + "'", str10, "1972-10-01");
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test14820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14820");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        org.joda.time.DateTime dateTime12 = dateTime9.withWeekyear((int) 'x');
        org.joda.time.DateTime dateTime14 = dateTime12.plusWeeks((int) (byte) 0);
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTime();
        java.lang.String str16 = dateTime15.toString();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0120-01-04T00:00:00.102+00:00:00.003" + "'", str16, "0120-01-04T00:00:00.102+00:00:00.003");
    }

    @Test
    public void test14821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14821");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        org.joda.time.DateTime dateTime12 = dateTime9.withWeekyear((int) 'x');
        org.joda.time.DateTime dateTime14 = dateTime12.plusWeeks((int) (byte) 0);
        org.joda.time.DateTime dateTime16 = dateTime12.minusMillis(3);
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = null;
        org.joda.time.format.DateTimeParser dateTimeParser18 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter17, dateTimeParser18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (-1), chronology21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTime dateTime26 = localDateTime22.toDateTime(dateTimeZone24);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter19.withChronology(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.monthOfYear();
        org.joda.time.DateTime dateTime30 = dateTime12.toDateTime(chronology27);
        org.joda.time.DateTime dateTime31 = dateTime12.toDateTimeISO();
        org.joda.time.DateTime dateTime32 = dateTime12.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime33 = dateTime32.toDateTimeISO();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test14822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14822");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.plus(readableDuration8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (-1), chronology11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        org.joda.time.DateTime dateTime16 = localDateTime12.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.clockhourOfDay();
        org.joda.time.DateTime dateTime22 = dateTime9.toDateTime(chronology17);
        org.joda.time.DateTime dateTime24 = dateTime22.withMonthOfYear(2);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime26.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.secondOfMinute();
        mutableDateTime26.setTime((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.ReadableDuration readableDuration32 = null;
        mutableDateTime26.add(readableDuration32, 52);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime();
        mutableDateTime35.add((long) 100);
        org.joda.time.Chronology chronology38 = null;
        mutableDateTime35.setChronology(chronology38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        long long42 = dateTimeZone40.previousTransition((long) 1);
        mutableDateTime35.setZone(dateTimeZone40);
        int int44 = mutableDateTime35.getSecondOfMinute();
        mutableDateTime26.setTime((org.joda.time.ReadableInstant) mutableDateTime35);
        boolean boolean46 = dateTime24.isAfter((org.joda.time.ReadableInstant) mutableDateTime26);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 1L + "'", long42 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 7 + "'", int44 == 7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test14823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14823");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        boolean boolean7 = property5.isLeap();
        org.joda.time.LocalTime localTime9 = property5.addCopy((int) (byte) -1);
        org.joda.time.LocalTime localTime11 = property5.addNoWrapToCopy(0);
        org.joda.time.ReadableInstant readableInstant12 = null;
        long long13 = property5.getDifferenceAsLong(readableInstant12);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-457071L) + "'", long13 == (-457071L));
    }

    @Test
    public void test14824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14824");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.size();
        int int2 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate localDate4 = localDate0.plusYears(1972);
        org.joda.time.LocalDate localDate6 = localDate0.minusYears(93);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test14825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14825");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 5);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(10802022L);
        org.joda.time.LocalTime localTime4 = localTime1.withFields((org.joda.time.ReadablePartial) localTime3);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime();
        mutableDateTime5.add((long) 100);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime10 = property8.add((long) (-1));
        org.joda.time.DateTime dateTime11 = localTime1.toDateTime((org.joda.time.ReadableInstant) mutableDateTime10);
        mutableDateTime10.setMillis((long) 517200);
        mutableDateTime10.addMonths(93);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test14826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14826");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 30);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getOffsetFromLocal((long) (byte) 0);
        mutableDateTime4.setZoneRetainFields(dateTimeZone5);
        long long12 = dateTimeZone5.convertLocalToUTC((long) 116, true, (long) 38);
        long long16 = dateTimeZone5.convertLocalToUTC(315705600365L, false, (long) (short) 1);
        org.joda.time.DateTime dateTime17 = dateTime2.withZone(dateTimeZone5);
        java.lang.String str19 = dateTimeZone5.getShortName(1969L);
        long long21 = dateTimeZone5.previousTransition((-6L));
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(604799999L, dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        mutableDateTime22.add(readablePeriod23, 5);
        int int26 = mutableDateTime22.getEra();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (-1), chronology28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone32 = dateTimeZone31.toTimeZone();
        org.joda.time.DateTime dateTime33 = localDateTime29.toDateTime(dateTimeZone31);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.DateTime dateTime36 = dateTime33.plus((long) 100);
        org.joda.time.DateTime.Property property37 = dateTime36.yearOfCentury();
        java.util.Locale locale38 = java.util.Locale.GERMANY;
        java.util.Calendar calendar39 = dateTime36.toCalendar(locale38);
        int int40 = dateTime36.getMinuteOfHour();
        org.joda.time.DateTime dateTime42 = dateTime36.withYearOfEra((int) 'u');
        org.joda.time.DateTime dateTime44 = dateTime42.withMillis((-1L));
        int int45 = dateTime42.getMillisOfSecond();
        org.joda.time.DateTime dateTime47 = dateTime42.plusWeeks(2922750);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) (-1), chronology49);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone53 = dateTimeZone52.toTimeZone();
        org.joda.time.DateTime dateTime54 = localDateTime50.toDateTime(dateTimeZone52);
        java.lang.String str55 = dateTime54.toString();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.DateTime dateTime57 = dateTime54.plus(readableDuration56);
        org.joda.time.DateTime dateTime59 = dateTime54.minusWeeks(10);
        org.joda.time.DateTime.Property property60 = dateTime54.hourOfDay();
        org.joda.time.DateTime dateTime61 = property60.roundFloorCopy();
        boolean boolean62 = dateTime47.isEqual((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTime dateTime64 = dateTime61.withSecondOfMinute(47);
        org.joda.time.DateTime.Property property65 = dateTime61.dayOfYear();
        org.joda.time.DateTime dateTime67 = dateTime61.minusHours(1999);
        mutableDateTime22.setMillis((org.joda.time.ReadableInstant) dateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 113L + "'", long12 == 113L);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 315705600362L + "'", long16 == 315705600362L);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.003" + "'", str19, "+00:00:00.003");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-6L) + "'", long21 == (-6L));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str34, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar39);
// flaky:         org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 102 + "'", int45 == 102);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str55, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime67);
    }

    @Test
    public void test14827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14827");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.plus(readableDuration8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (-1), chronology11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        org.joda.time.DateTime dateTime16 = localDateTime12.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.clockhourOfDay();
        org.joda.time.DateTime dateTime22 = dateTime9.toDateTime(chronology17);
        org.joda.time.DateTimeField dateTimeField23 = chronology17.yearOfEra();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.era();
        int int25 = dateTimeField24.getMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone27 = dateTimeZone26.toTimeZone();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (-1), chronology29);
        boolean boolean31 = dateTimeZone26.isLocalDateTimeGap(localDateTime30);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.plus(readablePeriod32);
        int int34 = localDateTime30.getYearOfEra();
        int int35 = localDateTime30.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime30.minusMinutes(31);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.yearOfCentury();
        int int39 = localDateTime37.getDayOfMonth();
        java.util.Locale locale40 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet41 = locale40.getExtensionKeys();
        java.lang.String str43 = locale40.getExtension('a');
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (-1), chronology45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusSeconds((int) (byte) 100);
        int int49 = localDateTime48.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property50 = localDateTime48.era();
        java.lang.String str51 = property50.getAsText();
        org.joda.time.LocalDateTime localDateTime52 = property50.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.monthOfYear();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withMillisOfSecond(3);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.weekyear();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) (-1), chronology58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.weekyear();
        org.joda.time.LocalDateTime.Property property61 = localDateTime59.dayOfMonth();
        org.joda.time.LocalDateTime.Property property62 = localDateTime59.millisOfDay();
        org.joda.time.DateTime dateTime63 = localDateTime59.toDateTime();
        boolean boolean64 = localDateTime55.isAfter((org.joda.time.ReadablePartial) localDateTime59);
        org.joda.time.LocalDateTime.Property property65 = localDateTime59.dayOfYear();
        org.joda.time.DateTimeField dateTimeField66 = property65.getField();
        java.util.Locale locale68 = java.util.Locale.getDefault();
        org.joda.time.Chronology chronology70 = null;
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime((long) (-1), chronology70);
        org.joda.time.LocalDateTime.Property property72 = localDateTime71.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone74 = dateTimeZone73.toTimeZone();
        org.joda.time.DateTime dateTime75 = localDateTime71.toDateTime(dateTimeZone73);
        org.joda.time.Chronology chronology76 = dateTime75.getChronology();
        org.joda.time.DurationField durationField77 = chronology76.hours();
        org.joda.time.DateTimeField dateTimeField78 = chronology76.secondOfMinute();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime((long) (-1), chronology80);
        org.joda.time.LocalDateTime.Property property82 = localDateTime81.weekyear();
        org.joda.time.LocalDateTime localDateTime84 = localDateTime81.minusHours((-1));
        java.util.Locale locale85 = java.util.Locale.JAPANESE;
        java.lang.String str86 = dateTimeField78.getAsText((org.joda.time.ReadablePartial) localDateTime81, locale85);
        java.lang.String str87 = locale68.getDisplayScript(locale85);
        java.lang.String str88 = dateTimeField66.getAsShortText(99792000000L, locale68);
        java.lang.String str89 = locale40.getDisplayCountry(locale68);
        java.lang.String str90 = dateTimeField24.getAsShortText((org.joda.time.ReadablePartial) localDateTime37, locale40);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 19 + "'", int35 == 19);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 31 + "'", int39 == 31);
        org.junit.Assert.assertNotNull(locale40);
// flaky:         org.junit.Assert.assertEquals(locale40.toString(), "\u4e00\u6708");
        org.junit.Assert.assertNotNull(charSet41);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "AD" + "'", str51, "AD");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(locale68);
// flaky:         org.junit.Assert.assertEquals(locale68.toString(), "\u4e00\u6708");
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(timeZone74);
// flaky:         org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "0" + "'", str86, "0");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "60" + "'", str88, "60");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "\u4e00\u6708" + "'", str89, "\u4e00\u6708");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "AD" + "'", str90, "AD");
    }

    @Test
    public void test14828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14828");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds((int) (byte) 100);
        int int5 = localDateTime4.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.era();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYear(30);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusMonths(7);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTime dateTime20 = localDateTime16.toDateTime(dateTimeZone18);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.DateTime dateTime23 = dateTime20.plus((long) 100);
        org.joda.time.DateTime.Property property24 = dateTime23.yearOfCentury();
        org.joda.time.DateTime dateTime26 = dateTime23.withWeekyear((int) 'x');
        org.joda.time.DateTime dateTime28 = dateTime23.minusMonths((int) (byte) -1);
        org.joda.time.DateTime dateTime30 = dateTime23.minusDays((int) (byte) -1);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (-1), chronology32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone36 = dateTimeZone35.toTimeZone();
        org.joda.time.DateTime dateTime37 = localDateTime33.toDateTime(dateTimeZone35);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.DateTime dateTime40 = dateTime37.plus((long) 100);
        org.joda.time.DateTime.Property property41 = dateTime40.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.DateTime dateTime43 = dateTime40.plus(readableDuration42);
        int int44 = dateTime43.getDayOfMonth();
        java.util.Locale locale46 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleAttributes();
        java.util.Locale locale48 = java.util.Locale.GERMANY;
        java.lang.String str49 = locale46.getDisplayVariant(locale48);
        java.lang.String str50 = dateTime43.toString("365", locale48);
        org.joda.time.DateTime dateTime52 = dateTime43.plusMonths(1969);
        org.joda.time.DateTime dateTime53 = dateTime43.withLaterOffsetAtOverlap();
        java.lang.String str54 = dateTime53.toString();
        org.joda.time.DateTime.Property property55 = dateTime53.era();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.DateTime dateTime57 = dateTime53.minus(readablePeriod56);
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        org.joda.time.DateTime dateTime59 = dateTime53.minus(readablePeriod58);
        org.joda.time.DateTime dateTime61 = dateTime59.minusYears(21);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) 'x', dateTimeZone64);
        java.lang.String str67 = dateTimeZone64.getShortName((long) 2);
        long long71 = dateTimeZone64.convertLocalToUTC((long) 69, true, 0L);
        long long73 = dateTimeZone64.previousTransition((long) (byte) 1);
        org.joda.time.DateTime dateTime74 = dateTime61.withZoneRetainFields(dateTimeZone64);
        org.joda.time.MutableDateTime mutableDateTime75 = new org.joda.time.MutableDateTime(dateTimeZone64);
        org.joda.time.DateTime dateTime76 = dateTime30.withZone(dateTimeZone64);
        org.joda.time.DateTime dateTime77 = localDateTime13.toDateTime(dateTimeZone64);
        long long81 = dateTimeZone64.convertLocalToUTC((long) 86300002, false, (long) (-63639359));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str21, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str38, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "365" + "'", str50, "365");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1970-01-01T00:00:00.102+00:00:00.003" + "'", str54, "1970-01-01T00:00:00.102+00:00:00.003");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00:00.003" + "'", str67, "+00:00:00.003");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 66L + "'", long71 == 66L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 1L + "'", long73 == 1L);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 86299999L + "'", long81 == 86299999L);
    }

    @Test
    public void test14829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14829");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.Chronology chronology9 = chronology7.withUTC();
        org.joda.time.DurationField durationField10 = chronology9.months();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.centuryOfEra();
        org.joda.time.DurationField durationField12 = chronology9.weeks();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.yearOfEra();
        org.joda.time.DurationField durationField14 = chronology9.minutes();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test14830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14830");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime1.set(dateTimeFieldType2, (-292275054));
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.yearOfEra();
        mutableDateTime1.setYear((int) '#');
        java.lang.String str9 = mutableDateTime1.toString("24");
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        mutableDateTime1.add(readablePeriod10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder12.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap16 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder12.appendTimeZoneShortName(strMap16);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder17.appendYear((int) (short) 1, 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder20.appendMinuteOfHour(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder22.appendFixedSignedDecimal(dateTimeFieldType23, 31);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = dateTimeFormatterBuilder25.appendWeekOfWeekyear(40);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder27.appendFraction(dateTimeFieldType28, (int) (byte) 10, (-292275054));
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime1.property(dateTimeFieldType28);
        java.lang.String str33 = property32.toString();
        org.joda.time.DateTimeField dateTimeField34 = property32.getField();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "24" + "'", str9, "24");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Property[weekyearOfCentury]" + "'", str33, "Property[weekyearOfCentury]");
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test14831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14831");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(54775943, (-24118058), 54711, (-9395), 30849, (-292275054), 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -9395 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14832");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (-1), chronology2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTime dateTime7 = localDateTime3.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.secondOfDay();
        org.joda.time.DurationField durationField10 = chronology8.months();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 'u', chronology8);
        org.joda.time.DateTimeField dateTimeField12 = chronology8.clockhourOfHalfday();
        java.util.Locale locale17 = new java.util.Locale("Englisch (Vereinigte Staaten von Amerika)", "2022-02-21T15:08:34.328+00:00:00.003", "-292275054-06-01T00:00:00.002+00:00:00.003");
        java.lang.String str18 = dateTimeField12.getAsText(54729, locale17);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertEquals(locale17.toString(), "englisch (vereinigte staaten von amerika)_2022-02-21T15:08:34.328+00:00:00.003_-292275054-06-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "54729" + "'", str18, "54729");
    }

    @Test
    public void test14833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14833");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder5.appendYear((int) (short) 1, 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder8.appendMinuteOfHour(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder10.appendFixedSignedDecimal(dateTimeFieldType11, 31);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder10.appendClockhourOfDay(99);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder10.appendEraText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder10.appendFractionOfDay(56, 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder19.appendMonthOfYear(999);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder19.appendHalfdayOfDayText();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatterBuilder22.toFormatter();
        org.joda.time.Chronology chronology24 = dateTimeFormatter23.getChronolgy();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(chronology24);
    }

    @Test
    public void test14834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14834");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusMinutes(292278993);
        org.joda.time.LocalDateTime.Property property8 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime.Property property9 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.plusMinutes(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.minusMonths((int) 'u');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField15 = localDateTime2.getField((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 32");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test14835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14835");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        java.lang.Object obj2 = mutableDateTime1.clone();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.weekyear();
        mutableDateTime1.setMillis((long) 292278993);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.secondOfMinute();
        java.util.Date date7 = mutableDateTime1.toDate();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 'x');
        int int11 = localDateTime10.getHourOfDay();
        org.joda.time.Chronology chronology12 = localDateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.hourOfDay();
        java.util.Locale locale15 = java.util.Locale.ROOT;
        java.lang.String str16 = dateTimeField13.getAsText(94694399997L, locale15);
        java.lang.String str17 = mutableDateTime1.toString("30900001", locale15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        org.joda.time.DateTime dateTime24 = localDateTime20.toDateTime(dateTimeZone22);
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.DateTime dateTime27 = dateTime24.plus((long) 100);
        org.joda.time.DateTime.Property property28 = dateTime27.yearOfCentury();
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.util.Calendar calendar30 = dateTime27.toCalendar(locale29);
        int int31 = dateTime27.getMinuteOfHour();
        org.joda.time.DateTime dateTime33 = dateTime27.withYearOfEra((int) 'u');
        org.joda.time.DateTime dateTime35 = dateTime33.plus((long) (-292275054));
        org.joda.time.DateTime dateTime37 = dateTime33.minusSeconds(1969);
        org.joda.time.DateTime dateTime38 = dateTime37.toDateTime();
        org.joda.time.DateTime.Property property39 = dateTime37.minuteOfDay();
        org.joda.time.DateTime dateTime40 = property39.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime41 = property39.roundFloorCopy();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) (-1), chronology46);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone50 = dateTimeZone49.toTimeZone();
        org.joda.time.DateTime dateTime51 = localDateTime47.toDateTime(dateTimeZone49);
        java.lang.String str52 = dateTime51.toString();
        org.joda.time.DateTime dateTime54 = dateTime51.plus((long) 100);
        org.joda.time.DateTime.Property property55 = dateTime54.yearOfCentury();
        java.util.Locale locale56 = java.util.Locale.GERMANY;
        java.util.Calendar calendar57 = dateTime54.toCalendar(locale56);
        java.util.Locale locale58 = java.util.Locale.TAIWAN;
        java.lang.String str59 = locale58.toLanguageTag();
        java.lang.String str60 = locale56.getDisplayCountry(locale58);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket62 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology44, locale56, (java.lang.Integer) 38);
        org.joda.time.format.DateTimePrinter dateTimePrinter63 = null;
        org.joda.time.format.DateTimeParser dateTimeParser64 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter63, dateTimeParser64);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) (-1), chronology67);
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone71 = dateTimeZone70.toTimeZone();
        org.joda.time.DateTime dateTime72 = localDateTime68.toDateTime(dateTimeZone70);
        org.joda.time.Chronology chronology73 = dateTime72.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter65.withChronology(chronology73);
        org.joda.time.DateTimeField dateTimeField75 = chronology73.monthOfYear();
        org.joda.time.DateTimeField dateTimeField76 = chronology73.weekyearOfCentury();
        dateTimeParserBucket62.saveField(dateTimeField76, 19);
        java.util.Locale locale79 = dateTimeParserBucket62.getLocale();
        java.util.Locale locale80 = locale79.stripExtensions();
        org.joda.time.DateTime dateTime81 = property39.setCopy("37", locale80);
        java.lang.String str82 = locale15.getDisplayScript(locale80);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(obj2);
// flaky:         org.junit.Assert.assertEquals(obj2.toString(), "2022-02-21T15:13:08.074+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "2022-02-21T15:13:08.074+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "2022-02-21T15:13:08.074+00:00:00.003");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Sun Jan 04 09:11:18 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "23" + "'", str16, "23");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "30900001" + "'", str17, "30900001");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str25, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str52, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar57);
// flaky:         org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "zh-TW" + "'", str59, "zh-TW");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u5fb7\u570b" + "'", str60, "\u5fb7\u570b");
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(timeZone71);
// flaky:         org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "de_DE");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
    }

    @Test
    public void test14836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14836");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.dayOfYear();
        org.joda.time.LocalDate localDate9 = property7.addWrapFieldToCopy(33);
        org.joda.time.LocalDate localDate10 = property7.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.LocalDate.Property property13 = localDate10.monthOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 3, chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType17.getDurationType();
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType17.getRangeDurationType();
        boolean boolean20 = localDate16.isSupported(durationFieldType19);
        org.joda.time.LocalDate.Property property21 = localDate16.centuryOfEra();
        org.joda.time.LocalDate localDate22 = property21.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate24 = property21.addToCopy((int) ' ');
        int int25 = localDate10.compareTo((org.joda.time.ReadablePartial) localDate24);
        int int26 = localDate24.size();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
    }

    @Test
    public void test14837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14837");
        java.util.Locale locale2 = new java.util.Locale("millisOfSecond", "2022-02-21T15:10:18.160+00:00:00.003");
        org.junit.Assert.assertEquals(locale2.toString(), "millisofsecond_2022-02-21T15:10:18.160+00:00:00.003");
    }

    @Test
    public void test14838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14838");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (short) 10, dateTimeZone1);
        java.util.TimeZone timeZone3 = dateTimeZone1.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime5.set(dateTimeFieldType6, (-292275054));
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        mutableDateTime5.add(readablePeriod9, 4);
        int int12 = mutableDateTime5.getMillisOfDay();
        int int13 = mutableDateTime5.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime();
        mutableDateTime14.add((long) 100);
        org.joda.time.Chronology chronology17 = null;
        mutableDateTime14.setChronology(chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        long long21 = dateTimeZone19.previousTransition((long) 1);
        mutableDateTime14.setZone(dateTimeZone19);
        java.lang.String str23 = dateTimeZone19.toString();
        mutableDateTime5.setZoneRetainFields(dateTimeZone19);
        java.util.TimeZone timeZone25 = dateTimeZone19.toTimeZone();
        java.lang.String str26 = timeZone25.getID();
        boolean boolean27 = timeZone3.hasSameRules(timeZone25);
        java.lang.String str28 = timeZone3.getID();
        java.lang.String str29 = timeZone3.getID();
        timeZone3.setID("2022-02-21T15:06:21.282+00:00:00.003");
        timeZone3.setRawOffset(99);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2922750 + "'", int13 == 2922750);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.003" + "'", str23, "+00:00:00.003");
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.003" + "'", str26, "+00:00:00.003");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.003" + "'", str28, "+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.003" + "'", str29, "+00:00:00.003");
    }

    @Test
    public void test14839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14839");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds(0);
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (-1), chronology16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTime dateTime21 = localDateTime17.toDateTime(dateTimeZone19);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter14.withChronology(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.monthOfYear();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.clockhourOfHalfday();
        org.joda.time.DurationField durationField26 = chronology22.days();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((java.lang.Object) dateTime9, chronology22);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) (-1), chronology31);
        boolean boolean33 = dateTimeZone28.isLocalDateTimeGap(localDateTime32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (-1), chronology35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.weekyear();
        boolean boolean38 = dateTimeZone28.isLocalDateTimeGap(localDateTime36);
        boolean boolean40 = dateTimeZone28.isStandardOffset(86399999L);
        long long44 = dateTimeZone28.convertLocalToUTC((long) 35, true, 2022L);
        org.joda.time.DateTime dateTime45 = dateTime27.toDateTime(dateTimeZone28);
        org.joda.time.DateTime dateTime47 = dateTime27.minusWeeks(2023);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime49 = dateTime47.withMonthOfYear(54);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 32L + "'", long44 == 32L);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test14840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14840");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        boolean boolean5 = dateTimeZone0.isLocalDateTimeGap(localDateTime4);
        java.lang.String str6 = localDateTime4.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withDayOfWeek(908);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 908 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.002" + "'", str6, "1970-01-01T00:00:00.002");
    }

    @Test
    public void test14841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14841");
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = null;
        org.joda.time.format.DateTimeParser dateTimeParser3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter2, dateTimeParser3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (-1), chronology6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTime dateTime11 = localDateTime7.toDateTime(dateTimeZone9);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter4.withChronology(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.clockhourOfHalfday();
        org.joda.time.DurationField durationField16 = chronology12.days();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 1970, chronology12);
        org.joda.time.DateTimeField dateTimeField18 = chronology12.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((java.lang.Object) 3120003L, chronology12);
        org.joda.time.DateTimeField dateTimeField20 = chronology12.millisOfDay();
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test14842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14842");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        org.joda.time.LocalTime localTime5 = localTime1.minusSeconds((int) (byte) 100);
        org.joda.time.Chronology chronology6 = localTime1.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.millis();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.yearOfEra();
        org.joda.time.DurationField durationField9 = chronology6.months();
        org.joda.time.DurationField durationField10 = chronology6.days();
        org.joda.time.DurationFieldType durationFieldType11 = durationField10.getType();
        java.lang.String str12 = durationFieldType11.getName();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "days" + "'", str12, "days");
    }

    @Test
    public void test14843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14843");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = null;
        org.joda.time.format.DateTimeParser dateTimeParser3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter2, dateTimeParser3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (-1), chronology6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTime dateTime11 = localDateTime7.toDateTime(dateTimeZone9);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter4.withChronology(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.monthOfYear();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField16 = chronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField17 = chronology12.centuries();
        org.joda.time.DateTime dateTime18 = dateTime1.toDateTime(chronology12);
        org.joda.time.Chronology chronology19 = dateTime1.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.millis();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.millisOfDay();
        long long25 = dateTimeField22.addWrapField((long) 86300002, 3599);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 86303601L + "'", long25 == 86303601L);
    }

    @Test
    public void test14844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14844");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (-1), chronology2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTime dateTime7 = localDateTime3.toDateTime(dateTimeZone5);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.DateTime dateTime10 = dateTime7.plus((long) 100);
        org.joda.time.DateTime.Property property11 = dateTime7.millisOfSecond();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 1, chronology13);
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded((long) (byte) 0, 292278993);
        int int18 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (-1), chronology21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTime dateTime26 = localDateTime22.toDateTime(dateTimeZone24);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.secondOfDay();
        org.joda.time.DurationField durationField29 = chronology27.minutes();
        org.joda.time.DurationField durationField30 = chronology27.minutes();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) 292278993, chronology27);
        org.joda.time.DateTime dateTime32 = dateTime7.toDateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField33 = chronology27.minuteOfDay();
        java.util.Locale locale34 = java.util.Locale.PRC;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 69, chronology27, locale34, (java.lang.Integer) 33, (int) ' ');
        dateTimeParserBucket37.setOffset((java.lang.Integer) 0);
        java.lang.Object obj40 = dateTimeParserBucket37.saveState();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str8, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(obj40);
    }

    @Test
    public void test14845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14845");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime6.millisOfSecond();
        org.joda.time.DateTime dateTime12 = dateTime6.plusHours(23);
        org.joda.time.DateTime dateTime14 = dateTime6.withDayOfYear(265);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime16 = dateTime14.withSecondOfMinute(105);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 105 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test14846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14846");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.plus(readableDuration11);
        int int13 = dateTime12.getDayOfMonth();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.lang.String str18 = locale15.getDisplayVariant(locale17);
        java.lang.String str19 = dateTime12.toString("365", locale17);
        org.joda.time.DateTime dateTime21 = dateTime12.plusMonths(1969);
        org.joda.time.DateTime dateTime23 = dateTime21.withMillisOfSecond((int) (short) 10);
        org.joda.time.DateTime dateTime25 = dateTime23.minus(315532847000L);
        org.joda.time.DateTime.Property property26 = dateTime25.secondOfMinute();
        int int27 = dateTime25.getHourOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "365" + "'", str19, "365");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 23 + "'", int27 == 23);
    }

    @Test
    public void test14847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14847");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        java.lang.Object obj2 = mutableDateTime1.clone();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.weekyear();
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime1.add(readableDuration4, 3123);
        mutableDateTime1.addWeekyears(5);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(obj2);
// flaky:         org.junit.Assert.assertEquals(obj2.toString(), "2022-02-21T15:13:08.339+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "2022-02-21T15:13:08.339+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "2022-02-21T15:13:08.339+00:00:00.003");
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test14848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14848");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        java.lang.Appendable appendable4 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable4, (long) 54453531);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeParser3);
    }

    @Test
    public void test14849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14849");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 30);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        int int6 = dateTimeZone4.getOffsetFromLocal((long) (byte) 0);
        mutableDateTime3.setZoneRetainFields(dateTimeZone4);
        long long11 = dateTimeZone4.convertLocalToUTC((long) 116, true, (long) 38);
        long long15 = dateTimeZone4.convertLocalToUTC(315705600365L, false, (long) (short) 1);
        org.joda.time.DateTime dateTime16 = dateTime1.withZone(dateTimeZone4);
        java.lang.String str18 = dateTimeZone4.getShortName(1969L);
        long long20 = dateTimeZone4.previousTransition((-6L));
        java.util.TimeZone timeZone21 = dateTimeZone4.toTimeZone();
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.now(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 113L + "'", long11 == 113L);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 315705600362L + "'", long15 == 315705600362L);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.003" + "'", str18, "+00:00:00.003");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-6L) + "'", long20 == (-6L));
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test14850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14850");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.plus(readableDuration8);
        org.joda.time.DateTime dateTime11 = dateTime9.withYear((int) 'a');
        org.joda.time.DateTime dateTime14 = dateTime11.withDurationAdded((long) 12, (int) '#');
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.withPeriodAdded(readablePeriod15, 30);
        org.joda.time.DateTime.Property property18 = dateTime17.millisOfDay();
        org.joda.time.DateTime dateTime20 = property18.addWrapFieldToCopy(22);
        org.joda.time.Instant instant21 = dateTime20.toInstant();
        int int22 = dateTime20.getMillisOfSecond();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(instant21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 444 + "'", int22 == 444);
    }

    @Test
    public void test14851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14851");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property2 = dateTime1.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.DateTime dateTime5 = dateTime1.withPeriodAdded(readablePeriod3, 58);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        org.joda.time.DateTime dateTime8 = dateTime5.minusYears(20);
        org.joda.time.DateTime dateTime10 = dateTime5.withMillisOfDay(2081);
        int int11 = dateTime5.getCenturyOfEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 19 + "'", int11 == 19);
    }

    @Test
    public void test14852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14852");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime6.millisOfSecond();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 1, chronology12);
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded((long) (byte) 0, 292278993);
        int int17 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (-1), chronology20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        org.joda.time.DateTime dateTime25 = localDateTime21.toDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfDay();
        org.joda.time.DurationField durationField28 = chronology26.minutes();
        org.joda.time.DurationField durationField29 = chronology26.minutes();
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) 292278993, chronology26);
        org.joda.time.DateTime dateTime31 = dateTime6.toDateTime(chronology26);
        org.joda.time.DateTime dateTime33 = dateTime6.plusMonths(33);
        org.joda.time.DateTime dateTime34 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime35 = dateTime33.toDateTimeISO();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test14853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14853");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(54778333, 54686);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 54686");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14854");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusYears(0);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minus(readablePeriod7);
        int int9 = localDateTime6.size();
        int int10 = localDateTime6.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.plusYears((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime6.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 19 + "'", int10 == 19);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test14855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14855");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.plus(readableDuration8);
        org.joda.time.DateTime dateTime11 = dateTime6.minusWeeks(10);
        org.joda.time.DateTime.Property property12 = dateTime6.hourOfDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) (-1), chronology14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        org.joda.time.DateTime dateTime19 = localDateTime15.toDateTime(dateTimeZone17);
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime19.plus(readableDuration21);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime24.set(dateTimeFieldType25, (-292275054));
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime24.yearOfEra();
        mutableDateTime24.setYear((int) '#');
        mutableDateTime24.setYear(292278993);
        int int33 = dateTime22.compareTo((org.joda.time.ReadableInstant) mutableDateTime24);
        int int34 = property12.compareTo((org.joda.time.ReadableInstant) mutableDateTime24);
        mutableDateTime24.add(292278993L);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime24.minuteOfDay();
        long long38 = mutableDateTime24.getMillis();
        int int39 = mutableDateTime24.getWeekyear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str20, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(property37);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 9223371985885878992L + "'", long38 == 9223371985885878992L);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 292278993 + "'", int39 == 292278993);
    }

    @Test
    public void test14856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14856");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.Interval interval5 = property3.toInterval();
        long long6 = property3.remainder();
        java.util.Locale locale8 = new java.util.Locale("hi!");
        int int9 = property3.getMaximumShortTextLength(locale8);
        org.joda.time.LocalDateTime localDateTime11 = property3.addToCopy((long) 'u');
        org.joda.time.LocalDateTime localDateTime13 = property3.addToCopy((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime14 = property3.roundHalfEvenCopy();
        org.joda.time.Chronology chronology15 = localDateTime14.getChronology();
        java.lang.String str16 = chronology15.toString();
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField18 = chronology15.weekOfWeekyear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ISOChronology[UTC]" + "'", str16, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test14857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14857");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (-1), chronology2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTime dateTime7 = localDateTime3.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.secondOfDay();
        org.joda.time.DurationField durationField10 = chronology8.months();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 'u', chronology8);
        java.util.Date date12 = dateTime11.toDate();
        org.joda.time.DateTime dateTime14 = dateTime11.withYear(1439);
        int int15 = dateTime14.getYearOfEra();
        org.joda.time.DateTime dateTime17 = dateTime14.plusMonths(8678);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = dateTime14.withDayOfWeek(54397508);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54397508 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Thu Jan 01 00:00:00 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1439 + "'", int15 == 1439);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test14858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14858");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (-1), chronology8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTime dateTime13 = localDateTime9.toDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfDay();
        org.joda.time.DurationField durationField16 = chronology14.minutes();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.hourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology14.era();
        org.joda.time.DateTimeField dateTimeField20 = chronology14.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(1968, 54554, (-21184), (-36161), 11520, (-2526), 54682, chronology14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -36161 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test14859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14859");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(1, 0);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (-1), chronology6);
        boolean boolean8 = dateTimeZone3.isLocalDateTimeGap(localDateTime7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (-1), chronology10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.weekyear();
        boolean boolean13 = dateTimeZone3.isLocalDateTimeGap(localDateTime11);
        long long15 = dateTimeZone3.convertUTCToLocal(0L);
        java.lang.String str17 = dateTimeZone3.getNameKey((long) 575);
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone3);
        boolean boolean19 = dateTimeZone2.equals((java.lang.Object) dateTimeZone3);
        boolean boolean20 = dateTimeZone2.isFixed();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        long long22 = mutableDateTime21.getMillis();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
// flaky:         org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(mutableDateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1645456388569L + "'", long22 == 1645456388569L);
    }

    @Test
    public void test14860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14860");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (-1), chronology11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        org.joda.time.DateTime dateTime16 = localDateTime12.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology17.clockhourOfDay();
        org.joda.time.DateTime dateTime22 = dateTime6.withChronology(chronology17);
        org.joda.time.DurationField durationField23 = chronology17.halfdays();
        long long25 = durationField23.getMillis((-203698075L));
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-8799756840000000L) + "'", long25 == (-8799756840000000L));
    }

    @Test
    public void test14861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14861");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.Interval interval5 = property3.toInterval();
        long long6 = property3.remainder();
        java.lang.String str7 = property3.toString();
        org.joda.time.LocalDateTime localDateTime9 = property3.setCopy((int) (short) 1);
        int int10 = localDateTime9.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withCenturyOfEra(0);
        int int13 = localDateTime9.getWeekyear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[dayOfYear]" + "'", str7, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1970 + "'", int13 == 1970);
    }

    @Test
    public void test14862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14862");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(10L);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.weekyear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now(dateTimeZone7);
        int int9 = property6.compareTo((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(dateTimeZone10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime11.add(readableDuration12, 100);
        boolean boolean15 = mutableDateTime8.isBefore((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime11.add(readableDuration16, (int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 'x', dateTimeZone21);
        mutableDateTime11.setZone(dateTimeZone21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.minuteOfHour();
        mutableDateTime11.set(dateTimeFieldType24, (int) '4');
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (-1), chronology28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone32 = dateTimeZone31.toTimeZone();
        org.joda.time.DateTime dateTime33 = localDateTime29.toDateTime(dateTimeZone31);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.DateTime dateTime36 = dateTime33.plus((long) 100);
        org.joda.time.DateTime dateTime38 = dateTime36.minusSeconds(0);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = dateTime38.withChronology(chronology39);
        mutableDateTime11.setMillis((org.joda.time.ReadableInstant) dateTime40);
        mutableDateTime11.addHours((int) (byte) 10);
        boolean boolean44 = dateTime1.isBefore((org.joda.time.ReadableInstant) mutableDateTime11);
        mutableDateTime11.addMonths(292278993);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime11.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime49 = property47.addWrapField(54383);
        org.joda.time.DateTimeField dateTimeField50 = property47.getField();
        org.joda.time.MutableDateTime mutableDateTime52 = property47.addWrapField((-2475));
        org.joda.time.MutableDateTime mutableDateTime53 = property47.roundHalfEven();
        mutableDateTime53.setSecondOfDay(52);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str34, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
    }

    @Test
    public void test14863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14863");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        int int13 = dateTime9.getMinuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime9.withYearOfEra((int) 'u');
        org.joda.time.DateTime dateTime17 = dateTime15.plus((long) (-292275054));
        org.joda.time.DateTime.Property property18 = dateTime15.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTimeField dateTimeField20 = mutableDateTime19.getRoundingField();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType21.getDurationType();
        mutableDateTime19.add(durationFieldType22, 100);
        org.joda.time.format.DateTimePrinter dateTimePrinter25 = null;
        org.joda.time.format.DateTimeParser dateTimeParser26 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter25, dateTimeParser26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (-1), chronology29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        org.joda.time.DateTime dateTime34 = localDateTime30.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = dateTime34.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter27.withChronology(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = chronology35.monthOfYear();
        org.joda.time.DurationField durationField38 = durationFieldType22.getField(chronology35);
        org.joda.time.DateTime dateTime39 = dateTime15.toDateTime(chronology35);
        org.joda.time.DateTime dateTime41 = dateTime15.minusMillis(20);
        int int42 = dateTime41.getMillisOfSecond();
        org.joda.time.DateTime dateTime44 = dateTime41.minusSeconds(3699000);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 82 + "'", int42 == 82);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test14864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14864");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        int int13 = dateTime9.getSecondOfDay();
        org.joda.time.DateTime dateTime15 = dateTime9.withWeekyear(2000);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test14865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14865");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property2 = localDate0.property(dateTimeFieldType1);
        java.util.Locale locale6 = new java.util.Locale("Property[dayOfYear]", "");
        org.joda.time.LocalDate localDate7 = property2.setCopy("365", locale6);
        org.joda.time.LocalDate localDate9 = property2.addToCopy((int) (short) 10);
        org.joda.time.LocalDate localDate11 = property2.addToCopy(19);
        org.joda.time.LocalDate localDate12 = property2.getLocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.year();
        org.joda.time.LocalDate localDate14 = property13.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate15 = property13.roundHalfCeilingCopy();
        org.joda.time.LocalDate.Property property16 = localDate15.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertEquals(locale6.toString(), "property[dayofyear]");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test14866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14866");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime1.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime1.add(readableDuration4, (int) (short) 100);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.addWrapField((int) (byte) -1);
        java.lang.String str10 = mutableDateTime9.toString();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        long long17 = dateTimeZone12.convertLocalToUTC(10L, false, (long) 3);
        java.util.TimeZone timeZone18 = dateTimeZone12.toTimeZone();
        java.util.TimeZone timeZone19 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(66L, dateTimeZone12);
        boolean boolean21 = mutableDateTime9.isBefore((org.joda.time.ReadableInstant) dateTime20);
        int int22 = mutableDateTime9.getWeekyear();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime9.weekyear();
        mutableDateTime9.setDate((long) (short) 10);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime9.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime28 = property26.add((-101));
        org.joda.time.MutableDateTime mutableDateTime30 = property26.addWrapField(46);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (-1), chronology32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone36 = dateTimeZone35.toTimeZone();
        org.joda.time.DateTime dateTime37 = localDateTime33.toDateTime(dateTimeZone35);
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.DateTime dateTime40 = dateTime37.plus((long) 100);
        org.joda.time.DateTime dateTime42 = dateTime40.minusSeconds(0);
        org.joda.time.DateTime dateTime44 = dateTime42.withHourOfDay(1);
        org.joda.time.DateTime.Property property45 = dateTime44.monthOfYear();
        org.joda.time.DateTime dateTime47 = property45.addToCopy((long) (-292275054));
        org.joda.time.LocalDateTime localDateTime48 = dateTime47.toLocalDateTime();
        org.joda.time.DateTime dateTime50 = dateTime47.minusMonths((-2033));
        mutableDateTime30.setTime((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime30.yearOfEra();
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2090-01-31T00:00:00.002+00:00:00.003" + "'", str10, "2090-01-31T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 7L + "'", long17 == 7L);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2090 + "'", int22 == 2090);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str38, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test14867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14867");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime1.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime1.add(readableDuration4, (int) (short) 100);
        int int7 = mutableDateTime1.getDayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime();
        mutableDateTime8.add((long) 100);
        org.joda.time.Chronology chronology11 = null;
        mutableDateTime8.setChronology(chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        long long15 = dateTimeZone13.previousTransition((long) 1);
        mutableDateTime8.setZone(dateTimeZone13);
        int int17 = mutableDateTime8.getSecondOfMinute();
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime8.add(readableDuration18, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        long long27 = dateTimeZone22.convertLocalToUTC(10L, false, (long) 3);
        java.util.TimeZone timeZone28 = dateTimeZone22.toTimeZone();
        java.util.TimeZone timeZone29 = dateTimeZone22.toTimeZone();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(66L, dateTimeZone22);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale33 = java.util.Locale.TAIWAN;
        java.lang.String str34 = locale33.toLanguageTag();
        java.util.Locale locale35 = java.util.Locale.GERMANY;
        java.lang.String str36 = locale33.getDisplayScript(locale35);
        java.lang.String str37 = locale35.getVariant();
        java.lang.String str38 = dateTimeZone31.getName(0L, locale35);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(dateTimeZone31);
        long long41 = dateTimeZone22.getMillisKeepLocal(dateTimeZone31, 94694400019L);
        mutableDateTime8.setZoneRetainFields(dateTimeZone22);
        mutableDateTime1.setZone(dateTimeZone22);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(dateTimeZone22);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 7L + "'", long27 == 7L);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "zh-TW" + "'", str34, "zh-TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.003" + "'", str38, "+00:00:00.003");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 94694400019L + "'", long41 == 94694400019L);
    }

    @Test
    public void test14868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14868");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property2 = localDate0.property(dateTimeFieldType1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        boolean boolean4 = localDate0.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDate.Property property5 = localDate0.era();
        org.joda.time.LocalDate.Property property6 = localDate0.dayOfMonth();
        org.joda.time.LocalDate localDate8 = localDate0.minusWeeks(2000);
        int int10 = localDate0.getValue((int) (short) 0);
        org.joda.time.LocalDate localDate12 = localDate0.plusDays(1439);
        org.joda.time.LocalDate.Property property13 = localDate0.centuryOfEra();
        long long14 = property13.remainder();
        org.joda.time.LocalDate localDate15 = property13.getLocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.withDayOfYear(266);
        org.joda.time.LocalDate.Property property18 = localDate17.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1510358400000L) + "'", long14 == (-1510358400000L));
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test14869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14869");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime1.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime1.add(readableDuration4, (int) (short) 100);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.addWrapField((int) (byte) -1);
        java.lang.String str10 = mutableDateTime9.toString();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        long long17 = dateTimeZone12.convertLocalToUTC(10L, false, (long) 3);
        java.util.TimeZone timeZone18 = dateTimeZone12.toTimeZone();
        java.util.TimeZone timeZone19 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(66L, dateTimeZone12);
        boolean boolean21 = mutableDateTime9.isBefore((org.joda.time.ReadableInstant) dateTime20);
        int int22 = mutableDateTime9.getWeekyear();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime9.weekyear();
        mutableDateTime9.setDate((long) (short) 10);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime9.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime28 = property26.add((-101));
        org.joda.time.MutableDateTime mutableDateTime30 = property26.set(23);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        mutableDateTime30.add(readablePeriod31);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2090-01-31T00:00:00.002+00:00:00.003" + "'", str10, "2090-01-31T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 7L + "'", long17 == 7L);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2090 + "'", int22 == 2090);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime30);
    }

    @Test
    public void test14870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14870");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 'x', dateTimeZone2);
        boolean boolean5 = dateTimeZone2.isStandardOffset((long) 2);
        java.util.TimeZone timeZone6 = dateTimeZone2.toTimeZone();
        java.util.TimeZone timeZone7 = dateTimeZone2.toTimeZone();
        long long9 = dateTimeZone2.convertUTCToLocal((-1609459200006L));
        long long11 = dateTimeZone2.convertUTCToLocal((-67847500799995L));
        java.lang.String str12 = dateTimeZone2.getID();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 'x', dateTimeZone15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.yearOfEra();
        org.joda.time.LocalDateTime localDateTime18 = property17.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.yearOfCentury();
        boolean boolean21 = dateTimeZone2.isLocalDateTimeGap(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1609459200003L) + "'", long9 == (-1609459200003L));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-67847500799992L) + "'", long11 == (-67847500799992L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.003" + "'", str12, "+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test14871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14871");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        int int13 = dateTime9.getMinuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime9.withYearOfEra((int) 'u');
        org.joda.time.DateTime dateTime17 = dateTime15.plus((long) (-292275054));
        boolean boolean18 = dateTime17.isEqualNow();
        org.joda.time.DateTime dateTime20 = dateTime17.minusWeeks(15);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime22.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration25 = null;
        mutableDateTime22.add(readableDuration25, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType28.getDurationType();
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType28.getRangeDurationType();
        mutableDateTime22.add(durationFieldType30, (int) (short) 1);
        org.joda.time.format.DateTimePrinter dateTimePrinter33 = null;
        org.joda.time.format.DateTimeParser dateTimeParser34 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter33, dateTimeParser34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (-1), chronology37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone41 = dateTimeZone40.toTimeZone();
        org.joda.time.DateTime dateTime42 = localDateTime38.toDateTime(dateTimeZone40);
        org.joda.time.Chronology chronology43 = dateTime42.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter35.withChronology(chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.monthOfYear();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.clockhourOfHalfday();
        org.joda.time.DurationField durationField47 = chronology43.days();
        org.joda.time.DateTimeField dateTimeField48 = chronology43.secondOfDay();
        org.joda.time.Chronology chronology49 = chronology43.withUTC();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.halfdayOfDay();
        org.joda.time.DurationField durationField51 = durationFieldType30.getField(chronology49);
        java.lang.String str52 = chronology49.toString();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime20, chronology49);
        org.joda.time.DateTimeField dateTimeField54 = chronology49.clockhourOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ISOChronology[UTC]" + "'", str52, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField54);
    }

    @Test
    public void test14872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14872");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((-24118058), 85342678, 63979044);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -24118058 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14873");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        boolean boolean7 = property5.isLeap();
        java.util.Locale locale11 = new java.util.Locale("", "1969-12-31T23:59:59.999Z", "1969-12-31T23:59:59.999Z");
        java.lang.String str12 = property5.getAsShortText(locale11);
        org.joda.time.LocalTime localTime13 = property5.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime15 = localTime13.minusSeconds(2000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime17 = localTime15.withSecondOfMinute((-2475));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2475 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals(locale11.toString(), "_1969-12-31T23:59:59.999Z_1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "0" + "'", str12, "0");
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test14874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14874");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime1.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime1.add(readableDuration4, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int8 = mutableDateTime1.get(dateTimeFieldType7);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime16 = localTime14.minusSeconds((int) (short) 10);
        int int17 = localTime14.getMinuteOfHour();
        org.joda.time.LocalTime.Property property18 = localTime14.hourOfDay();
        org.joda.time.LocalTime localTime19 = property18.withMaximumValue();
        boolean boolean20 = property18.isLeap();
        org.joda.time.LocalTime localTime21 = property18.roundFloorCopy();
        org.joda.time.LocalTime.Property property22 = localTime21.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime24.set(dateTimeFieldType25, (-292275054));
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        mutableDateTime24.add(readablePeriod28, 4);
        int int31 = mutableDateTime24.getMillisOfDay();
        long long32 = property22.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime24);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime24);
        mutableDateTime1.addMonths(5);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean37 = mutableDateTime1.isSupported(dateTimeFieldType36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType39 = dateTimeFieldType38.getRangeDurationType();
        boolean boolean40 = mutableDateTime1.isSupported(dateTimeFieldType38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime((java.lang.Object) dateTimeFieldType38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 153722866950720L + "'", long32 == 153722866950720L);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test14875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14875");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setTime(100L);
        int int4 = mutableDateTime1.getDayOfYear();
        int int5 = mutableDateTime1.getMinuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTimeField dateTimeField7 = mutableDateTime6.getRoundingField();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime6.dayOfWeek();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime12 = localTime10.minusSeconds((int) (short) 10);
        int int13 = localTime10.getMinuteOfHour();
        org.joda.time.LocalTime.Property property14 = localTime10.hourOfDay();
        org.joda.time.LocalTime localTime15 = property14.withMaximumValue();
        org.joda.time.DateTime dateTime16 = localTime15.toDateTimeToday();
        long long17 = property8.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateTime.Property property19 = dateTime16.property(dateTimeFieldType18);
        org.joda.time.DateTime dateTime20 = property19.roundFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.DateTime dateTime22 = dateTime20.plus(readablePeriod21);
        boolean boolean23 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime24 = dateTime20.withTimeAtStartOfDay();
        int int25 = dateTime20.getYear();
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(dateTimeField7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
    }

    @Test
    public void test14876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14876");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = null;
        org.joda.time.format.DateTimeParser dateTimeParser5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter4, dateTimeParser5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (-1), chronology8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTime dateTime13 = localDateTime9.toDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter6.withChronology(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.monthOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.weekyearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withChronology(chronology14);
        boolean boolean19 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter2.withOffsetParsed();
        int int22 = dateTimeFormatter21.getDefaultYear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = dateTimeFormatter21.print((long) (-54452003));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2000 + "'", int22 == 2000);
    }

    @Test
    public void test14877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14877");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds((int) (byte) 100);
        int int5 = localDateTime4.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.era();
        java.lang.String str7 = property6.getAsText();
        org.joda.time.LocalDateTime localDateTime8 = property6.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.monthOfYear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withMillisOfSecond(3);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.weekyear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) (-1), chronology14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.weekyear();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.dayOfMonth();
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.millisOfDay();
        org.joda.time.DateTime dateTime19 = localDateTime15.toDateTime();
        boolean boolean20 = localDateTime11.isAfter((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime11.withWeekOfWeekyear(23);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime11.plusMinutes(8678);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (-1), chronology26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        org.joda.time.DateTime dateTime31 = localDateTime27.toDateTime(dateTimeZone29);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.DateTime dateTime34 = dateTime31.plus((long) 100);
        org.joda.time.DateTime.Property property35 = dateTime34.yearOfCentury();
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        java.util.Calendar calendar37 = dateTime34.toCalendar(locale36);
        int int38 = dateTime34.getMinuteOfHour();
        org.joda.time.DateTime dateTime40 = dateTime34.withYearOfEra((int) 'u');
        org.joda.time.DateTime dateTime42 = dateTime40.plus((long) (-292275054));
        int int43 = dateTime42.getMinuteOfDay();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (-1), chronology45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone49 = dateTimeZone48.toTimeZone();
        org.joda.time.DateTime dateTime50 = localDateTime46.toDateTime(dateTimeZone48);
        org.joda.time.Chronology chronology51 = dateTime50.getChronology();
        org.joda.time.DateTime dateTime52 = dateTime50.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone53 = dateTime50.getZone();
        boolean boolean54 = dateTime42.isBefore((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTime.Property property55 = dateTime50.weekOfWeekyear();
        boolean boolean56 = localDateTime11.equals((java.lang.Object) dateTime50);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "AD" + "'", str7, "AD");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str32, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 888 + "'", int43 == 888);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test14878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14878");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendMonthOfYearText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendSecondOfMinute(69);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatterBuilder4.toFormatter();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (-1), chronology9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.weekyear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property16 = localDateTime10.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean18 = localDateTime10.isSupported(dateTimeFieldType17);
        int int19 = localDateTime10.getDayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime10.withPeriodAdded(readablePeriod20, 21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.secondOfDay();
        int int24 = localDateTime22.get(dateTimeFieldType23);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder4.appendFixedDecimal(dateTimeFieldType23, 42);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder26.appendMillisOfSecond(909);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = dateTimeFormatterBuilder26.appendMillisOfSecond(0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = dateTimeFormatterBuilder30.appendTwoDigitYear(54554);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder30);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder32);
    }

    @Test
    public void test14879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14879");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTimeField dateTimeField1 = mutableDateTime0.getRoundingField();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType3 = dateTimeFieldType2.getDurationType();
        mutableDateTime0.add(durationFieldType3, 100);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = null;
        org.joda.time.format.DateTimeParser dateTimeParser7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (-1), chronology10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        org.joda.time.DateTime dateTime15 = localDateTime11.toDateTime(dateTimeZone13);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter8.withChronology(chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.monthOfYear();
        org.joda.time.DurationField durationField19 = durationFieldType3.getField(chronology16);
        org.joda.time.DurationField durationField20 = chronology16.eras();
        java.lang.String str21 = durationField20.getName();
        // The following exception was thrown during execution in test generation
        try {
            int int24 = durationField20.getDifference(227184130363932000L, 30888999L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "eras" + "'", str21, "eras");
    }

    @Test
    public void test14880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14880");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder6.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap10 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder6.appendTimeZoneShortName(strMap10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder11.appendYear((int) (short) 1, 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder14.appendDayOfWeekText();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType16.getDurationType();
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType16.getRangeDurationType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder15.appendText(dateTimeFieldType16);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder0.appendShortText(dateTimeFieldType16);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder20.appendMillisOfDay(21);
        boolean boolean23 = dateTimeFormatterBuilder20.canBuildParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder20.appendDayOfYear(33);
        org.joda.time.format.DateTimePrinter dateTimePrinter26 = dateTimeFormatterBuilder25.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder25.appendDayOfWeek(2089);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder28.appendFractionOfMinute(999, 54682);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertNotNull(dateTimePrinter26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
    }

    @Test
    public void test14881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14881");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        org.joda.time.DateTime dateTime7 = localTime6.toDateTimeToday();
        int int8 = localTime6.size();
        org.joda.time.LocalTime localTime10 = localTime6.plusHours((-1));
        org.joda.time.Chronology chronology11 = localTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.Chronology chronology14 = chronology11.withZone(dateTimeZone13);
        org.joda.time.DurationField durationField15 = chronology11.centuries();
        int int18 = durationField15.getValue(0L, 0L);
        long long21 = durationField15.getValueAsLong((long) 514, (long) (-106));
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test14882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14882");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.getLocalDate();
        int int10 = localDate9.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = localDate9.toString("2022-02-21T15:10:29.780+00:00:00.003");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test14883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14883");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder0.appendWeekyear(2000, 59);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder0.appendDayOfWeek(5);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder10.appendYear(21, 116);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder13.appendWeekyear(43, 3600000);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder13.appendTwoDigitYear(59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatterBuilder18.toFormatter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder18.appendClockhourOfDay(46);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatterBuilder18.toFormatter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime24 = dateTimeFormatter22.parseLocalTime("2022-02-23T23:42:20.108+56:35");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
    }

    @Test
    public void test14884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14884");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        boolean boolean17 = dateTimeZone12.isLocalDateTimeGap(localDateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.weekyear();
        boolean boolean22 = dateTimeZone12.isLocalDateTimeGap(localDateTime20);
        long long24 = dateTimeZone12.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZone(dateTimeZone12);
        boolean boolean26 = dateTimeFormatter2.isOffsetParsed();
        java.util.Locale locale27 = dateTimeFormatter2.getLocale();
        boolean boolean28 = dateTimeFormatter2.isParser();
        org.joda.time.DateTimeZone dateTimeZone29 = dateTimeFormatter2.getZone();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3L + "'", long24 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(locale27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(dateTimeZone29);
    }

    @Test
    public void test14885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14885");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale locale3 = builder0.build();
        java.util.Locale locale4 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str5 = locale4.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet6 = locale4.getUnicodeLocaleKeys();
        java.util.Locale.Category category7 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale8 = java.util.Locale.getDefault(category7);
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category7, locale9);
        java.util.Locale locale12 = locale9.stripExtensions();
        java.lang.String str13 = locale4.getDisplayVariant(locale9);
        java.util.Locale.Builder builder14 = builder0.setLocale(locale9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder14.setLanguage("1970-01-01T00:59:00.102+00:00:00.003");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 1970-01-01T00:59:00.102+00:00:00.003 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "French" + "'", str5, "French");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.FORMAT + "'", category7.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale8);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "\u4e00\u6708");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test14886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14886");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone5 = provider0.getZone("23:00:00.003");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone8 = provider0.getZone("1970-01-01");
        java.util.Set<java.lang.String> strSet9 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet10 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet11 = provider0.getAvailableIDs();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test14887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14887");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        org.joda.time.LocalTime localTime5 = localTime1.minusSeconds((int) (byte) 100);
        java.lang.String str6 = localTime1.toString();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalTime localTime9 = localTime1.withPeriodAdded(readablePeriod7, 0);
        org.joda.time.LocalTime localTime11 = localTime1.minusHours((int) (byte) 10);
        java.lang.String str12 = localTime1.toString();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "00:00:00.003" + "'", str6, "00:00:00.003");
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "00:00:00.003" + "'", str12, "00:00:00.003");
    }

    @Test
    public void test14888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14888");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone14 = chronology10.getZone();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.dayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray19 = chronology10.get(readablePeriod16, 2239439529601964L, (-11820000L));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test14889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14889");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds((int) (byte) 100);
        int int5 = localDateTime4.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.era();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minusYears((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withYear(30);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusMonths(7);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plus(readablePeriod14);
        java.util.Locale.Category category17 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale19 = new java.util.Locale("365");
        java.lang.String str20 = locale19.getISO3Language();
        java.util.Locale.setDefault(category17, locale19);
        java.util.Locale locale25 = new java.util.Locale("", "1969-12-31T23:59:59.999Z", "1969-12-31T23:59:59.999Z");
        java.util.Locale.setDefault(category17, locale25);
        java.util.Locale locale27 = java.util.Locale.getDefault(category17);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property30 = localDate28.property(dateTimeFieldType29);
        java.util.Locale locale34 = new java.util.Locale("Property[dayOfYear]", "");
        org.joda.time.LocalDate localDate35 = property30.setCopy("365", locale34);
        java.util.Locale.setDefault(category17, locale34);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = localDateTime15.toString("0117-01-03T09:00:00.000+00:00:00.003", locale34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + category17 + "' != '" + java.util.Locale.Category.FORMAT + "'", category17.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale19.toString(), "365");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "365" + "'", str20, "365");
        org.junit.Assert.assertEquals(locale25.toString(), "_1969-12-31T23:59:59.999Z_1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "_1969-12-31T23:59:59.999Z_1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals(locale34.toString(), "property[dayofyear]");
        org.junit.Assert.assertNotNull(localDate35);
    }

    @Test
    public void test14890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14890");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        org.joda.time.LocalTime localTime5 = localTime1.minusSeconds((int) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Chronology chronology8 = null;
        mutableDateTime7.setChronology(chronology8);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType10.getField(chronology11);
        mutableDateTime7.setRounding(dateTimeField12, (int) (short) 1);
        org.joda.time.DateTime dateTime15 = localTime5.toDateTime((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.LocalTime localTime17 = localTime5.minusHours((-292275054));
        org.joda.time.ReadablePartial readablePartial18 = null;
        org.joda.time.LocalTime localTime19 = localTime17.withFields(readablePartial18);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test14891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14891");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("2022-02-21T15:07:27.112+00:00:00.003");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T15:07:27.112+00:00:00.003\" is malformed at \"T15:07:27.112+00:00:00.003\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14892");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.getLocalDate();
        int int10 = localDate9.getDayOfMonth();
        org.joda.time.LocalDate.Property property11 = localDate9.year();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test14893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14893");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDateTime4.toDateTime(dateTimeZone6);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.plus((long) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfCentury();
        boolean boolean13 = strSet1.equals((java.lang.Object) dateTime11);
        int int14 = dateTime11.getHourOfDay();
        org.joda.time.DateTime dateTime15 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (-1), chronology17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        org.joda.time.DateTime dateTime22 = localDateTime18.toDateTime(dateTimeZone20);
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.DateTime dateTime25 = dateTime22.plus((long) 100);
        org.joda.time.DateTime.Property property26 = dateTime22.millisOfSecond();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) (short) 1, chronology28);
        org.joda.time.DateTime dateTime32 = dateTime29.withDurationAdded((long) (byte) 0, 292278993);
        int int33 = dateTime22.compareTo((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (-1), chronology36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone40 = dateTimeZone39.toTimeZone();
        org.joda.time.DateTime dateTime41 = localDateTime37.toDateTime(dateTimeZone39);
        org.joda.time.Chronology chronology42 = dateTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.secondOfDay();
        org.joda.time.DurationField durationField44 = chronology42.minutes();
        org.joda.time.DurationField durationField45 = chronology42.minutes();
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) 292278993, chronology42);
        org.joda.time.DateTime dateTime47 = dateTime22.toDateTime(chronology42);
        org.joda.time.DateTimeField dateTimeField48 = chronology42.dayOfYear();
        org.joda.time.DateTimeField dateTimeField49 = chronology42.clockhourOfHalfday();
        org.joda.time.DateTime dateTime50 = dateTime11.withChronology(chronology42);
        org.joda.time.DateTimeField dateTimeField51 = chronology42.dayOfYear();
        int int52 = dateTimeField51.getMaximumValue();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str9, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str23, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 366 + "'", int52 == 366);
    }

    @Test
    public void test14894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14894");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        int int13 = dateTime9.getMinuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime9.withYearOfEra((int) 'u');
        org.joda.time.DateTime.Property property16 = dateTime9.era();
        org.joda.time.DateTime dateTime17 = property16.roundHalfEvenCopy();
        org.joda.time.DurationField durationField18 = property16.getLeapDurationField();
        org.joda.time.DateTime dateTime19 = property16.getDateTime();
        org.joda.time.DateTime dateTime20 = dateTime19.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNull(durationField18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test14895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14895");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusYears(0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfEvenCopy();
        int int11 = localDateTime10.getMillisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test14896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14896");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.LocalDate localDate2 = dateTime1.toLocalDate();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) (byte) 0);
        java.util.Date date5 = dateTime4.toDate();
        org.joda.time.DateTime dateTime7 = dateTime4.plus(23L);
        java.util.GregorianCalendar gregorianCalendar8 = dateTime4.toGregorianCalendar();
        org.joda.time.DateTime.Property property9 = dateTime4.era();
        org.joda.time.DateTime dateTime10 = property9.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval11 = property9.toInterval();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Mon Feb 21 15:13:09 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(gregorianCalendar8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test14897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14897");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.plus(readableDuration8);
        org.joda.time.DateTime dateTime11 = dateTime6.minusWeeks(10);
        boolean boolean13 = dateTime6.isBefore((long) (-1));
        org.joda.time.DateTime dateTime18 = dateTime6.withTime(3, 23, 2, 30);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) ' ');
        org.joda.time.DateTime.Property property21 = dateTime18.dayOfYear();
        org.joda.time.DateTime dateTime22 = property21.getDateTime();
        org.joda.time.DateTime dateTime23 = property21.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test14898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14898");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusYears(0);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withPeriodAdded(readablePeriod8, 33);
        int int11 = localDateTime10.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withMonthOfYear(1972);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1972 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test14899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14899");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-1), chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDateTime6.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter3.withChronology(chronology11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter3.withPivotYear(517200);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter14.withPivotYear(193);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.parse("java.io.IOException: 2022-02-18T05:54:53.412+00:00:00.003", dateTimeFormatter16);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
    }

    @Test
    public void test14900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14900");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.add((long) 100);
        org.joda.time.Chronology chronology3 = null;
        mutableDateTime0.setChronology(chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        long long7 = dateTimeZone5.previousTransition((long) 1);
        mutableDateTime0.setZone(dateTimeZone5);
        int int9 = mutableDateTime0.getSecondOfMinute();
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        java.util.Set<java.lang.Character> charSet11 = locale10.getExtensionKeys();
        java.util.Calendar calendar12 = mutableDateTime0.toCalendar(locale10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) (-1), chronology14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        org.joda.time.DateTime dateTime19 = localDateTime15.toDateTime(dateTimeZone17);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (-1), chronology22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        org.joda.time.DateTime dateTime27 = localDateTime23.toDateTime(dateTimeZone25);
        org.joda.time.Chronology chronology28 = dateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.dayOfYear();
        org.joda.time.Chronology chronology30 = chronology28.withUTC();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.clockhourOfDay();
        long long33 = dateTimeField31.roundHalfEven((long) 19);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone35 = dateTimeZone34.toTimeZone();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (-1), chronology37);
        boolean boolean39 = dateTimeZone34.isLocalDateTimeGap(localDateTime38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.withMillisOfDay(5);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime38.plusHours((int) (short) 1);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) (-1), chronology48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone52 = dateTimeZone51.toTimeZone();
        org.joda.time.DateTime dateTime53 = localDateTime49.toDateTime(dateTimeZone51);
        java.lang.String str54 = dateTime53.toString();
        org.joda.time.DateTime dateTime56 = dateTime53.plus((long) 100);
        org.joda.time.DateTime.Property property57 = dateTime56.yearOfCentury();
        java.util.Locale locale58 = java.util.Locale.GERMANY;
        java.util.Calendar calendar59 = dateTime56.toCalendar(locale58);
        int int60 = dateTime56.getMinuteOfHour();
        org.joda.time.DateTime dateTime62 = dateTime56.withYearOfEra((int) 'u');
        org.joda.time.DateTime.Property property63 = dateTime56.era();
        org.joda.time.DateTime dateTime64 = property63.roundHalfEvenCopy();
        org.joda.time.DurationField durationField65 = property63.getLeapDurationField();
        java.util.Locale locale67 = new java.util.Locale("hi!");
        java.lang.String str68 = locale67.getScript();
        java.lang.String str69 = locale67.getDisplayLanguage();
        java.lang.String str70 = locale67.getDisplayCountry();
        java.lang.String str71 = property63.getAsText(locale67);
        java.lang.String str72 = dateTimeField31.getAsText((org.joda.time.ReadablePartial) localDateTime38, 0, locale67);
        java.lang.String str73 = dateTimeZone17.getShortName((long) 0, locale67);
        long long76 = dateTimeZone17.convertLocalToUTC((long) 30, true);
        org.joda.time.MutableDateTime mutableDateTime77 = mutableDateTime0.toMutableDateTime(dateTimeZone17);
        java.lang.String str79 = dateTimeZone17.getName(600006L);
        org.joda.time.MutableDateTime mutableDateTime81 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime81.set(dateTimeFieldType82, (-292275054));
        org.joda.time.MutableDateTime.Property property85 = mutableDateTime81.yearOfEra();
        mutableDateTime81.setYear((int) '#');
        mutableDateTime81.setYear(292278993);
        mutableDateTime81.setMillisOfSecond(59);
        mutableDateTime81.addMillis(3);
        mutableDateTime81.setMinuteOfHour(7);
        int int96 = dateTimeZone17.getOffset((org.joda.time.ReadableInstant) mutableDateTime81);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertNotNull(charSet11);
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=1645456389408,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=3,HOUR_OF_DAY=15,MINUTE=13,SECOND=9,MILLISECOND=411,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime53);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str54, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar59);
// flaky:         org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNull(durationField65);
        org.junit.Assert.assertEquals(locale67.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "AD" + "'", str71, "AD");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "0" + "'", str72, "0");
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00:00.003" + "'", str73, "+00:00:00.003");
// flaky:         org.junit.Assert.assertTrue("'" + long76 + "' != '" + 27L + "'", long76 == 27L);
        org.junit.Assert.assertNotNull(mutableDateTime77);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+00:00:00.003" + "'", str79, "+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertNotNull(property85);
// flaky:         org.junit.Assert.assertTrue("'" + int96 + "' != '" + 3 + "'", int96 == 3);
    }

    @Test
    public void test14901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14901");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology4 = dateTimeFormatter2.getChronolgy();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        long long10 = dateTimeZone5.convertLocalToUTC(10L, false, (long) 3);
        java.util.TimeZone timeZone11 = dateTimeZone5.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime12.copy();
        mutableDateTime12.setSecondOfMinute(20);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime12.centuryOfEra();
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = null;
        org.joda.time.format.DateTimeParser dateTimeParser18 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter17, dateTimeParser18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (-1), chronology21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTime dateTime26 = localDateTime22.toDateTime(dateTimeZone24);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter19.withChronology(chronology27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (-1), chronology32);
        boolean boolean34 = dateTimeZone29.isLocalDateTimeGap(localDateTime33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (-1), chronology36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.weekyear();
        boolean boolean39 = dateTimeZone29.isLocalDateTimeGap(localDateTime37);
        long long41 = dateTimeZone29.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter19.withZone(dateTimeZone29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter42.withPivotYear((java.lang.Integer) 86399999);
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime46.secondOfMinute();
        mutableDateTime46.setDate((-1L));
        int int50 = mutableDateTime46.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        long long54 = dateTimeZone51.convertLocalToUTC(30L, true);
        org.joda.time.DateTime dateTime55 = mutableDateTime46.toDateTime(dateTimeZone51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter42.withZone(dateTimeZone51);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) (-1), chronology59);
        org.joda.time.LocalDateTime.Property property61 = localDateTime60.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone63 = dateTimeZone62.toTimeZone();
        org.joda.time.DateTime dateTime64 = localDateTime60.toDateTime(dateTimeZone62);
        org.joda.time.Chronology chronology65 = dateTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.secondOfDay();
        long long68 = dateTimeField66.roundCeiling((long) 58);
        java.util.Locale locale70 = java.util.Locale.GERMANY;
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) (-1), chronology72);
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone76 = dateTimeZone75.toTimeZone();
        org.joda.time.DateTime dateTime77 = localDateTime73.toDateTime(dateTimeZone75);
        java.lang.String str78 = dateTime77.toString();
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.DateTime dateTime80 = dateTime77.plus(readableDuration79);
        org.joda.time.DateTime dateTime82 = dateTime77.minusWeeks(10);
        boolean boolean84 = dateTime77.isBefore((long) (-1));
        int int85 = dateTime77.getYearOfEra();
        org.joda.time.DateTime dateTime87 = dateTime77.plusDays(1969);
        org.joda.time.DateTime.Property property88 = dateTime87.weekOfWeekyear();
        java.util.Locale locale89 = java.util.Locale.US;
        int int90 = property88.getMaximumShortTextLength(locale89);
        java.lang.String str91 = locale70.getDisplayScript(locale89);
        java.lang.String str92 = dateTimeField66.getAsShortText(116, locale70);
        java.lang.String str93 = dateTimeZone51.getName((long) 888, locale70);
        mutableDateTime12.setZone(dateTimeZone51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter95 = dateTimeFormatter2.withZone(dateTimeZone51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter97 = dateTimeFormatter95.withDefaultYear(5270);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter98 = dateTimeFormatter97.withOffsetParsed();
        org.junit.Assert.assertNull(dateTimePrinter3);
        org.junit.Assert.assertNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 7L + "'", long10 == 7L);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 3L + "'", long41 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(property47);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone51);
// flaky:         org.junit.Assert.assertTrue("'" + long54 + "' != '" + 27L + "'", long54 == 27L);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(timeZone63);
// flaky:         org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 997L + "'", long68 == 997L);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de_DE");
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(timeZone76);
// flaky:         org.junit.Assert.assertEquals(timeZone76.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime77);
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str78, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1970 + "'", int85 == 1970);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2 + "'", int90 == 2);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "116" + "'", str92, "116");
// flaky:         org.junit.Assert.assertEquals("'" + str93 + "' != '" + "+00:00:00.003" + "'", str93, "+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTimeFormatter95);
        org.junit.Assert.assertNotNull(dateTimeFormatter97);
        org.junit.Assert.assertNotNull(dateTimeFormatter98);
    }

    @Test
    public void test14902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14902");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        boolean boolean7 = property5.isLeap();
        org.joda.time.LocalTime localTime8 = property5.roundFloorCopy();
        org.joda.time.LocalTime.Property property9 = localTime8.minuteOfHour();
        org.joda.time.LocalTime localTime11 = property9.addNoWrapToCopy((int) (short) 100);
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalTime localTime15 = localTime12.withPeriodAdded(readablePeriod13, 3);
        org.joda.time.Chronology chronology16 = localTime15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.months();
        org.joda.time.DurationField durationField18 = chronology16.eras();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test14903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14903");
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime8 = localTime6.minusSeconds((int) (short) 10);
        int int9 = localTime6.getMinuteOfHour();
        org.joda.time.LocalTime.Property property10 = localTime6.hourOfDay();
        org.joda.time.LocalTime localTime11 = property10.withMaximumValue();
        boolean boolean12 = property10.isLeap();
        org.joda.time.LocalTime localTime13 = property10.roundFloorCopy();
        org.joda.time.LocalTime localTime15 = localTime13.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime16 = localTime15.toDateTimeToday();
        int int17 = dateTime16.getMonthOfYear();
        int int18 = dateTime16.getEra();
        org.joda.time.DateTime dateTime20 = dateTime16.minusYears(117);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTime16.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(54625295, 16140003, 49680003, (int) (short) 100, 122, dateTimeZone21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
    }

    @Test
    public void test14904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14904");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        boolean boolean7 = property5.isLeap();
        org.joda.time.LocalTime localTime8 = property5.roundFloorCopy();
        org.joda.time.LocalTime localTime10 = localTime8.plusHours((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.centuries();
        boolean boolean12 = localTime10.isSupported(durationFieldType11);
        org.joda.time.LocalTime.Property property13 = localTime10.hourOfDay();
        org.joda.time.LocalTime localTime14 = property13.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime16 = localTime14.plusHours(54);
        int int17 = localTime14.getMillisOfSecond();
        org.joda.time.LocalTime.Property property18 = localTime14.secondOfMinute();
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime24 = localTime22.minusSeconds((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalTime localTime26 = localTime24.plus(readablePeriod25);
        org.joda.time.Chronology chronology27 = localTime26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.minutes();
        java.util.Locale locale30 = new java.util.Locale("hi!");
        java.lang.String str31 = locale30.getScript();
        java.lang.String str32 = locale30.getDisplayLanguage();
        java.lang.String str33 = locale30.getDisplayCountry();
        java.util.Set<java.lang.String> strSet34 = locale30.getUnicodeLocaleKeys();
        java.lang.String str35 = locale30.getDisplayCountry();
        java.util.Locale.setDefault(locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((-61031145600001L), chronology27, locale30);
        java.util.Locale locale38 = java.util.Locale.getDefault();
        java.util.Set<java.lang.Character> charSet39 = locale38.getExtensionKeys();
        java.lang.String str41 = locale38.getExtension('a');
        java.lang.String str42 = locale30.getDisplayVariant(locale38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime43 = property18.setCopy("69", locale38);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertEquals(locale30.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "hi!" + "'", str32, "hi!");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "hi!");
        org.junit.Assert.assertNotNull(charSet39);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
    }

    @Test
    public void test14905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14905");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        int int7 = localTime6.getSecondOfMinute();
        org.joda.time.LocalTime localTime9 = localTime6.withHourOfDay(2);
        org.joda.time.LocalTime.Property property10 = localTime6.minuteOfHour();
        org.joda.time.LocalTime.Property property11 = localTime6.minuteOfHour();
        org.joda.time.LocalTime.Property property12 = localTime6.millisOfSecond();
        org.joda.time.LocalTime localTime13 = property12.roundFloorCopy();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test14906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14906");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        boolean boolean5 = dateTimeZone0.isLocalDateTimeGap(localDateTime4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.withDurationAdded(readableDuration11, (int) 'u');
        org.joda.time.LocalDateTime.Property property14 = localDateTime4.monthOfYear();
        org.joda.time.LocalDateTime localDateTime15 = property14.withMaximumValue();
        int int16 = property14.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 12 + "'", int16 == 12);
    }

    @Test
    public void test14907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14907");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        boolean boolean7 = property5.isLeap();
        org.joda.time.LocalTime localTime8 = property5.roundFloorCopy();
        org.joda.time.LocalTime localTime10 = localTime8.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime11 = localTime10.toDateTimeToday();
        java.lang.String str12 = localTime10.toString();
        int int13 = localTime10.getMillisOfSecond();
        org.joda.time.DateTime dateTime14 = localTime10.toDateTimeToday();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalTime localTime16 = localTime10.minus(readablePeriod15);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "23:59:59.000" + "'", str12, "23:59:59.000");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test14908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14908");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder0.appendWeekyear(2000, 59);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder0.appendDayOfWeek(5);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType11.getRangeDurationType();
        java.lang.String str13 = dateTimeFieldType11.getName();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType11, 99, (int) (short) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder16.appendTwoDigitWeekyear(9, false);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder16.appendClockhourOfDay(199);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder21.appendFractionOfMinute(36, 10003);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder24.appendEraText();
        org.joda.time.format.DateTimePrinter dateTimePrinter26 = null;
        org.joda.time.format.DateTimeParser dateTimeParser27 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter26, dateTimeParser27);
        org.joda.time.format.DateTimePrinter dateTimePrinter29 = dateTimeFormatter28.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeFormatter28.getZone();
        boolean boolean31 = dateTimeFormatter28.isPrinter();
        org.joda.time.Chronology chronology32 = dateTimeFormatter28.getChronolgy();
        boolean boolean33 = dateTimeFormatter28.isParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = dateTimeFormatterBuilder25.append(dateTimeFormatter28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter28.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone36 = dateTimeFormatter28.getZone();
        java.lang.StringBuffer stringBuffer37 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter28.printTo(stringBuffer37, (long) 37);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "minuteOfHour" + "'", str13, "minuteOfHour");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertNull(dateTimePrinter29);
        org.junit.Assert.assertNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNull(dateTimeZone36);
    }

    @Test
    public void test14909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14909");
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = null;
        org.joda.time.format.DateTimeParser dateTimeParser3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter2, dateTimeParser3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (-1), chronology6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTime dateTime11 = localDateTime7.toDateTime(dateTimeZone9);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter4.withChronology(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.clockhourOfHalfday();
        org.joda.time.DurationField durationField16 = chronology12.days();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 1970, chronology12);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale21 = java.util.Locale.TAIWAN;
        java.lang.String str22 = locale21.toLanguageTag();
        java.util.Locale locale23 = java.util.Locale.GERMANY;
        java.lang.String str24 = locale21.getDisplayScript(locale23);
        java.lang.String str25 = locale23.getVariant();
        java.lang.String str26 = dateTimeZone19.getName(0L, locale23);
        java.lang.String str27 = locale23.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) 102, chronology12, locale23);
        java.util.Set<java.lang.String> strSet29 = locale23.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "zh-TW" + "'", str22, "zh-TW");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.003" + "'", str26, "+00:00:00.003");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Germany" + "'", str27, "Germany");
        org.junit.Assert.assertNotNull(strSet29);
    }

    @Test
    public void test14910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14910");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        boolean boolean4 = dateTimeField2.isLeap(100L);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 3, chronology6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType8.getDurationType();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType8.getRangeDurationType();
        boolean boolean11 = localDate7.isSupported(durationFieldType10);
        org.joda.time.LocalDate.Property property12 = localDate7.centuryOfEra();
        org.joda.time.LocalDate localDate13 = property12.roundCeilingCopy();
        org.joda.time.LocalDate localDate14 = property12.getLocalDate();
        int int15 = localDate14.getDayOfMonth();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 3, chronology17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType20 = dateTimeFieldType19.getDurationType();
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType19.getRangeDurationType();
        boolean boolean22 = localDate18.isSupported(durationFieldType21);
        org.joda.time.LocalDate.Property property23 = localDate18.centuryOfEra();
        org.joda.time.LocalDate localDate24 = property23.roundCeilingCopy();
        org.joda.time.LocalDate localDate25 = property23.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = localDate25.toDateTimeAtCurrentTime(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = localDate14.toDateTimeAtMidnight(dateTimeZone27);
        int int31 = dateTimeField2.getMinimumValue((org.joda.time.ReadablePartial) localDate14);
        org.joda.time.LocalDate.Property property32 = localDate14.weekyear();
        org.joda.time.LocalDate localDate34 = property32.addToCopy(38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate36 = localDate34.withWeekOfWeekyear(54);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-292275054) + "'", int31 == (-292275054));
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate34);
    }

    @Test
    public void test14911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14911");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        java.util.GregorianCalendar gregorianCalendar2 = mutableDateTime1.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now(dateTimeZone3);
        java.util.GregorianCalendar gregorianCalendar5 = mutableDateTime4.toGregorianCalendar();
        boolean boolean6 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime9.set(dateTimeFieldType10, (-292275054));
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        mutableDateTime9.add(readablePeriod13, 4);
        int int16 = mutableDateTime9.getMillisOfDay();
        int int17 = mutableDateTime9.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime();
        mutableDateTime18.add((long) 100);
        org.joda.time.Chronology chronology21 = null;
        mutableDateTime18.setChronology(chronology21);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        long long25 = dateTimeZone23.previousTransition((long) 1);
        mutableDateTime18.setZone(dateTimeZone23);
        java.lang.String str27 = dateTimeZone23.toString();
        mutableDateTime9.setZoneRetainFields(dateTimeZone23);
        java.util.TimeZone timeZone29 = dateTimeZone23.toTimeZone();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime1, dateTimeZone23);
        org.joda.time.LocalTime.Property property31 = localTime30.secondOfMinute();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 1);
        org.joda.time.LocalDate localDate35 = localDate33.withDayOfYear((int) (byte) 10);
        org.joda.time.LocalDate localDate37 = localDate35.plusWeeks((-292275054));
        org.joda.time.LocalDate localDate39 = localDate37.withYearOfEra(10);
        org.joda.time.DateTime dateTime40 = localDate37.toDateTimeAtMidnight();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean41 = localTime30.isEqual((org.joda.time.ReadablePartial) localDate37);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(gregorianCalendar5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2922750 + "'", int17 == 2922750);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.003" + "'", str27, "+00:00:00.003");
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test14912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14912");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("31", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=31");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14913");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.plus(readableDuration8);
        org.joda.time.DateTime dateTime11 = dateTime6.minusWeeks(10);
        boolean boolean13 = dateTime6.isBefore((long) (-1));
        int int14 = dateTime6.getYearOfEra();
        org.joda.time.DateTime dateTime16 = dateTime6.plusDays(1969);
        org.joda.time.DateTime.Property property17 = dateTime16.weekOfWeekyear();
        org.joda.time.DateTime.Property property18 = dateTime16.millisOfSecond();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) (short) 100);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.DateTime dateTime24 = dateTime20.withPeriodAdded(readablePeriod22, 58);
        org.joda.time.DateTime.Property property25 = dateTime24.minuteOfDay();
        org.joda.time.DateTime dateTime27 = dateTime24.minusYears(20);
        int int28 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime.Property property29 = dateTime27.millisOfDay();
        org.joda.time.DateTime.Property property30 = dateTime27.hourOfDay();
        org.joda.time.DateTime dateTime32 = property30.addToCopy(196);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test14914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14914");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime1.set(dateTimeFieldType2, (-292275054));
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.yearOfEra();
        mutableDateTime1.setYear((int) '#');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (-1), chronology9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTime dateTime14 = localDateTime10.toDateTime(dateTimeZone12);
        int int16 = dateTimeZone12.getOffsetFromLocal((long) (byte) 10);
        long long18 = dateTimeZone12.nextTransition((long) 59);
        mutableDateTime1.setZoneRetainFields(dateTimeZone12);
        mutableDateTime1.setWeekOfWeekyear((int) '#');
        org.joda.time.Chronology chronology22 = null;
        mutableDateTime1.setChronology(chronology22);
        mutableDateTime1.setMinuteOfHour(40);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (-1), chronology28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone32 = dateTimeZone31.toTimeZone();
        org.joda.time.DateTime dateTime33 = localDateTime29.toDateTime(dateTimeZone31);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.DateTime dateTime36 = dateTime33.plus((long) 100);
        org.joda.time.DateTime.Property property37 = dateTime33.millisOfSecond();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) (short) 1, chronology39);
        org.joda.time.DateTime dateTime43 = dateTime40.withDurationAdded((long) (byte) 0, 292278993);
        int int44 = dateTime33.compareTo((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) (-1), chronology47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone51 = dateTimeZone50.toTimeZone();
        org.joda.time.DateTime dateTime52 = localDateTime48.toDateTime(dateTimeZone50);
        org.joda.time.Chronology chronology53 = dateTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.secondOfDay();
        org.joda.time.DurationField durationField55 = chronology53.minutes();
        org.joda.time.DurationField durationField56 = chronology53.minutes();
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime((long) 292278993, chronology53);
        org.joda.time.DateTime dateTime58 = dateTime33.toDateTime(chronology53);
        org.joda.time.DateTimeField dateTimeField59 = chronology53.minuteOfDay();
        java.util.Locale locale60 = java.util.Locale.PRC;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) 69, chronology53, locale60, (java.lang.Integer) 33, (int) ' ');
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(chronology53);
        java.lang.String str65 = dateTime64.toString();
        org.joda.time.DateTime dateTime67 = dateTime64.withSecondOfMinute((int) (byte) 0);
        org.joda.time.DateTime dateTime69 = dateTime67.withDayOfYear(17);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.DateTime dateTime71 = dateTime69.plus(readablePeriod70);
        boolean boolean72 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) dateTime69);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 59L + "'", long18 == 59L);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str34, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTime64);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022-02-21T15:13:09.637+00:00:00.003" + "'", str65, "2022-02-21T15:13:09.637+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test14915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14915");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("Taiwan", (double) 0L);
        double double3 = languageRange2.getWeight();
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] { languageRange2 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleAttributes();
        strSet8.clear();
        java.util.List<java.lang.String> strList10 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strSet8);
        java.util.Locale locale11 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleAttributes();
        java.util.Iterator<java.lang.String> strItor13 = strSet12.iterator();
        java.lang.String[] strArray17 = new java.lang.String[] { "1969-12-31T23:59:59.999Z", "365", "1969-12-31T23:59:59.999Z" };
        java.util.ArrayList<java.lang.String> strList18 = new java.util.ArrayList<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList18, strArray17);
        boolean boolean20 = strSet12.containsAll((java.util.Collection<java.lang.String>) strList18);
        java.lang.Object[] objArray21 = strSet12.toArray();
        java.lang.String str22 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strSet12);
        strSet12.clear();
        java.util.Locale locale24 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        strSet25.clear();
        java.util.Iterator<java.lang.String> strItor27 = strSet25.iterator();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (-1), chronology29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        org.joda.time.DateTime dateTime34 = localDateTime30.toDateTime(dateTimeZone32);
        java.lang.String str35 = dateTime34.toString();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime37 = dateTime34.plus(readableDuration36);
        org.joda.time.DateTime dateTime39 = dateTime34.minusWeeks(10);
        boolean boolean41 = dateTime34.isBefore((long) (-1));
        int int42 = dateTime34.getYearOfEra();
        org.joda.time.DateTime dateTime44 = dateTime34.plusDays(1969);
        boolean boolean45 = strSet25.equals((java.lang.Object) dateTime34);
        java.util.stream.Stream<java.lang.String> strStream46 = strSet25.stream();
        int int47 = strSet25.size();
        java.util.stream.Stream<java.lang.String> strStream48 = strSet25.stream();
        boolean boolean49 = strSet12.containsAll((java.util.Collection<java.lang.String>) strSet25);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(strItor13);
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(strItor27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str35, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strStream46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(strStream48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test14916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14916");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.dayOfWeek();
        mutableDateTime0.setDayOfMonth(4);
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime0.copy();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        org.joda.time.LocalDate localDate7 = dateTime6.toLocalDate();
        org.joda.time.DateTime.Property property8 = dateTime6.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property8.getFieldType();
        org.joda.time.DurationField durationField10 = property8.getRangeDurationField();
        org.joda.time.DateTime dateTime11 = property8.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField12 = property8.getField();
        mutableDateTime4.setRounding(dateTimeField12);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime17 = localTime15.minusMinutes(1);
        int[] intArray19 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray21 = dateTimeField12.set((org.joda.time.ReadablePartial) localTime15, 54771753, intArray19, 40339105);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 40339105 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test14917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14917");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = null;
        org.joda.time.format.DateTimeParser dateTimeParser3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter2, dateTimeParser3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (-1), chronology6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTime dateTime11 = localDateTime7.toDateTime(dateTimeZone9);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter4.withChronology(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.monthOfYear();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField16 = chronology12.weekOfWeekyear();
        org.joda.time.DurationField durationField17 = chronology12.centuries();
        org.joda.time.DateTime dateTime18 = dateTime1.toDateTime(chronology12);
        org.joda.time.DateTime dateTime20 = dateTime18.minusDays(59);
        boolean boolean22 = dateTime18.isEqual((-62135596800003L));
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (-1), chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusSeconds((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.withYearOfEra((int) '#');
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone31 = dateTimeZone30.toTimeZone();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (-1), chronology33);
        boolean boolean35 = dateTimeZone30.isLocalDateTimeGap(localDateTime34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (-1), chronology37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.weekyear();
        boolean boolean40 = dateTimeZone30.isLocalDateTimeGap(localDateTime38);
        boolean boolean42 = dateTimeZone30.isStandardOffset(86399999L);
        long long46 = dateTimeZone30.convertLocalToUTC((long) 35, true, 2022L);
        org.joda.time.DateTime dateTime47 = localDateTime25.toDateTime(dateTimeZone30);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder48 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder51 = dateTimeFormatterBuilder48.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap52 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder53 = dateTimeFormatterBuilder48.appendTimeZoneShortName(strMap52);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder56 = dateTimeFormatterBuilder53.appendYear((int) (short) 1, 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder58 = dateTimeFormatterBuilder56.appendMinuteOfHour(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder61 = dateTimeFormatterBuilder58.appendFixedSignedDecimal(dateTimeFieldType59, 31);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder63 = dateTimeFormatterBuilder61.appendWeekOfWeekyear(40);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap64 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder65 = dateTimeFormatterBuilder61.appendTimeZoneShortName(strMap64);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder67 = dateTimeFormatterBuilder65.appendLiteral("java.io.IOException: 1969-12-31T23:59:59.999");
        boolean boolean68 = dateTimeZone30.equals((java.lang.Object) dateTimeFormatterBuilder67);
        boolean boolean70 = dateTimeZone30.isStandardOffset(1000L);
        java.util.Locale locale74 = new java.util.Locale("Property[dayOfYear]", "");
        java.lang.String str75 = dateTimeZone30.getShortName(37L, locale74);
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((java.lang.Object) (-62135596800003L), dateTimeZone30);
        long long78 = dateTimeZone30.convertUTCToLocal(32399999L);
        int int80 = dateTimeZone30.getOffset((-31449600000L));
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 32L + "'", long46 == 32L);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder51);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder53);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder56);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder61);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder63);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder65);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertEquals(locale74.toString(), "property[dayofyear]");
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00:00.003" + "'", str75, "+00:00:00.003");
// flaky:         org.junit.Assert.assertTrue("'" + long78 + "' != '" + 32400002L + "'", long78 == 32400002L);
// flaky:         org.junit.Assert.assertTrue("'" + int80 + "' != '" + 3 + "'", int80 == 3);
    }

    @Test
    public void test14918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14918");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property2 = localDate0.property(dateTimeFieldType1);
        org.joda.time.LocalDate localDate4 = localDate0.withDayOfMonth(10);
        org.joda.time.LocalDate localDate6 = localDate0.withYearOfEra(99);
        org.joda.time.LocalDate localDate8 = localDate0.withWeekyear(70);
        org.joda.time.LocalDate.Property property9 = localDate8.monthOfYear();
        org.joda.time.LocalDate.Property property10 = localDate8.monthOfYear();
        org.joda.time.LocalDate localDate11 = property10.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField12 = property10.getField();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test14919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14919");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.add((long) 100);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.dayOfYear();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-1), chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDateTime6.toDateTime(dateTimeZone8);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.DateTime dateTime13 = dateTime10.plus((long) 100);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.plus(readableDuration15);
        int int17 = dateTime16.getDayOfMonth();
        java.util.Locale locale19 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.lang.String str22 = locale19.getDisplayVariant(locale21);
        java.lang.String str23 = dateTime16.toString("365", locale21);
        org.joda.time.DateTime dateTime25 = dateTime16.plusMonths(1969);
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime28 = dateTime16.plusDays(0);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.dayOfWeek();
        mutableDateTime29.setDayOfMonth(4);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.yearOfCentury();
        mutableDateTime29.set(dateTimeFieldType33, (int) (byte) 0);
        boolean boolean36 = dateTime16.isSupported(dateTimeFieldType33);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime38 = dateTime16.plus(readablePeriod37);
        int int39 = dateTime16.getDayOfMonth();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str11, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "365" + "'", str23, "365");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test14920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14920");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        java.util.GregorianCalendar gregorianCalendar2 = mutableDateTime1.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now(dateTimeZone3);
        java.util.GregorianCalendar gregorianCalendar5 = mutableDateTime4.toGregorianCalendar();
        boolean boolean6 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.DateTimeZone dateTimeZone7 = mutableDateTime4.getZone();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime4.secondOfDay();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime4.dayOfWeek();
        mutableDateTime4.add(575L);
        int int12 = mutableDateTime4.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(gregorianCalendar5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test14921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14921");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (-1));
        org.joda.time.DateTime dateTime3 = dateTime1.plusWeeks(5);
        org.joda.time.DateTime dateTime5 = dateTime3.plusDays(3123);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) (-1), chronology7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTime dateTime12 = localDateTime8.toDateTime(dateTimeZone10);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfDay();
        org.joda.time.DurationField durationField15 = chronology13.minutes();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = chronology13.add(readablePeriod17, (long) 31, 69);
        org.joda.time.DateTimeField dateTimeField21 = chronology13.hourOfDay();
        org.joda.time.DateTime dateTime22 = dateTime3.toDateTime(chronology13);
        org.joda.time.DurationField durationField23 = chronology13.halfdays();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 31L + "'", long20 == 31L);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test14922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14922");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder0.appendWeekyear(2000, 59);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder0.appendDayOfWeek(5);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder10.appendYear(21, 116);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder10.appendFractionOfHour(12, 2022);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder17.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap21 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder17.appendTimeZoneShortName(strMap21);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder22.appendYear((int) (short) 1, 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder25.appendDayOfWeekText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder25.appendClockhourOfHalfday(47);
        org.joda.time.format.DateTimeParser dateTimeParser29 = dateTimeFormatterBuilder25.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = dateTimeFormatterBuilder10.appendOptional(dateTimeParser29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) (-1), chronology34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone38 = dateTimeZone37.toTimeZone();
        org.joda.time.DateTime dateTime39 = localDateTime35.toDateTime(dateTimeZone37);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.DateTime dateTime42 = dateTime39.plus((long) 100);
        org.joda.time.DateTime.Property property43 = dateTime42.yearOfCentury();
        java.util.Locale locale44 = java.util.Locale.GERMANY;
        java.util.Calendar calendar45 = dateTime42.toCalendar(locale44);
        java.util.Locale locale46 = java.util.Locale.TAIWAN;
        java.lang.String str47 = locale46.toLanguageTag();
        java.lang.String str48 = locale44.getDisplayCountry(locale46);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology32, locale44, (java.lang.Integer) 38);
        org.joda.time.format.DateTimePrinter dateTimePrinter51 = null;
        org.joda.time.format.DateTimeParser dateTimeParser52 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter51, dateTimeParser52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) (-1), chronology55);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone59 = dateTimeZone58.toTimeZone();
        org.joda.time.DateTime dateTime60 = localDateTime56.toDateTime(dateTimeZone58);
        org.joda.time.Chronology chronology61 = dateTime60.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter53.withChronology(chronology61);
        org.joda.time.DateTimeField dateTimeField63 = chronology61.monthOfYear();
        org.joda.time.DateTimeField dateTimeField64 = chronology61.weekyearOfCentury();
        dateTimeParserBucket50.saveField(dateTimeField64, 19);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTimeField dateTimeField69 = dateTimeFieldType67.getField(chronology68);
        dateTimeParserBucket50.saveField(dateTimeFieldType67, 69);
        int int72 = dateTimeParserBucket50.getOffset();
        long long74 = dateTimeParserBucket50.computeMillis(false);
        int int77 = dateTimeParser29.parseInto(dateTimeParserBucket50, "999", 971);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(dateTimeParser29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder30);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str40, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "zh-TW" + "'", str47, "zh-TW");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u5fb7\u570b" + "'", str48, "\u5fb7\u570b");
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(timeZone59);
// flaky:         org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long74 + "' != '" + (-61567603198033L) + "'", long74 == (-61567603198033L));
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + (-972) + "'", int77 == (-972));
    }

    @Test
    public void test14923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14923");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        int int1 = localDate0.size();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.weekyear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withSecondOfMinute((int) (short) 0);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.monthOfYear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusMonths(266);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = localDate0.compareTo((org.joda.time.ReadablePartial) localDateTime7);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test14924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14924");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        boolean boolean17 = dateTimeZone12.isLocalDateTimeGap(localDateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.weekyear();
        boolean boolean22 = dateTimeZone12.isLocalDateTimeGap(localDateTime20);
        long long24 = dateTimeZone12.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter25.withPivotYear((java.lang.Integer) 86399999);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (-1), chronology29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        org.joda.time.DateTime dateTime34 = localDateTime30.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = dateTime34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.hours();
        org.joda.time.DateTimeField dateTimeField37 = chronology35.secondOfMinute();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (-1), chronology39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.weekyear();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.minusHours((-1));
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.lang.String str45 = dateTimeField37.getAsText((org.joda.time.ReadablePartial) localDateTime40, locale44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter27.withLocale(locale44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter27.withPivotYear((java.lang.Integer) 58);
        boolean boolean49 = dateTimeFormatter27.isParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter27.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter27.withPivotYear(16140003);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3L + "'", long24 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0" + "'", str45, "0");
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
    }

    @Test
    public void test14925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14925");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        org.joda.time.LocalTime localTime5 = localTime1.minusSeconds((int) (byte) 100);
        org.joda.time.Chronology chronology6 = localTime1.getChronology();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeField dateTimeField8 = chronology6.weekyear();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.lang.String str13 = locale12.toLanguageTag();
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.lang.String str15 = locale12.getDisplayScript(locale14);
        java.lang.String str16 = locale14.getVariant();
        java.lang.String str17 = dateTimeZone10.getName(0L, locale14);
        org.joda.time.Chronology chronology18 = chronology6.withZone(dateTimeZone10);
        org.joda.time.DurationField durationField19 = chronology6.minutes();
        long long22 = durationField19.add((long) 79, (-292275054L));
        org.joda.time.DurationFieldType durationFieldType23 = durationField19.getType();
        java.lang.String str24 = durationFieldType23.toString();
        java.lang.String str25 = durationFieldType23.getName();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "zh-TW" + "'", str13, "zh-TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.003" + "'", str17, "+00:00:00.003");
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-17536503239921L) + "'", long22 == (-17536503239921L));
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "minutes" + "'", str24, "minutes");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "minutes" + "'", str25, "minutes");
    }

    @Test
    public void test14926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14926");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        int int13 = dateTime9.getMinuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime9.withYearOfEra((int) 'u');
        org.joda.time.DateTime dateTime17 = dateTime15.plus((long) (-292275054));
        org.joda.time.DateTime.Property property18 = dateTime15.secondOfMinute();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (-1), chronology20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        org.joda.time.DateTime dateTime25 = localDateTime21.toDateTime(dateTimeZone23);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.DateTime dateTime28 = dateTime25.plus((long) 100);
        org.joda.time.DateTime.Property property29 = dateTime28.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime28.plus(readableDuration30);
        int int32 = dateTime31.getDayOfMonth();
        java.util.Locale locale34 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        java.lang.String str37 = locale34.getDisplayVariant(locale36);
        java.lang.String str38 = dateTime31.toString("365", locale36);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        long long41 = dateTimeZone39.previousTransition((long) 1);
        org.joda.time.DateTime dateTime42 = dateTime31.withZone(dateTimeZone39);
        org.joda.time.DateTime dateTime43 = dateTime15.toDateTime(dateTimeZone39);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (-1), chronology45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone49 = dateTimeZone48.toTimeZone();
        org.joda.time.DateTime dateTime50 = localDateTime46.toDateTime(dateTimeZone48);
        java.lang.String str51 = dateTime50.toString();
        org.joda.time.DateTime dateTime53 = dateTime50.plus((long) 100);
        org.joda.time.DateTime.Property property54 = dateTime53.yearOfCentury();
        java.util.Locale locale55 = java.util.Locale.GERMANY;
        java.util.Calendar calendar56 = dateTime53.toCalendar(locale55);
        java.util.Calendar calendar57 = dateTime15.toCalendar(locale55);
        org.joda.time.DateMidnight dateMidnight58 = dateTime15.toDateMidnight();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str26, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "365" + "'", str38, "365");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str51, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar57);
// flaky:         org.junit.Assert.assertEquals(calendar57.toString(), "java.util.GregorianCalendar[time=-58475001599901,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=117,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateMidnight58);
    }

    @Test
    public void test14927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14927");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        int int13 = dateTime9.getMinuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime9.withYearOfEra((int) 'u');
        org.joda.time.DateTime dateTime17 = dateTime15.plus((long) (-292275054));
        int int18 = dateTime17.getMinuteOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (-1), chronology20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        org.joda.time.DateTime dateTime25 = localDateTime21.toDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime25.getZone();
        boolean boolean29 = dateTime17.isBefore((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime.Property property30 = dateTime25.weekOfWeekyear();
        org.joda.time.DateTime dateTime31 = property30.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 888 + "'", int18 == 888);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test14928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14928");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setTime(100L);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.yearOfCentury();
        int int5 = mutableDateTime1.getYearOfEra();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.millis();
        mutableDateTime1.add(durationFieldType6, (int) (short) 1);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.getMutableDateTime();
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
    }

    @Test
    public void test14929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14929");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        long long2 = mutableDateTime1.getMillis();
        java.lang.Object obj3 = mutableDateTime1.clone();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-1), chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDateTime6.toDateTime(dateTimeZone8);
        int int12 = dateTimeZone8.getOffsetFromLocal((long) (byte) 10);
        long long14 = dateTimeZone8.nextTransition((long) 59);
        mutableDateTime1.setZone(dateTimeZone8);
        int int16 = mutableDateTime1.getYearOfCentury();
        java.lang.String str18 = mutableDateTime1.toString("00:00:00.005");
        mutableDateTime1.addYears(999);
        mutableDateTime1.setMillisOfSecond(59);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime1.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        mutableDateTime1.add(readablePeriod25, 54402);
        mutableDateTime1.setWeekyear(25);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "1970-01-01T00:00:00.002+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "1970-01-01T00:00:00.002+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 59L + "'", long14 == 59L);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 70 + "'", int16 == 70);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "00:00:00.005" + "'", str18, "00:00:00.005");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test14930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14930");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minusMillis(1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.withMillisOfDay(31);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime2.withWeekOfWeekyear(22);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.withDurationAdded(readableDuration13, 1969);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        org.joda.time.DateTime dateTime24 = localDateTime20.toDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.hours();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.secondOfMinute();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (-1), chronology29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.weekyear();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.minusHours((-1));
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = dateTimeField27.getAsText((org.joda.time.ReadablePartial) localDateTime30, locale34);
        int int37 = dateTimeField27.getLeapAmount((long) (-1));
        int int38 = mutableDateTime17.get(dateTimeField27);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean40 = mutableDateTime17.isSupported(dateTimeFieldType39);
        int int41 = localDateTime15.indexOf(dateTimeFieldType39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime15.minusMonths(54702654);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0" + "'", str35, "0");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 9 + "'", int38 == 9);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(localDateTime43);
    }

    @Test
    public void test14931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14931");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder5.appendYear((int) (short) 1, 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder5.appendDayOfWeekShortText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder5.appendHalfdayOfDayText();
        boolean boolean11 = dateTimeFormatterBuilder10.canBuildFormatter();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap12 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder10.appendTimeZoneName(strMap12);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder13.appendTimeZoneName();
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = null;
        org.joda.time.format.DateTimeParser dateTimeParser16 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter15, dateTimeParser16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        org.joda.time.DateTime dateTime24 = localDateTime20.toDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter17.withChronology(chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (-1), chronology30);
        boolean boolean32 = dateTimeZone27.isLocalDateTimeGap(localDateTime31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) (-1), chronology34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.weekyear();
        boolean boolean37 = dateTimeZone27.isLocalDateTimeGap(localDateTime35);
        long long39 = dateTimeZone27.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter17.withZone(dateTimeZone27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter40.withPivotYear(2022);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter40.withPivotYear((java.lang.Integer) 33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter44.withOffsetParsed();
        java.util.Locale locale46 = dateTimeFormatter44.getLocale();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder47 = dateTimeFormatterBuilder13.append(dateTimeFormatter44);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder48 = dateTimeFormatterBuilder47.appendTimeZoneName();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder49 = dateTimeFormatterBuilder48.appendDayOfWeekShortText();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 3L + "'", long39 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNull(locale46);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder47);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder48);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder49);
    }

    @Test
    public void test14932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14932");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DurationField durationField9 = chronology7.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        long long14 = chronology7.add(readablePeriod11, (long) 31, 69);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (-1), chronology16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.weekyear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withSecondOfMinute((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusYears(0);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withPeriodAdded(readablePeriod23, 33);
        int[] intArray27 = chronology7.get((org.joda.time.ReadablePartial) localDateTime22, 315532800000L);
        org.joda.time.DateTimeField dateTimeField28 = chronology7.era();
        int int30 = dateTimeField28.getLeapAmount((long) 1);
        java.lang.String str32 = dateTimeField28.getAsText((-1L));
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 31L + "'", long14 == 31L);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(intArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[1980, 1, 1, 3]");
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "AD" + "'", str32, "AD");
    }

    @Test
    public void test14933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14933");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendMonthOfYearText();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getRangeDurationType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder4.appendShortText(dateTimeFieldType5);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder7.appendSecondOfDay(0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder7.appendTwoDigitYear(1439);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder11.appendEraText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder11.appendTimeZoneId();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder11.appendLiteral("2022-02-18T06:00:00.326+00:00:00.003");
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime19 = localTime17.minusSeconds((int) (short) 10);
        int int20 = localTime17.getMinuteOfHour();
        org.joda.time.LocalTime.Property property21 = localTime17.hourOfDay();
        org.joda.time.LocalTime localTime22 = property21.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField23 = property21.getField();
        org.joda.time.LocalTime localTime24 = property21.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime25 = property21.withMinimumValue();
        org.joda.time.LocalTime.Property property26 = localTime25.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = property26.getFieldType();
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType27.getDurationType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder11.appendFraction(dateTimeFieldType27, 54749, 1599000);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
    }

    @Test
    public void test14934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14934");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(3599, 50, 971);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3599 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14935");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime2.millisOfSecond();
        java.util.Locale locale9 = java.util.Locale.JAPANESE;
        java.lang.String str10 = property8.getAsShortText(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property8.addToCopy((long) '4');
        org.joda.time.LocalDateTime localDateTime13 = property8.getLocalDateTime();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2" + "'", str10, "2");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test14936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14936");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder5.appendYear((int) (short) 1, 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder5.appendDayOfWeekShortText();
        boolean boolean10 = dateTimeFormatterBuilder5.canBuildParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder5.appendTwoDigitWeekyear(10, true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
    }

    @Test
    public void test14937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14937");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder5.appendYear((int) (short) 1, 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder8.appendMinuteOfHour(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder10.appendFixedSignedDecimal(dateTimeFieldType11, 31);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder13.appendYearOfCentury(999, (int) (byte) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder16.appendWeekOfWeekyear(86399999);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder16.appendTimeZoneName();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) (-1));
        org.joda.time.DateTime dateTime23 = dateTime21.plusWeeks(5);
        org.joda.time.DateTime dateTime25 = dateTime23.plusDays(3123);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (-1), chronology27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone31 = dateTimeZone30.toTimeZone();
        org.joda.time.DateTime dateTime32 = localDateTime28.toDateTime(dateTimeZone30);
        org.joda.time.Chronology chronology33 = dateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.secondOfDay();
        org.joda.time.DurationField durationField35 = chronology33.minutes();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        long long40 = chronology33.add(readablePeriod37, (long) 31, 69);
        org.joda.time.DateTimeField dateTimeField41 = chronology33.hourOfDay();
        org.joda.time.DateTime dateTime42 = dateTime23.toDateTime(chronology33);
        int int43 = dateTime42.getWeekOfWeekyear();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (-1), chronology45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.weekyear();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withSecondOfMinute((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.plusYears(0);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime46.minusDays((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withMillisOfDay(4);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.plus(readablePeriod57);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((long) (-1), chronology60);
        org.joda.time.LocalDateTime.Property property62 = localDateTime61.dayOfYear();
        org.joda.time.DurationField durationField63 = property62.getLeapDurationField();
        org.joda.time.Interval interval64 = property62.toInterval();
        long long65 = property62.remainder();
        java.util.Locale locale67 = new java.util.Locale("hi!");
        int int68 = property62.getMaximumShortTextLength(locale67);
        org.joda.time.LocalDateTime localDateTime70 = property62.addToCopy((long) 'u');
        org.joda.time.DateTimeField dateTimeField71 = property62.getField();
        org.joda.time.LocalDateTime localDateTime73 = property62.addToCopy(97000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = property62.getFieldType();
        int int75 = localDateTime53.get(dateTimeFieldType74);
        int int76 = dateTime42.get(dateTimeFieldType74);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder78 = dateTimeFormatterBuilder16.appendFixedDecimal(dateTimeFieldType74, 71);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 31L + "'", long40 == 31L);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 6 + "'", int43 == 6);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNull(durationField63);
        org.junit.Assert.assertNotNull(interval64);
// flaky:         org.junit.Assert.assertTrue("'" + long65 + "' != '" + 2L + "'", long65 == 2L);
        org.junit.Assert.assertEquals(locale67.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 3 + "'", int68 == 3);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 266 + "'", int75 == 266);
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 36 + "'", int76 == 36);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder78);
    }

    @Test
    public void test14938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14938");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(36, (-2526), 30849, 451, 8, 908, 292277076);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 451 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14939");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.Chronology chronology9 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfWeek();
        org.joda.time.DurationField durationField11 = chronology9.seconds();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology9);
        org.joda.time.DateTimeField dateTimeField13 = chronology9.clockhourOfDay();
        java.util.Locale locale15 = java.util.Locale.CHINA;
        java.lang.String str16 = dateTimeField13.getAsText(22, locale15);
        java.util.Locale locale17 = java.util.Locale.ROOT;
        java.lang.String str18 = locale17.toLanguageTag();
        int int19 = dateTimeField13.getMaximumTextLength(locale17);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime21.set(dateTimeFieldType22, (-292275054));
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime21.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType26.getField(chronology27);
        boolean boolean30 = dateTimeField28.isLeap(100L);
        mutableDateTime21.setRounding(dateTimeField28);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (-1), chronology35);
        boolean boolean37 = dateTimeZone32.isLocalDateTimeGap(localDateTime36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property40 = localDateTime36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime36.withSecondOfMinute((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime36.withDurationAdded(readableDuration43, (int) 'u');
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withMonthOfYear(10);
        java.util.Locale locale48 = java.util.Locale.JAPANESE;
        java.lang.String str49 = dateTimeField28.getAsText((org.joda.time.ReadablePartial) localDateTime45, locale48);
        java.lang.String str51 = locale48.getExtension('u');
        java.lang.String str52 = locale17.getDisplayLanguage(locale48);
        java.lang.String str53 = locale48.getISO3Country();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "22" + "'", str16, "22");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "und" + "'", str18, "und");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1970" + "'", str49, "1970");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
    }

    @Test
    public void test14940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14940");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime9.toMutableDateTime();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime9.minus(readableDuration14);
        org.joda.time.DateTime dateTime17 = dateTime9.plusMonths(8);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (short) -1);
        long long21 = mutableDateTime20.getMillis();
        java.lang.Object obj22 = mutableDateTime20.clone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (-1), chronology24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTime dateTime29 = localDateTime25.toDateTime(dateTimeZone27);
        int int31 = dateTimeZone27.getOffsetFromLocal((long) (byte) 10);
        long long33 = dateTimeZone27.nextTransition((long) 59);
        mutableDateTime20.setZone(dateTimeZone27);
        org.joda.time.DateTime dateTime35 = org.joda.time.DateTime.now(dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) 2023, dateTimeZone27);
        org.joda.time.DateTime dateTime37 = dateTime17.toDateTime(dateTimeZone27);
        org.joda.time.DateTime.Property property38 = dateTime17.dayOfWeek();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNotNull(obj22);
// flaky:         org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.002+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.002+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 59L + "'", long33 == 59L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test14941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14941");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTimeField dateTimeField1 = mutableDateTime0.getRoundingField();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.dayOfWeek();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime6 = localTime4.minusSeconds((int) (short) 10);
        int int7 = localTime4.getMinuteOfHour();
        org.joda.time.LocalTime.Property property8 = localTime4.hourOfDay();
        org.joda.time.LocalTime localTime9 = property8.withMaximumValue();
        org.joda.time.DateTime dateTime10 = localTime9.toDateTimeToday();
        long long11 = property2.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.DateTime.Property property13 = dateTime10.property(dateTimeFieldType12);
        org.joda.time.DateTime dateTime14 = property13.roundFloorCopy();
        org.joda.time.DateTime dateTime15 = property13.withMaximumValue();
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfWeek();
        org.joda.time.DateTime dateTime17 = property16.getDateTime();
        org.junit.Assert.assertNull(dateTimeField1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test14942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14942");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusSeconds(1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.yearOfEra();
        int int9 = property8.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime10 = property8.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 292278993 + "'", int9 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test14943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14943");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.minutes();
        java.lang.String str1 = durationFieldType0.toString();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "minutes" + "'", str1, "minutes");
    }

    @Test
    public void test14944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14944");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        java.lang.Object obj2 = mutableDateTime1.clone();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.weekyear();
        mutableDateTime1.setMillis((long) 292278993);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime1.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.secondOfMinute();
        mutableDateTime10.setTime((org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        boolean boolean21 = dateTimeZone16.isLocalDateTimeGap(localDateTime20);
        java.lang.String str23 = dateTimeZone16.getName((long) 4);
        mutableDateTime13.setZoneRetainFields(dateTimeZone16);
        java.lang.String str25 = dateTimeZone16.toString();
        mutableDateTime1.setZone(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime28.set(dateTimeFieldType29, (-292275054));
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime28.yearOfEra();
        org.joda.time.DurationField durationField33 = property32.getDurationField();
        org.joda.time.MutableDateTime mutableDateTime35 = property32.set(2);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime37.set(dateTimeFieldType38, (-292275054));
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        mutableDateTime37.add(readablePeriod41, 4);
        mutableDateTime37.addWeekyears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime37.yearOfCentury();
        boolean boolean47 = mutableDateTime35.isBefore((org.joda.time.ReadableInstant) mutableDateTime37);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        mutableDateTime37.add(readablePeriod48, 54397508);
        boolean boolean51 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) mutableDateTime37);
        org.joda.time.format.DateTimePrinter dateTimePrinter52 = null;
        org.joda.time.format.DateTimeParser dateTimeParser53 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter52, dateTimeParser53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) (-1), chronology56);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone60 = dateTimeZone59.toTimeZone();
        org.joda.time.DateTime dateTime61 = localDateTime57.toDateTime(dateTimeZone59);
        org.joda.time.Chronology chronology62 = dateTime61.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter54.withChronology(chronology62);
        org.joda.time.DateTimeField dateTimeField64 = chronology62.monthOfYear();
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now(chronology62);
        org.joda.time.DateTimeField dateTimeField66 = chronology62.clockhourOfHalfday();
        org.joda.time.DurationField durationField67 = chronology62.days();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((long) (-1), chronology69);
        org.joda.time.LocalDateTime.Property property71 = localDateTime70.weekyear();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime70.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime75 = localDateTime70.plusWeeks((int) (short) 1);
        int[] intArray77 = chronology62.get((org.joda.time.ReadablePartial) localDateTime75, (long) 3600000);
        org.joda.time.DateTimeField dateTimeField78 = chronology62.centuryOfEra();
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(chronology62);
        mutableDateTime1.setChronology(chronology62);
        org.joda.time.DateTimeField dateTimeField81 = chronology62.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(obj2);
// flaky:         org.junit.Assert.assertEquals(obj2.toString(), "2022-02-21T15:13:10.238+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "2022-02-21T15:13:10.238+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "2022-02-21T15:13:10.238+00:00:00.003");
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.003" + "'", str23, "+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.003" + "'", str25, "+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(intArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[1970, 1, 1, 3600003]");
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField81);
    }

    @Test
    public void test14945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14945");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        java.lang.String str7 = localTime6.toString();
        org.joda.time.LocalTime localTime9 = localTime6.minusMillis(0);
        org.joda.time.LocalTime.Property property10 = localTime9.minuteOfHour();
        org.joda.time.LocalTime localTime12 = property10.addCopy((-1L));
        org.joda.time.LocalTime.Property property13 = localTime12.secondOfMinute();
        org.joda.time.LocalTime localTime15 = property13.addCopy((-506L));
        org.joda.time.LocalTime localTime17 = property13.addNoWrapToCopy(0);
        org.joda.time.LocalTime localTime18 = property13.withMaximumValue();
        org.joda.time.LocalTime localTime20 = property13.addCopy(54554);
        org.joda.time.LocalTime localTime21 = property13.withMaximumValue();
        org.joda.time.LocalTime localTime23 = property13.addWrapFieldToCopy(54459247);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "23:00:00.003" + "'", str7, "23:00:00.003");
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
    }

    @Test
    public void test14946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14946");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder2 = builder0.clear();
        java.util.Locale locale3 = builder0.build();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-1), chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDateTime6.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.hours();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.secondOfMinute();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.weekyear();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.minusHours((-1));
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.lang.String str21 = dateTimeField13.getAsText((org.joda.time.ReadablePartial) localDateTime16, locale20);
        java.util.Locale.Builder builder22 = builder0.setLocale(locale20);
        java.util.Locale.Builder builder23 = builder22.clearExtensions();
        java.util.Locale.Builder builder24 = builder23.clear();
        java.util.Locale.Builder builder25 = builder23.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder28 = builder23.setExtension('x', "2022-02-23T23:43:23.794+56:35");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 23T23:43:23.794+56:35 [at index 8]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0" + "'", str21, "0");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test14947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14947");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDateTime4.toDateTime(dateTimeZone6);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.plus((long) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfCentury();
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.util.Calendar calendar14 = dateTime11.toCalendar(locale13);
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale15.toLanguageTag();
        java.lang.String str17 = locale13.getDisplayCountry(locale15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology1, locale13, (java.lang.Integer) 38);
        int int20 = dateTimeParserBucket19.getOffset();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (-1), chronology24);
        boolean boolean26 = dateTimeZone21.isLocalDateTimeGap(localDateTime25);
        java.lang.String str28 = dateTimeZone21.getName((long) 4);
        dateTimeParserBucket19.setZone(dateTimeZone21);
        org.joda.time.format.DateTimePrinter dateTimePrinter30 = null;
        org.joda.time.format.DateTimeParser dateTimeParser31 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter30, dateTimeParser31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) (-1), chronology34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone38 = dateTimeZone37.toTimeZone();
        org.joda.time.DateTime dateTime39 = localDateTime35.toDateTime(dateTimeZone37);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter32.withChronology(chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.monthOfYear();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.clockhourOfHalfday();
        org.joda.time.DurationField durationField44 = chronology40.halfdays();
        org.joda.time.DateTimeField dateTimeField45 = chronology40.secondOfDay();
        dateTimeParserBucket19.saveField(dateTimeField45, 2022);
        org.joda.time.Chronology chronology48 = dateTimeParserBucket19.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.monthOfYear();
        org.joda.time.Chronology chronology50 = chronology48.withUTC();
        org.joda.time.DurationField durationField51 = chronology48.minutes();
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str9, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh-TW" + "'", str16, "zh-TW");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u5fb7\u570b" + "'", str17, "\u5fb7\u570b");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.003" + "'", str28, "+00:00:00.003");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
    }

    @Test
    public void test14948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14948");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        org.joda.time.LocalTime localTime8 = localTime6.minusHours((int) '4');
        org.joda.time.LocalTime localTime10 = localTime8.plusHours(3123);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalTime localTime13 = localTime8.withPeriodAdded(readablePeriod11, 18);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType14.getField(chronology15);
        int int18 = dateTimeField16.getLeapAmount((long) (byte) 1);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 1);
        org.joda.time.LocalDate localDate22 = localDate20.withDayOfYear((int) (byte) 10);
        org.joda.time.LocalDate localDate24 = localDate22.plusWeeks((-292275054));
        int int25 = dateTimeField16.getMaximumValue((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.dayOfWeek();
        java.lang.String str27 = dateTimeFieldType26.toString();
        boolean boolean28 = localDate22.isSupported(dateTimeFieldType26);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = localTime13.get(dateTimeFieldType26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'dayOfWeek' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 292278993 + "'", int25 == 292278993);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "dayOfWeek" + "'", str27, "dayOfWeek");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test14949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14949");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        long long5 = dateTimeZone0.convertLocalToUTC(10L, false, (long) 3);
        java.util.Locale locale7 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str8 = dateTimeZone0.getShortName(0L, locale7);
        int int10 = dateTimeZone0.getOffsetFromLocal((long) 25);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone0);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(dateTimeZone0);
        long long15 = dateTimeZone0.convertLocalToUTC(18628L, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 7L + "'", long5 == 7L);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.003" + "'", str8, "+00:00:00.003");
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + 18625L + "'", long15 == 18625L);
    }

    @Test
    public void test14950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14950");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder5.appendYear((int) (short) 1, 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder8.appendDayOfWeekText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder8.appendClockhourOfDay(86390000);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder8.appendDayOfWeekText();
        dateTimeFormatterBuilder8.clear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (-1), chronology17);
        boolean boolean19 = dateTimeZone14.isLocalDateTimeGap(localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property22 = localDateTime18.dayOfYear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.minusHours((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (-1), chronology28);
        boolean boolean30 = dateTimeZone25.isLocalDateTimeGap(localDateTime29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.plus(readablePeriod31);
        int int33 = localDateTime29.getYearOfEra();
        int int34 = localDateTime29.getCenturyOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime.Property property36 = localDateTime29.property(dateTimeFieldType35);
        boolean boolean37 = localDateTime24.isSupported(dateTimeFieldType35);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = dateTimeFormatterBuilder8.appendSignedDecimal(dateTimeFieldType35, 907, 62);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap41 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = dateTimeFormatterBuilder40.appendTimeZoneName(strMap41);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder44 = dateTimeFormatterBuilder40.appendMillisOfDay(0);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1970 + "'", int33 == 1970);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 19 + "'", int34 == 19);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder40);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder42);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder44);
    }

    @Test
    public void test14951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14951");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        boolean boolean7 = property5.isLeap();
        org.joda.time.LocalTime localTime8 = property5.roundFloorCopy();
        org.joda.time.LocalTime localTime9 = property5.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime10 = property5.roundHalfEvenCopy();
        int int11 = property5.get();
        org.joda.time.LocalTime localTime12 = property5.getLocalTime();
        org.joda.time.Chronology chronology13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((java.lang.Object) property5, chronology13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.LocalTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test14952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14952");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setTime(100L);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.yearOfCentury();
        int int5 = mutableDateTime1.getYearOfEra();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.millis();
        mutableDateTime1.add(durationFieldType6, (int) (short) 1);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime12 = property9.add(52);
        int int13 = property9.getMaximumValue();
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7 + "'", int13 == 7);
    }

    @Test
    public void test14953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14953");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDateTime4.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.secondOfDay();
        org.joda.time.DurationField durationField11 = chronology9.minutes();
        org.joda.time.DurationField durationField12 = chronology9.minutes();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 292278993, chronology9);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(2022L, chronology9);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minus(readablePeriod15);
        int int17 = localDateTime14.getDayOfYear();
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test14954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14954");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.secondOfMinute();
        mutableDateTime2.setTime((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (-1), chronology11);
        boolean boolean13 = dateTimeZone8.isLocalDateTimeGap(localDateTime12);
        java.lang.String str15 = dateTimeZone8.getName((long) 4);
        mutableDateTime5.setZoneRetainFields(dateTimeZone8);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now(dateTimeZone8);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 3870, dateTimeZone8);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.003" + "'", str15, "+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test14955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14955");
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property7 = localDate5.property(dateTimeFieldType6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        boolean boolean9 = localDate5.isSupported(dateTimeFieldType8);
        org.joda.time.LocalDate.Property property10 = localDate5.era();
        org.joda.time.LocalDate.Property property11 = localDate5.dayOfMonth();
        org.joda.time.LocalDate localDate13 = localDate5.minusWeeks(2000);
        int int15 = localDate5.getValue((int) (short) 0);
        org.joda.time.LocalDate localDate17 = localDate5.plusDays(1439);
        org.joda.time.LocalDate.Property property18 = localDate5.centuryOfEra();
        org.joda.time.LocalDate localDate19 = property18.withMaximumValue();
        org.joda.time.LocalDate localDate21 = property18.addWrapFieldToCopy((-19044));
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        long long26 = dateTimeZone24.previousTransition((long) 1);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) (byte) -1, dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(3600000L, dateTimeZone24);
        long long30 = dateTimeZone24.previousTransition((long) 9);
        org.joda.time.DateTime dateTime31 = localDate21.toDateTimeAtStartOfDay(dateTimeZone24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(86390003, 27300000, 25, 25, (-40), dateTimeZone24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 25 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 9L + "'", long30 == 9L);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test14956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14956");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        boolean boolean7 = property5.isLeap();
        org.joda.time.LocalTime localTime8 = property5.roundFloorCopy();
        org.joda.time.LocalTime localTime10 = localTime8.plusHours((int) (short) 1);
        org.joda.time.LocalTime.Property property11 = localTime8.millisOfSecond();
        org.joda.time.LocalTime localTime13 = localTime8.withMillisOfSecond(906);
        org.joda.time.Chronology chronology14 = localTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.minuteOfHour();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test14957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14957");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) (byte) 1);
        long long6 = dateTimeField2.remainder((long) (-292275054));
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (-1), chronology8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minus(readablePeriod15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withMonthOfYear(1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusMinutes(292278993);
        int int21 = dateTimeField2.getMinimumValue((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime.Property property22 = localDateTime18.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withMillisOfDay(30);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minus(readableDuration25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.plusMinutes(1986);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (-1), chronology30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone34 = dateTimeZone33.toTimeZone();
        org.joda.time.DateTime dateTime35 = localDateTime31.toDateTime(dateTimeZone33);
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.secondOfDay();
        org.joda.time.DurationField durationField38 = chronology36.minutes();
        long long40 = durationField38.getMillis(5);
        int int43 = durationField38.getValue((long) (byte) -1, (long) 3);
        org.joda.time.DurationFieldType durationFieldType44 = durationField38.getType();
        long long47 = durationField38.subtract((long) 31, 35);
        org.joda.time.DurationFieldType durationFieldType48 = durationField38.getType();
        java.lang.String str49 = durationFieldType48.toString();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime28.withFieldAdded(durationFieldType48, 54493);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 31243724949L + "'", long6 == 31243724949L);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-292275054) + "'", int21 == (-292275054));
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 300000L + "'", long40 == 300000L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-2099969L) + "'", long47 == (-2099969L));
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "minutes" + "'", str49, "minutes");
        org.junit.Assert.assertNotNull(localDateTime51);
    }

    @Test
    public void test14958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14958");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setTime(100L);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.yearOfCentury();
        int int5 = mutableDateTime1.getYearOfEra();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.millis();
        mutableDateTime1.add(durationFieldType6, (int) (short) 1);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.minuteOfDay();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (-1), chronology11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        org.joda.time.DateTime dateTime16 = localDateTime12.toDateTime(dateTimeZone14);
        java.lang.String str17 = dateTime16.toString();
        org.joda.time.DateTime dateTime19 = dateTime16.plus((long) 100);
        org.joda.time.DateTime dateTime21 = dateTime19.minusSeconds(0);
        org.joda.time.DateTime dateTime23 = dateTime21.withHourOfDay(1);
        org.joda.time.DateTime.Property property24 = dateTime23.monthOfYear();
        org.joda.time.DateTime dateTime26 = property24.addToCopy((long) (-292275054));
        org.joda.time.LocalDateTime localDateTime27 = dateTime26.toLocalDateTime();
        org.joda.time.DateTime dateTime29 = dateTime26.minusMonths((-2033));
        org.joda.time.DateTime dateTime31 = dateTime26.withCenturyOfEra(2023);
        org.joda.time.DateTime dateTime32 = dateTime26.toDateTimeISO();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime26);
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str17, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test14959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14959");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.DurationField durationField15 = chronology10.eras();
        org.joda.time.DateTimeField dateTimeField16 = chronology10.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology10.weekyearOfCentury();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test14960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14960");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.dayOfYear();
        org.joda.time.LocalDate.Property property8 = localDate2.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate10 = property8.setCopy("n. Chr.");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"n. Chr.\" for era is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test14961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14961");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder0.appendWeekyear(2000, 59);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder0.appendDayOfWeek(5);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType11.getRangeDurationType();
        java.lang.String str13 = dateTimeFieldType11.getName();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType11, 99, (int) (short) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder16.appendMillisOfDay((int) ' ');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder16.appendYearOfCentury(2525, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((java.lang.Object) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Byte");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "minuteOfHour" + "'", str13, "minuteOfHour");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
    }

    @Test
    public void test14962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14962");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.Interval interval5 = property3.toInterval();
        long long6 = property3.remainder();
        java.lang.String str7 = property3.toString();
        org.joda.time.LocalDateTime localDateTime9 = property3.setCopy((int) (short) 1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.year();
        int int11 = localDateTime9.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        java.util.GregorianCalendar gregorianCalendar14 = mutableDateTime13.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(dateTimeZone15);
        java.util.GregorianCalendar gregorianCalendar17 = mutableDateTime16.toGregorianCalendar();
        boolean boolean18 = mutableDateTime13.isAfter((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime16.getZone();
        mutableDateTime16.addMillis(48);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (short) -1);
        long long24 = mutableDateTime23.getMillis();
        java.lang.Object obj25 = mutableDateTime23.clone();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (-1), chronology27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone31 = dateTimeZone30.toTimeZone();
        org.joda.time.DateTime dateTime32 = localDateTime28.toDateTime(dateTimeZone30);
        int int34 = dateTimeZone30.getOffsetFromLocal((long) (byte) 10);
        long long36 = dateTimeZone30.nextTransition((long) 59);
        mutableDateTime23.setZone(dateTimeZone30);
        mutableDateTime16.setZone(dateTimeZone30);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime16.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime16.property(dateTimeFieldType40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime9.withField(dateTimeFieldType40, 58);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusMinutes(909);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withDayOfYear(54650);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 54650 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[dayOfYear]" + "'", str7, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(gregorianCalendar14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(gregorianCalendar17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-1L) + "'", long24 == (-1L));
        org.junit.Assert.assertNotNull(obj25);
// flaky:         org.junit.Assert.assertEquals(obj25.toString(), "1970-01-01T00:00:00.002+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj25), "1970-01-01T00:00:00.002+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj25), "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 59L + "'", long36 == 59L);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
    }

    @Test
    public void test14963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14963");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.add((long) 100);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add((long) 4);
        org.joda.time.MutableDateTime mutableDateTime6 = property3.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Chronology chronology9 = null;
        mutableDateTime8.setChronology(chronology9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTimeField dateTimeField13 = dateTimeFieldType11.getField(chronology12);
        mutableDateTime8.setRounding(dateTimeField13, (int) (short) 1);
        boolean boolean16 = dateTimeField13.isSupported();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = dateTimeField13.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = dateTimeField13.getType();
        java.lang.String str19 = dateTimeField13.toString();
        mutableDateTime6.setRounding(dateTimeField13);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime6.monthOfYear();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime6.weekOfWeekyear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "DateTimeField[year]" + "'", str19, "DateTimeField[year]");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test14964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14964");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYear(86399999);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = localDateTime4.toString("Property[weekyear]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test14965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14965");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale1 = null;
        java.lang.String str2 = locale0.getDisplayVariant(locale1);
        java.lang.Object obj3 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "zh_TW");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "zh_TW");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "zh_TW");
    }

    @Test
    public void test14966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14966");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.secondOfMinute();
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime4);
        int int7 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.addWeeks(35);
        org.joda.time.DateTimeField dateTimeField10 = mutableDateTime1.getRoundingField();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (-1), chronology13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        org.joda.time.DateTime dateTime18 = localDateTime14.toDateTime(dateTimeZone16);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.hours();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.dayOfMonth();
        int int24 = dateTimeField22.getMaximumValue(42L);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (-1), chronology26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.weekyear();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property33 = localDateTime27.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime27.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withWeekOfWeekyear(5);
        int int38 = dateTimeField22.getMinimumValue((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology39);
        org.joda.time.format.DateTimePrinter dateTimePrinter41 = null;
        org.joda.time.format.DateTimeParser dateTimeParser42 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter41, dateTimeParser42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (-1), chronology45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone49 = dateTimeZone48.toTimeZone();
        org.joda.time.DateTime dateTime50 = localDateTime46.toDateTime(dateTimeZone48);
        org.joda.time.Chronology chronology51 = dateTime50.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter43.withChronology(chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.monthOfYear();
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now(chronology51);
        org.joda.time.DateTimeField dateTimeField55 = chronology51.weekOfWeekyear();
        org.joda.time.DurationField durationField56 = chronology51.centuries();
        org.joda.time.DateTime dateTime57 = dateTime40.toDateTime(chronology51);
        org.joda.time.DateTimeField dateTimeField58 = chronology51.era();
        org.joda.time.LocalDateTime localDateTime59 = org.joda.time.LocalDateTime.now(chronology51);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withDayOfYear(21);
        java.util.Locale locale64 = new java.util.Locale("");
        java.lang.String str65 = locale64.getDisplayLanguage();
        java.lang.String str66 = dateTimeField22.getAsText((org.joda.time.ReadablePartial) localDateTime59, 34, locale64);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str67 = mutableDateTime1.toString("0097-01-01T00:00:00.000Z", locale64);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(dateTimeField10);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 31 + "'", int24 == 31);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "34" + "'", str66, "34");
    }

    @Test
    public void test14967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14967");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendMonthOfYearText();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getRangeDurationType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder4.appendShortText(dateTimeFieldType5);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder7.appendSecondOfDay(0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder7.appendTwoDigitYear(1439);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder11.appendTwoDigitYear(99, true);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder14.appendDayOfWeek(4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder16.appendTimeZoneId();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder17.appendHourOfHalfday(1438);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
    }

    @Test
    public void test14968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14968");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 1);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear((int) (byte) 10);
        org.joda.time.LocalDate localDate5 = localDate3.plusWeeks((-292275054));
        org.joda.time.LocalDate localDate7 = localDate5.withYearOfEra(10);
        org.joda.time.LocalDate localDate9 = localDate5.withWeekyear(31);
        int int10 = localDate5.getEra();
        int int11 = localDate5.getDayOfYear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 219 + "'", int11 == 219);
    }

    @Test
    public void test14969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14969");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setTime(100L);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.yearOfCentury();
        int int5 = mutableDateTime1.getYearOfEra();
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.millis();
        mutableDateTime1.add(durationFieldType6, (int) (short) 1);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.minuteOfDay();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (-1), chronology13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        org.joda.time.DateTime dateTime18 = localDateTime14.toDateTime(dateTimeZone16);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.DateTime dateTime21 = dateTime18.plus((long) 100);
        org.joda.time.DateTime.Property property22 = dateTime21.yearOfCentury();
        java.util.Locale locale23 = java.util.Locale.GERMANY;
        java.util.Calendar calendar24 = dateTime21.toCalendar(locale23);
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.lang.String str26 = locale25.toLanguageTag();
        java.lang.String str27 = locale23.getDisplayCountry(locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology11, locale23, (java.lang.Integer) 38);
        int int30 = dateTimeParserBucket29.getOffset();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone32 = dateTimeZone31.toTimeZone();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) (-1), chronology34);
        boolean boolean36 = dateTimeZone31.isLocalDateTimeGap(localDateTime35);
        java.lang.String str38 = dateTimeZone31.getName((long) 4);
        dateTimeParserBucket29.setZone(dateTimeZone31);
        mutableDateTime1.setZone(dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) (short) -1);
        long long43 = mutableDateTime42.getMillis();
        java.lang.Object obj44 = mutableDateTime42.clone();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) (-1), chronology46);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone50 = dateTimeZone49.toTimeZone();
        org.joda.time.DateTime dateTime51 = localDateTime47.toDateTime(dateTimeZone49);
        int int53 = dateTimeZone49.getOffsetFromLocal((long) (byte) 10);
        long long55 = dateTimeZone49.nextTransition((long) 59);
        mutableDateTime42.setZone(dateTimeZone49);
        mutableDateTime1.setZone(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone58 = mutableDateTime1.getZone();
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str19, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "zh-TW" + "'", str26, "zh-TW");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u5fb7\u570b" + "'", str27, "\u5fb7\u570b");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.003" + "'", str38, "+00:00:00.003");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-1L) + "'", long43 == (-1L));
        org.junit.Assert.assertNotNull(obj44);
// flaky:         org.junit.Assert.assertEquals(obj44.toString(), "1970-01-01T00:00:00.002+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "1970-01-01T00:00:00.002+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime51);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 59L + "'", long55 == 59L);
        org.junit.Assert.assertNotNull(dateTimeZone58);
    }

    @Test
    public void test14970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14970");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime1.set(dateTimeFieldType2, (-292275054));
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutableDateTime1.add(readablePeriod5, 4);
        int int8 = mutableDateTime1.getMillisOfDay();
        int int9 = mutableDateTime1.getCenturyOfEra();
        java.util.Date date10 = mutableDateTime1.toDate();
        mutableDateTime1.setSecondOfDay(10);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime15.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime15.add(readableDuration18, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType21.getDurationType();
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType21.getRangeDurationType();
        mutableDateTime15.add(durationFieldType23, (int) (short) 1);
        org.joda.time.format.DateTimePrinter dateTimePrinter26 = null;
        org.joda.time.format.DateTimeParser dateTimeParser27 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter26, dateTimeParser27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (-1), chronology30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone34 = dateTimeZone33.toTimeZone();
        org.joda.time.DateTime dateTime35 = localDateTime31.toDateTime(dateTimeZone33);
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter28.withChronology(chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.monthOfYear();
        org.joda.time.DateTimeField dateTimeField39 = chronology36.clockhourOfHalfday();
        org.joda.time.DurationField durationField40 = chronology36.days();
        org.joda.time.DateTimeField dateTimeField41 = chronology36.secondOfDay();
        org.joda.time.Chronology chronology42 = chronology36.withUTC();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.halfdayOfDay();
        org.joda.time.DurationField durationField44 = durationFieldType23.getField(chronology42);
        mutableDateTime1.add(durationFieldType23, 42);
        java.lang.String str47 = durationFieldType23.toString();
        java.lang.String str48 = durationFieldType23.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2922750 + "'", int9 == 2922750);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Sat Jul 20 00:00:00 GMT+00:00 292269054");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "years" + "'", str47, "years");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "years" + "'", str48, "years");
    }

    @Test
    public void test14971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14971");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        org.joda.time.DateTime.Property property13 = dateTime9.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = dateTime9.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMillis((int) 'a');
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withSecondOfMinute(0);
        int int19 = localDateTime16.getDayOfWeek();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (-1), chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.plusYears(0);
        org.joda.time.LocalDateTime.Property property27 = localDateTime22.dayOfWeek();
        boolean boolean28 = localDateTime16.equals((java.lang.Object) localDateTime22);
        org.joda.time.LocalDateTime.Property property29 = localDateTime22.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime31 = property29.addToCopy((long) 30);
        org.joda.time.LocalDateTime localDateTime32 = property29.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusMillis((-5599584));
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
    }

    @Test
    public void test14972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14972");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(1657380300000L);
    }

    @Test
    public void test14973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14973");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder5.appendYear((int) (short) 1, 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder8.appendMinuteOfHour(0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder8.appendMonthOfYear(3600000);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder12.appendYearOfEra(2022, 0);
        org.joda.time.format.DateTimePrinter dateTimePrinter16 = null;
        org.joda.time.format.DateTimeParser dateTimeParser17 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter16, dateTimeParser17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (-1), chronology20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        org.joda.time.DateTime dateTime25 = localDateTime21.toDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter18.withChronology(chronology26);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) (-1), chronology31);
        boolean boolean33 = dateTimeZone28.isLocalDateTimeGap(localDateTime32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (-1), chronology35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.weekyear();
        boolean boolean38 = dateTimeZone28.isLocalDateTimeGap(localDateTime36);
        long long40 = dateTimeZone28.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter18.withZone(dateTimeZone28);
        java.util.Locale locale42 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        java.util.Locale locale44 = java.util.Locale.GERMANY;
        java.lang.String str45 = locale42.getDisplayVariant(locale44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter18.withLocale(locale42);
        org.joda.time.Chronology chronology47 = dateTimeFormatter18.getChronolgy();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder48 = dateTimeFormatterBuilder12.append(dateTimeFormatter18);
        org.joda.time.format.DateTimePrinter dateTimePrinter50 = null;
        org.joda.time.format.DateTimeParser dateTimeParser51 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter50, dateTimeParser51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) (-1), chronology54);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone58 = dateTimeZone57.toTimeZone();
        org.joda.time.DateTime dateTime59 = localDateTime55.toDateTime(dateTimeZone57);
        org.joda.time.Chronology chronology60 = dateTime59.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter52.withChronology(chronology60);
        org.joda.time.DateTimeField dateTimeField62 = chronology60.monthOfYear();
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now(chronology60);
        org.joda.time.DateTimeField dateTimeField64 = chronology60.clockhourOfHalfday();
        org.joda.time.DurationField durationField65 = chronology60.days();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) (-1), chronology67);
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.weekyear();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime68.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime73 = localDateTime68.plusWeeks((int) (short) 1);
        int[] intArray75 = chronology60.get((org.joda.time.ReadablePartial) localDateTime73, (long) 3600000);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime((long) (-1), chronology77);
        org.joda.time.LocalDateTime.Property property79 = localDateTime78.dayOfYear();
        org.joda.time.DurationField durationField80 = property79.getLeapDurationField();
        org.joda.time.Interval interval81 = property79.toInterval();
        long long82 = property79.remainder();
        java.lang.String str83 = property79.toString();
        org.joda.time.LocalDateTime localDateTime85 = property79.setCopy((int) (short) 1);
        org.joda.time.DateTimeField dateTimeField86 = property79.getField();
        java.util.Locale locale88 = java.util.Locale.CHINA;
        java.lang.String str89 = dateTimeField86.getAsText((int) (short) 100, locale88);
        java.util.Set<java.lang.String> strSet90 = locale88.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket91 = new org.joda.time.format.DateTimeParserBucket(946684800000L, chronology60, locale88);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter92 = dateTimeFormatter18.withLocale(locale88);
        boolean boolean93 = dateTimeFormatter18.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter95 = dateTimeFormatter18.withPivotYear((java.lang.Integer) (-101));
        int int96 = dateTimeFormatter18.getDefaultYear();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 3L + "'", long40 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder48);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(timeZone58);
// flaky:         org.junit.Assert.assertEquals(timeZone58.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(intArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[1970, 1, 1, 3600003]");
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNull(durationField80);
        org.junit.Assert.assertNotNull(interval81);
// flaky:         org.junit.Assert.assertTrue("'" + long82 + "' != '" + 2L + "'", long82 == 2L);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Property[dayOfYear]" + "'", str83, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "100" + "'", str89, "100");
        org.junit.Assert.assertNotNull(strSet90);
        org.junit.Assert.assertNotNull(dateTimeFormatter92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 2000 + "'", int96 == 2000);
    }

    @Test
    public void test14974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14974");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-21T15:06:44.756+00:00:00.003");
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = null;
        org.joda.time.format.DateTimeParser dateTimeParser5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter4, dateTimeParser5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (-1), chronology8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTime dateTime13 = localDateTime9.toDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter6.withChronology(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.monthOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.clockhourOfHalfday();
        org.joda.time.DurationField durationField18 = chronology14.days();
        org.joda.time.DateTimeField dateTimeField19 = chronology14.secondOfDay();
        org.joda.time.Chronology chronology20 = chronology14.withUTC();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(259200004L, chronology20);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 82798033, chronology20);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        mutableDateTime1.add(readableDuration24, (-11));
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
    }

    @Test
    public void test14975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14975");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (-1), chronology8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTime dateTime13 = localDateTime9.toDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.secondOfDay();
        org.joda.time.Chronology chronology16 = chronology14.withUTC();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(1599003, 54736258, 54570, 3699000, 46240798, (-197), 999, chronology14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3699000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test14976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14976");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendMillisOfDay((int) '#');
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap8 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder7.appendTimeZoneShortName(strMap8);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder7.appendWeekyear(2032, (int) (short) 1);
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = dateTimeFormatterBuilder7.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder7.appendCenturyOfEra(575, 14);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder16.appendHalfdayOfDayText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder17.appendDayOfYear(162);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimePrinter13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
    }

    @Test
    public void test14977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14977");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        org.joda.time.LocalTime localTime5 = localTime1.minusSeconds((int) (byte) 100);
        org.joda.time.LocalTime localTime7 = localTime5.minusMinutes(2);
        org.joda.time.LocalTime localTime9 = localTime5.plusHours(31);
        org.joda.time.LocalTime localTime11 = localTime5.withMillisOfSecond(8);
        org.joda.time.LocalTime.Property property12 = localTime11.hourOfDay();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test14978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14978");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.Interval interval5 = property3.toInterval();
        long long6 = property3.remainder();
        java.lang.String str7 = property3.toString();
        org.joda.time.LocalDateTime localDateTime9 = property3.setCopy((int) (short) 1);
        int int10 = localDateTime9.getDayOfMonth();
        int int11 = localDateTime9.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.minusWeeks(49680003);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime9.withDayOfWeek(221);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 221 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[dayOfYear]" + "'", str7, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test14979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14979");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(153713980799997L);
        org.joda.time.LocalTime.Property property2 = localTime1.minuteOfHour();
        org.joda.time.LocalTime.Property property3 = localTime1.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        java.lang.String str6 = dateTimeField4.getAsText((long) 29247);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "247" + "'", str6, "247");
    }

    @Test
    public void test14980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14980");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime1.set(dateTimeFieldType2, (-292275054));
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.yearOfEra();
        mutableDateTime1.setYear((int) '#');
        mutableDateTime1.setYear(292278993);
        boolean boolean10 = mutableDateTime1.isAfterNow();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (-1), chronology12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        org.joda.time.DateTime dateTime17 = localDateTime13.toDateTime(dateTimeZone15);
        int int19 = dateTimeZone15.getOffsetFromLocal((long) (byte) 10);
        java.lang.String str20 = dateTimeZone15.getID();
        long long22 = dateTimeZone15.convertUTCToLocal(6122225L);
        org.joda.time.DateTime dateTime23 = mutableDateTime1.toDateTime(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00:00.003" + "'", str20, "+00:00:00.003");
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 6122228L + "'", long22 == 6122228L);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test14981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14981");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder5.appendYear((int) (short) 1, 100);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder8.appendMinuteOfHour(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder10.appendFixedSignedDecimal(dateTimeFieldType11, 31);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder13.appendYearOfCentury(999, (int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Chronology chronology19 = null;
        mutableDateTime18.setChronology(chronology19);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType21.getField(chronology22);
        mutableDateTime18.setRounding(dateTimeField23, (int) (short) 1);
        boolean boolean26 = dateTimeField23.isSupported();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = dateTimeField23.getType();
        java.lang.String str28 = dateTimeFieldType27.toString();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder16.appendDecimal(dateTimeFieldType27, 1969, 0);
        org.joda.time.format.DateTimePrinter dateTimePrinter32 = dateTimeFormatterBuilder16.toPrinter();
        int int33 = dateTimePrinter32.estimatePrintedLength();
        org.joda.time.format.DateTimeParser dateTimeParser34 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter32, dateTimeParser34);
        java.lang.Integer int36 = dateTimeFormatter35.getPivotYear();
        java.util.Locale locale37 = dateTimeFormatter35.getLocale();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "year" + "'", str28, "year");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertNotNull(dateTimePrinter32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 3123 + "'", int33 == 3123);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertNull(locale37);
    }

    @Test
    public void test14982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14982");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DurationField durationField9 = chronology7.minutes();
        org.joda.time.DurationField durationField10 = chronology7.weekyears();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology7.getZone();
        java.lang.String str12 = dateTimeZone11.getID();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.003" + "'", str12, "+00:00:00.003");
    }

    @Test
    public void test14983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14983");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusMinutes(292278993);
        org.joda.time.LocalDateTime.Property property8 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime.Property property9 = localDateTime2.dayOfYear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.minusHours(888);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (-1), chronology13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        org.joda.time.DateTime dateTime18 = localDateTime14.toDateTime(dateTimeZone16);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.DateTime dateTime21 = dateTime18.plus(readableDuration20);
        org.joda.time.DateTime dateTime23 = dateTime18.minusWeeks(10);
        org.joda.time.DateTime.Property property24 = dateTime18.hourOfDay();
        org.joda.time.DateTime dateTime25 = property24.withMaximumValue();
        org.joda.time.DateTime dateTime27 = property24.addToCopy((long) '4');
        org.joda.time.DateTime dateTime29 = property24.addWrapFieldToCopy(54397508);
        org.joda.time.DateTime dateTime31 = dateTime29.withCenturyOfEra(2630400);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone34 = dateTimeZone33.toTimeZone();
        long long38 = dateTimeZone33.convertLocalToUTC(10L, false, (long) 3);
        java.util.TimeZone timeZone39 = dateTimeZone33.toTimeZone();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(23L, dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withYear((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.withWeekyear(54460417);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) (-1), chronology46);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone50 = dateTimeZone49.toTimeZone();
        org.joda.time.DateTime dateTime51 = localDateTime47.toDateTime(dateTimeZone49);
        java.lang.String str52 = dateTime51.toString();
        org.joda.time.DateTime dateTime54 = dateTime51.plus((long) 100);
        org.joda.time.DateTime.Property property55 = dateTime54.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.DateTime dateTime57 = dateTime54.plus(readableDuration56);
        int int58 = dateTime57.getDayOfMonth();
        java.util.Locale locale60 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet61 = locale60.getUnicodeLocaleAttributes();
        java.util.Locale locale62 = java.util.Locale.GERMANY;
        java.lang.String str63 = locale60.getDisplayVariant(locale62);
        java.lang.String str64 = dateTime57.toString("365", locale62);
        org.joda.time.DateTime dateTime66 = dateTime57.plusMonths(1969);
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.days();
        org.joda.time.DateTime dateTime69 = dateTime66.withFieldAdded(durationFieldType67, (int) 'u');
        org.joda.time.LocalDateTime localDateTime71 = localDateTime44.withFieldAdded(durationFieldType67, 54449);
        org.joda.time.DateTime dateTime73 = dateTime31.withFieldAdded(durationFieldType67, 96);
        boolean boolean74 = localDateTime2.isSupported(durationFieldType67);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str19, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 7L + "'", long38 == 7L);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str52, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "365" + "'", str64, "365");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test14984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14984");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        boolean boolean5 = dateTimeZone0.isLocalDateTimeGap(localDateTime4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusMillis(99);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusMinutes(7);
        int int10 = localDateTime9.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusYears(22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withDayOfMonth(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test14985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14985");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        boolean boolean8 = property7.isLeap();
        org.joda.time.LocalDate localDate9 = property7.getLocalDate();
        org.joda.time.LocalDate localDate11 = property7.setCopy("9");
        org.joda.time.LocalDate localDate12 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate14 = property7.addWrapFieldToCopy(4);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 1);
        org.joda.time.LocalDate localDate18 = localDate16.plusMonths(33);
        org.joda.time.LocalDate.Property property19 = localDate18.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = localDate18.toDateTimeAtStartOfDay(dateTimeZone20);
        org.joda.time.Interval interval22 = localDate14.toInterval(dateTimeZone20);
        org.joda.time.LocalDate localDate24 = localDate14.minusMonths(70);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(localDate24);
    }

    @Test
    public void test14986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14986");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property8 = localDateTime2.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean10 = localDateTime2.isSupported(dateTimeFieldType9);
        int int11 = localDateTime2.getDayOfWeek();
        int int12 = localDateTime2.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(dateTimeZone13);
        java.util.GregorianCalendar gregorianCalendar15 = mutableDateTime14.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone16);
        java.util.GregorianCalendar gregorianCalendar18 = mutableDateTime17.toGregorianCalendar();
        boolean boolean19 = mutableDateTime14.isAfter((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.DateTimeZone dateTimeZone20 = mutableDateTime17.getZone();
        mutableDateTime17.addMillis(48);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (short) -1);
        long long25 = mutableDateTime24.getMillis();
        java.lang.Object obj26 = mutableDateTime24.clone();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (-1), chronology28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone32 = dateTimeZone31.toTimeZone();
        org.joda.time.DateTime dateTime33 = localDateTime29.toDateTime(dateTimeZone31);
        int int35 = dateTimeZone31.getOffsetFromLocal((long) (byte) 10);
        long long37 = dateTimeZone31.nextTransition((long) 59);
        mutableDateTime24.setZone(dateTimeZone31);
        mutableDateTime17.setZone(dateTimeZone31);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime17.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime17.property(dateTimeFieldType41);
        int int43 = localDateTime2.get(dateTimeFieldType41);
        int int44 = localDateTime2.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 70 + "'", int12 == 70);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(gregorianCalendar15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(gregorianCalendar18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T00:00:00.002+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T00:00:00.002+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 59L + "'", long37 == 59L);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 70 + "'", int43 == 70);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test14987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14987");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap4 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder0.appendWeekyear(2000, 59);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder0.appendDayOfWeek(5);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder10.appendYearOfEra(70, (int) (short) 0);
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = dateTimeFormatterBuilder13.toPrinter();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap15 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder13.appendTimeZoneShortName(strMap15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimePrinter14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
    }

    @Test
    public void test14988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14988");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setTime(100L);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.yearOfCentury();
        mutableDateTime1.setDayOfWeek(7);
        int int7 = mutableDateTime1.getYearOfEra();
        mutableDateTime1.addMonths(6);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setWeekOfWeekyear(58);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 58 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1970 + "'", int7 == 1970);
    }

    @Test
    public void test14989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14989");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.util.Locale locale6 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
    }

    @Test
    public void test14990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14990");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(10L);
        org.joda.time.LocalDateTime localDateTime2 = dateTime1.toLocalDateTime();
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.yearOfEra();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test14991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14991");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        java.lang.String str1 = durationFieldType0.getName();
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = null;
        org.joda.time.format.DateTimeParser dateTimeParser4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter3, dateTimeParser4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) (-1), chronology7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTime dateTime12 = localDateTime8.toDateTime(dateTimeZone10);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter5.withChronology(chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.clockhourOfHalfday();
        org.joda.time.DurationField durationField17 = chronology13.days();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 1970, chronology13);
        org.joda.time.DurationField durationField19 = chronology13.weekyears();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now(chronology13);
        boolean boolean21 = durationFieldType0.isSupported(chronology13);
        org.joda.time.DateTimeField dateTimeField22 = chronology13.secondOfDay();
        org.joda.time.DateTimeField dateTimeField23 = chronology13.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone27 = dateTimeZone26.toTimeZone();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (-1), chronology29);
        boolean boolean31 = dateTimeZone26.isLocalDateTimeGap(localDateTime30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.withMillisOfDay(5);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime30.plusHours((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime30.withPeriodAdded(readablePeriod38, 3);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime30.plusSeconds(59);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plusDays((-1));
        org.joda.time.Chronology chronology45 = localDateTime44.getChronology();
        java.util.Locale.Builder builder46 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder47 = builder46.clearExtensions();
        java.util.Locale.Builder builder48 = builder46.clear();
        java.util.Locale locale49 = builder46.build();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket(9477820801925L, chronology45, locale49, (java.lang.Integer) 8678, 54383);
        java.lang.String str53 = dateTimeField23.getAsShortText(13, locale49);
        java.util.Set<java.lang.Character> charSet54 = locale49.getExtensionKeys();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "seconds" + "'", str1, "seconds");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "13" + "'", str53, "13");
        org.junit.Assert.assertNotNull(charSet54);
    }

    @Test
    public void test14992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14992");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        boolean boolean7 = property5.isLeap();
        org.joda.time.LocalTime localTime8 = property5.roundFloorCopy();
        org.joda.time.LocalTime.Property property9 = localTime8.minuteOfHour();
        org.joda.time.LocalTime localTime11 = property9.addNoWrapToCopy((int) (short) 100);
        org.joda.time.LocalTime localTime12 = property9.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime14 = property9.setCopy("");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test14993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14993");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        boolean boolean5 = dateTimeZone0.isLocalDateTimeGap(localDateTime4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plus(readablePeriod6);
        int int8 = localDateTime4.getYearOfEra();
        int int9 = localDateTime4.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.minusMinutes(31);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.yearOfCentury();
        int int13 = localDateTime11.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.weekyear();
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 19 + "'", int9 == 19);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 19 + "'", int13 == 19);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test14994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14994");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendFractionOfSecond(33, (int) (short) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendMonthOfYearText();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getRangeDurationType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder4.appendShortText(dateTimeFieldType5);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder7.appendSecondOfDay(0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder7.appendTwoDigitYear(1439);
        boolean boolean12 = dateTimeFormatterBuilder11.canBuildPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder11.appendMillisOfDay(12);
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = null;
        org.joda.time.format.DateTimeParser dateTimeParser16 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter15, dateTimeParser16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        org.joda.time.DateTime dateTime24 = localDateTime20.toDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter17.withChronology(chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (-1), chronology30);
        boolean boolean32 = dateTimeZone27.isLocalDateTimeGap(localDateTime31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) (-1), chronology34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.weekyear();
        boolean boolean37 = dateTimeZone27.isLocalDateTimeGap(localDateTime35);
        long long39 = dateTimeZone27.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter17.withZone(dateTimeZone27);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter40.withPivotYear((java.lang.Integer) 86399999);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) (-1), chronology44);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone48 = dateTimeZone47.toTimeZone();
        org.joda.time.DateTime dateTime49 = localDateTime45.toDateTime(dateTimeZone47);
        org.joda.time.Chronology chronology50 = dateTime49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.hours();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.secondOfMinute();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) (-1), chronology54);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.weekyear();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.minusHours((-1));
        java.util.Locale locale59 = java.util.Locale.JAPANESE;
        java.lang.String str60 = dateTimeField52.getAsText((org.joda.time.ReadablePartial) localDateTime55, locale59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter42.withLocale(locale59);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter42.withPivotYear((java.lang.Integer) 58);
        java.util.Locale locale64 = dateTimeFormatter42.getLocale();
        boolean boolean65 = dateTimeFormatter42.isParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder66 = dateTimeFormatterBuilder11.append(dateTimeFormatter42);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter42.withZoneUTC();
        org.joda.time.Chronology chronology68 = dateTimeFormatter42.getChronolgy();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 3L + "'", long39 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0" + "'", str60, "0");
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNull(locale64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder66);
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertNull(chronology68);
    }

    @Test
    public void test14995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14995");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-1), chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDateTime6.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter3.withChronology(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.monthOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.clockhourOfHalfday();
        org.joda.time.DurationField durationField15 = chronology11.days();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 1970, chronology11);
        org.joda.time.DurationField durationField17 = chronology11.hours();
        long long20 = durationField17.subtract((long) 10, (long) 30);
        int int22 = durationField17.getValue(66L);
        int int25 = durationField17.getDifference(315534300000L, 0L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-107999990L) + "'", long20 == (-107999990L));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 87648 + "'", int25 == 87648);
    }

    @Test
    public void test14996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14996");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(32400000, 86390142);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32400000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test14997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14997");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.add((long) 100);
        org.joda.time.Chronology chronology3 = null;
        mutableDateTime0.setChronology(chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        long long7 = dateTimeZone5.previousTransition((long) 1);
        mutableDateTime0.setZone(dateTimeZone5);
        boolean boolean10 = dateTimeZone5.isStandardOffset((long) 14);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now(dateTimeZone5);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        mutableDateTime11.add(readablePeriod12, (int) (byte) -1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutableDateTime11.add(readablePeriod15);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(mutableDateTime11);
    }

    @Test
    public void test14998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14998");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusMinutes(1);
        org.joda.time.LocalTime localTime5 = localTime3.plusHours(4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField7 = localTime3.getField(39);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 39");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
    }

    @Test
    public void test14999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test14999");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DateTime.Property property8 = dateTime6.property(dateTimeFieldType7);
        org.joda.time.DateTime dateTime9 = property8.roundCeilingCopy();
        org.joda.time.DateTime dateTime10 = property8.withMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Chronology chronology13 = null;
        mutableDateTime12.setChronology(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTimeField dateTimeField17 = dateTimeFieldType15.getField(chronology16);
        mutableDateTime12.setRounding(dateTimeField17, (int) (short) 1);
        boolean boolean20 = dateTimeField17.isSupported();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = dateTimeField17.getType();
        int int23 = dateTimeField17.getLeapAmount(0L);
        java.util.Locale locale25 = java.util.Locale.GERMANY;
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (-1), chronology27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone31 = dateTimeZone30.toTimeZone();
        org.joda.time.DateTime dateTime32 = localDateTime28.toDateTime(dateTimeZone30);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime35 = dateTime32.plus(readableDuration34);
        org.joda.time.DateTime dateTime37 = dateTime32.minusWeeks(10);
        boolean boolean39 = dateTime32.isBefore((long) (-1));
        int int40 = dateTime32.getYearOfEra();
        org.joda.time.DateTime dateTime42 = dateTime32.plusDays(1969);
        org.joda.time.DateTime.Property property43 = dateTime42.weekOfWeekyear();
        java.util.Locale locale44 = java.util.Locale.US;
        int int45 = property43.getMaximumShortTextLength(locale44);
        java.lang.String str46 = locale25.getDisplayScript(locale44);
        java.lang.String str47 = dateTimeField17.getAsShortText((long) 2, locale44);
        boolean boolean48 = dateTimeField17.isLenient();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = dateTimeField17.getType();
        org.joda.time.DateTime dateTime51 = dateTime10.withField(dateTimeFieldType49, 10445);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de_DE");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str33, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1970 + "'", int40 == 1970);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970" + "'", str47, "1970");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(dateTime51);
    }

    @Test
    public void test15000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest29.test15000");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.add((long) 100);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add((long) 4);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTimeField dateTimeField8 = mutableDateTime7.getRoundingField();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime7.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add((long) (short) 100);
        boolean boolean12 = mutableDateTime5.isEqual((org.joda.time.ReadableInstant) mutableDateTime11);
        java.lang.String str13 = mutableDateTime11.toString();
        org.joda.time.DateTimeZone dateTimeZone14 = mutableDateTime11.getZone();
        mutableDateTime11.add(153722866425120L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNull(dateTimeField8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-06-01T15:13:11.089+00:00:00.003" + "'", str13, "2022-06-01T15:13:11.089+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTimeZone14);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        double double2 = summaryStatistics0.getSum();
        double double3 = summaryStatistics0.getGeometricMean();
        double double4 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs7 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfLogs7);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic9 = summaryStatistics0.getVarianceImpl();
        java.lang.Class<?> wildcardClass10 = summaryStatistics0.getClass();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance1.increment((double) 101L);
        long long4 = variance1.getN();
        long long5 = variance1.getN();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        // The following exception was thrown during execution in test generation
        try {
            int int2 = org.apache.commons.math.util.MathUtils.mulAndCheck((-231965925), 971883398);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: overflow: mul");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        double double2 = summaryStatistics0.getSum();
        double double3 = summaryStatistics0.getGeometricMean();
        double double4 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs7 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfLogs7);
        double double9 = summaryStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = summaryStatistics0.getMinImpl();
        long long11 = summaryStatistics0.getN();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        double double1 = org.apache.commons.math.util.MathUtils.sinh((double) 35L);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 7.930067261567154E14d + "'", double1 == 7.930067261567154E14d);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        long long2 = org.apache.commons.math.util.MathUtils.mulAndCheck(0L, (long) 1078558720);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        int int2 = org.apache.commons.math.util.MathUtils.lcm((-231965925), 100);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 927863700 + "'", int2 == 927863700);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long3 = secondMoment2.getN();
        secondMoment2.increment((double) (-1));
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        double double9 = mean8.getResult();
        mean8.clear();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        org.apache.commons.math.stat.descriptive.rank.Max max12 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long13 = max12.getN();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max12);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = summaryStatistics0.getSumLogImpl();
        summaryStatistics0.addValue((double) 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        long long1 = org.apache.commons.math.util.MathUtils.indicator(0L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = summaryStatistics0.getSummary();
        double double3 = summaryStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs4 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean5 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs4);
        org.apache.commons.math.stat.descriptive.rank.Max max6 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long7 = max6.getN();
        geometricMean5.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max6);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic9 = geometricMean5.getSumLogImpl();
        geometricMean5.clear();
        geometricMean5.clear();
        summaryStatistics0.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean5);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs13 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean14 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs13);
        org.apache.commons.math.stat.descriptive.rank.Max max15 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long16 = max15.getN();
        geometricMean14.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max15);
        long long18 = geometricMean14.getN();
        geometricMean14.increment((double) 3190);
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean14);
        double double22 = summaryStatistics0.getGeometricMean();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertNotNull(statisticalSummary2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic9);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + Double.POSITIVE_INFINITY + "'", double22 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        // The following exception was thrown during execution in test generation
        try {
            float float3 = org.apache.commons.math.util.MathUtils.round((float) (short) 1, 2050442118, 2050442118);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid rounding method.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        double double1 = org.apache.commons.math.util.MathUtils.sinh((double) (-27L));
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-2.6602412030089932E11d) + "'", double1 == (-2.6602412030089932E11d));
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean2 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        geometricMean2.increment((double) 51);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        java.lang.Class<?> wildcardClass9 = summaryStatistics0.getClass();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics10 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance((java.lang.Class) wildcardClass9);
        double double11 = summaryStatistics10.getMax();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs12 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double13 = sumOfLogs12.getResult();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean14 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs12);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean15 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs12);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic16 = geometricMean15.getSumLogImpl();
        summaryStatistics10.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean15);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic18 = summaryStatistics10.getVarianceImpl();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(summaryStatistics10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic16);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic18);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        double double2 = org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(3200, (int) (byte) 0);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.rank.Max max2 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long3 = max2.getN();
        geometricMean1.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max2);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = geometricMean1.getSumLogImpl();
        geometricMean1.clear();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs7 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean8 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs7);
        geometricMean1.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean8);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = geometricMean1.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance12.increment((double) 101L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment15);
        mean16.clear();
        double[] doubleArray23 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean16.incrementAll(doubleArray23, (int) (short) 1, (int) (byte) 0);
        double double27 = variance12.evaluate(doubleArray23);
        int int28 = org.apache.commons.math.util.MathUtils.hash(doubleArray23);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = geometricMean1.evaluate(doubleArray23, 3200, 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 2806.7d + "'", double27 == 2806.7d);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-231965925) + "'", int28 == (-231965925));
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long3 = secondMoment2.getN();
        secondMoment2.increment((double) (-1));
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        double double9 = mean8.getResult();
        mean8.clear();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        org.apache.commons.math.stat.descriptive.rank.Max max12 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long13 = max12.getN();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max12);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = summaryStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic16 = summaryStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares17 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        double double18 = sumOfSquares17.getResult();
        double double19 = sumOfSquares17.getResult();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares17);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics21 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic22 = summaryStatistics21.getMeanImpl();
        double double23 = summaryStatistics21.getSum();
        double double24 = summaryStatistics21.getGeometricMean();
        double double25 = summaryStatistics21.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic26 = summaryStatistics21.getMaxImpl();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs27 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean28 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs27);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean29 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs27);
        org.apache.commons.math.stat.descriptive.summary.Sum sum30 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray37 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double38 = sum30.evaluate(doubleArray37);
        double double39 = sumOfLogs27.evaluate(doubleArray37);
        double double40 = storelessUnivariateStatistic26.evaluate(doubleArray37);
        summaryStatistics0.setMeanImpl(storelessUnivariateStatistic26);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic26);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 310.0d + "'", double38 == 310.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        double double9 = summaryStatistics0.getMax();
        double double10 = summaryStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getSumLogImpl();
        long long12 = summaryStatistics0.getN();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = summaryStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.rank.Min min14 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min14.clear();
        min14.increment((double) 100L);
        boolean boolean18 = summaryStatistics0.equals((java.lang.Object) 100L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long3 = secondMoment1.getN();
        long long4 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean5 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum0.clear();
        sum0.clear();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs3 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean4 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs3);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares5 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares5.increment(9.619275968248924E151d);
        double double8 = sumOfSquares5.getResult();
        double[] doubleArray10 = new double[] { 1.0d };
        sumOfSquares5.incrementAll(doubleArray10);
        sumOfLogs3.incrementAll(doubleArray10);
        int int13 = org.apache.commons.math.util.MathUtils.hash(doubleArray10);
        // The following exception was thrown during execution in test generation
        try {
            double double16 = sum0.evaluate(doubleArray10, 2050442118, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 9.253047015333127E303d + "'", double8 == 9.253047015333127E303d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1072693279 + "'", int13 == 1072693279);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.rank.Max max2 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long3 = max2.getN();
        geometricMean1.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max2);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs5 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean6 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs5);
        org.apache.commons.math.stat.descriptive.rank.Max max7 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long8 = max7.getN();
        geometricMean6.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max7);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = geometricMean6.getSumLogImpl();
        geometricMean1.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean6);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment2);
        org.apache.commons.math.stat.descriptive.summary.Sum sum4 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray11 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double12 = sum4.evaluate(doubleArray11);
        double[] doubleArray19 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double22 = sum4.evaluate(doubleArray19, 0, 0);
        double double25 = mean3.evaluate(doubleArray19, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs26 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean27 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs26);
        org.apache.commons.math.stat.descriptive.rank.Max max28 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long29 = max28.getN();
        geometricMean27.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max28);
        org.apache.commons.math.stat.descriptive.summary.Sum sum31 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray38 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double39 = sum31.evaluate(doubleArray38);
        geometricMean27.incrementAll(doubleArray38);
        boolean boolean41 = org.apache.commons.math.util.MathUtils.equals(doubleArray19, doubleArray38);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean43 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment42);
        org.apache.commons.math.stat.descriptive.summary.Sum sum44 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray51 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double52 = sum44.evaluate(doubleArray51);
        double[] doubleArray59 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double62 = sum44.evaluate(doubleArray59, 0, 0);
        double double65 = mean43.evaluate(doubleArray59, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs66 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean67 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs66);
        org.apache.commons.math.stat.descriptive.rank.Max max68 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long69 = max68.getN();
        geometricMean67.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max68);
        org.apache.commons.math.stat.descriptive.summary.Sum sum71 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray78 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double79 = sum71.evaluate(doubleArray78);
        geometricMean67.incrementAll(doubleArray78);
        boolean boolean81 = org.apache.commons.math.util.MathUtils.equals(doubleArray59, doubleArray78);
        boolean boolean82 = org.apache.commons.math.util.MathUtils.equals(doubleArray19, doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            double double85 = mean1.evaluate(doubleArray19, (int) (short) 100, 371080922);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 310.0d + "'", double12 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 310.0d + "'", double39 == 310.0d);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 310.0d + "'", double52 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + (-1.0d) + "'", double65 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 310.0d + "'", double79 == 310.0d);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment0);
        mean1.clear();
        mean1.increment(0.0d);
        long long5 = mean1.getN();
        mean1.increment((double) Float.NaN);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        double double2 = summaryStatistics0.getSum();
        long long3 = summaryStatistics0.getN();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = summaryStatistics0.getSummary();
        summaryStatistics0.addValue(9.253047015333127E303d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(statisticalSummary4);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        double double2 = summaryStatistics0.getSum();
        long long3 = summaryStatistics0.getN();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = summaryStatistics0.getSummary();
        double double5 = summaryStatistics0.getStandardDeviation();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(statisticalSummary4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) 1.0f);
        java.lang.Object obj3 = null;
        boolean boolean4 = geometricMean0.equals(obj3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        // The following exception was thrown during execution in test generation
        try {
            double double3 = org.apache.commons.math.util.MathUtils.round((double) 10, 132, 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid rounding mode");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = summaryStatistics0.getSummary();
        double double2 = summaryStatistics0.getVariance();
        double double3 = summaryStatistics0.getSumsq();
        double double4 = summaryStatistics0.getStandardDeviation();
        java.lang.String str5 = summaryStatistics0.toString();
        org.junit.Assert.assertNotNull(summaryStatistics0);
        org.junit.Assert.assertNotNull(statisticalSummary1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        double double2 = summaryStatistics0.getSum();
        long long3 = summaryStatistics0.getN();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = summaryStatistics0.getSummary();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(statisticalSummary4);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        double double2 = summaryStatistics0.getSum();
        double double3 = summaryStatistics0.getGeometricMean();
        double double4 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getMaxImpl();
        double double6 = summaryStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance7.clear();
        double double9 = variance7.getResult();
        long long10 = variance7.getN();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance7);
        double double12 = summaryStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = summaryStatistics0.getMinImpl();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        double double2 = summaryStatistics0.getSum();
        double double3 = summaryStatistics0.getGeometricMean();
        double double4 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics0.getSumImpl();
        long long7 = summaryStatistics0.getN();
        double double8 = summaryStatistics0.getStandardDeviation();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = org.apache.commons.math.util.MathUtils.factorial(927863700);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: result too large to represent in a long integer");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        summaryStatistics0.addValue(1.730777995336729E7d);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = summaryStatistics0.getGeoMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance9.clear();
        double double11 = variance9.getResult();
        org.apache.commons.math.stat.descriptive.rank.Max max12 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long13 = max12.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs14 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean15 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs14);
        org.apache.commons.math.stat.descriptive.rank.Max max16 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long17 = max16.getN();
        geometricMean15.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max16);
        org.apache.commons.math.stat.descriptive.summary.Sum sum19 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray26 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double27 = sum19.evaluate(doubleArray26);
        geometricMean15.incrementAll(doubleArray26);
        double double29 = max12.evaluate(doubleArray26);
        double double30 = variance9.evaluate(doubleArray26);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment31);
        org.apache.commons.math.stat.descriptive.summary.Sum sum33 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray40 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double41 = sum33.evaluate(doubleArray40);
        double[] doubleArray48 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double51 = sum33.evaluate(doubleArray48, 0, 0);
        double double54 = mean32.evaluate(doubleArray48, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs55 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean56 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs55);
        org.apache.commons.math.stat.descriptive.rank.Max max57 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long58 = max57.getN();
        geometricMean56.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max57);
        org.apache.commons.math.stat.descriptive.summary.Sum sum60 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray67 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double68 = sum60.evaluate(doubleArray67);
        geometricMean56.incrementAll(doubleArray67);
        boolean boolean70 = org.apache.commons.math.util.MathUtils.equals(doubleArray48, doubleArray67);
        double double71 = variance9.evaluate(doubleArray67);
        // The following exception was thrown during execution in test generation
        try {
            double double74 = storelessUnivariateStatistic8.evaluate(doubleArray67, 132, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 310.0d + "'", double27 == 310.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2817.0666666666666d + "'", double30 == 2817.0666666666666d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 310.0d + "'", double41 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1.0d) + "'", double54 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 310.0d + "'", double68 == 310.0d);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2817.0666666666666d + "'", double71 == 2817.0666666666666d);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long3 = secondMoment2.getN();
        secondMoment2.increment((double) (-1));
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        double double9 = mean8.getResult();
        mean8.clear();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        org.apache.commons.math.stat.descriptive.rank.Max max12 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long13 = max12.getN();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max12);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = summaryStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic16 = summaryStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares17 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        double double18 = sumOfSquares17.getResult();
        double double19 = sumOfSquares17.getResult();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares17);
        boolean boolean22 = summaryStatistics0.equals((java.lang.Object) (byte) 1);
        long long23 = summaryStatistics0.getN();
        double double24 = summaryStatistics0.getSum();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 0.0d + "'", double24 == 0.0d);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        org.apache.commons.math.stat.descriptive.rank.Max max0 = new org.apache.commons.math.stat.descriptive.rank.Max();
        double double1 = max0.getResult();
        max0.clear();
        max0.clear();
        max0.clear();
        double double5 = max0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment6);
        mean7.clear();
        double[] doubleArray14 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean7.incrementAll(doubleArray14, (int) (short) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.summary.Sum sum18 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray25 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double26 = sum18.evaluate(doubleArray25);
        double[] doubleArray33 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double36 = sum18.evaluate(doubleArray33, 0, 0);
        boolean boolean37 = org.apache.commons.math.util.MathUtils.equals(doubleArray14, doubleArray33);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics38 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic39 = summaryStatistics38.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long41 = secondMoment40.getN();
        secondMoment40.increment((double) (-1));
        summaryStatistics38.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment40);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment45);
        double double47 = mean46.getResult();
        mean46.clear();
        summaryStatistics38.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean46);
        org.apache.commons.math.stat.descriptive.summary.Sum sum50 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray57 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double58 = sum50.evaluate(doubleArray57);
        double[] doubleArray65 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double68 = sum50.evaluate(doubleArray65, 0, 0);
        int int69 = org.apache.commons.math.util.MathUtils.hash(doubleArray65);
        double double72 = mean46.evaluate(doubleArray65, 0, (int) (short) 0);
        boolean boolean73 = org.apache.commons.math.util.MathUtils.equals(doubleArray33, doubleArray65);
        // The following exception was thrown during execution in test generation
        try {
            double double76 = max0.evaluate(doubleArray65, 1072693269, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 310.0d + "'", double26 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 310.0d + "'", double58 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2050442118 + "'", int69 == 2050442118);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        double double1 = org.apache.commons.math.util.MathUtils.sinh(30.482323362278656d);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 8.655154728220069E12d + "'", double1 == 8.655154728220069E12d);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        byte byte1 = org.apache.commons.math.util.MathUtils.indicator((byte) 1);
        org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 1 + "'", byte1 == (byte) 1);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment0);
        secondMoment0.clear();
        long long3 = secondMoment0.getN();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        // The following exception was thrown during execution in test generation
        try {
            double double2 = org.apache.commons.math.util.MathUtils.binomialCoefficientDouble((-51), (-1071382528));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must have n >= 0 for binomial coefficient (n,k)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment0);
        mean3.increment((double) 2L);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics2 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum3 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum3.clear();
        summaryStatistics2.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum3);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics2.getMeanImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics7 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = summaryStatistics7.getMeanImpl();
        double double9 = summaryStatistics7.getSum();
        double double10 = summaryStatistics7.getGeometricMean();
        double double11 = summaryStatistics7.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic12 = summaryStatistics7.getMaxImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = summaryStatistics7.getSumImpl();
        summaryStatistics2.setSumImpl(storelessUnivariateStatistic13);
        boolean boolean15 = variance1.equals((java.lang.Object) summaryStatistics2);
        long long16 = variance1.getN();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics17 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic18 = summaryStatistics17.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long20 = secondMoment19.getN();
        secondMoment19.increment((double) (-1));
        summaryStatistics17.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment19);
        long long24 = summaryStatistics17.getN();
        double double25 = summaryStatistics17.getSumOfLogs();
        boolean boolean26 = variance1.equals((java.lang.Object) summaryStatistics17);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic12);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        // The following exception was thrown during execution in test generation
        try {
            double double2 = org.apache.commons.math.util.MathUtils.binomialCoefficientLog((int) (short) 0, 62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must have n >= k for binomial coefficient (n,k)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.rank.Max max2 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long3 = max2.getN();
        geometricMean1.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max2);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = geometricMean1.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = geometricMean1.getSumLogImpl();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        long long2 = org.apache.commons.math.util.MathUtils.subAndCheck((long) (-231965925), (-27L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-231965898L) + "'", long2 == (-231965898L));
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long1 = sum0.getN();
        long long2 = sum0.getN();
        sum0.increment(0.0d);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs6 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean7 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs6);
        org.apache.commons.math.stat.descriptive.rank.Max max8 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long9 = max8.getN();
        geometricMean7.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max8);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = geometricMean7.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics12 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = summaryStatistics12.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long15 = secondMoment14.getN();
        secondMoment14.increment((double) (-1));
        summaryStatistics12.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment14);
        geometricMean7.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment14);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs21 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double22 = sumOfLogs21.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((double) 101L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment27);
        mean28.clear();
        double[] doubleArray35 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean28.incrementAll(doubleArray35, (int) (short) 1, (int) (byte) 0);
        double double39 = variance24.evaluate(doubleArray35);
        double double40 = sumOfLogs21.evaluate(doubleArray35);
        double double41 = variance20.evaluate(doubleArray35);
        // The following exception was thrown during execution in test generation
        try {
            double double44 = sum0.evaluate(doubleArray35, (int) (byte) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2806.7d + "'", double39 == 2806.7d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2245.3599999999997d + "'", double41 == 2245.3599999999997d);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        // The following exception was thrown during execution in test generation
        try {
            int int2 = org.apache.commons.math.util.MathUtils.addAndCheck(1072693279, 1104154720);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: overflow: add");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        double double9 = summaryStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long11 = secondMoment10.getN();
        secondMoment10.increment((double) (-1));
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment10);
        double double15 = secondMoment10.getResult();
        long long16 = secondMoment10.getN();
        secondMoment10.increment((double) (byte) 0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        double double2 = org.apache.commons.math.util.MathUtils.log((double) 577371932, 1.730777995336729E7d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.8261459784444467d + "'", double2 == 0.8261459784444467d);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum0.clear();
        double double2 = sum0.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        int int2 = org.apache.commons.math.util.MathUtils.mulAndCheck((-51), (-51));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2601 + "'", int2 == 2601);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        double double2 = summaryStatistics0.getSum();
        double double3 = summaryStatistics0.getGeometricMean();
        double double4 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs7 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfLogs7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance10.clear();
        variance10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance13.clear();
        double double15 = variance13.getResult();
        org.apache.commons.math.stat.descriptive.rank.Max max16 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long17 = max16.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs18 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean19 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs18);
        org.apache.commons.math.stat.descriptive.rank.Max max20 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long21 = max20.getN();
        geometricMean19.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max20);
        org.apache.commons.math.stat.descriptive.summary.Sum sum23 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray30 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double31 = sum23.evaluate(doubleArray30);
        geometricMean19.incrementAll(doubleArray30);
        double double33 = max16.evaluate(doubleArray30);
        double double34 = variance13.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment35);
        org.apache.commons.math.stat.descriptive.summary.Sum sum37 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray44 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double45 = sum37.evaluate(doubleArray44);
        double[] doubleArray52 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double55 = sum37.evaluate(doubleArray52, 0, 0);
        double double58 = mean36.evaluate(doubleArray52, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs59 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean60 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs59);
        org.apache.commons.math.stat.descriptive.rank.Max max61 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long62 = max61.getN();
        geometricMean60.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max61);
        org.apache.commons.math.stat.descriptive.summary.Sum sum64 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray71 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double72 = sum64.evaluate(doubleArray71);
        geometricMean60.incrementAll(doubleArray71);
        boolean boolean74 = org.apache.commons.math.util.MathUtils.equals(doubleArray52, doubleArray71);
        double double75 = variance13.evaluate(doubleArray71);
        double double77 = variance10.evaluate(doubleArray71, (double) 1078034432);
        // The following exception was thrown during execution in test generation
        try {
            double double80 = sumOfLogs7.evaluate(doubleArray71, 971883398, 62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 310.0d + "'", double31 == 310.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 100.0d + "'", double33 == 100.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2817.0666666666666d + "'", double34 == 2817.0666666666666d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 310.0d + "'", double45 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-1.0d) + "'", double58 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 310.0d + "'", double72 == 310.0d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2817.0666666666666d + "'", double75 == 2817.0666666666666d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2389.3333333333335d + "'", double77 == 2389.3333333333335d);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        double double1 = org.apache.commons.math.util.MathUtils.indicator((double) 1072693248);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        variance1.clear();
        long long4 = variance1.getN();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = summaryStatistics0.getSummary();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic3 = summaryStatistics0.getGeoMeanImpl();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertNotNull(statisticalSummary2);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic3);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean2 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        double double3 = sumOfLogs0.getResult();
        sumOfLogs0.clear();
        double double5 = sumOfLogs0.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        long long2 = org.apache.commons.math.util.MathUtils.mulAndCheck(100L, (long) 927863700);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 92786370000L + "'", long2 == 92786370000L);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        long long1 = org.apache.commons.math.util.MathUtils.sign((-27L));
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        summaryStatistics0.clear();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics3 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = summaryStatistics3.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long6 = secondMoment5.getN();
        secondMoment5.increment((double) (-1));
        summaryStatistics3.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance10.clear();
        summaryStatistics3.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance10);
        summaryStatistics0.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance10);
        double double14 = variance10.getResult();
        variance10.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics17 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic18 = summaryStatistics17.getMeanImpl();
        double double19 = summaryStatistics17.getSum();
        double double20 = summaryStatistics17.getGeometricMean();
        double double21 = summaryStatistics17.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic22 = summaryStatistics17.getMaxImpl();
        double double23 = summaryStatistics17.getGeometricMean();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance24.clear();
        double double26 = variance24.getResult();
        long long27 = variance24.getN();
        summaryStatistics17.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance24);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment29);
        org.apache.commons.math.stat.descriptive.summary.Sum sum31 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray38 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double39 = sum31.evaluate(doubleArray38);
        double[] doubleArray46 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double49 = sum31.evaluate(doubleArray46, 0, 0);
        double double52 = mean30.evaluate(doubleArray46, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs53 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean54 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs53);
        org.apache.commons.math.stat.descriptive.rank.Max max55 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long56 = max55.getN();
        geometricMean54.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max55);
        org.apache.commons.math.stat.descriptive.summary.Sum sum58 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray65 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double66 = sum58.evaluate(doubleArray65);
        geometricMean54.incrementAll(doubleArray65);
        boolean boolean68 = org.apache.commons.math.util.MathUtils.equals(doubleArray46, doubleArray65);
        double double70 = variance24.evaluate(doubleArray65, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double74 = variance10.evaluate(doubleArray65, (double) 51, 100, 2050442118);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 310.0d + "'", double39 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1.0d) + "'", double52 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 310.0d + "'", double66 == 310.0d);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 2817.0666666666666d + "'", double70 == 2817.0666666666666d);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long1 = sum0.getN();
        long long2 = sum0.getN();
        sum0.increment(0.0d);
        sum0.clear();
        long long6 = sum0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        org.apache.commons.math.stat.descriptive.rank.Min min0 = new org.apache.commons.math.stat.descriptive.rank.Min();
        double double1 = min0.getResult();
        min0.increment(310.0d);
        long long4 = min0.getN();
        min0.increment((double) 35L);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics0.getSumsqImpl();
        double double3 = summaryStatistics0.getMean();
        summaryStatistics0.clear();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        java.lang.Class<?> wildcardClass9 = summaryStatistics0.getClass();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics10 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance((java.lang.Class) wildcardClass9);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics11 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance((java.lang.Class) wildcardClass9);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics12 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance((java.lang.Class) wildcardClass9);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(summaryStatistics10);
        org.junit.Assert.assertNotNull(summaryStatistics11);
        org.junit.Assert.assertNotNull(summaryStatistics12);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.rank.Max max2 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long3 = max2.getN();
        geometricMean1.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max2);
        org.apache.commons.math.stat.descriptive.summary.Sum sum5 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray12 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double13 = sum5.evaluate(doubleArray12);
        geometricMean1.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = geometricMean1.getSumLogImpl();
        double double16 = geometricMean1.getResult();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 310.0d + "'", double13 == 310.0d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.730777995336729E7d + "'", double16 == 1.730777995336729E7d);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        float float1 = org.apache.commons.math.util.MathUtils.sign(0.0f);
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 0.0f + "'", float1 == 0.0f);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        float float1 = org.apache.commons.math.util.MathUtils.sign((float) (-3242L));
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + (-1.0f) + "'", float1 == (-1.0f));
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        double double2 = org.apache.commons.math.util.MathUtils.log((double) 100.0f, 0.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.NEGATIVE_INFINITY + "'", double2 == Double.NEGATIVE_INFINITY);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        double double2 = org.apache.commons.math.util.MathUtils.round((-3190.9999999999995d), (int) (short) 1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + (-3191.0d) + "'", double2 == (-3191.0d));
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum0.clear();
        double double2 = sum0.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance4.increment((double) 101L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        mean8.clear();
        double[] doubleArray15 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean8.incrementAll(doubleArray15, (int) (short) 1, (int) (byte) 0);
        double double19 = variance4.evaluate(doubleArray15);
        int int20 = org.apache.commons.math.util.MathUtils.hash(doubleArray15);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = sum0.evaluate(doubleArray15, 2601, (int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2806.7d + "'", double19 == 2806.7d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-231965925) + "'", int20 == (-231965925));
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment0);
        org.apache.commons.math.stat.descriptive.summary.Sum sum2 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray9 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double10 = sum2.evaluate(doubleArray9);
        double[] doubleArray17 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double20 = sum2.evaluate(doubleArray17, 0, 0);
        double double23 = mean1.evaluate(doubleArray17, 1, (int) (byte) 1);
        mean1.increment((double) 10L);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment27);
        org.apache.commons.math.stat.descriptive.summary.Sum sum29 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray36 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double37 = sum29.evaluate(doubleArray36);
        double[] doubleArray44 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double47 = sum29.evaluate(doubleArray44, 0, 0);
        double double50 = mean28.evaluate(doubleArray44, 1, (int) (byte) 1);
        double double53 = mean1.evaluate(doubleArray44, 0, 0);
        long long54 = mean1.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs55 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double56 = sumOfLogs55.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance58 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance58.increment((double) 101L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment61 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean62 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment61);
        mean62.clear();
        double[] doubleArray69 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean62.incrementAll(doubleArray69, (int) (short) 1, (int) (byte) 0);
        double double73 = variance58.evaluate(doubleArray69);
        double double74 = sumOfLogs55.evaluate(doubleArray69);
        // The following exception was thrown during execution in test generation
        try {
            double double77 = mean1.evaluate(doubleArray69, 2050438918, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 310.0d + "'", double10 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1.0d) + "'", double23 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 310.0d + "'", double37 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 2806.7d + "'", double73 == 2806.7d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics1 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum2 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum2.clear();
        summaryStatistics1.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum2);
        long long5 = summaryStatistics1.getN();
        java.lang.String str6 = summaryStatistics1.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long8 = variance7.getN();
        summaryStatistics1.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance7);
        double double10 = summaryStatistics1.getMin();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long12 = secondMoment11.getN();
        secondMoment11.increment((double) (-1));
        summaryStatistics1.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment11);
        geometricMean0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment11);
        secondMoment11.clear();
        long long18 = secondMoment11.getN();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str6, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares0 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares0.increment(9.619275968248924E151d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance4.increment((double) 101L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        mean8.clear();
        double[] doubleArray15 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean8.incrementAll(doubleArray15, (int) (short) 1, (int) (byte) 0);
        double double19 = variance4.evaluate(doubleArray15);
        int int20 = org.apache.commons.math.util.MathUtils.hash(doubleArray15);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = sumOfSquares0.evaluate(doubleArray15, (int) (short) 0, 87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 2806.7d + "'", double19 == 2806.7d);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-231965925) + "'", int20 == (-231965925));
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        short short1 = org.apache.commons.math.util.MathUtils.sign((short) 100);
        org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 1 + "'", short1 == (short) 1);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares0 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares0.increment(9.619275968248924E151d);
        double double3 = sumOfSquares0.getResult();
        double[] doubleArray5 = new double[] { 1.0d };
        sumOfSquares0.incrementAll(doubleArray5);
        double double7 = sumOfSquares0.getResult();
        double double8 = sumOfSquares0.getResult();
        long long9 = sumOfSquares0.getN();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 9.253047015333127E303d + "'", double3 == 9.253047015333127E303d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 9.253047015333127E303d + "'", double7 == 9.253047015333127E303d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 9.253047015333127E303d + "'", double8 == 9.253047015333127E303d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2L + "'", long9 == 2L);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = org.apache.commons.math.util.MathUtils.factorial(1104152832);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: result too large to represent in a long integer");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        double double9 = summaryStatistics0.getMax();
        double double10 = summaryStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getSumLogImpl();
        long long12 = summaryStatistics0.getN();
        double double13 = summaryStatistics0.getMean();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        int int2 = org.apache.commons.math.util.MathUtils.addAndCheck((int) (short) -1, 3200);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3199 + "'", int2 == 3199);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics0.getMinImpl();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic2);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        int int1 = org.apache.commons.math.util.MathUtils.sign(10);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        double double9 = summaryStatistics0.getMax();
        double double10 = summaryStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic12 = summaryStatistics0.getMinImpl();
        double double13 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic14 = summaryStatistics0.getSumImpl();
        double double15 = summaryStatistics0.getMin();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum0.clear();
        sum0.clear();
        double double3 = sum0.getResult();
        sum0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        double double2 = org.apache.commons.math.util.MathUtils.log((double) Float.NaN, 9.332621544395286E157d);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = summaryStatistics0.getSummary();
        long long3 = summaryStatistics0.getN();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean4 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics5 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum6 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum6.clear();
        summaryStatistics5.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum6);
        long long9 = summaryStatistics5.getN();
        java.lang.String str10 = summaryStatistics5.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long12 = variance11.getN();
        summaryStatistics5.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance11);
        double double14 = summaryStatistics5.getMin();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long16 = secondMoment15.getN();
        secondMoment15.increment((double) (-1));
        summaryStatistics5.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment15);
        geometricMean4.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment15);
        long long21 = geometricMean4.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean4);
        geometricMean4.clear();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertNotNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str10, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long3 = secondMoment2.getN();
        secondMoment2.increment((double) (-1));
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        double double9 = mean8.getResult();
        mean8.clear();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        org.apache.commons.math.stat.descriptive.rank.Max max12 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long13 = max12.getN();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max12);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = summaryStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic16 = summaryStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares17 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        double double18 = sumOfSquares17.getResult();
        double double19 = sumOfSquares17.getResult();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares17);
        sumOfSquares17.increment(0.0d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        float float2 = org.apache.commons.math.util.MathUtils.round((float) 51, (int) (byte) 100);
        org.junit.Assert.assertTrue(Float.isNaN(float2));
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        long long2 = org.apache.commons.math.util.MathUtils.mulAndCheck((long) 3200, (-27L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-86400L) + "'", long2 == (-86400L));
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        double double2 = summaryStatistics0.getSum();
        double double3 = summaryStatistics0.getGeometricMean();
        double double4 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics0.getSumImpl();
        long long7 = summaryStatistics0.getN();
        double double8 = summaryStatistics0.getMin();
        double double9 = summaryStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = summaryStatistics0.getMinImpl();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics1 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum2 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum2.clear();
        summaryStatistics1.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum2);
        long long5 = summaryStatistics1.getN();
        java.lang.String str6 = summaryStatistics1.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long8 = variance7.getN();
        summaryStatistics1.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance7);
        double double10 = summaryStatistics1.getMin();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long12 = secondMoment11.getN();
        secondMoment11.increment((double) (-1));
        summaryStatistics1.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment11);
        geometricMean0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment11);
        secondMoment11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment11);
        double double19 = secondMoment11.getResult();
        secondMoment11.increment((double) 1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str6, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        double double2 = org.apache.commons.math.util.MathUtils.normalizeAngle((-1.2181642514249999E288d), (double) 971883398);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment1);
        secondMoment1.increment(1.730777995336729E7d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance5.clear();
        double double7 = variance5.getResult();
        org.apache.commons.math.stat.descriptive.rank.Max max8 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long9 = max8.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs10 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean11 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs10);
        org.apache.commons.math.stat.descriptive.rank.Max max12 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long13 = max12.getN();
        geometricMean11.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max12);
        org.apache.commons.math.stat.descriptive.summary.Sum sum15 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray22 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double23 = sum15.evaluate(doubleArray22);
        geometricMean11.incrementAll(doubleArray22);
        double double25 = max8.evaluate(doubleArray22);
        double double26 = variance5.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment27);
        org.apache.commons.math.stat.descriptive.summary.Sum sum29 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray36 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double37 = sum29.evaluate(doubleArray36);
        double[] doubleArray44 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double47 = sum29.evaluate(doubleArray44, 0, 0);
        double double50 = mean28.evaluate(doubleArray44, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs51 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean52 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs51);
        org.apache.commons.math.stat.descriptive.rank.Max max53 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long54 = max53.getN();
        geometricMean52.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max53);
        org.apache.commons.math.stat.descriptive.summary.Sum sum56 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray63 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double64 = sum56.evaluate(doubleArray63);
        geometricMean52.incrementAll(doubleArray63);
        boolean boolean66 = org.apache.commons.math.util.MathUtils.equals(doubleArray44, doubleArray63);
        double double67 = variance5.evaluate(doubleArray63);
        secondMoment1.incrementAll(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long70 = secondMoment1.getN();
        secondMoment1.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 310.0d + "'", double23 == 310.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2817.0666666666666d + "'", double26 == 2817.0666666666666d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 310.0d + "'", double37 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 310.0d + "'", double64 == 310.0d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2817.0666666666666d + "'", double67 == 2817.0666666666666d);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 7L + "'", long70 == 7L);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long1 = sum0.getN();
        long long2 = sum0.getN();
        sum0.increment((double) 1L);
        double double5 = sum0.getResult();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        byte byte1 = org.apache.commons.math.util.MathUtils.indicator((byte) -1);
        org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) -1 + "'", byte1 == (byte) -1);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        double double2 = summaryStatistics0.getSum();
        double double3 = summaryStatistics0.getGeometricMean();
        double double4 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics0.getSumImpl();
        long long7 = summaryStatistics0.getN();
        double double8 = summaryStatistics0.getMin();
        summaryStatistics0.clear();
        double double10 = summaryStatistics0.getSum();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean2 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean3.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment6);
        mean7.clear();
        double[] doubleArray14 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean7.incrementAll(doubleArray14, (int) (short) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.summary.Sum sum18 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray25 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double26 = sum18.evaluate(doubleArray25);
        double[] doubleArray33 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double36 = sum18.evaluate(doubleArray33, 0, 0);
        boolean boolean37 = org.apache.commons.math.util.MathUtils.equals(doubleArray14, doubleArray33);
        double double40 = geometricMean3.evaluate(doubleArray14, 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = sumOfLogs0.evaluate(doubleArray14, 3190, 1078558720);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 310.0d + "'", double26 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 2.0d + "'", double40 == 2.0d);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        long long2 = org.apache.commons.math.util.MathUtils.mulAndCheck((long) (short) -1, 97L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-97L) + "'", long2 == (-97L));
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        double double9 = summaryStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = summaryStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.summary.Sum sum11 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long12 = sum11.getN();
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance14 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance14.clear();
        double double16 = variance14.getResult();
        org.apache.commons.math.stat.descriptive.rank.Max max17 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long18 = max17.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs19 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean20 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs19);
        org.apache.commons.math.stat.descriptive.rank.Max max21 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long22 = max21.getN();
        geometricMean20.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max21);
        org.apache.commons.math.stat.descriptive.summary.Sum sum24 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray31 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double32 = sum24.evaluate(doubleArray31);
        geometricMean20.incrementAll(doubleArray31);
        double double34 = max17.evaluate(doubleArray31);
        double double35 = variance14.evaluate(doubleArray31);
        long long36 = variance14.getN();
        variance14.increment((double) (-51));
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment39 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean40 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment39);
        mean40.clear();
        double[] doubleArray47 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean40.incrementAll(doubleArray47, (int) (short) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment51);
        mean52.clear();
        double[] doubleArray59 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean52.incrementAll(doubleArray59, (int) (short) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.summary.Sum sum63 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray70 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double71 = sum63.evaluate(doubleArray70);
        double[] doubleArray78 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double81 = sum63.evaluate(doubleArray78, 0, 0);
        boolean boolean82 = org.apache.commons.math.util.MathUtils.equals(doubleArray59, doubleArray78);
        boolean boolean83 = org.apache.commons.math.util.MathUtils.equals(doubleArray47, doubleArray78);
        double double84 = variance14.evaluate(doubleArray78);
        // The following exception was thrown during execution in test generation
        try {
            double double87 = sum11.evaluate(doubleArray78, (-42), (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 310.0d + "'", double32 == 310.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 2817.0666666666666d + "'", double35 == 2817.0666666666666d);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 310.0d + "'", double71 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 14635.2d + "'", double84 == 14635.2d);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment0);
        mean1.clear();
        mean1.increment(0.0d);
        long long5 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment6);
        org.apache.commons.math.stat.descriptive.summary.Sum sum8 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray15 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double16 = sum8.evaluate(doubleArray15);
        double[] doubleArray23 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double26 = sum8.evaluate(doubleArray23, 0, 0);
        double double29 = mean7.evaluate(doubleArray23, 1, (int) (byte) 1);
        mean7.increment((double) 10L);
        mean7.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment33 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean34 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment33);
        org.apache.commons.math.stat.descriptive.summary.Sum sum35 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray42 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double43 = sum35.evaluate(doubleArray42);
        double[] doubleArray50 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double53 = sum35.evaluate(doubleArray50, 0, 0);
        double double56 = mean34.evaluate(doubleArray50, 1, (int) (byte) 1);
        double double59 = mean7.evaluate(doubleArray50, 0, 0);
        mean1.incrementAll(doubleArray50);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 310.0d + "'", double16 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 310.0d + "'", double43 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-1.0d) + "'", double56 == (-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        int int1 = org.apache.commons.math.util.MathUtils.sign(100);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        int int2 = org.apache.commons.math.util.MathUtils.mulAndCheck((int) (short) 10, 99);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 990 + "'", int2 == 990);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment1);
        secondMoment1.increment(1.730777995336729E7d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance5.clear();
        double double7 = variance5.getResult();
        org.apache.commons.math.stat.descriptive.rank.Max max8 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long9 = max8.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs10 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean11 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs10);
        org.apache.commons.math.stat.descriptive.rank.Max max12 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long13 = max12.getN();
        geometricMean11.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max12);
        org.apache.commons.math.stat.descriptive.summary.Sum sum15 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray22 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double23 = sum15.evaluate(doubleArray22);
        geometricMean11.incrementAll(doubleArray22);
        double double25 = max8.evaluate(doubleArray22);
        double double26 = variance5.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment27);
        org.apache.commons.math.stat.descriptive.summary.Sum sum29 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray36 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double37 = sum29.evaluate(doubleArray36);
        double[] doubleArray44 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double47 = sum29.evaluate(doubleArray44, 0, 0);
        double double50 = mean28.evaluate(doubleArray44, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs51 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean52 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs51);
        org.apache.commons.math.stat.descriptive.rank.Max max53 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long54 = max53.getN();
        geometricMean52.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max53);
        org.apache.commons.math.stat.descriptive.summary.Sum sum56 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray63 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double64 = sum56.evaluate(doubleArray63);
        geometricMean52.incrementAll(doubleArray63);
        boolean boolean66 = org.apache.commons.math.util.MathUtils.equals(doubleArray44, doubleArray63);
        double double67 = variance5.evaluate(doubleArray63);
        secondMoment1.incrementAll(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        boolean boolean70 = variance69.isBiasCorrected();
        long long71 = variance69.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 310.0d + "'", double23 == 310.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2817.0666666666666d + "'", double26 == 2817.0666666666666d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 310.0d + "'", double37 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 310.0d + "'", double64 == 310.0d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2817.0666666666666d + "'", double67 == 2817.0666666666666d);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 7L + "'", long71 == 7L);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        float float1 = org.apache.commons.math.util.MathUtils.sign((float) 3199);
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.0f + "'", float1 == 1.0f);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment1.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean4 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment1);
        secondMoment1.clear();
        secondMoment1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics5 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics5.getMeanImpl();
        double double7 = summaryStatistics5.getSum();
        double double8 = summaryStatistics5.getGeometricMean();
        double double9 = summaryStatistics5.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = summaryStatistics5.getMaxImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics5.getSumImpl();
        summaryStatistics0.setSumImpl(storelessUnivariateStatistic11);
        double double13 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics14 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum15 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum15.clear();
        summaryStatistics14.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum15);
        long long18 = summaryStatistics14.getN();
        java.lang.String str19 = summaryStatistics14.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long21 = variance20.getN();
        summaryStatistics14.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance20);
        double double23 = summaryStatistics14.getMax();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic24 = summaryStatistics14.getVarianceImpl();
        summaryStatistics0.setSumImpl(storelessUnivariateStatistic24);
        double double26 = summaryStatistics0.getVariance();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str19, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic24);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long3 = secondMoment2.getN();
        secondMoment2.increment((double) (-1));
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        double double9 = mean8.getResult();
        mean8.clear();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        double double12 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = summaryStatistics0.getGeoMeanImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics14 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = summaryStatistics14.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic16 = summaryStatistics14.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic17 = summaryStatistics14.getSumsqImpl();
        boolean boolean18 = summaryStatistics0.equals((java.lang.Object) storelessUnivariateStatistic17);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic16);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics0.getSumsqImpl();
        double double3 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares4 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares4);
        double double6 = summaryStatistics0.getStandardDeviation();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        double double9 = summaryStatistics0.getMax();
        double double10 = summaryStatistics0.getMin();
        long long11 = summaryStatistics0.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares12 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares12.increment(9.619275968248924E151d);
        double double15 = sumOfSquares12.getResult();
        double[] doubleArray17 = new double[] { 1.0d };
        sumOfSquares12.incrementAll(doubleArray17);
        summaryStatistics0.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares12);
        sumOfSquares12.increment((double) 1078034432);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 9.253047015333127E303d + "'", double15 == 9.253047015333127E303d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean2 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = geometricMean3.getSumLogImpl();
        long long5 = geometricMean3.getN();
        geometricMean3.increment((double) Float.NaN);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares8 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares8.increment(9.619275968248924E151d);
        double double11 = sumOfSquares8.getResult();
        double[] doubleArray13 = new double[] { 1.0d };
        sumOfSquares8.incrementAll(doubleArray13);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = geometricMean3.evaluate(doubleArray13, (int) '#', 1552271548);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 9.253047015333127E303d + "'", double11 == 9.253047015333127E303d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        long long1 = org.apache.commons.math.util.MathUtils.indicator((long) 100);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.rank.Max max2 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long3 = max2.getN();
        geometricMean1.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max2);
        long long5 = geometricMean1.getN();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = geometricMean1.getSumLogImpl();
        long long7 = storelessUnivariateStatistic6.getN();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        int int2 = org.apache.commons.math.util.MathUtils.gcd(1078558720, (-231965925));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 145 + "'", int2 == 145);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        double double2 = org.apache.commons.math.util.MathUtils.binomialCoefficientLog(990, 0);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares0 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long1 = sumOfSquares0.getN();
        sumOfSquares0.increment((double) 145);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        float float1 = org.apache.commons.math.util.MathUtils.sign((float) (-2L));
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + (-1.0f) + "'", float1 == (-1.0f));
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.rank.Max max2 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long3 = max2.getN();
        geometricMean1.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max2);
        org.apache.commons.math.stat.descriptive.summary.Sum sum5 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray12 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double13 = sum5.evaluate(doubleArray12);
        geometricMean1.incrementAll(doubleArray12);
        double double15 = geometricMean1.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics16 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic17 = summaryStatistics16.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long19 = secondMoment18.getN();
        secondMoment18.increment((double) (-1));
        summaryStatistics16.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment18);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment23 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean24 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment23);
        double double25 = mean24.getResult();
        mean24.clear();
        summaryStatistics16.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean24);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic28 = summaryStatistics16.getMinImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic29 = summaryStatistics16.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic30 = summaryStatistics16.getSumImpl();
        // The following exception was thrown during execution in test generation
        try {
            geometricMean1.setSumLogImpl(storelessUnivariateStatistic30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementation must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 310.0d + "'", double13 == 310.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.730777995336729E7d + "'", double15 == 1.730777995336729E7d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic28);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic29);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic30);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum0.clear();
        double double2 = sum0.getResult();
        double double3 = sum0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment4 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean5 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment4);
        mean5.clear();
        double[] doubleArray12 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean5.incrementAll(doubleArray12, (int) (short) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment16);
        mean17.clear();
        double[] doubleArray24 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean17.incrementAll(doubleArray24, (int) (short) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.summary.Sum sum28 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray35 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double36 = sum28.evaluate(doubleArray35);
        double[] doubleArray43 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double46 = sum28.evaluate(doubleArray43, 0, 0);
        boolean boolean47 = org.apache.commons.math.util.MathUtils.equals(doubleArray24, doubleArray43);
        boolean boolean48 = org.apache.commons.math.util.MathUtils.equals(doubleArray12, doubleArray43);
        // The following exception was thrown during execution in test generation
        try {
            double double51 = sum0.evaluate(doubleArray43, (int) '4', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 310.0d + "'", double36 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        summaryStatistics0.clear();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics3 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = summaryStatistics3.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long6 = secondMoment5.getN();
        secondMoment5.increment((double) (-1));
        summaryStatistics3.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance10.clear();
        summaryStatistics3.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance10);
        summaryStatistics0.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance10);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs14 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean15 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs14);
        org.apache.commons.math.stat.descriptive.rank.Max max16 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long17 = max16.getN();
        geometricMean15.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max16);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic19 = geometricMean15.getSumLogImpl();
        summaryStatistics0.setMinImpl(storelessUnivariateStatistic19);
        double double21 = summaryStatistics0.getMin();
        double double22 = summaryStatistics0.getSum();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic19);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        int int2 = org.apache.commons.math.util.MathUtils.subAndCheck(0, (int) '#');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-35) + "'", int2 == (-35));
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        double double2 = summaryStatistics0.getSum();
        double double3 = summaryStatistics0.getGeometricMean();
        double double4 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs7 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfLogs7);
        double[] doubleArray9 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double12 = sumOfLogs7.evaluate(doubleArray9, 132, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input value array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        int int1 = org.apache.commons.math.util.MathUtils.indicator(0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics0.getSumsqImpl();
        double double3 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares4 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares4);
        sumOfSquares4.increment(1.0785587201926284E9d);
        long long8 = sumOfSquares4.getN();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance0.clear();
        double double2 = variance0.getResult();
        org.apache.commons.math.stat.descriptive.rank.Max max3 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long4 = max3.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs5 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean6 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs5);
        org.apache.commons.math.stat.descriptive.rank.Max max7 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long8 = max7.getN();
        geometricMean6.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max7);
        org.apache.commons.math.stat.descriptive.summary.Sum sum10 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray17 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double18 = sum10.evaluate(doubleArray17);
        geometricMean6.incrementAll(doubleArray17);
        double double20 = max3.evaluate(doubleArray17);
        double double21 = variance0.evaluate(doubleArray17);
        long long22 = variance0.getN();
        variance0.increment((double) (-51));
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment25);
        mean26.clear();
        double[] doubleArray33 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean26.incrementAll(doubleArray33, (int) (short) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment37 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean38 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment37);
        mean38.clear();
        double[] doubleArray45 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean38.incrementAll(doubleArray45, (int) (short) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.summary.Sum sum49 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray56 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double57 = sum49.evaluate(doubleArray56);
        double[] doubleArray64 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double67 = sum49.evaluate(doubleArray64, 0, 0);
        boolean boolean68 = org.apache.commons.math.util.MathUtils.equals(doubleArray45, doubleArray64);
        boolean boolean69 = org.apache.commons.math.util.MathUtils.equals(doubleArray33, doubleArray64);
        double double70 = variance0.evaluate(doubleArray64);
        long long71 = variance0.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 310.0d + "'", double18 == 310.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2817.0666666666666d + "'", double21 == 2817.0666666666666d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 310.0d + "'", double57 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 14635.2d + "'", double70 == 14635.2d);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        long long5 = summaryStatistics0.getN();
        double double6 = summaryStatistics0.getSum();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean2 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        sumOfLogs0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment4 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean5 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment4);
        org.apache.commons.math.stat.descriptive.summary.Sum sum6 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray13 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double14 = sum6.evaluate(doubleArray13);
        double[] doubleArray21 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double24 = sum6.evaluate(doubleArray21, 0, 0);
        double double27 = mean5.evaluate(doubleArray21, 1, (int) (byte) 1);
        mean5.increment((double) 10L);
        mean5.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment31);
        org.apache.commons.math.stat.descriptive.summary.Sum sum33 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray40 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double41 = sum33.evaluate(doubleArray40);
        double[] doubleArray48 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double51 = sum33.evaluate(doubleArray48, 0, 0);
        double double54 = mean32.evaluate(doubleArray48, 1, (int) (byte) 1);
        double double57 = mean5.evaluate(doubleArray48, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            sumOfLogs0.incrementAll(doubleArray48, 2601, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 310.0d + "'", double14 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 310.0d + "'", double41 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1.0d) + "'", double54 == (-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        int int1 = org.apache.commons.math.util.MathUtils.hash(2389.3333333333335d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-368574463) + "'", int1 == (-368574463));
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        long long9 = summaryStatistics0.getN();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics2 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum3 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum3.clear();
        summaryStatistics2.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum3);
        long long6 = summaryStatistics2.getN();
        java.lang.String str7 = summaryStatistics2.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long9 = variance8.getN();
        summaryStatistics2.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance8);
        double double11 = summaryStatistics2.getMin();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long13 = secondMoment12.getN();
        secondMoment12.increment((double) (-1));
        summaryStatistics2.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment12);
        geometricMean1.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment12);
        secondMoment12.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment12);
        variance20.clear();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str7, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        double double2 = summaryStatistics0.getSum();
        double double3 = summaryStatistics0.getGeometricMean();
        double double4 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getMaxImpl();
        storelessUnivariateStatistic5.clear();
        org.apache.commons.math.stat.descriptive.rank.Max max7 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long8 = max7.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs9 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean10 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs9);
        org.apache.commons.math.stat.descriptive.rank.Max max11 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long12 = max11.getN();
        geometricMean10.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max11);
        org.apache.commons.math.stat.descriptive.summary.Sum sum14 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray21 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double22 = sum14.evaluate(doubleArray21);
        geometricMean10.incrementAll(doubleArray21);
        double double24 = max7.evaluate(doubleArray21);
        // The following exception was thrown during execution in test generation
        try {
            double double27 = storelessUnivariateStatistic5.evaluate(doubleArray21, 0, 99);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 310.0d + "'", double22 == 310.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        double double2 = sumOfLogs0.getResult();
        double double3 = sumOfLogs0.getResult();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean4 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        sumOfLogs0.clear();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs6 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double7 = sumOfLogs6.getResult();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean8 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs6);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean9 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs6);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance10.clear();
        double double12 = variance10.getResult();
        org.apache.commons.math.stat.descriptive.rank.Max max13 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long14 = max13.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs15 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean16 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs15);
        org.apache.commons.math.stat.descriptive.rank.Max max17 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long18 = max17.getN();
        geometricMean16.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max17);
        org.apache.commons.math.stat.descriptive.summary.Sum sum20 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray27 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double28 = sum20.evaluate(doubleArray27);
        geometricMean16.incrementAll(doubleArray27);
        double double30 = max13.evaluate(doubleArray27);
        double double31 = variance10.evaluate(doubleArray27);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment32 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean33 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment32);
        org.apache.commons.math.stat.descriptive.summary.Sum sum34 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray41 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double42 = sum34.evaluate(doubleArray41);
        double[] doubleArray49 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double52 = sum34.evaluate(doubleArray49, 0, 0);
        double double55 = mean33.evaluate(doubleArray49, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs56 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean57 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs56);
        org.apache.commons.math.stat.descriptive.rank.Max max58 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long59 = max58.getN();
        geometricMean57.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max58);
        org.apache.commons.math.stat.descriptive.summary.Sum sum61 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray68 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double69 = sum61.evaluate(doubleArray68);
        geometricMean57.incrementAll(doubleArray68);
        boolean boolean71 = org.apache.commons.math.util.MathUtils.equals(doubleArray49, doubleArray68);
        double double72 = variance10.evaluate(doubleArray68);
        double double73 = sumOfLogs6.evaluate(doubleArray68);
        // The following exception was thrown during execution in test generation
        try {
            double double76 = sumOfLogs0.evaluate(doubleArray68, 990, 51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 310.0d + "'", double28 == 310.0d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 2817.0666666666666d + "'", double31 == 2817.0666666666666d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 310.0d + "'", double42 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-1.0d) + "'", double55 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 310.0d + "'", double69 == 310.0d);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2817.0666666666666d + "'", double72 == 2817.0666666666666d);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        // The following exception was thrown during execution in test generation
        try {
            int int2 = org.apache.commons.math.util.MathUtils.lcm(10, (-1071382528));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: overflow: mul");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = summaryStatistics0.getSummary();
        double double2 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean4 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment3);
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment3);
        double double6 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic7 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = summaryStatistics0.getSumLogImpl();
        double double9 = summaryStatistics0.getStandardDeviation();
        org.junit.Assert.assertNotNull(summaryStatistics0);
        org.junit.Assert.assertNotNull(statisticalSummary1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic7);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        double double6 = summaryStatistics0.getSumsq();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        java.lang.Class<?> wildcardClass9 = summaryStatistics0.getClass();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics10 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance((java.lang.Class) wildcardClass9);
        double double11 = summaryStatistics10.getMax();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs12 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double13 = sumOfLogs12.getResult();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean14 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs12);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean15 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs12);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic16 = geometricMean15.getSumLogImpl();
        summaryStatistics10.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean15);
        long long18 = geometricMean15.getN();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(summaryStatistics10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long3 = secondMoment2.getN();
        secondMoment2.increment((double) (-1));
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        double double9 = mean8.getResult();
        mean8.clear();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        org.apache.commons.math.stat.descriptive.rank.Max max12 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long13 = max12.getN();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max12);
        long long15 = max12.getN();
        long long16 = max12.getN();
        max12.clear();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        long long2 = org.apache.commons.math.util.MathUtils.mulAndCheck((long) 1104154720, (long) 1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1104154720L + "'", long2 == 1104154720L);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        float float1 = org.apache.commons.math.util.MathUtils.sign((float) (-27L));
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + (-1.0f) + "'", float1 == (-1.0f));
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics0.getSumsqImpl();
        double double3 = summaryStatistics0.getMax();
        long long4 = summaryStatistics0.getN();
        double double5 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics0.getGeoMeanImpl();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean2 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        long long3 = sumOfLogs0.getN();
        sumOfLogs0.clear();
        sumOfLogs0.increment(11013.232874703393d);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        // The following exception was thrown during execution in test generation
        try {
            double double2 = org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(0, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must have n >= k for binomial coefficient (n,k)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        double double2 = org.apache.commons.math.util.MathUtils.log((double) (-3191L), (double) 'a');
        org.junit.Assert.assertTrue(Double.isNaN(double2));
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) 1.0f);
        geometricMean0.increment((double) (byte) -1);
        geometricMean0.clear();
        double double6 = geometricMean0.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        int int2 = org.apache.commons.math.util.MathUtils.gcd(3200, 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3200 + "'", int2 == 3200);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        long long1 = org.apache.commons.math.util.MathUtils.indicator((-27L));
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        int int1 = org.apache.commons.math.util.MathUtils.hash(3628800.0d);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1095479168 + "'", int1 == 1095479168);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        double double1 = org.apache.commons.math.util.MathUtils.sinh((double) (-231965925));
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.NEGATIVE_INFINITY + "'", double1 == Double.NEGATIVE_INFINITY);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares0 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        double double1 = sumOfSquares0.getResult();
        sumOfSquares0.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance3 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance3.clear();
        double double5 = variance3.getResult();
        org.apache.commons.math.stat.descriptive.rank.Max max6 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long7 = max6.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs8 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean9 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs8);
        org.apache.commons.math.stat.descriptive.rank.Max max10 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long11 = max10.getN();
        geometricMean9.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max10);
        org.apache.commons.math.stat.descriptive.summary.Sum sum13 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray20 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double21 = sum13.evaluate(doubleArray20);
        geometricMean9.incrementAll(doubleArray20);
        double double23 = max6.evaluate(doubleArray20);
        double double24 = variance3.evaluate(doubleArray20);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment25);
        org.apache.commons.math.stat.descriptive.summary.Sum sum27 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray34 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double35 = sum27.evaluate(doubleArray34);
        double[] doubleArray42 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double45 = sum27.evaluate(doubleArray42, 0, 0);
        double double48 = mean26.evaluate(doubleArray42, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs49 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean50 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs49);
        org.apache.commons.math.stat.descriptive.rank.Max max51 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long52 = max51.getN();
        geometricMean50.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max51);
        org.apache.commons.math.stat.descriptive.summary.Sum sum54 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray61 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double62 = sum54.evaluate(doubleArray61);
        geometricMean50.incrementAll(doubleArray61);
        boolean boolean64 = org.apache.commons.math.util.MathUtils.equals(doubleArray42, doubleArray61);
        double double65 = variance3.evaluate(doubleArray61);
        org.apache.commons.math.stat.descriptive.summary.Sum sum66 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray73 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double74 = sum66.evaluate(doubleArray73);
        double[] doubleArray81 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double84 = sum66.evaluate(doubleArray81, 0, 0);
        double double86 = variance3.evaluate(doubleArray81, (double) 35);
        int int87 = org.apache.commons.math.util.MathUtils.hash(doubleArray81);
        // The following exception was thrown during execution in test generation
        try {
            double double90 = sumOfSquares0.evaluate(doubleArray81, (-1071382528), 971883398);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 310.0d + "'", double21 == 310.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2817.0666666666666d + "'", double24 == 2817.0666666666666d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 310.0d + "'", double35 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-1.0d) + "'", double48 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 310.0d + "'", double62 == 310.0d);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 2817.0666666666666d + "'", double65 == 2817.0666666666666d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 310.0d + "'", double74 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 14635.2d + "'", double86 == 14635.2d);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2050442118 + "'", int87 == 2050442118);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        double double2 = org.apache.commons.math.util.MathUtils.binomialCoefficientDouble((int) 'a', (int) (short) 0);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        double double2 = org.apache.commons.math.util.MathUtils.nextAfter((double) 371080922, 1.3440585709080676E43d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 3.7108092200000006E8d + "'", double2 == 3.7108092200000006E8d);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        int int2 = org.apache.commons.math.util.MathUtils.addAndCheck((int) (byte) 10, (-368574463));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-368574453) + "'", int2 == (-368574453));
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.rank.Max max2 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long3 = max2.getN();
        geometricMean1.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max2);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = geometricMean1.getSumLogImpl();
        geometricMean1.clear();
        geometricMean1.increment(14085.333333333332d);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        org.apache.commons.math.stat.descriptive.rank.Max max0 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long1 = max0.getN();
        java.lang.Class<?> wildcardClass2 = max0.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        int int2 = org.apache.commons.math.util.MathUtils.gcd(971883398, 2050438918);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean2 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        double double3 = geometricMean2.getResult();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = geometricMean2.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.summary.Sum sum5 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray12 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double13 = sum5.evaluate(doubleArray12);
        double[] doubleArray20 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double23 = sum5.evaluate(doubleArray20, 0, 0);
        int int24 = org.apache.commons.math.util.MathUtils.hash(doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            double double27 = geometricMean2.evaluate(doubleArray20, 87, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 310.0d + "'", double13 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2050442118 + "'", int24 == 2050442118);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long3 = secondMoment2.getN();
        secondMoment2.increment((double) (-1));
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        double double9 = mean8.getResult();
        mean8.clear();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        double double12 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.summary.Sum sum13 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum13.clear();
        sum13.clear();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum13);
        long long17 = sum13.getN();
        sum13.clear();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long3 = secondMoment2.getN();
        secondMoment2.increment((double) (-1));
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        double double9 = mean8.getResult();
        mean8.clear();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        double double12 = summaryStatistics0.getVariance();
        summaryStatistics0.clear();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        int int1 = org.apache.commons.math.util.MathUtils.sign(145);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        double double2 = sumOfLogs0.getResult();
        double double3 = sumOfLogs0.getResult();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean4 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        sumOfLogs0.clear();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics6 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic7 = summaryStatistics6.getMeanImpl();
        double double8 = summaryStatistics6.getSum();
        long long9 = summaryStatistics6.getN();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = summaryStatistics6.getSumLogImpl();
        boolean boolean11 = sumOfLogs0.equals((java.lang.Object) storelessUnivariateStatistic10);
        sumOfLogs0.clear();
        org.apache.commons.math.stat.descriptive.rank.Max max13 = new org.apache.commons.math.stat.descriptive.rank.Max();
        max13.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment16);
        org.apache.commons.math.stat.descriptive.summary.Sum sum18 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray25 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double26 = sum18.evaluate(doubleArray25);
        double[] doubleArray33 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double36 = sum18.evaluate(doubleArray33, 0, 0);
        double double39 = mean17.evaluate(doubleArray33, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs40 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean41 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs40);
        org.apache.commons.math.stat.descriptive.rank.Max max42 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long43 = max42.getN();
        geometricMean41.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max42);
        org.apache.commons.math.stat.descriptive.summary.Sum sum45 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray52 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double53 = sum45.evaluate(doubleArray52);
        geometricMean41.incrementAll(doubleArray52);
        boolean boolean55 = org.apache.commons.math.util.MathUtils.equals(doubleArray33, doubleArray52);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment56);
        org.apache.commons.math.stat.descriptive.summary.Sum sum58 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray65 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double66 = sum58.evaluate(doubleArray65);
        double[] doubleArray73 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double76 = sum58.evaluate(doubleArray73, 0, 0);
        double double79 = mean57.evaluate(doubleArray73, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs80 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean81 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs80);
        org.apache.commons.math.stat.descriptive.rank.Max max82 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long83 = max82.getN();
        geometricMean81.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max82);
        org.apache.commons.math.stat.descriptive.summary.Sum sum85 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray92 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double93 = sum85.evaluate(doubleArray92);
        geometricMean81.incrementAll(doubleArray92);
        boolean boolean95 = org.apache.commons.math.util.MathUtils.equals(doubleArray73, doubleArray92);
        boolean boolean96 = org.apache.commons.math.util.MathUtils.equals(doubleArray33, doubleArray73);
        double double97 = max13.evaluate(doubleArray73);
        sumOfLogs0.incrementAll(doubleArray73);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 310.0d + "'", double26 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + (-1.0d) + "'", double39 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 310.0d + "'", double53 == 310.0d);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 310.0d + "'", double66 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + (-1.0d) + "'", double79 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 310.0d + "'", double93 == 310.0d);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 310.0d + "'", double97 == 310.0d);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long3 = secondMoment2.getN();
        secondMoment2.increment((double) (-1));
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment2);
        long long7 = summaryStatistics0.getN();
        double double8 = summaryStatistics0.getVariance();
        double double9 = summaryStatistics0.getSumsq();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        org.apache.commons.math.stat.descriptive.rank.Max max0 = new org.apache.commons.math.stat.descriptive.rank.Max();
        double double1 = max0.getResult();
        max0.clear();
        max0.clear();
        long long4 = max0.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = summaryStatistics0.getSummary();
        double double2 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean4 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment3);
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment3);
        double double6 = summaryStatistics0.getStandardDeviation();
        double double7 = summaryStatistics0.getVariance();
        double double8 = summaryStatistics0.getMean();
        org.junit.Assert.assertNotNull(summaryStatistics0);
        org.junit.Assert.assertNotNull(statisticalSummary1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        org.apache.commons.math.stat.descriptive.rank.Max max0 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long1 = max0.getN();
        max0.increment(1.1070527826035925E10d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment4 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean5 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment4);
        org.apache.commons.math.stat.descriptive.summary.Sum sum6 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray13 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double14 = sum6.evaluate(doubleArray13);
        double[] doubleArray21 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double24 = sum6.evaluate(doubleArray21, 0, 0);
        double double27 = mean5.evaluate(doubleArray21, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs28 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean29 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs28);
        org.apache.commons.math.stat.descriptive.rank.Max max30 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long31 = max30.getN();
        geometricMean29.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max30);
        org.apache.commons.math.stat.descriptive.summary.Sum sum33 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray40 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double41 = sum33.evaluate(doubleArray40);
        geometricMean29.incrementAll(doubleArray40);
        boolean boolean43 = org.apache.commons.math.util.MathUtils.equals(doubleArray21, doubleArray40);
        // The following exception was thrown during execution in test generation
        try {
            double double46 = max0.evaluate(doubleArray40, 35, 1072693248);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 310.0d + "'", double14 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 310.0d + "'", double41 == 310.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics0.getSumsqImpl();
        double double3 = summaryStatistics0.getMax();
        long long4 = summaryStatistics0.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs6 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean7 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs6);
        org.apache.commons.math.stat.descriptive.rank.Max max8 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long9 = max8.getN();
        geometricMean7.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max8);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = geometricMean7.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics12 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = summaryStatistics12.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long15 = secondMoment14.getN();
        secondMoment14.increment((double) (-1));
        summaryStatistics12.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment14);
        geometricMean7.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment14);
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance20);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic9 = summaryStatistics0.getVarianceImpl();
        double double10 = summaryStatistics0.getVariance();
        double double11 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic12 = summaryStatistics0.getGeoMeanImpl();
        double double13 = summaryStatistics0.getStandardDeviation();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment1);
        secondMoment1.increment(1.730777995336729E7d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long6 = variance5.getN();
        boolean boolean7 = variance5.isBiasCorrected();
        double double8 = variance5.getResult();
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long3 = secondMoment2.getN();
        secondMoment2.increment((double) (-1));
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        double double9 = mean8.getResult();
        mean8.clear();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        org.apache.commons.math.stat.descriptive.rank.Max max12 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long13 = max12.getN();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max12);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = summaryStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic16 = summaryStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.rank.Max max17 = new org.apache.commons.math.stat.descriptive.rank.Max();
        summaryStatistics0.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max17);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs19 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double20 = sumOfLogs19.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.increment((double) 101L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment25);
        mean26.clear();
        double[] doubleArray33 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean26.incrementAll(doubleArray33, (int) (short) 1, (int) (byte) 0);
        double double37 = variance22.evaluate(doubleArray33);
        double double38 = sumOfLogs19.evaluate(doubleArray33);
        // The following exception was thrown during execution in test generation
        try {
            double double41 = max17.evaluate(doubleArray33, 1104154720, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2806.7d + "'", double37 == 2806.7d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long3 = secondMoment2.getN();
        secondMoment2.increment((double) (-1));
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment2);
        long long7 = summaryStatistics0.getN();
        double double8 = summaryStatistics0.getVariance();
        double double9 = summaryStatistics0.getMin();
        double double10 = summaryStatistics0.getSum();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics5 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics5.getMeanImpl();
        double double7 = summaryStatistics5.getSum();
        double double8 = summaryStatistics5.getGeometricMean();
        double double9 = summaryStatistics5.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = summaryStatistics5.getMaxImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics5.getSumImpl();
        summaryStatistics0.setSumImpl(storelessUnivariateStatistic11);
        double double13 = summaryStatistics0.getVariance();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment2);
        org.apache.commons.math.stat.descriptive.summary.Sum sum4 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray11 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double12 = sum4.evaluate(doubleArray11);
        double[] doubleArray19 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double22 = sum4.evaluate(doubleArray19, 0, 0);
        double double25 = mean3.evaluate(doubleArray19, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance26.clear();
        double double28 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.rank.Max max29 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long30 = max29.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs31 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean32 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs31);
        org.apache.commons.math.stat.descriptive.rank.Max max33 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long34 = max33.getN();
        geometricMean32.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max33);
        org.apache.commons.math.stat.descriptive.summary.Sum sum36 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray43 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double44 = sum36.evaluate(doubleArray43);
        geometricMean32.incrementAll(doubleArray43);
        double double46 = max29.evaluate(doubleArray43);
        double double47 = variance26.evaluate(doubleArray43);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment48 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean49 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment48);
        org.apache.commons.math.stat.descriptive.summary.Sum sum50 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray57 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double58 = sum50.evaluate(doubleArray57);
        double[] doubleArray65 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double68 = sum50.evaluate(doubleArray65, 0, 0);
        double double71 = mean49.evaluate(doubleArray65, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs72 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean73 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs72);
        org.apache.commons.math.stat.descriptive.rank.Max max74 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long75 = max74.getN();
        geometricMean73.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max74);
        org.apache.commons.math.stat.descriptive.summary.Sum sum77 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray84 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double85 = sum77.evaluate(doubleArray84);
        geometricMean73.incrementAll(doubleArray84);
        boolean boolean87 = org.apache.commons.math.util.MathUtils.equals(doubleArray65, doubleArray84);
        double double88 = variance26.evaluate(doubleArray84);
        boolean boolean89 = org.apache.commons.math.util.MathUtils.equals(doubleArray19, doubleArray84);
        double double90 = sumOfLogs0.evaluate(doubleArray84);
        double double91 = sumOfLogs0.getResult();
        long long92 = sumOfLogs0.getN();
        double double93 = sumOfLogs0.getResult();
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 310.0d + "'", double12 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-1.0d) + "'", double25 == (-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 310.0d + "'", double44 == 310.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2817.0666666666666d + "'", double47 == 2817.0666666666666d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 310.0d + "'", double58 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-1.0d) + "'", double71 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 310.0d + "'", double85 == 310.0d);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 2817.0666666666666d + "'", double88 == 2817.0666666666666d);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double90));
        org.junit.Assert.assertTrue(Double.isNaN(double91));
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double93));
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        // The following exception was thrown during execution in test generation
        try {
            float float3 = org.apache.commons.math.util.MathUtils.round((float) 990, (int) ' ', 62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid rounding method.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        double double2 = summaryStatistics0.getSum();
        long long3 = summaryStatistics0.getN();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = summaryStatistics0.getSumLogImpl();
        double double5 = summaryStatistics0.getVariance();
        double double6 = summaryStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic7 = summaryStatistics0.getMeanImpl();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic7);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        long long2 = org.apache.commons.math.util.MathUtils.mulAndCheck(100L, (-86400L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-8640000L) + "'", long2 == (-8640000L));
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean2 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = geometricMean3.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = geometricMean3.getSumLogImpl();
        double double6 = storelessUnivariateStatistic5.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        boolean boolean9 = variance6.isBiasCorrected();
        double double10 = variance6.getResult();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs11 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean12 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs11);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean13 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs11);
        org.apache.commons.math.stat.descriptive.summary.Sum sum14 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray21 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double22 = sum14.evaluate(doubleArray21);
        double double23 = sumOfLogs11.evaluate(doubleArray21);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = variance6.evaluate(doubleArray21, 1552271548, (-35));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 310.0d + "'", double22 == 310.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        double double1 = org.apache.commons.math.util.MathUtils.sinh((double) (-97L));
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-6.691673596021348E41d) + "'", double1 == (-6.691673596021348E41d));
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        // The following exception was thrown during execution in test generation
        try {
            float float3 = org.apache.commons.math.util.MathUtils.round((float) 32, 1078034432, 1552271548);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid rounding method.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        long long2 = org.apache.commons.math.util.MathUtils.mulAndCheck((long) (-51), 35L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1785L) + "'", long2 == (-1785L));
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = summaryStatistics0.getSummary();
        double double3 = summaryStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs4 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean5 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs4);
        org.apache.commons.math.stat.descriptive.rank.Max max6 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long7 = max6.getN();
        geometricMean5.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max6);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic9 = geometricMean5.getSumLogImpl();
        geometricMean5.clear();
        geometricMean5.clear();
        summaryStatistics0.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean5);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = geometricMean5.getSumLogImpl();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertNotNull(statisticalSummary2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic9);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long3 = secondMoment2.getN();
        secondMoment2.increment((double) (-1));
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        double double9 = mean8.getResult();
        mean8.clear();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        double double12 = summaryStatistics0.getVariance();
        double double13 = summaryStatistics0.getStandardDeviation();
        double double14 = summaryStatistics0.getMin();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        float float1 = org.apache.commons.math.util.MathUtils.sign(Float.NaN);
        org.junit.Assert.assertTrue(Float.isNaN(float1));
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        double double2 = summaryStatistics0.getSum();
        double double3 = summaryStatistics0.getGeometricMean();
        double double4 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getMaxImpl();
        double double6 = summaryStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs7 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double8 = sumOfLogs7.getResult();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean9 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs7);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean10 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs7);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = geometricMean10.getSumLogImpl();
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean10);
        double double13 = summaryStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean14 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics15 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum16 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum16.clear();
        summaryStatistics15.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum16);
        long long19 = summaryStatistics15.getN();
        java.lang.String str20 = summaryStatistics15.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long22 = variance21.getN();
        summaryStatistics15.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance21);
        double double24 = summaryStatistics15.getMin();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long26 = secondMoment25.getN();
        secondMoment25.increment((double) (-1));
        summaryStatistics15.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment25);
        geometricMean14.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment25);
        secondMoment25.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment25);
        long long33 = secondMoment25.getN();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment25);
        secondMoment25.increment((-42.0d));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str20, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        org.apache.commons.math.stat.descriptive.rank.Max max0 = new org.apache.commons.math.stat.descriptive.rank.Max();
        max0.increment(0.0d);
        org.apache.commons.math.stat.descriptive.rank.Max max3 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long4 = max3.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs5 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean6 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs5);
        org.apache.commons.math.stat.descriptive.rank.Max max7 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long8 = max7.getN();
        geometricMean6.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max7);
        org.apache.commons.math.stat.descriptive.summary.Sum sum10 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray17 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double18 = sum10.evaluate(doubleArray17);
        geometricMean6.incrementAll(doubleArray17);
        double double20 = max3.evaluate(doubleArray17);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = max0.evaluate(doubleArray17, 1104152832, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 310.0d + "'", double18 == 310.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long3 = secondMoment2.getN();
        secondMoment2.increment((double) (-1));
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        double double9 = mean8.getResult();
        mean8.clear();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        org.apache.commons.math.stat.descriptive.rank.Max max12 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long13 = max12.getN();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max12);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = summaryStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic16 = summaryStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.rank.Max max17 = new org.apache.commons.math.stat.descriptive.rank.Max();
        summaryStatistics0.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max17);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment19);
        mean20.clear();
        double[] doubleArray27 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean20.incrementAll(doubleArray27, (int) (short) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment31);
        mean32.clear();
        double[] doubleArray39 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean32.incrementAll(doubleArray39, (int) (short) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.summary.Sum sum43 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray50 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double51 = sum43.evaluate(doubleArray50);
        double[] doubleArray58 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double61 = sum43.evaluate(doubleArray58, 0, 0);
        boolean boolean62 = org.apache.commons.math.util.MathUtils.equals(doubleArray39, doubleArray58);
        boolean boolean63 = org.apache.commons.math.util.MathUtils.equals(doubleArray27, doubleArray58);
        // The following exception was thrown during execution in test generation
        try {
            double double66 = max17.evaluate(doubleArray58, (-368574463), 87);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic16);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 310.0d + "'", double51 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long3 = secondMoment2.getN();
        secondMoment2.increment((double) (-1));
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment2);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic7 = null;
        summaryStatistics0.setSumImpl(storelessUnivariateStatistic7);
        // The following exception was thrown during execution in test generation
        try {
            double double9 = summaryStatistics0.getSum();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        float float1 = org.apache.commons.math.util.MathUtils.indicator((-0.0f));
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.0f + "'", float1 == 1.0f);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        double double2 = org.apache.commons.math.util.MathUtils.log(1.1070527826035925E10d, (double) 2);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.02997062433018895d + "'", double2 == 0.02997062433018895d);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean2 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics3 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum4 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum4.clear();
        summaryStatistics3.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum4);
        long long7 = summaryStatistics3.getN();
        java.lang.String str8 = summaryStatistics3.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long10 = variance9.getN();
        summaryStatistics3.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance9);
        double double12 = summaryStatistics3.getMin();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long14 = secondMoment13.getN();
        secondMoment13.increment((double) (-1));
        summaryStatistics3.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment13);
        geometricMean2.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment13);
        secondMoment13.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment13);
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment13);
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance21);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics23 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic24 = summaryStatistics23.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long26 = secondMoment25.getN();
        secondMoment25.increment((double) (-1));
        summaryStatistics23.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment25);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment30 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean31 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment30);
        double double32 = mean31.getResult();
        mean31.clear();
        summaryStatistics23.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean31);
        org.apache.commons.math.stat.descriptive.rank.Max max35 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long36 = max35.getN();
        summaryStatistics23.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max35);
        long long38 = max35.getN();
        long long39 = max35.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max35);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str8, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics0.getSumsqImpl();
        double double3 = summaryStatistics0.getMax();
        long long4 = summaryStatistics0.getN();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics5 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics5.getMeanImpl();
        summaryStatistics5.clear();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics8 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic9 = summaryStatistics8.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long11 = secondMoment10.getN();
        secondMoment10.increment((double) (-1));
        summaryStatistics8.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance15.clear();
        summaryStatistics8.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance15);
        summaryStatistics5.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance15);
        variance15.clear();
        variance15.clear();
        boolean boolean21 = variance15.isBiasCorrected();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance15);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic23 = summaryStatistics0.getVarianceImpl();
        storelessUnivariateStatistic23.increment((double) 0.0f);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic23);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = summaryStatistics0.getSummary();
        double double2 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean4 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment3);
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        java.lang.Class<?> wildcardClass7 = variance6.getClass();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics8 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance((java.lang.Class) wildcardClass7);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.descriptive.moment.Variance cannot be cast to org.apache.commons.math.stat.descriptive.SummaryStatistics");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(summaryStatistics0);
        org.junit.Assert.assertNotNull(statisticalSummary1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        double double5 = summaryStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.rank.Max max6 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long7 = max6.getN();
        long long8 = max6.getN();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max6);
        double double10 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics11 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum12 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum12.clear();
        summaryStatistics11.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum12);
        long long15 = summaryStatistics11.getN();
        java.lang.String str16 = summaryStatistics11.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long18 = variance17.getN();
        summaryStatistics11.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance17);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic20 = summaryStatistics11.getVarianceImpl();
        double double21 = summaryStatistics11.getVariance();
        double double22 = summaryStatistics11.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic23 = summaryStatistics11.getGeoMeanImpl();
        boolean boolean24 = summaryStatistics0.equals((java.lang.Object) summaryStatistics11);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str16, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        org.apache.commons.math.stat.descriptive.rank.Min min0 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min0.clear();
        min0.increment((double) 100L);
        long long4 = min0.getN();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares0 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares0.increment(9.619275968248924E151d);
        double double3 = sumOfSquares0.getResult();
        double[] doubleArray5 = new double[] { 1.0d };
        sumOfSquares0.incrementAll(doubleArray5);
        long long7 = sumOfSquares0.getN();
        sumOfSquares0.clear();
        long long9 = sumOfSquares0.getN();
        long long10 = sumOfSquares0.getN();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 9.253047015333127E303d + "'", double3 == 9.253047015333127E303d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        long long1 = org.apache.commons.math.util.MathUtils.sign(92786370000L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.rank.Max max2 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long3 = max2.getN();
        geometricMean1.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max2);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = geometricMean1.getSumLogImpl();
        geometricMean1.clear();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs7 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean8 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs7);
        geometricMean1.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean8);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = geometricMean1.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.summary.Sum sum11 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray18 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double19 = sum11.evaluate(doubleArray18);
        double[] doubleArray26 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double29 = sum11.evaluate(doubleArray26, 0, 0);
        org.apache.commons.math.stat.descriptive.summary.Sum sum30 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray37 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double38 = sum30.evaluate(doubleArray37);
        double[] doubleArray45 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double48 = sum30.evaluate(doubleArray45, 0, 0);
        int int49 = org.apache.commons.math.util.MathUtils.hash(doubleArray45);
        double double52 = sum11.evaluate(doubleArray45, (int) (byte) 0, (int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            double double55 = geometricMean1.evaluate(doubleArray45, (-368574463), (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 310.0d + "'", double19 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 310.0d + "'", double38 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2050442118 + "'", int49 == 2050442118);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1.0d) + "'", double52 == (-1.0d));
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = summaryStatistics0.getSummary();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics4 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics4.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary6 = summaryStatistics4.getSummary();
        double double7 = summaryStatistics4.getSumsq();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = summaryStatistics4.getMinImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics9 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum10 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum10.clear();
        summaryStatistics9.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum10);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = summaryStatistics9.getMeanImpl();
        summaryStatistics4.setGeoMeanImpl(storelessUnivariateStatistic13);
        summaryStatistics0.setMaxImpl(storelessUnivariateStatistic13);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs17 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean18 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs17);
        org.apache.commons.math.stat.descriptive.rank.Max max19 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long20 = max19.getN();
        geometricMean18.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max19);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic22 = geometricMean18.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics23 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic24 = summaryStatistics23.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long26 = secondMoment25.getN();
        secondMoment25.increment((double) (-1));
        summaryStatistics23.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment25);
        geometricMean18.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment25);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs32 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double33 = sumOfLogs32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance35.increment((double) 101L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment38);
        mean39.clear();
        double[] doubleArray46 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean39.incrementAll(doubleArray46, (int) (short) 1, (int) (byte) 0);
        double double50 = variance35.evaluate(doubleArray46);
        double double51 = sumOfLogs32.evaluate(doubleArray46);
        double double52 = variance31.evaluate(doubleArray46);
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance31);
        variance31.setBiasCorrected(true);
        org.junit.Assert.assertNotNull(summaryStatistics0);
        org.junit.Assert.assertNotNull(statisticalSummary1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertNotNull(statisticalSummary6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic22);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2806.7d + "'", double50 == 2806.7d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2245.3599999999997d + "'", double52 == 2245.3599999999997d);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray7 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double8 = sum0.evaluate(doubleArray7);
        double[] doubleArray15 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double18 = sum0.evaluate(doubleArray15, 0, 0);
        org.apache.commons.math.stat.descriptive.summary.Sum sum19 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray26 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double27 = sum19.evaluate(doubleArray26);
        double[] doubleArray34 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double37 = sum19.evaluate(doubleArray34, 0, 0);
        int int38 = org.apache.commons.math.util.MathUtils.hash(doubleArray34);
        double double41 = sum0.evaluate(doubleArray34, (int) (byte) 0, (int) (short) 1);
        double double42 = sum0.getResult();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 310.0d + "'", double8 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 310.0d + "'", double27 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2050442118 + "'", int38 == 2050442118);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + (-1.0d) + "'", double41 == (-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.math.util.MathUtils.binomialCoefficient(99, 1072693269);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must have n >= k for binomial coefficient (n,k)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        org.apache.commons.math.stat.descriptive.rank.Min min0 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min0.increment(0.0d);
        min0.increment(0.0d);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares5 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares5.increment(9.619275968248924E151d);
        double double8 = sumOfSquares5.getResult();
        double[] doubleArray10 = new double[] { 1.0d };
        sumOfSquares5.incrementAll(doubleArray10);
        boolean boolean12 = min0.equals((java.lang.Object) sumOfSquares5);
        long long13 = min0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean15 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment14);
        org.apache.commons.math.stat.descriptive.summary.Sum sum16 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray23 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double24 = sum16.evaluate(doubleArray23);
        double[] doubleArray31 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double34 = sum16.evaluate(doubleArray31, 0, 0);
        double double37 = mean15.evaluate(doubleArray31, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs38 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean39 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs38);
        org.apache.commons.math.stat.descriptive.rank.Max max40 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long41 = max40.getN();
        geometricMean39.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max40);
        org.apache.commons.math.stat.descriptive.summary.Sum sum43 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray50 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double51 = sum43.evaluate(doubleArray50);
        geometricMean39.incrementAll(doubleArray50);
        boolean boolean53 = org.apache.commons.math.util.MathUtils.equals(doubleArray31, doubleArray50);
        // The following exception was thrown during execution in test generation
        try {
            double double56 = min0.evaluate(doubleArray31, 5, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 9.253047015333127E303d + "'", double8 == 9.253047015333127E303d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2L + "'", long13 == 2L);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 310.0d + "'", double24 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + (-1.0d) + "'", double37 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 310.0d + "'", double51 == 310.0d);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        int int1 = org.apache.commons.math.util.MathUtils.indicator(3190);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = summaryStatistics0.getSummary();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics4 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics4.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary6 = summaryStatistics4.getSummary();
        double double7 = summaryStatistics4.getSumsq();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = summaryStatistics4.getMinImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics9 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum10 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum10.clear();
        summaryStatistics9.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum10);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = summaryStatistics9.getMeanImpl();
        summaryStatistics4.setGeoMeanImpl(storelessUnivariateStatistic13);
        summaryStatistics0.setMaxImpl(storelessUnivariateStatistic13);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs17 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean18 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs17);
        org.apache.commons.math.stat.descriptive.rank.Max max19 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long20 = max19.getN();
        geometricMean18.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max19);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic22 = geometricMean18.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics23 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic24 = summaryStatistics23.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long26 = secondMoment25.getN();
        secondMoment25.increment((double) (-1));
        summaryStatistics23.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment25);
        geometricMean18.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment25);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs32 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double33 = sumOfLogs32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance35.increment((double) 101L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment38);
        mean39.clear();
        double[] doubleArray46 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean39.incrementAll(doubleArray46, (int) (short) 1, (int) (byte) 0);
        double double50 = variance35.evaluate(doubleArray46);
        double double51 = sumOfLogs32.evaluate(doubleArray46);
        double double52 = variance31.evaluate(doubleArray46);
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance31);
        double double54 = summaryStatistics0.getVariance();
        double double55 = summaryStatistics0.getMean();
        org.junit.Assert.assertNotNull(summaryStatistics0);
        org.junit.Assert.assertNotNull(statisticalSummary1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertNotNull(statisticalSummary6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic22);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2806.7d + "'", double50 == 2806.7d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2245.3599999999997d + "'", double52 == 2245.3599999999997d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long3 = secondMoment2.getN();
        secondMoment2.increment((double) (-1));
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment2);
        mean9.clear();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        double double2 = summaryStatistics0.getSum();
        long long3 = summaryStatistics0.getN();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary4 = summaryStatistics0.getSummary();
        double double5 = statisticalSummary4.getVariance();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(statisticalSummary4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        sumOfLogs0.clear();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = summaryStatistics0.getSummary();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares3 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares3.increment(9.619275968248924E151d);
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares3);
        sumOfSquares3.clear();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertNotNull(statisticalSummary2);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        long long9 = variance6.getN();
        boolean boolean10 = variance6.isBiasCorrected();
        double[] doubleArray11 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double13 = variance6.evaluate(doubleArray11, (double) 101L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        double double9 = summaryStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long11 = secondMoment10.getN();
        secondMoment10.increment((double) (-1));
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment10);
        double double15 = secondMoment10.getResult();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment10);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        org.apache.commons.math.stat.descriptive.moment.Mean mean0 = new org.apache.commons.math.stat.descriptive.moment.Mean();
        double double1 = mean0.getResult();
        mean0.increment((double) (-8640000L));
        org.junit.Assert.assertTrue(Double.isNaN(double1));
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares0 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares0.increment(9.619275968248924E151d);
        sumOfSquares0.clear();
        double double4 = sumOfSquares0.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares0 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares0.increment(9.619275968248924E151d);
        long long3 = sumOfSquares0.getN();
        double double4 = sumOfSquares0.getResult();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 9.253047015333127E303d + "'", double4 == 9.253047015333127E303d);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long3 = secondMoment2.getN();
        secondMoment2.increment((double) (-1));
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        secondMoment2.increment(14635.2d);
        secondMoment2.clear();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        double double2 = org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(1078558720, 3199);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + Double.POSITIVE_INFINITY + "'", double2 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares2 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares2.increment(9.619275968248924E151d);
        double double5 = sumOfSquares2.getResult();
        double[] doubleArray7 = new double[] { 1.0d };
        sumOfSquares2.incrementAll(doubleArray7);
        sumOfLogs0.incrementAll(doubleArray7);
        sumOfLogs0.increment((double) (-1));
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean12 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        geometricMean12.clear();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 9.253047015333127E303d + "'", double5 == 9.253047015333127E303d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = summaryStatistics0.getSummary();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics4 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics4.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary6 = summaryStatistics4.getSummary();
        double double7 = summaryStatistics4.getSumsq();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = summaryStatistics4.getMinImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics9 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum10 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum10.clear();
        summaryStatistics9.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum10);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = summaryStatistics9.getMeanImpl();
        summaryStatistics4.setGeoMeanImpl(storelessUnivariateStatistic13);
        summaryStatistics0.setMaxImpl(storelessUnivariateStatistic13);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs17 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean18 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs17);
        org.apache.commons.math.stat.descriptive.rank.Max max19 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long20 = max19.getN();
        geometricMean18.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max19);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic22 = geometricMean18.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics23 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic24 = summaryStatistics23.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long26 = secondMoment25.getN();
        secondMoment25.increment((double) (-1));
        summaryStatistics23.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment25);
        geometricMean18.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment25);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs32 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double33 = sumOfLogs32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance35.increment((double) 101L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment38);
        mean39.clear();
        double[] doubleArray46 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean39.incrementAll(doubleArray46, (int) (short) 1, (int) (byte) 0);
        double double50 = variance35.evaluate(doubleArray46);
        double double51 = sumOfLogs32.evaluate(doubleArray46);
        double double52 = variance31.evaluate(doubleArray46);
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance31);
        double double54 = summaryStatistics0.getVariance();
        double double55 = summaryStatistics0.getSumsq();
        org.junit.Assert.assertNotNull(summaryStatistics0);
        org.junit.Assert.assertNotNull(statisticalSummary1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertNotNull(statisticalSummary6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic22);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2806.7d + "'", double50 == 2806.7d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2245.3599999999997d + "'", double52 == 2245.3599999999997d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        short short1 = org.apache.commons.math.util.MathUtils.sign((short) (byte) 100);
        org.junit.Assert.assertTrue("'" + short1 + "' != '" + (short) 1 + "'", short1 == (short) 1);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        int int2 = org.apache.commons.math.util.MathUtils.mulAndCheck(32, 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        int int2 = org.apache.commons.math.util.MathUtils.gcd((int) '#', 132);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        double double2 = summaryStatistics0.getSum();
        long long3 = summaryStatistics0.getN();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = summaryStatistics0.getSumLogImpl();
        boolean boolean6 = summaryStatistics0.equals((java.lang.Object) 3.7108092200000006E8d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = summaryStatistics0.getSummary();
        long long3 = summaryStatistics0.getN();
        long long4 = summaryStatistics0.getN();
        double double5 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics0.getMaxImpl();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertNotNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = org.apache.commons.math.util.MathUtils.factorial(1072693269);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: result too large to represent in a long integer");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long3 = secondMoment2.getN();
        secondMoment2.increment((double) (-1));
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        double double9 = mean8.getResult();
        mean8.clear();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        double double12 = summaryStatistics0.getSumOfLogs();
        double double13 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics14 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum15 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum15.clear();
        summaryStatistics14.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum15);
        long long18 = summaryStatistics14.getN();
        java.lang.String str19 = summaryStatistics14.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long21 = variance20.getN();
        summaryStatistics14.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance20);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic23 = summaryStatistics14.getSumImpl();
        summaryStatistics0.setVarianceImpl(storelessUnivariateStatistic23);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        boolean boolean27 = variance26.isBiasCorrected();
        variance26.clear();
        boolean boolean29 = variance26.isBiasCorrected();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance26);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str19, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic23);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = null;
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics3 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = summaryStatistics3.getMeanImpl();
        summaryStatistics3.clear();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics6 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic7 = summaryStatistics6.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long9 = secondMoment8.getN();
        secondMoment8.increment((double) (-1));
        summaryStatistics6.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance13.clear();
        summaryStatistics6.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance13);
        summaryStatistics3.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance13);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean17 = variance2.equals((java.lang.Object) variance13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        // The following exception was thrown during execution in test generation
        try {
            double double3 = org.apache.commons.math.util.MathUtils.round((double) (byte) -1, 3199, 145);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid rounding mode");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long3 = secondMoment2.getN();
        secondMoment2.increment((double) (-1));
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        double double9 = mean8.getResult();
        mean8.clear();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        org.apache.commons.math.stat.descriptive.rank.Max max12 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long13 = max12.getN();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max12);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = summaryStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic16 = summaryStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic17 = summaryStatistics0.getSumImpl();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic16);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic17);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        int int1 = org.apache.commons.math.util.MathUtils.hash((double) 371080922);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1682563522) + "'", int1 == (-1682563522));
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long1 = sum0.getN();
        sum0.clear();
        sum0.clear();
        double double4 = sum0.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics5 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics5.getMeanImpl();
        summaryStatistics5.clear();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics8 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic9 = summaryStatistics8.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long11 = secondMoment10.getN();
        secondMoment10.increment((double) (-1));
        summaryStatistics8.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance15.clear();
        summaryStatistics8.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance15);
        summaryStatistics5.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance15);
        double double19 = variance15.getResult();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs20 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean21 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs20);
        org.apache.commons.math.stat.descriptive.rank.Max max22 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long23 = max22.getN();
        geometricMean21.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max22);
        org.apache.commons.math.stat.descriptive.summary.Sum sum25 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray32 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double33 = sum25.evaluate(doubleArray32);
        geometricMean21.incrementAll(doubleArray32);
        int int35 = org.apache.commons.math.util.MathUtils.hash(doubleArray32);
        int int36 = org.apache.commons.math.util.MathUtils.hash(doubleArray32);
        double double37 = variance15.evaluate(doubleArray32);
        // The following exception was thrown during execution in test generation
        try {
            double double40 = sum0.evaluate(doubleArray32, (int) (short) 1, 62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 310.0d + "'", double33 == 310.0d);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1635884154) + "'", int35 == (-1635884154));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1635884154) + "'", int36 == (-1635884154));
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2817.0666666666666d + "'", double37 == 2817.0666666666666d);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        // The following exception was thrown during execution in test generation
        try {
            int int2 = org.apache.commons.math.util.MathUtils.mulAndCheck(1076101120, (-368574453));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: overflow: mul");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        double double2 = summaryStatistics0.getSum();
        long long3 = summaryStatistics0.getN();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = summaryStatistics0.getSumLogImpl();
        double double5 = summaryStatistics0.getVariance();
        double double6 = summaryStatistics0.getGeometricMean();
        long long7 = summaryStatistics0.getN();
        summaryStatistics0.clear();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic9 = summaryStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = summaryStatistics0.getGeoMeanImpl();
        double double11 = summaryStatistics0.getGeometricMean();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic9);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        double double5 = summaryStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.summary.Sum sum6 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray13 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double14 = sum6.evaluate(doubleArray13);
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum6);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic16 = summaryStatistics0.getVarianceImpl();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 310.0d + "'", double14 == 310.0d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic16);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        double double9 = summaryStatistics0.getMax();
        double double10 = summaryStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getSumLogImpl();
        double double12 = summaryStatistics0.getSumsq();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = summaryStatistics0.getSummary();
        double double3 = summaryStatistics0.getSum();
        double double4 = summaryStatistics0.getStandardDeviation();
        double double5 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary6 = summaryStatistics0.getSummary();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertNotNull(statisticalSummary2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(statisticalSummary6);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = sum1.getN();
        long long5 = sum1.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs6 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean7 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs6);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares8 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares8.increment(9.619275968248924E151d);
        double double11 = sumOfSquares8.getResult();
        double[] doubleArray13 = new double[] { 1.0d };
        sumOfSquares8.incrementAll(doubleArray13);
        sumOfLogs6.incrementAll(doubleArray13);
        // The following exception was thrown during execution in test generation
        try {
            double double18 = sum1.evaluate(doubleArray13, (int) 'a', 32);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 9.253047015333127E303d + "'", double11 == 9.253047015333127E303d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.0]");
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        double double1 = org.apache.commons.math.util.MathUtils.factorialDouble(1095479168);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.POSITIVE_INFINITY + "'", double1 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        double double2 = sumOfLogs0.getResult();
        double double3 = sumOfLogs0.getResult();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean4 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        sumOfLogs0.clear();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics6 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic7 = summaryStatistics6.getMeanImpl();
        double double8 = summaryStatistics6.getSum();
        long long9 = summaryStatistics6.getN();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = summaryStatistics6.getSumLogImpl();
        boolean boolean11 = sumOfLogs0.equals((java.lang.Object) storelessUnivariateStatistic10);
        sumOfLogs0.clear();
        long long13 = sumOfLogs0.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic7);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares0 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares0.increment(9.619275968248924E151d);
        double double3 = sumOfSquares0.getResult();
        sumOfSquares0.increment((double) 1095479168);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 9.253047015333127E303d + "'", double3 == 9.253047015333127E303d);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        double double9 = summaryStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long11 = secondMoment10.getN();
        secondMoment10.increment((double) (-1));
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment10);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = summaryStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics16 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic17 = summaryStatistics16.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary18 = summaryStatistics16.getSummary();
        double double19 = summaryStatistics16.getSum();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment20 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean21 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment20);
        org.apache.commons.math.stat.descriptive.summary.Sum sum22 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray29 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double30 = sum22.evaluate(doubleArray29);
        double[] doubleArray37 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double40 = sum22.evaluate(doubleArray37, 0, 0);
        double double43 = mean21.evaluate(doubleArray37, 1, (int) (byte) 1);
        mean21.increment((double) 10L);
        mean21.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment47);
        org.apache.commons.math.stat.descriptive.summary.Sum sum49 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray56 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double57 = sum49.evaluate(doubleArray56);
        double[] doubleArray64 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double67 = sum49.evaluate(doubleArray64, 0, 0);
        double double70 = mean48.evaluate(doubleArray64, 1, (int) (byte) 1);
        double double73 = mean21.evaluate(doubleArray64, 0, 0);
        summaryStatistics16.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean21);
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean21);
        java.lang.Class<?> wildcardClass76 = mean21.getClass();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic17);
        org.junit.Assert.assertNotNull(statisticalSummary18);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 310.0d + "'", double30 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + (-1.0d) + "'", double43 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 310.0d + "'", double57 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + (-1.0d) + "'", double70 == (-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(wildcardClass76);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        double double5 = summaryStatistics0.getVariance();
        long long6 = summaryStatistics0.getN();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.rank.Min min2 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min2.increment(0.0d);
        min2.increment(0.0d);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares7 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares7.increment(9.619275968248924E151d);
        double double10 = sumOfSquares7.getResult();
        double[] doubleArray12 = new double[] { 1.0d };
        sumOfSquares7.incrementAll(doubleArray12);
        boolean boolean14 = min2.equals((java.lang.Object) sumOfSquares7);
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min2);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 9.253047015333127E303d + "'", double10 == 9.253047015333127E303d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long3 = secondMoment2.getN();
        secondMoment2.increment((double) (-1));
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        double double9 = mean8.getResult();
        mean8.clear();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        double double12 = summaryStatistics0.getSumOfLogs();
        double double13 = summaryStatistics0.getSumsq();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        double double1 = org.apache.commons.math.util.MathUtils.sign((double) (-1071382528));
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-1.0d) + "'", double1 == (-1.0d));
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics5 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics5.getMeanImpl();
        double double7 = summaryStatistics5.getSum();
        double double8 = summaryStatistics5.getGeometricMean();
        double double9 = summaryStatistics5.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = summaryStatistics5.getMaxImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics5.getSumImpl();
        summaryStatistics0.setSumImpl(storelessUnivariateStatistic11);
        double double13 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics14 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum15 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum15.clear();
        summaryStatistics14.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum15);
        long long18 = summaryStatistics14.getN();
        java.lang.String str19 = summaryStatistics14.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long21 = variance20.getN();
        summaryStatistics14.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance20);
        double double23 = summaryStatistics14.getMax();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic24 = summaryStatistics14.getVarianceImpl();
        summaryStatistics0.setSumImpl(storelessUnivariateStatistic24);
        double double26 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic27 = summaryStatistics0.getSumImpl();
        summaryStatistics0.clear();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str19, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic24);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic27);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long2 = sum1.getN();
        long long3 = sum1.getN();
        sum1.increment((double) 1L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment6);
        org.apache.commons.math.stat.descriptive.summary.Sum sum8 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray15 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double16 = sum8.evaluate(doubleArray15);
        double[] doubleArray23 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double26 = sum8.evaluate(doubleArray23, 0, 0);
        double double29 = mean7.evaluate(doubleArray23, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs30 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean31 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs30);
        org.apache.commons.math.stat.descriptive.rank.Max max32 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long33 = max32.getN();
        geometricMean31.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max32);
        org.apache.commons.math.stat.descriptive.summary.Sum sum35 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray42 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double43 = sum35.evaluate(doubleArray42);
        geometricMean31.incrementAll(doubleArray42);
        boolean boolean45 = org.apache.commons.math.util.MathUtils.equals(doubleArray23, doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment46 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean47 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment46);
        org.apache.commons.math.stat.descriptive.summary.Sum sum48 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray55 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double56 = sum48.evaluate(doubleArray55);
        double[] doubleArray63 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double66 = sum48.evaluate(doubleArray63, 0, 0);
        double double69 = mean47.evaluate(doubleArray63, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs70 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean71 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs70);
        org.apache.commons.math.stat.descriptive.rank.Max max72 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long73 = max72.getN();
        geometricMean71.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max72);
        org.apache.commons.math.stat.descriptive.summary.Sum sum75 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray82 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double83 = sum75.evaluate(doubleArray82);
        geometricMean71.incrementAll(doubleArray82);
        boolean boolean85 = org.apache.commons.math.util.MathUtils.equals(doubleArray63, doubleArray82);
        boolean boolean86 = org.apache.commons.math.util.MathUtils.equals(doubleArray23, doubleArray63);
        sum1.incrementAll(doubleArray63);
        // The following exception was thrown during execution in test generation
        try {
            double double90 = variance0.evaluate(doubleArray63, 1072693248, (-42));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 310.0d + "'", double16 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + (-1.0d) + "'", double29 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 310.0d + "'", double43 == 310.0d);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 310.0d + "'", double56 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + (-1.0d) + "'", double69 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 310.0d + "'", double83 == 310.0d);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment1);
        secondMoment1.increment(1.730777995336729E7d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance5.clear();
        double double7 = variance5.getResult();
        org.apache.commons.math.stat.descriptive.rank.Max max8 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long9 = max8.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs10 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean11 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs10);
        org.apache.commons.math.stat.descriptive.rank.Max max12 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long13 = max12.getN();
        geometricMean11.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max12);
        org.apache.commons.math.stat.descriptive.summary.Sum sum15 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray22 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double23 = sum15.evaluate(doubleArray22);
        geometricMean11.incrementAll(doubleArray22);
        double double25 = max8.evaluate(doubleArray22);
        double double26 = variance5.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment27);
        org.apache.commons.math.stat.descriptive.summary.Sum sum29 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray36 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double37 = sum29.evaluate(doubleArray36);
        double[] doubleArray44 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double47 = sum29.evaluate(doubleArray44, 0, 0);
        double double50 = mean28.evaluate(doubleArray44, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs51 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean52 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs51);
        org.apache.commons.math.stat.descriptive.rank.Max max53 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long54 = max53.getN();
        geometricMean52.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max53);
        org.apache.commons.math.stat.descriptive.summary.Sum sum56 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray63 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double64 = sum56.evaluate(doubleArray63);
        geometricMean52.incrementAll(doubleArray63);
        boolean boolean66 = org.apache.commons.math.util.MathUtils.equals(doubleArray44, doubleArray63);
        double double67 = variance5.evaluate(doubleArray63);
        secondMoment1.incrementAll(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long70 = secondMoment1.getN();
        org.apache.commons.math.stat.descriptive.moment.Mean mean71 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment1);
        double double72 = secondMoment1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 310.0d + "'", double23 == 310.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2817.0666666666666d + "'", double26 == 2817.0666666666666d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 310.0d + "'", double37 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 310.0d + "'", double64 == 310.0d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2817.0666666666666d + "'", double67 == 2817.0666666666666d);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 7L + "'", long70 == 7L);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 2.567635358251627E14d + "'", double72 == 2.567635358251627E14d);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        // The following exception was thrown during execution in test generation
        try {
            double double3 = org.apache.commons.math.util.MathUtils.round((double) 577371932, (-888836577), 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid rounding mode");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean4 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean6 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment5);
        mean6.clear();
        mean6.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment10);
        mean11.clear();
        double[] doubleArray18 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean11.incrementAll(doubleArray18, (int) (short) 1, (int) (byte) 0);
        mean6.incrementAll(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment0.incrementAll(doubleArray18, (-1), 1072693248);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[2.0, -42.0, 1.0, 32.0, 101.0]");
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        float float2 = org.apache.commons.math.util.MathUtils.round((float) 35L, (int) (short) 1);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 35.0f + "'", float2 == 35.0f);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray7 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double8 = sum0.evaluate(doubleArray7);
        long long9 = sum0.getN();
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 310.0d + "'", double8 == 310.0d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        org.apache.commons.math.stat.descriptive.summary.Sum sum5 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long6 = sum5.getN();
        sum5.increment(35.0d);
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum5);
        long long10 = summaryStatistics0.getN();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics11 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic12 = summaryStatistics11.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long14 = secondMoment13.getN();
        secondMoment13.increment((double) (-1));
        summaryStatistics11.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment13);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment18 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment18);
        double double20 = mean19.getResult();
        mean19.clear();
        summaryStatistics11.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean19);
        org.apache.commons.math.stat.descriptive.rank.Max max23 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long24 = max23.getN();
        summaryStatistics11.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max23);
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max23);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic27 = summaryStatistics0.getMeanImpl();
        double double28 = summaryStatistics0.getVariance();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment1);
        org.apache.commons.math.stat.descriptive.summary.Sum sum3 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray10 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double11 = sum3.evaluate(doubleArray10);
        double[] doubleArray18 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double21 = sum3.evaluate(doubleArray18, 0, 0);
        double double24 = mean2.evaluate(doubleArray18, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance25.clear();
        double double27 = variance25.getResult();
        org.apache.commons.math.stat.descriptive.rank.Max max28 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long29 = max28.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs30 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean31 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs30);
        org.apache.commons.math.stat.descriptive.rank.Max max32 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long33 = max32.getN();
        geometricMean31.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max32);
        org.apache.commons.math.stat.descriptive.summary.Sum sum35 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray42 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double43 = sum35.evaluate(doubleArray42);
        geometricMean31.incrementAll(doubleArray42);
        double double45 = max28.evaluate(doubleArray42);
        double double46 = variance25.evaluate(doubleArray42);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean48 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment47);
        org.apache.commons.math.stat.descriptive.summary.Sum sum49 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray56 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double57 = sum49.evaluate(doubleArray56);
        double[] doubleArray64 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double67 = sum49.evaluate(doubleArray64, 0, 0);
        double double70 = mean48.evaluate(doubleArray64, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs71 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean72 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs71);
        org.apache.commons.math.stat.descriptive.rank.Max max73 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long74 = max73.getN();
        geometricMean72.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max73);
        org.apache.commons.math.stat.descriptive.summary.Sum sum76 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray83 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double84 = sum76.evaluate(doubleArray83);
        geometricMean72.incrementAll(doubleArray83);
        boolean boolean86 = org.apache.commons.math.util.MathUtils.equals(doubleArray64, doubleArray83);
        double double87 = variance25.evaluate(doubleArray83);
        boolean boolean88 = org.apache.commons.math.util.MathUtils.equals(doubleArray18, doubleArray83);
        // The following exception was thrown during execution in test generation
        try {
            double double91 = geometricMean0.evaluate(doubleArray18, (int) ' ', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 310.0d + "'", double11 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + (-1.0d) + "'", double24 == (-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 310.0d + "'", double43 == 310.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 2817.0666666666666d + "'", double46 == 2817.0666666666666d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 310.0d + "'", double57 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + (-1.0d) + "'", double70 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 310.0d + "'", double84 == 310.0d);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 2817.0666666666666d + "'", double87 == 2817.0666666666666d);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.increment((double) 1078558720);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment6);
        mean7.clear();
        mean7.increment(30.482323362278656d);
        double double11 = mean7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance13.increment((double) 101L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment16);
        mean17.clear();
        double[] doubleArray24 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean17.incrementAll(doubleArray24, (int) (short) 1, (int) (byte) 0);
        double double28 = variance13.evaluate(doubleArray24);
        mean7.incrementAll(doubleArray24);
        double double30 = variance1.evaluate(doubleArray24);
        java.lang.Class<?> wildcardClass31 = doubleArray24.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 2806.7d + "'", double28 == 2806.7d);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 2806.7d + "'", double30 == 2806.7d);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        float float2 = org.apache.commons.math.util.MathUtils.round((-0.0f), 0);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 0.0f + "'", float2 == 0.0f);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics1 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum2 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum2.clear();
        summaryStatistics1.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum2);
        long long5 = summaryStatistics1.getN();
        java.lang.String str6 = summaryStatistics1.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long8 = variance7.getN();
        summaryStatistics1.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance7);
        double double10 = summaryStatistics1.getMin();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long12 = secondMoment11.getN();
        secondMoment11.increment((double) (-1));
        summaryStatistics1.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment11);
        geometricMean0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment11);
        secondMoment11.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment11);
        org.apache.commons.math.stat.descriptive.moment.Variance variance19 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment11);
        long long20 = variance19.getN();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str6, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        double double2 = summaryStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic3 = summaryStatistics0.getMaxImpl();
        double double4 = summaryStatistics0.getMax();
        double double5 = summaryStatistics0.getSum();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic3);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        double double1 = org.apache.commons.math.util.MathUtils.factorialDouble(1078558720);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.POSITIVE_INFINITY + "'", double1 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares0 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares0.increment(9.619275968248924E151d);
        double double3 = sumOfSquares0.getResult();
        double[] doubleArray5 = new double[] { 1.0d };
        sumOfSquares0.incrementAll(doubleArray5);
        long long7 = sumOfSquares0.getN();
        sumOfSquares0.clear();
        java.lang.Class<?> wildcardClass9 = sumOfSquares0.getClass();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 9.253047015333127E303d + "'", double3 == 9.253047015333127E303d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        double double2 = summaryStatistics0.getSum();
        long long3 = summaryStatistics0.getN();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = summaryStatistics0.getSumLogImpl();
        double double5 = summaryStatistics0.getVariance();
        double double6 = summaryStatistics0.getGeometricMean();
        long long7 = summaryStatistics0.getN();
        summaryStatistics0.clear();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic9 = summaryStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = null;
        summaryStatistics0.setVarianceImpl(storelessUnivariateStatistic10);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic9);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        double double2 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean4 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment3);
        secondMoment3.increment(1.730777995336729E7d);
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment3);
        long long8 = summaryStatistics0.getN();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.math.util.MathUtils.binomialCoefficient(371080922, 3200);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: result too large to represent in a long integer");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        org.apache.commons.math.stat.descriptive.rank.Min min0 = new org.apache.commons.math.stat.descriptive.rank.Min();
        double double1 = min0.getResult();
        double double2 = min0.getResult();
        min0.clear();
        long long4 = min0.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum0.clear();
        double double2 = sum0.getResult();
        double double3 = sum0.getResult();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs4 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean5 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs4);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares6 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares6.increment(9.619275968248924E151d);
        double double9 = sumOfSquares6.getResult();
        double[] doubleArray11 = new double[] { 1.0d };
        sumOfSquares6.incrementAll(doubleArray11);
        sumOfLogs4.incrementAll(doubleArray11);
        int int14 = org.apache.commons.math.util.MathUtils.hash(doubleArray11);
        // The following exception was thrown during execution in test generation
        try {
            double double17 = sum0.evaluate(doubleArray11, 1, 145);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 9.253047015333127E303d + "'", double9 == 9.253047015333127E303d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1072693279 + "'", int14 == 1072693279);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        double double3 = org.apache.commons.math.util.MathUtils.round(3.7108092200000006E8d, 87, 5);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 3.7108092200000006E8d + "'", double3 == 3.7108092200000006E8d);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics0.getSumsqImpl();
        double double3 = summaryStatistics0.getMax();
        long long4 = summaryStatistics0.getN();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics5 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics5.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long8 = secondMoment7.getN();
        secondMoment7.increment((double) (-1));
        summaryStatistics5.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment12);
        double double14 = mean13.getResult();
        mean13.clear();
        summaryStatistics5.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean13);
        org.apache.commons.math.stat.descriptive.rank.Max max17 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long18 = max17.getN();
        summaryStatistics5.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max17);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic20 = summaryStatistics5.getMinImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic21 = summaryStatistics5.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.summary.Sum sum22 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray29 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double30 = sum22.evaluate(doubleArray29);
        double[] doubleArray37 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double40 = sum22.evaluate(doubleArray37, 0, 0);
        org.apache.commons.math.stat.descriptive.summary.Sum sum41 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray48 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double49 = sum41.evaluate(doubleArray48);
        double[] doubleArray56 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double59 = sum41.evaluate(doubleArray56, 0, 0);
        int int60 = org.apache.commons.math.util.MathUtils.hash(doubleArray56);
        double double63 = sum22.evaluate(doubleArray56, (int) (byte) 0, (int) (short) 1);
        summaryStatistics5.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum22);
        summaryStatistics0.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum22);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs66 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean67 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs66);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean68 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs66);
        org.apache.commons.math.stat.descriptive.summary.Sum sum69 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray76 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double77 = sum69.evaluate(doubleArray76);
        double double78 = sumOfLogs66.evaluate(doubleArray76);
        double double79 = sumOfLogs66.getResult();
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfLogs66);
        sumOfLogs66.increment((double) 32);
        long long83 = sumOfLogs66.getN();
        long long84 = sumOfLogs66.getN();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic20);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic21);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 310.0d + "'", double30 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 310.0d + "'", double49 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2050442118 + "'", int60 == 2050442118);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + (-1.0d) + "'", double63 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 310.0d + "'", double77 == 310.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1L + "'", long83 == 1L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1L + "'", long84 == 1L);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        summaryStatistics0.clear();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics3 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = summaryStatistics3.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long6 = secondMoment5.getN();
        secondMoment5.increment((double) (-1));
        summaryStatistics3.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance10.clear();
        summaryStatistics3.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance10);
        summaryStatistics0.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance10);
        variance10.clear();
        variance10.increment(0.0d);
        variance10.setBiasCorrected(true);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        double double5 = summaryStatistics0.getSum();
        summaryStatistics0.addValue((double) '#');
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = summaryStatistics0.getSumLogImpl();
        java.lang.Class<?> wildcardClass9 = storelessUnivariateStatistic8.getClass();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics10 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance((java.lang.Class) wildcardClass9);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.apache.commons.math.stat.descriptive.summary.SumOfLogs cannot be cast to org.apache.commons.math.stat.descriptive.SummaryStatistics");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics2 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum3 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum3.clear();
        summaryStatistics2.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum3);
        long long6 = summaryStatistics2.getN();
        java.lang.String str7 = summaryStatistics2.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long9 = variance8.getN();
        summaryStatistics2.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance8);
        double double11 = summaryStatistics2.getMin();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long13 = secondMoment12.getN();
        secondMoment12.increment((double) (-1));
        summaryStatistics2.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment12);
        geometricMean1.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment12);
        secondMoment12.clear();
        org.apache.commons.math.stat.descriptive.moment.Mean mean19 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment12);
        double double20 = secondMoment12.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment12);
        org.apache.commons.math.stat.descriptive.moment.Mean mean22 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment12);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str7, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment0);
        mean1.clear();
        mean1.increment(0.0d);
        mean1.increment(3.948148009134034E13d);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        double double1 = org.apache.commons.math.util.MathUtils.cosh(1.3440585709080678E43d);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.POSITIVE_INFINITY + "'", double1 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = summaryStatistics0.getSummary();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMax();
        summaryStatistics0.clear();
        double double5 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary6 = summaryStatistics0.getSummary();
        double double7 = statisticalSummary6.getStandardDeviation();
        org.junit.Assert.assertNotNull(summaryStatistics0);
        org.junit.Assert.assertNotNull(statisticalSummary1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(statisticalSummary6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = summaryStatistics0.getMeanImpl();
        double double5 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics7 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = summaryStatistics7.getMeanImpl();
        double double9 = summaryStatistics7.getSum();
        double double10 = summaryStatistics7.getGeometricMean();
        double double11 = summaryStatistics7.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic12 = summaryStatistics7.getMaxImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = summaryStatistics7.getSumImpl();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs14 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        summaryStatistics7.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfLogs14);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic16 = summaryStatistics7.getVarianceImpl();
        summaryStatistics0.setGeoMeanImpl(storelessUnivariateStatistic16);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic12);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic16);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        double double2 = org.apache.commons.math.util.MathUtils.normalizeAngle((double) 33L, 30.482323362278656d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 33.0d + "'", double2 == 33.0d);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        double double5 = summaryStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.summary.Sum sum6 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray13 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double14 = sum6.evaluate(doubleArray13);
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum6);
        double double16 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics17 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum18 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum18.clear();
        summaryStatistics17.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum18);
        long long21 = summaryStatistics17.getN();
        java.lang.String str22 = summaryStatistics17.toString();
        summaryStatistics17.addValue(1.730777995336729E7d);
        double double25 = summaryStatistics17.getGeometricMean();
        double double26 = summaryStatistics17.getMean();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic27 = summaryStatistics17.getVarianceImpl();
        summaryStatistics0.setSumImpl(storelessUnivariateStatistic27);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 310.0d + "'", double14 == 310.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str22, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.730777995336729E7d + "'", double25 == 1.730777995336729E7d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.730777995336729E7d + "'", double26 == 1.730777995336729E7d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic27);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        // The following exception was thrown during execution in test generation
        try {
            float float3 = org.apache.commons.math.util.MathUtils.round((float) 1072693248, 51, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid rounding method.");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        double double2 = summaryStatistics0.getSum();
        double double3 = summaryStatistics0.getGeometricMean();
        double double4 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs7 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfLogs7);
        sumOfLogs7.clear();
        long long10 = sumOfLogs7.getN();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean2 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        sumOfLogs0.clear();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean4 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics7 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum8 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum8.clear();
        summaryStatistics7.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum8);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics7.getMeanImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics12 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = summaryStatistics12.getMeanImpl();
        double double14 = summaryStatistics12.getSum();
        double double15 = summaryStatistics12.getGeometricMean();
        double double16 = summaryStatistics12.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic17 = summaryStatistics12.getMaxImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic18 = summaryStatistics12.getSumImpl();
        summaryStatistics7.setSumImpl(storelessUnivariateStatistic18);
        boolean boolean20 = variance6.equals((java.lang.Object) summaryStatistics7);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics21 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic22 = summaryStatistics21.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary23 = summaryStatistics21.getSummary();
        long long24 = summaryStatistics21.getN();
        boolean boolean25 = variance6.equals((java.lang.Object) long24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance26.clear();
        double double28 = variance26.getResult();
        org.apache.commons.math.stat.descriptive.rank.Max max29 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long30 = max29.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs31 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean32 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs31);
        org.apache.commons.math.stat.descriptive.rank.Max max33 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long34 = max33.getN();
        geometricMean32.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max33);
        org.apache.commons.math.stat.descriptive.summary.Sum sum36 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray43 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double44 = sum36.evaluate(doubleArray43);
        geometricMean32.incrementAll(doubleArray43);
        double double46 = max29.evaluate(doubleArray43);
        double double47 = variance26.evaluate(doubleArray43);
        variance6.incrementAll(doubleArray43);
        // The following exception was thrown during execution in test generation
        try {
            double double51 = geometricMean4.evaluate(doubleArray43, (int) (byte) 100, 1076101120);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic17);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic22);
        org.junit.Assert.assertNotNull(statisticalSummary23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 310.0d + "'", double44 == 310.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 2817.0666666666666d + "'", double47 == 2817.0666666666666d);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        double double9 = summaryStatistics0.getMax();
        double double10 = summaryStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getSumLogImpl();
        long long12 = summaryStatistics0.getN();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary13 = summaryStatistics0.getSummary();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(statisticalSummary13);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics0.getSumsqImpl();
        double double3 = summaryStatistics0.getMax();
        long long4 = summaryStatistics0.getN();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics5 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics5.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long8 = secondMoment7.getN();
        secondMoment7.increment((double) (-1));
        summaryStatistics5.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment12);
        double double14 = mean13.getResult();
        mean13.clear();
        summaryStatistics5.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean13);
        org.apache.commons.math.stat.descriptive.rank.Max max17 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long18 = max17.getN();
        summaryStatistics5.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max17);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic20 = summaryStatistics5.getMinImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic21 = summaryStatistics5.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.summary.Sum sum22 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray29 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double30 = sum22.evaluate(doubleArray29);
        double[] doubleArray37 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double40 = sum22.evaluate(doubleArray37, 0, 0);
        org.apache.commons.math.stat.descriptive.summary.Sum sum41 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray48 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double49 = sum41.evaluate(doubleArray48);
        double[] doubleArray56 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double59 = sum41.evaluate(doubleArray56, 0, 0);
        int int60 = org.apache.commons.math.util.MathUtils.hash(doubleArray56);
        double double63 = sum22.evaluate(doubleArray56, (int) (byte) 0, (int) (short) 1);
        summaryStatistics5.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum22);
        summaryStatistics0.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum22);
        long long66 = sum22.getN();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic20);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic21);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 310.0d + "'", double30 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 310.0d + "'", double49 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2050442118 + "'", int60 == 2050442118);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + (-1.0d) + "'", double63 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        int int2 = org.apache.commons.math.util.MathUtils.lcm((int) (byte) 100, 51);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 5100 + "'", int2 == 5100);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        double double1 = org.apache.commons.math.util.MathUtils.indicator(304.6868567656687d);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        secondMoment0.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Variance variance4 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean5 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        // The following exception was thrown during execution in test generation
        try {
            int int2 = org.apache.commons.math.util.MathUtils.mulAndCheck(2050442118, 1072693248);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: overflow: mul");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        long long1 = org.apache.commons.math.util.MathUtils.sign((long) (-42));
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares0 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares0.increment(9.619275968248924E151d);
        sumOfSquares0.increment((double) 1104152832);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment0);
        long long4 = secondMoment0.getN();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = summaryStatistics0.getSummary();
        double double3 = summaryStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment4 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean5 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment4);
        org.apache.commons.math.stat.descriptive.summary.Sum sum6 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray13 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double14 = sum6.evaluate(doubleArray13);
        double[] doubleArray21 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double24 = sum6.evaluate(doubleArray21, 0, 0);
        double double27 = mean5.evaluate(doubleArray21, 1, (int) (byte) 1);
        mean5.increment((double) 10L);
        mean5.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment31);
        org.apache.commons.math.stat.descriptive.summary.Sum sum33 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray40 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double41 = sum33.evaluate(doubleArray40);
        double[] doubleArray48 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double51 = sum33.evaluate(doubleArray48, 0, 0);
        double double54 = mean32.evaluate(doubleArray48, 1, (int) (byte) 1);
        double double57 = mean5.evaluate(doubleArray48, 0, 0);
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean5);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic59 = summaryStatistics0.getSumsqImpl();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertNotNull(statisticalSummary2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 310.0d + "'", double14 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 310.0d + "'", double41 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1.0d) + "'", double54 == (-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic59);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics5 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics5.getMeanImpl();
        double double7 = summaryStatistics5.getSum();
        double double8 = summaryStatistics5.getGeometricMean();
        double double9 = summaryStatistics5.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = summaryStatistics5.getMaxImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics5.getSumImpl();
        summaryStatistics0.setSumImpl(storelessUnivariateStatistic11);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = summaryStatistics0.getVarianceImpl();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        int int2 = org.apache.commons.math.util.MathUtils.mulAndCheck(145, 2);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 290 + "'", int2 == 290);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long3 = secondMoment2.getN();
        secondMoment2.increment((double) (-1));
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        double double9 = mean8.getResult();
        mean8.clear();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        org.apache.commons.math.stat.descriptive.rank.Max max12 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long13 = max12.getN();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max12);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = summaryStatistics0.getMinImpl();
        double double16 = summaryStatistics0.getVariance();
        java.lang.String str17 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic18 = summaryStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic19 = summaryStatistics0.getMinImpl();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str17, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic18);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic19);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        long long1 = org.apache.commons.math.util.MathUtils.sign((long) 51);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        double double9 = summaryStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long11 = secondMoment10.getN();
        secondMoment10.increment((double) (-1));
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment10);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = summaryStatistics0.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.rank.Max max16 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long17 = max16.getN();
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max16);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic19 = summaryStatistics0.getMinImpl();
        java.lang.String str20 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic21 = summaryStatistics0.getGeoMeanImpl();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: 0.0\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str20, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: 0.0\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic21);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance0.clear();
        double double2 = variance0.getResult();
        org.apache.commons.math.stat.descriptive.rank.Max max3 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long4 = max3.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs5 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean6 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs5);
        org.apache.commons.math.stat.descriptive.rank.Max max7 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long8 = max7.getN();
        geometricMean6.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max7);
        org.apache.commons.math.stat.descriptive.summary.Sum sum10 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray17 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double18 = sum10.evaluate(doubleArray17);
        geometricMean6.incrementAll(doubleArray17);
        double double20 = max3.evaluate(doubleArray17);
        double double21 = variance0.evaluate(doubleArray17);
        long long22 = variance0.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 310.0d + "'", double18 == 310.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2817.0666666666666d + "'", double21 == 2817.0666666666666d);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        float float2 = org.apache.commons.math.util.MathUtils.round((float) 145, (int) (byte) 1);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 145.0f + "'", float2 == 145.0f);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = summaryStatistics0.getMeanImpl();
        double double5 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment7);
        summaryStatistics0.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance9);
        double double11 = summaryStatistics0.getMin();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        double double2 = sumOfLogs0.getResult();
        double double3 = sumOfLogs0.getResult();
        long long4 = sumOfLogs0.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment6.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment6);
        secondMoment6.increment((double) 1076101120);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment6);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment13);
        mean14.clear();
        double[] doubleArray21 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean14.incrementAll(doubleArray21, (int) (short) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.summary.Sum sum25 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray32 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double33 = sum25.evaluate(doubleArray32);
        double[] doubleArray40 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double43 = sum25.evaluate(doubleArray40, 0, 0);
        boolean boolean44 = org.apache.commons.math.util.MathUtils.equals(doubleArray21, doubleArray40);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics45 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic46 = summaryStatistics45.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment47 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long48 = secondMoment47.getN();
        secondMoment47.increment((double) (-1));
        summaryStatistics45.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment47);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment52 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean53 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment52);
        double double54 = mean53.getResult();
        mean53.clear();
        summaryStatistics45.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean53);
        org.apache.commons.math.stat.descriptive.summary.Sum sum57 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray64 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double65 = sum57.evaluate(doubleArray64);
        double[] doubleArray72 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double75 = sum57.evaluate(doubleArray72, 0, 0);
        int int76 = org.apache.commons.math.util.MathUtils.hash(doubleArray72);
        double double79 = mean53.evaluate(doubleArray72, 0, (int) (short) 0);
        boolean boolean80 = org.apache.commons.math.util.MathUtils.equals(doubleArray40, doubleArray72);
        double double82 = variance12.evaluate(doubleArray40, (double) 101L);
        // The following exception was thrown during execution in test generation
        try {
            double double85 = sumOfLogs0.evaluate(doubleArray40, 32, 2050438918);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 310.0d + "'", double33 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 310.0d + "'", double65 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2050442118 + "'", int76 == 2050442118);
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 12196.0d + "'", double82 == 12196.0d);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean2 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = geometricMean3.getSumLogImpl();
        long long5 = geometricMean3.getN();
        geometricMean3.increment((-2.6602412030089932E11d));
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        double double2 = summaryStatistics0.getSum();
        long long3 = summaryStatistics0.getN();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = summaryStatistics0.getSumLogImpl();
        double double5 = summaryStatistics0.getVariance();
        double double6 = summaryStatistics0.getGeometricMean();
        long long7 = summaryStatistics0.getN();
        summaryStatistics0.clear();
        long long9 = summaryStatistics0.getN();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = summaryStatistics0.getSumsqImpl();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        byte byte1 = org.apache.commons.math.util.MathUtils.indicator((byte) 100);
        org.junit.Assert.assertTrue("'" + byte1 + "' != '" + (byte) 1 + "'", byte1 == (byte) 1);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        long long1 = org.apache.commons.math.util.MathUtils.indicator((long) 132);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment1 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment1);
        secondMoment1.increment(1.730777995336729E7d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance5.clear();
        double double7 = variance5.getResult();
        org.apache.commons.math.stat.descriptive.rank.Max max8 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long9 = max8.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs10 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean11 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs10);
        org.apache.commons.math.stat.descriptive.rank.Max max12 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long13 = max12.getN();
        geometricMean11.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max12);
        org.apache.commons.math.stat.descriptive.summary.Sum sum15 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray22 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double23 = sum15.evaluate(doubleArray22);
        geometricMean11.incrementAll(doubleArray22);
        double double25 = max8.evaluate(doubleArray22);
        double double26 = variance5.evaluate(doubleArray22);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment27);
        org.apache.commons.math.stat.descriptive.summary.Sum sum29 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray36 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double37 = sum29.evaluate(doubleArray36);
        double[] doubleArray44 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double47 = sum29.evaluate(doubleArray44, 0, 0);
        double double50 = mean28.evaluate(doubleArray44, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs51 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean52 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs51);
        org.apache.commons.math.stat.descriptive.rank.Max max53 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long54 = max53.getN();
        geometricMean52.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max53);
        org.apache.commons.math.stat.descriptive.summary.Sum sum56 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray63 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double64 = sum56.evaluate(doubleArray63);
        geometricMean52.incrementAll(doubleArray63);
        boolean boolean66 = org.apache.commons.math.util.MathUtils.equals(doubleArray44, doubleArray63);
        double double67 = variance5.evaluate(doubleArray63);
        secondMoment1.incrementAll(doubleArray63);
        org.apache.commons.math.stat.descriptive.moment.Variance variance69 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment1);
        long long70 = secondMoment1.getN();
        double double71 = secondMoment1.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 310.0d + "'", double23 == 310.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2817.0666666666666d + "'", double26 == 2817.0666666666666d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 310.0d + "'", double37 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 310.0d + "'", double64 == 310.0d);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 2817.0666666666666d + "'", double67 == 2817.0666666666666d);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 7L + "'", long70 == 7L);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 2.567635358251627E14d + "'", double71 == 2.567635358251627E14d);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        org.apache.commons.math.stat.descriptive.rank.Min min0 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min0.increment(0.0d);
        double double3 = min0.getResult();
        min0.increment((-1.2181642514249999E288d));
        min0.clear();
        double double7 = min0.getResult();
        min0.increment(Double.NaN);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long1 = secondMoment0.getN();
        secondMoment0.increment((double) (-1));
        long long4 = secondMoment0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        double double2 = sumOfLogs0.getResult();
        double double3 = sumOfLogs0.getResult();
        long long4 = sumOfLogs0.getN();
        double double5 = sumOfLogs0.getResult();
        long long6 = sumOfLogs0.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.rank.Max max2 = new org.apache.commons.math.stat.descriptive.rank.Max();
        double double3 = max2.getResult();
        max2.clear();
        max2.increment((double) (byte) 10);
        long long7 = max2.getN();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics8 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic9 = summaryStatistics8.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long11 = secondMoment10.getN();
        secondMoment10.increment((double) (-1));
        summaryStatistics8.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment15 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean16 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment15);
        double double17 = mean16.getResult();
        mean16.clear();
        summaryStatistics8.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean16);
        org.apache.commons.math.stat.descriptive.summary.Sum sum20 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray27 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double28 = sum20.evaluate(doubleArray27);
        double[] doubleArray35 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double38 = sum20.evaluate(doubleArray35, 0, 0);
        int int39 = org.apache.commons.math.util.MathUtils.hash(doubleArray35);
        double double42 = mean16.evaluate(doubleArray35, 0, (int) (short) 0);
        max2.incrementAll(doubleArray35, 1104152832, 1104152832);
        // The following exception was thrown during execution in test generation
        try {
            double double48 = variance1.evaluate(doubleArray35, 35, (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 310.0d + "'", double28 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2050442118 + "'", int39 == 2050442118);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs1 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean2 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs1);
        org.apache.commons.math.stat.descriptive.rank.Max max3 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long4 = max3.getN();
        geometricMean2.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max3);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = geometricMean2.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics7 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = summaryStatistics7.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment9 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long10 = secondMoment9.getN();
        secondMoment9.increment((double) (-1));
        summaryStatistics7.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment9);
        geometricMean2.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance15 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment9);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance16.clear();
        double double18 = variance16.getResult();
        org.apache.commons.math.stat.descriptive.rank.Max max19 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long20 = max19.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs21 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean22 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs21);
        org.apache.commons.math.stat.descriptive.rank.Max max23 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long24 = max23.getN();
        geometricMean22.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max23);
        org.apache.commons.math.stat.descriptive.summary.Sum sum26 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray33 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double34 = sum26.evaluate(doubleArray33);
        geometricMean22.incrementAll(doubleArray33);
        double double36 = max19.evaluate(doubleArray33);
        double double37 = variance16.evaluate(doubleArray33);
        long long38 = variance16.getN();
        variance16.increment((double) (-51));
        org.apache.commons.math.stat.descriptive.summary.Sum sum41 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray48 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double49 = sum41.evaluate(doubleArray48);
        double[] doubleArray56 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double59 = sum41.evaluate(doubleArray56, 0, 0);
        int int60 = org.apache.commons.math.util.MathUtils.hash(doubleArray56);
        double double64 = variance16.evaluate(doubleArray56, 35.0d, 0, 0);
        double double65 = variance15.evaluate(doubleArray56);
        variance15.setBiasCorrected(false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 310.0d + "'", double34 == 310.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2817.0666666666666d + "'", double37 == 2817.0666666666666d);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 310.0d + "'", double49 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2050442118 + "'", int60 == 2050442118);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 14635.2d + "'", double65 == 14635.2d);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.rank.Max max2 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long3 = max2.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs4 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean5 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs4);
        org.apache.commons.math.stat.descriptive.rank.Max max6 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long7 = max6.getN();
        geometricMean5.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max6);
        org.apache.commons.math.stat.descriptive.summary.Sum sum9 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray16 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double17 = sum9.evaluate(doubleArray16);
        geometricMean5.incrementAll(doubleArray16);
        double double19 = max2.evaluate(doubleArray16);
        secondMoment0.incrementAll(doubleArray16);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance22.increment((double) 101L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean26 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment25);
        mean26.clear();
        double[] doubleArray33 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean26.incrementAll(doubleArray33, (int) (short) 1, (int) (byte) 0);
        double double37 = variance22.evaluate(doubleArray33);
        int int38 = org.apache.commons.math.util.MathUtils.hash(doubleArray33);
        boolean boolean39 = org.apache.commons.math.util.MathUtils.equals(doubleArray16, doubleArray33);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 310.0d + "'", double17 == 310.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2806.7d + "'", double37 == 2806.7d);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-231965925) + "'", int38 == (-231965925));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        org.apache.commons.math.stat.descriptive.rank.Max max0 = new org.apache.commons.math.stat.descriptive.rank.Max();
        double double1 = max0.getResult();
        max0.clear();
        max0.increment((double) (byte) 10);
        long long5 = max0.getN();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics6 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic7 = summaryStatistics6.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long9 = secondMoment8.getN();
        secondMoment8.increment((double) (-1));
        summaryStatistics6.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment8);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment13);
        double double15 = mean14.getResult();
        mean14.clear();
        summaryStatistics6.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean14);
        org.apache.commons.math.stat.descriptive.summary.Sum sum18 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray25 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double26 = sum18.evaluate(doubleArray25);
        double[] doubleArray33 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double36 = sum18.evaluate(doubleArray33, 0, 0);
        int int37 = org.apache.commons.math.util.MathUtils.hash(doubleArray33);
        double double40 = mean14.evaluate(doubleArray33, 0, (int) (short) 0);
        max0.incrementAll(doubleArray33, 1104152832, 1104152832);
        int int44 = org.apache.commons.math.util.MathUtils.hash(doubleArray33);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 310.0d + "'", double26 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2050442118 + "'", int37 == 2050442118);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2050442118 + "'", int44 == 2050442118);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long3 = secondMoment2.getN();
        secondMoment2.increment((double) (-1));
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        double double9 = mean8.getResult();
        mean8.clear();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        org.apache.commons.math.stat.descriptive.rank.Max max12 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long13 = max12.getN();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max12);
        long long15 = summaryStatistics0.getN();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic16 = summaryStatistics0.getMaxImpl();
        java.lang.String str17 = summaryStatistics0.toString();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str17, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        double double9 = summaryStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long11 = secondMoment10.getN();
        secondMoment10.increment((double) (-1));
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment10);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = summaryStatistics0.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = summaryStatistics0.getSummary();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertNotNull(statisticalSummary16);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment0);
        mean1.clear();
        mean1.increment(30.482323362278656d);
        double double5 = mean1.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance7.increment((double) 101L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean11 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment10);
        mean11.clear();
        double[] doubleArray18 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean11.incrementAll(doubleArray18, (int) (short) 1, (int) (byte) 0);
        double double22 = variance7.evaluate(doubleArray18);
        mean1.incrementAll(doubleArray18);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs24 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double25 = sumOfLogs24.getResult();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean26 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs24);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean27 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs24);
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance28.clear();
        double double30 = variance28.getResult();
        org.apache.commons.math.stat.descriptive.rank.Max max31 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long32 = max31.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs33 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean34 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs33);
        org.apache.commons.math.stat.descriptive.rank.Max max35 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long36 = max35.getN();
        geometricMean34.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max35);
        org.apache.commons.math.stat.descriptive.summary.Sum sum38 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray45 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double46 = sum38.evaluate(doubleArray45);
        geometricMean34.incrementAll(doubleArray45);
        double double48 = max31.evaluate(doubleArray45);
        double double49 = variance28.evaluate(doubleArray45);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment50 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean51 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment50);
        org.apache.commons.math.stat.descriptive.summary.Sum sum52 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray59 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double60 = sum52.evaluate(doubleArray59);
        double[] doubleArray67 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double70 = sum52.evaluate(doubleArray67, 0, 0);
        double double73 = mean51.evaluate(doubleArray67, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs74 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean75 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs74);
        org.apache.commons.math.stat.descriptive.rank.Max max76 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long77 = max76.getN();
        geometricMean75.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max76);
        org.apache.commons.math.stat.descriptive.summary.Sum sum79 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray86 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double87 = sum79.evaluate(doubleArray86);
        geometricMean75.incrementAll(doubleArray86);
        boolean boolean89 = org.apache.commons.math.util.MathUtils.equals(doubleArray67, doubleArray86);
        double double90 = variance28.evaluate(doubleArray86);
        double double91 = sumOfLogs24.evaluate(doubleArray86);
        boolean boolean92 = org.apache.commons.math.util.MathUtils.equals(doubleArray18, doubleArray86);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 2806.7d + "'", double22 == 2806.7d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 310.0d + "'", double46 == 310.0d);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 100.0d + "'", double48 == 100.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 2817.0666666666666d + "'", double49 == 2817.0666666666666d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 310.0d + "'", double60 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + (-1.0d) + "'", double73 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 310.0d + "'", double87 == 310.0d);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 2817.0666666666666d + "'", double90 == 2817.0666666666666d);
        org.junit.Assert.assertTrue(Double.isNaN(double91));
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment4 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean5 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment4);
        org.apache.commons.math.stat.descriptive.summary.Sum sum6 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray13 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double14 = sum6.evaluate(doubleArray13);
        double[] doubleArray21 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double24 = sum6.evaluate(doubleArray21, 0, 0);
        double double27 = mean5.evaluate(doubleArray21, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs28 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean29 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs28);
        org.apache.commons.math.stat.descriptive.rank.Max max30 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long31 = max30.getN();
        geometricMean29.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max30);
        org.apache.commons.math.stat.descriptive.summary.Sum sum33 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray40 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double41 = sum33.evaluate(doubleArray40);
        geometricMean29.incrementAll(doubleArray40);
        boolean boolean43 = org.apache.commons.math.util.MathUtils.equals(doubleArray21, doubleArray40);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment44 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean45 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment44);
        org.apache.commons.math.stat.descriptive.summary.Sum sum46 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray53 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double54 = sum46.evaluate(doubleArray53);
        double[] doubleArray61 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double64 = sum46.evaluate(doubleArray61, 0, 0);
        double double67 = mean45.evaluate(doubleArray61, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs68 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean69 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs68);
        org.apache.commons.math.stat.descriptive.rank.Max max70 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long71 = max70.getN();
        geometricMean69.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max70);
        org.apache.commons.math.stat.descriptive.summary.Sum sum73 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray80 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double81 = sum73.evaluate(doubleArray80);
        geometricMean69.incrementAll(doubleArray80);
        boolean boolean83 = org.apache.commons.math.util.MathUtils.equals(doubleArray61, doubleArray80);
        boolean boolean84 = org.apache.commons.math.util.MathUtils.equals(doubleArray21, doubleArray61);
        mean3.incrementAll(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 310.0d + "'", double14 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 310.0d + "'", double41 == 310.0d);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 310.0d + "'", double54 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + (-1.0d) + "'", double67 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 310.0d + "'", double81 == 310.0d);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        double double1 = org.apache.commons.math.util.MathUtils.factorialLog(5);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 4.787491742782046d + "'", double1 == 4.787491742782046d);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        // The following exception was thrown during execution in test generation
        try {
            int int2 = org.apache.commons.math.util.MathUtils.lcm(371080922, 3199);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: overflow: mul");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        org.apache.commons.math.stat.descriptive.rank.Max max0 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long1 = max0.getN();
        max0.increment(1.1070527826035925E10d);
        max0.increment((-2.6602412030089932E11d));
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        // The following exception was thrown during execution in test generation
        try {
            double double3 = org.apache.commons.math.util.MathUtils.round(2806.7d, (int) (byte) 1, 577371932);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid rounding mode");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        double double5 = summaryStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.rank.Max max6 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long7 = max6.getN();
        long long8 = max6.getN();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max6);
        double double10 = summaryStatistics0.getVariance();
        summaryStatistics0.addValue((double) 0L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment13);
        mean14.increment(2817.0666666666666d);
        mean14.clear();
        // The following exception was thrown during execution in test generation
        try {
            summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementations must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance0.clear();
        double double2 = variance0.getResult();
        org.apache.commons.math.stat.descriptive.rank.Max max3 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long4 = max3.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs5 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean6 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs5);
        org.apache.commons.math.stat.descriptive.rank.Max max7 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long8 = max7.getN();
        geometricMean6.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max7);
        org.apache.commons.math.stat.descriptive.summary.Sum sum10 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray17 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double18 = sum10.evaluate(doubleArray17);
        geometricMean6.incrementAll(doubleArray17);
        double double20 = max3.evaluate(doubleArray17);
        double double21 = variance0.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment22);
        org.apache.commons.math.stat.descriptive.summary.Sum sum24 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray31 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double32 = sum24.evaluate(doubleArray31);
        double[] doubleArray39 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double42 = sum24.evaluate(doubleArray39, 0, 0);
        double double45 = mean23.evaluate(doubleArray39, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs46 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean47 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs46);
        org.apache.commons.math.stat.descriptive.rank.Max max48 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long49 = max48.getN();
        geometricMean47.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max48);
        org.apache.commons.math.stat.descriptive.summary.Sum sum51 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray58 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double59 = sum51.evaluate(doubleArray58);
        geometricMean47.incrementAll(doubleArray58);
        boolean boolean61 = org.apache.commons.math.util.MathUtils.equals(doubleArray39, doubleArray58);
        double double62 = variance0.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares63 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares63.increment(9.619275968248924E151d);
        double double66 = sumOfSquares63.getResult();
        double[] doubleArray68 = new double[] { 1.0d };
        sumOfSquares63.incrementAll(doubleArray68);
        double double70 = variance0.evaluate(doubleArray68);
        variance0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 310.0d + "'", double18 == 310.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2817.0666666666666d + "'", double21 == 2817.0666666666666d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 310.0d + "'", double32 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1.0d) + "'", double45 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 310.0d + "'", double59 == 310.0d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2817.0666666666666d + "'", double62 == 2817.0666666666666d);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 9.253047015333127E303d + "'", double66 == 9.253047015333127E303d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[1.0]");
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 0.0d + "'", double70 == 0.0d);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        long long2 = org.apache.commons.math.util.MathUtils.mulAndCheck((long) 1104154720, 110L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 121457019200L + "'", long2 == 121457019200L);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        double double1 = org.apache.commons.math.util.MathUtils.sinh(10.892060179263353d);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 26873.95815511553d + "'", double1 == 26873.95815511553d);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        summaryStatistics0.clear();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics3 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = summaryStatistics3.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long6 = secondMoment5.getN();
        secondMoment5.increment((double) (-1));
        summaryStatistics3.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment5);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance10.clear();
        summaryStatistics3.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance10);
        summaryStatistics0.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance10);
        variance10.clear();
        variance10.clear();
        variance10.increment(7.283185307179586d);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs18 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean19 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs18);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares20 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares20.increment(9.619275968248924E151d);
        double double23 = sumOfSquares20.getResult();
        double[] doubleArray25 = new double[] { 1.0d };
        sumOfSquares20.incrementAll(doubleArray25);
        sumOfLogs18.incrementAll(doubleArray25);
        int int28 = org.apache.commons.math.util.MathUtils.hash(doubleArray25);
        // The following exception was thrown during execution in test generation
        try {
            double double32 = variance10.evaluate(doubleArray25, (double) 1104154720L, (int) (short) 100, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 9.253047015333127E303d + "'", double23 == 9.253047015333127E303d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[1.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1072693279 + "'", int28 == 1072693279);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        org.apache.commons.math.stat.descriptive.rank.Min min0 = new org.apache.commons.math.stat.descriptive.rank.Min();
        double double1 = min0.getResult();
        min0.increment(310.0d);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics4 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics4.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long7 = secondMoment6.getN();
        secondMoment6.increment((double) (-1));
        summaryStatistics4.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment6);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment6);
        org.apache.commons.math.stat.descriptive.summary.Sum sum12 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray19 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double20 = sum12.evaluate(doubleArray19);
        double[] doubleArray27 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double30 = sum12.evaluate(doubleArray27, 0, 0);
        int int31 = org.apache.commons.math.util.MathUtils.hash(doubleArray27);
        double double32 = variance11.evaluate(doubleArray27);
        // The following exception was thrown during execution in test generation
        try {
            min0.incrementAll(doubleArray27, 927863700, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 310.0d + "'", double20 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2050442118 + "'", int31 == 2050442118);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 14635.2d + "'", double32 == 14635.2d);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = summaryStatistics0.getSummary();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares3 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares3.increment(9.619275968248924E151d);
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares3);
        sumOfSquares3.increment((double) 1076101120);
        long long9 = sumOfSquares3.getN();
        org.apache.commons.math.stat.descriptive.rank.Max max10 = new org.apache.commons.math.stat.descriptive.rank.Max();
        max10.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment13);
        org.apache.commons.math.stat.descriptive.summary.Sum sum15 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray22 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double23 = sum15.evaluate(doubleArray22);
        double[] doubleArray30 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double33 = sum15.evaluate(doubleArray30, 0, 0);
        double double36 = mean14.evaluate(doubleArray30, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs37 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean38 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs37);
        org.apache.commons.math.stat.descriptive.rank.Max max39 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long40 = max39.getN();
        geometricMean38.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max39);
        org.apache.commons.math.stat.descriptive.summary.Sum sum42 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray49 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double50 = sum42.evaluate(doubleArray49);
        geometricMean38.incrementAll(doubleArray49);
        boolean boolean52 = org.apache.commons.math.util.MathUtils.equals(doubleArray30, doubleArray49);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment53);
        org.apache.commons.math.stat.descriptive.summary.Sum sum55 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray62 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double63 = sum55.evaluate(doubleArray62);
        double[] doubleArray70 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double73 = sum55.evaluate(doubleArray70, 0, 0);
        double double76 = mean54.evaluate(doubleArray70, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs77 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean78 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs77);
        org.apache.commons.math.stat.descriptive.rank.Max max79 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long80 = max79.getN();
        geometricMean78.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max79);
        org.apache.commons.math.stat.descriptive.summary.Sum sum82 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray89 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double90 = sum82.evaluate(doubleArray89);
        geometricMean78.incrementAll(doubleArray89);
        boolean boolean92 = org.apache.commons.math.util.MathUtils.equals(doubleArray70, doubleArray89);
        boolean boolean93 = org.apache.commons.math.util.MathUtils.equals(doubleArray30, doubleArray70);
        double double94 = max10.evaluate(doubleArray70);
        double double95 = sumOfSquares3.evaluate(doubleArray70);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertNotNull(statisticalSummary2);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2L + "'", long9 == 2L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 310.0d + "'", double23 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-1.0d) + "'", double36 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 310.0d + "'", double50 == 310.0d);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 310.0d + "'", double63 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + (-1.0d) + "'", double76 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 310.0d + "'", double90 == 310.0d);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 310.0d + "'", double94 == 310.0d);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 115512.0d + "'", double95 == 115512.0d);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        double double2 = org.apache.commons.math.util.MathUtils.round(1.3440585709080676E43d, 0);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.3440585709080676E43d + "'", double2 == 1.3440585709080676E43d);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        int int2 = org.apache.commons.math.util.MathUtils.addAndCheck((int) '#', 1072693248);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1072693283 + "'", int2 == 1072693283);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic9 = summaryStatistics0.getVarianceImpl();
        double double10 = summaryStatistics0.getVariance();
        boolean boolean12 = summaryStatistics0.equals((java.lang.Object) 2L);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = summaryStatistics0.getSumLogImpl();
        double double14 = summaryStatistics0.getMin();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        sumOfLogs0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        org.apache.commons.math.stat.descriptive.summary.Sum sum5 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long6 = sum5.getN();
        sum5.increment(35.0d);
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum5);
        long long10 = summaryStatistics0.getN();
        summaryStatistics0.addValue((double) 35);
        double double13 = summaryStatistics0.getMin();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 70.0d + "'", double13 == 70.0d);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = summaryStatistics0.getSummary();
        double double2 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean4 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment3);
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment3);
        double double6 = summaryStatistics0.getStandardDeviation();
        double double7 = summaryStatistics0.getVariance();
        summaryStatistics0.clear();
        org.junit.Assert.assertNotNull(summaryStatistics0);
        org.junit.Assert.assertNotNull(statisticalSummary1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = summaryStatistics0.getSummary();
        double double3 = summaryStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment4 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean5 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment4);
        org.apache.commons.math.stat.descriptive.summary.Sum sum6 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray13 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double14 = sum6.evaluate(doubleArray13);
        double[] doubleArray21 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double24 = sum6.evaluate(doubleArray21, 0, 0);
        double double27 = mean5.evaluate(doubleArray21, 1, (int) (byte) 1);
        mean5.increment((double) 10L);
        mean5.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment31 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean32 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment31);
        org.apache.commons.math.stat.descriptive.summary.Sum sum33 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray40 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double41 = sum33.evaluate(doubleArray40);
        double[] doubleArray48 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double51 = sum33.evaluate(doubleArray48, 0, 0);
        double double54 = mean32.evaluate(doubleArray48, 1, (int) (byte) 1);
        double double57 = mean5.evaluate(doubleArray48, 0, 0);
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean5);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs59 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean60 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs59);
        double double61 = sumOfLogs59.getResult();
        double double62 = sumOfLogs59.getResult();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean63 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs59);
        sumOfLogs59.clear();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics65 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic66 = summaryStatistics65.getMeanImpl();
        double double67 = summaryStatistics65.getSum();
        long long68 = summaryStatistics65.getN();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic69 = summaryStatistics65.getSumLogImpl();
        boolean boolean70 = sumOfLogs59.equals((java.lang.Object) storelessUnivariateStatistic69);
        sumOfLogs59.clear();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfLogs59);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic73 = summaryStatistics0.getMinImpl();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertNotNull(statisticalSummary2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 310.0d + "'", double14 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + (-1.0d) + "'", double27 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 310.0d + "'", double41 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + (-1.0d) + "'", double54 == (-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic66);
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic73);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        double double1 = org.apache.commons.math.util.MathUtils.cosh((double) 10L);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 11013.232920103324d + "'", double1 == 11013.232920103324d);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        double double5 = summaryStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.rank.Max max6 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long7 = max6.getN();
        long long8 = max6.getN();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max6);
        double double10 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getMinImpl();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        org.apache.commons.math.stat.descriptive.rank.Min min0 = new org.apache.commons.math.stat.descriptive.rank.Min();
        double double1 = min0.getResult();
        double double2 = min0.getResult();
        min0.clear();
        min0.increment(1.1070527826035925E10d);
        min0.increment(0.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        int int1 = org.apache.commons.math.util.MathUtils.indicator((int) '#');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.rank.Max max2 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long3 = max2.getN();
        geometricMean1.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max2);
        org.apache.commons.math.stat.descriptive.summary.Sum sum5 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray12 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double13 = sum5.evaluate(doubleArray12);
        geometricMean1.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = geometricMean1.getSumLogImpl();
        long long16 = geometricMean1.getN();
        geometricMean1.increment((double) 'a');
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics19 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic20 = summaryStatistics19.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment21 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long22 = secondMoment21.getN();
        secondMoment21.increment((double) (-1));
        summaryStatistics19.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.Variance variance26 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        org.apache.commons.math.stat.descriptive.moment.Variance variance27 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment21);
        secondMoment21.increment(14635.2d);
        secondMoment21.increment(1.9155040003582885E22d);
        // The following exception was thrown during execution in test generation
        try {
            geometricMean1.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Implementation must be configured before values are added.");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 310.0d + "'", double13 == 310.0d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 6L + "'", long16 == 6L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        long long2 = sumOfLogs0.getN();
        double double3 = sumOfLogs0.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic9 = summaryStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares10 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        double double11 = sumOfSquares10.getResult();
        double double12 = sumOfSquares10.getResult();
        summaryStatistics0.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares10);
        double double14 = sumOfSquares10.getResult();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic9);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        org.apache.commons.math.stat.descriptive.rank.Max max0 = new org.apache.commons.math.stat.descriptive.rank.Max();
        double double1 = max0.getResult();
        max0.clear();
        max0.clear();
        max0.clear();
        max0.clear();
        max0.increment((double) 1095479168);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        double double2 = org.apache.commons.math.util.MathUtils.binomialCoefficientLog(62, (int) (byte) 1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 4.127134385045092d + "'", double2 == 4.127134385045092d);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        int int2 = org.apache.commons.math.util.MathUtils.gcd((int) ' ', 1104152832);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 32 + "'", int2 == 32);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        org.apache.commons.math.stat.descriptive.rank.Min min0 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min0.clear();
        min0.increment((double) 100L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment4 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean5 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment4);
        mean5.clear();
        double[] doubleArray12 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean5.incrementAll(doubleArray12, (int) (short) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.summary.Sum sum16 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray23 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double24 = sum16.evaluate(doubleArray23);
        double[] doubleArray31 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double34 = sum16.evaluate(doubleArray31, 0, 0);
        boolean boolean35 = org.apache.commons.math.util.MathUtils.equals(doubleArray12, doubleArray31);
        // The following exception was thrown during execution in test generation
        try {
            double double38 = min0.evaluate(doubleArray12, (-368574463), 3190);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 310.0d + "'", double24 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        org.apache.commons.math.stat.descriptive.rank.Min min0 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min0.clear();
        min0.clear();
        min0.increment((double) (-316200L));
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        long long1 = org.apache.commons.math.util.MathUtils.sign(101L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        double double5 = summaryStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.rank.Max max6 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long7 = max6.getN();
        long long8 = max6.getN();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max6);
        double double10 = summaryStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getVarianceImpl();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        double double1 = org.apache.commons.math.util.MathUtils.factorialLog(132);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 515.8908245878225d + "'", double1 == 515.8908245878225d);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        int int1 = org.apache.commons.math.util.MathUtils.hash((-1.0d));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1074790400) + "'", int1 == (-1074790400));
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean2 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        double double3 = sumOfLogs0.getResult();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics4 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics4.getMeanImpl();
        double double6 = summaryStatistics4.getSum();
        double double7 = summaryStatistics4.getGeometricMean();
        double double8 = summaryStatistics4.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic9 = summaryStatistics4.getMaxImpl();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs10 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean11 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs10);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean12 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs10);
        org.apache.commons.math.stat.descriptive.summary.Sum sum13 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray20 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double21 = sum13.evaluate(doubleArray20);
        double double22 = sumOfLogs10.evaluate(doubleArray20);
        double double23 = storelessUnivariateStatistic9.evaluate(doubleArray20);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = sumOfLogs0.evaluate(doubleArray20, 100, 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic9);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 310.0d + "'", double21 == 310.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics0.getSumsqImpl();
        double double3 = summaryStatistics0.getMax();
        long long4 = summaryStatistics0.getN();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics5 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics5.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long8 = secondMoment7.getN();
        secondMoment7.increment((double) (-1));
        summaryStatistics5.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment12);
        double double14 = mean13.getResult();
        mean13.clear();
        summaryStatistics5.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean13);
        org.apache.commons.math.stat.descriptive.rank.Max max17 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long18 = max17.getN();
        summaryStatistics5.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max17);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic20 = summaryStatistics5.getMinImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic21 = summaryStatistics5.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.summary.Sum sum22 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray29 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double30 = sum22.evaluate(doubleArray29);
        double[] doubleArray37 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double40 = sum22.evaluate(doubleArray37, 0, 0);
        org.apache.commons.math.stat.descriptive.summary.Sum sum41 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray48 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double49 = sum41.evaluate(doubleArray48);
        double[] doubleArray56 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double59 = sum41.evaluate(doubleArray56, 0, 0);
        int int60 = org.apache.commons.math.util.MathUtils.hash(doubleArray56);
        double double63 = sum22.evaluate(doubleArray56, (int) (byte) 0, (int) (short) 1);
        summaryStatistics5.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum22);
        summaryStatistics0.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum22);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs66 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean67 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs66);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean68 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs66);
        org.apache.commons.math.stat.descriptive.summary.Sum sum69 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray76 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double77 = sum69.evaluate(doubleArray76);
        double double78 = sumOfLogs66.evaluate(doubleArray76);
        double double79 = sumOfLogs66.getResult();
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfLogs66);
        long long81 = sumOfLogs66.getN();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic20);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic21);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 310.0d + "'", double30 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 310.0d + "'", double49 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2050442118 + "'", int60 == 2050442118);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + (-1.0d) + "'", double63 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 310.0d + "'", double77 == 310.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance0.clear();
        double double2 = variance0.getResult();
        org.apache.commons.math.stat.descriptive.rank.Max max3 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long4 = max3.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs5 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean6 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs5);
        org.apache.commons.math.stat.descriptive.rank.Max max7 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long8 = max7.getN();
        geometricMean6.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max7);
        org.apache.commons.math.stat.descriptive.summary.Sum sum10 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray17 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double18 = sum10.evaluate(doubleArray17);
        geometricMean6.incrementAll(doubleArray17);
        double double20 = max3.evaluate(doubleArray17);
        double double21 = variance0.evaluate(doubleArray17);
        variance0.increment((double) 1552271548);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment24 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double25 = secondMoment24.getResult();
        org.apache.commons.math.stat.descriptive.rank.Max max26 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long27 = max26.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs28 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean29 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs28);
        org.apache.commons.math.stat.descriptive.rank.Max max30 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long31 = max30.getN();
        geometricMean29.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max30);
        org.apache.commons.math.stat.descriptive.summary.Sum sum33 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray40 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double41 = sum33.evaluate(doubleArray40);
        geometricMean29.incrementAll(doubleArray40);
        double double43 = max26.evaluate(doubleArray40);
        secondMoment24.incrementAll(doubleArray40);
        variance0.incrementAll(doubleArray40);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 310.0d + "'", double18 == 310.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2817.0666666666666d + "'", double21 == 2817.0666666666666d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 310.0d + "'", double41 == 310.0d);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 100.0d + "'", double43 == 100.0d);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics0.getSumsqImpl();
        double double3 = summaryStatistics0.getMax();
        long long4 = summaryStatistics0.getN();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics5 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics5.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long8 = secondMoment7.getN();
        secondMoment7.increment((double) (-1));
        summaryStatistics5.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment7);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment12 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean13 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment12);
        double double14 = mean13.getResult();
        mean13.clear();
        summaryStatistics5.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean13);
        org.apache.commons.math.stat.descriptive.rank.Max max17 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long18 = max17.getN();
        summaryStatistics5.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max17);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic20 = summaryStatistics5.getMinImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic21 = summaryStatistics5.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.summary.Sum sum22 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray29 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double30 = sum22.evaluate(doubleArray29);
        double[] doubleArray37 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double40 = sum22.evaluate(doubleArray37, 0, 0);
        org.apache.commons.math.stat.descriptive.summary.Sum sum41 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray48 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double49 = sum41.evaluate(doubleArray48);
        double[] doubleArray56 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double59 = sum41.evaluate(doubleArray56, 0, 0);
        int int60 = org.apache.commons.math.util.MathUtils.hash(doubleArray56);
        double double63 = sum22.evaluate(doubleArray56, (int) (byte) 0, (int) (short) 1);
        summaryStatistics5.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum22);
        summaryStatistics0.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum22);
        double double66 = sum22.getResult();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic20);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic21);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 310.0d + "'", double30 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 310.0d + "'", double49 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2050442118 + "'", int60 == 2050442118);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + (-1.0d) + "'", double63 == (-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double66));
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long3 = secondMoment2.getN();
        secondMoment2.increment((double) (-1));
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        double double9 = mean8.getResult();
        mean8.clear();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        org.apache.commons.math.stat.descriptive.rank.Max max12 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long13 = max12.getN();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max12);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = summaryStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic16 = summaryStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic17 = summaryStatistics0.getMeanImpl();
        java.lang.String str18 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics19 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic20 = summaryStatistics19.getMeanImpl();
        double double21 = summaryStatistics19.getSum();
        double double22 = summaryStatistics19.getGeometricMean();
        double double23 = summaryStatistics19.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic24 = summaryStatistics19.getMaxImpl();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs25 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean26 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs25);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean27 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs25);
        org.apache.commons.math.stat.descriptive.summary.Sum sum28 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray35 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double36 = sum28.evaluate(doubleArray35);
        double double37 = sumOfLogs25.evaluate(doubleArray35);
        double double38 = storelessUnivariateStatistic24.evaluate(doubleArray35);
        summaryStatistics0.setMeanImpl(storelessUnivariateStatistic24);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic16);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str18, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic20);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic24);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 310.0d + "'", double36 == 310.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        org.apache.commons.math.stat.descriptive.rank.Max max0 = new org.apache.commons.math.stat.descriptive.rank.Max();
        max0.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean4 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment3);
        org.apache.commons.math.stat.descriptive.summary.Sum sum5 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray12 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double13 = sum5.evaluate(doubleArray12);
        double[] doubleArray20 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double23 = sum5.evaluate(doubleArray20, 0, 0);
        double double26 = mean4.evaluate(doubleArray20, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs27 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean28 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs27);
        org.apache.commons.math.stat.descriptive.rank.Max max29 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long30 = max29.getN();
        geometricMean28.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max29);
        org.apache.commons.math.stat.descriptive.summary.Sum sum32 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray39 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double40 = sum32.evaluate(doubleArray39);
        geometricMean28.incrementAll(doubleArray39);
        boolean boolean42 = org.apache.commons.math.util.MathUtils.equals(doubleArray20, doubleArray39);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment43 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean44 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment43);
        org.apache.commons.math.stat.descriptive.summary.Sum sum45 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray52 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double53 = sum45.evaluate(doubleArray52);
        double[] doubleArray60 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double63 = sum45.evaluate(doubleArray60, 0, 0);
        double double66 = mean44.evaluate(doubleArray60, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs67 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean68 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs67);
        org.apache.commons.math.stat.descriptive.rank.Max max69 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long70 = max69.getN();
        geometricMean68.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max69);
        org.apache.commons.math.stat.descriptive.summary.Sum sum72 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray79 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double80 = sum72.evaluate(doubleArray79);
        geometricMean68.incrementAll(doubleArray79);
        boolean boolean82 = org.apache.commons.math.util.MathUtils.equals(doubleArray60, doubleArray79);
        boolean boolean83 = org.apache.commons.math.util.MathUtils.equals(doubleArray20, doubleArray60);
        double double84 = max0.evaluate(doubleArray60);
        max0.clear();
        double double86 = max0.getResult();
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 310.0d + "'", double13 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + (-1.0d) + "'", double26 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 310.0d + "'", double40 == 310.0d);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 310.0d + "'", double53 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + (-1.0d) + "'", double66 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 310.0d + "'", double80 == 310.0d);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 310.0d + "'", double84 == 310.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics0.getSumsqImpl();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        double double9 = summaryStatistics0.getMax();
        double double10 = summaryStatistics0.getMin();
        double double11 = summaryStatistics0.getVariance();
        summaryStatistics0.clear();
        boolean boolean14 = summaryStatistics0.equals((java.lang.Object) 0.0f);
        double double15 = summaryStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.rank.Max max16 = new org.apache.commons.math.stat.descriptive.rank.Max();
        double double17 = max16.getResult();
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max16);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        double double2 = summaryStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic3 = summaryStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = summaryStatistics0.getGeoMeanImpl();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic3);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        org.apache.commons.math.stat.descriptive.rank.Min min0 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min0.increment(0.0d);
        min0.clear();
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance0.clear();
        double double2 = variance0.getResult();
        org.apache.commons.math.stat.descriptive.rank.Max max3 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long4 = max3.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs5 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean6 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs5);
        org.apache.commons.math.stat.descriptive.rank.Max max7 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long8 = max7.getN();
        geometricMean6.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max7);
        org.apache.commons.math.stat.descriptive.summary.Sum sum10 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray17 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double18 = sum10.evaluate(doubleArray17);
        geometricMean6.incrementAll(doubleArray17);
        double double20 = max3.evaluate(doubleArray17);
        double double21 = variance0.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment22);
        org.apache.commons.math.stat.descriptive.summary.Sum sum24 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray31 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double32 = sum24.evaluate(doubleArray31);
        double[] doubleArray39 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double42 = sum24.evaluate(doubleArray39, 0, 0);
        double double45 = mean23.evaluate(doubleArray39, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs46 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean47 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs46);
        org.apache.commons.math.stat.descriptive.rank.Max max48 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long49 = max48.getN();
        geometricMean47.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max48);
        org.apache.commons.math.stat.descriptive.summary.Sum sum51 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray58 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double59 = sum51.evaluate(doubleArray58);
        geometricMean47.incrementAll(doubleArray58);
        boolean boolean61 = org.apache.commons.math.util.MathUtils.equals(doubleArray39, doubleArray58);
        double double62 = variance0.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.summary.Sum sum63 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray70 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double71 = sum63.evaluate(doubleArray70);
        double[] doubleArray78 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double81 = sum63.evaluate(doubleArray78, 0, 0);
        double double83 = variance0.evaluate(doubleArray78, (double) 35);
        double double84 = variance0.getResult();
        double double85 = variance0.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 310.0d + "'", double18 == 310.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2817.0666666666666d + "'", double21 == 2817.0666666666666d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 310.0d + "'", double32 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1.0d) + "'", double45 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 310.0d + "'", double59 == 310.0d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2817.0666666666666d + "'", double62 == 2817.0666666666666d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 310.0d + "'", double71 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 14635.2d + "'", double83 == 14635.2d);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertTrue(Double.isNaN(double85));
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics0.getSumsqImpl();
        double double3 = summaryStatistics0.getMax();
        long long4 = summaryStatistics0.getN();
        double double5 = summaryStatistics0.getStandardDeviation();
        java.lang.String str6 = summaryStatistics0.toString();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str6, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares0 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        double double1 = sumOfSquares0.getResult();
        double double2 = sumOfSquares0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean4 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment3);
        mean4.clear();
        mean4.increment(30.482323362278656d);
        double double8 = mean4.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance10.increment((double) 101L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment13 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean14 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment13);
        mean14.clear();
        double[] doubleArray21 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean14.incrementAll(doubleArray21, (int) (short) 1, (int) (byte) 0);
        double double25 = variance10.evaluate(doubleArray21);
        mean4.incrementAll(doubleArray21);
        // The following exception was thrown during execution in test generation
        try {
            double double29 = sumOfSquares0.evaluate(doubleArray21, (int) (byte) 10, (-1682563522));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 2806.7d + "'", double25 == 2806.7d);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = sum1.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance5.clear();
        double double7 = variance5.getResult();
        org.apache.commons.math.stat.descriptive.rank.Max max8 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long9 = max8.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs10 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean11 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs10);
        org.apache.commons.math.stat.descriptive.rank.Max max12 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long13 = max12.getN();
        geometricMean11.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max12);
        org.apache.commons.math.stat.descriptive.summary.Sum sum15 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray22 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double23 = sum15.evaluate(doubleArray22);
        geometricMean11.incrementAll(doubleArray22);
        double double25 = max8.evaluate(doubleArray22);
        double double26 = variance5.evaluate(doubleArray22);
        long long27 = variance5.getN();
        variance5.increment((double) (-51));
        org.apache.commons.math.stat.descriptive.summary.Sum sum30 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray37 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double38 = sum30.evaluate(doubleArray37);
        double[] doubleArray45 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double48 = sum30.evaluate(doubleArray45, 0, 0);
        int int49 = org.apache.commons.math.util.MathUtils.hash(doubleArray45);
        double double53 = variance5.evaluate(doubleArray45, 35.0d, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double56 = sum1.evaluate(doubleArray45, (int) (byte) 0, (-888836577));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 310.0d + "'", double23 == 310.0d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 2817.0666666666666d + "'", double26 == 2817.0666666666666d);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 310.0d + "'", double38 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2050442118 + "'", int49 == 2050442118);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        org.apache.commons.math.stat.descriptive.rank.Max max2 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long3 = max2.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs4 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean5 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs4);
        org.apache.commons.math.stat.descriptive.rank.Max max6 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long7 = max6.getN();
        geometricMean5.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max6);
        org.apache.commons.math.stat.descriptive.summary.Sum sum9 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray16 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double17 = sum9.evaluate(doubleArray16);
        geometricMean5.incrementAll(doubleArray16);
        double double19 = max2.evaluate(doubleArray16);
        secondMoment0.incrementAll(doubleArray16);
        long long21 = secondMoment0.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 310.0d + "'", double17 == 310.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 6L + "'", long21 == 6L);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long3 = secondMoment2.getN();
        secondMoment2.increment((double) (-1));
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        double double9 = mean8.getResult();
        mean8.clear();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        org.apache.commons.math.stat.descriptive.rank.Max max12 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long13 = max12.getN();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max12);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = summaryStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic16 = summaryStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.summary.Sum sum17 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray24 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double25 = sum17.evaluate(doubleArray24);
        double[] doubleArray32 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double35 = sum17.evaluate(doubleArray32, 0, 0);
        org.apache.commons.math.stat.descriptive.summary.Sum sum36 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray43 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double44 = sum36.evaluate(doubleArray43);
        double[] doubleArray51 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double54 = sum36.evaluate(doubleArray51, 0, 0);
        int int55 = org.apache.commons.math.util.MathUtils.hash(doubleArray51);
        double double58 = sum17.evaluate(doubleArray51, (int) (byte) 0, (int) (short) 1);
        summaryStatistics0.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum17);
        sum17.increment((double) '4');
        double double62 = sum17.getResult();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic16);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 310.0d + "'", double25 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 310.0d + "'", double44 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2050442118 + "'", int55 == 2050442118);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-1.0d) + "'", double58 == (-1.0d));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 52.0d + "'", double62 == 52.0d);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        double double1 = org.apache.commons.math.util.MathUtils.sign((double) (-1.0f));
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + (-1.0d) + "'", double1 == (-1.0d));
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        long long1 = org.apache.commons.math.util.MathUtils.indicator((-1785L));
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        long long2 = org.apache.commons.math.util.MathUtils.addAndCheck((long) 32, (long) (byte) 10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 42L + "'", long2 == 42L);
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment0);
        org.apache.commons.math.stat.descriptive.summary.Sum sum2 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray9 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double10 = sum2.evaluate(doubleArray9);
        double[] doubleArray17 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double20 = sum2.evaluate(doubleArray17, 0, 0);
        double double23 = mean1.evaluate(doubleArray17, 1, (int) (byte) 1);
        mean1.increment((double) 10L);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment27);
        org.apache.commons.math.stat.descriptive.summary.Sum sum29 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray36 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double37 = sum29.evaluate(doubleArray36);
        double[] doubleArray44 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double47 = sum29.evaluate(doubleArray44, 0, 0);
        double double50 = mean28.evaluate(doubleArray44, 1, (int) (byte) 1);
        double double53 = mean1.evaluate(doubleArray44, 0, 0);
        double double54 = mean1.getResult();
        double double55 = mean1.getResult();
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 310.0d + "'", double10 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1.0d) + "'", double23 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 310.0d + "'", double37 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        double double9 = summaryStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = summaryStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.summary.Sum sum11 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long12 = sum11.getN();
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum11);
        java.lang.String str14 = summaryStatistics0.toString();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str14, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment0);
        double double2 = mean1.getResult();
        mean1.clear();
        double double4 = mean1.getResult();
        mean1.increment(0.0d);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        org.apache.commons.math.stat.descriptive.summary.Sum sum9 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray16 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double17 = sum9.evaluate(doubleArray16);
        double[] doubleArray24 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double27 = sum9.evaluate(doubleArray24, 0, 0);
        double double30 = mean8.evaluate(doubleArray24, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance31.clear();
        double double33 = variance31.getResult();
        org.apache.commons.math.stat.descriptive.rank.Max max34 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long35 = max34.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs36 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean37 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs36);
        org.apache.commons.math.stat.descriptive.rank.Max max38 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long39 = max38.getN();
        geometricMean37.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max38);
        org.apache.commons.math.stat.descriptive.summary.Sum sum41 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray48 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double49 = sum41.evaluate(doubleArray48);
        geometricMean37.incrementAll(doubleArray48);
        double double51 = max34.evaluate(doubleArray48);
        double double52 = variance31.evaluate(doubleArray48);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment53 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean54 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment53);
        org.apache.commons.math.stat.descriptive.summary.Sum sum55 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray62 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double63 = sum55.evaluate(doubleArray62);
        double[] doubleArray70 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double73 = sum55.evaluate(doubleArray70, 0, 0);
        double double76 = mean54.evaluate(doubleArray70, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs77 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean78 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs77);
        org.apache.commons.math.stat.descriptive.rank.Max max79 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long80 = max79.getN();
        geometricMean78.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max79);
        org.apache.commons.math.stat.descriptive.summary.Sum sum82 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray89 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double90 = sum82.evaluate(doubleArray89);
        geometricMean78.incrementAll(doubleArray89);
        boolean boolean92 = org.apache.commons.math.util.MathUtils.equals(doubleArray70, doubleArray89);
        double double93 = variance31.evaluate(doubleArray89);
        boolean boolean94 = org.apache.commons.math.util.MathUtils.equals(doubleArray24, doubleArray89);
        int int95 = org.apache.commons.math.util.MathUtils.hash(doubleArray24);
        // The following exception was thrown during execution in test generation
        try {
            double double98 = mean1.evaluate(doubleArray24, (-1), 132);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 310.0d + "'", double17 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 310.0d + "'", double49 == 310.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 100.0d + "'", double51 == 100.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2817.0666666666666d + "'", double52 == 2817.0666666666666d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 310.0d + "'", double63 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + (-1.0d) + "'", double76 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 310.0d + "'", double90 == 310.0d);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 2817.0666666666666d + "'", double93 == 2817.0666666666666d);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 2050442118 + "'", int95 == 2050442118);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        float float1 = org.apache.commons.math.util.MathUtils.indicator((float) 6L);
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.0f + "'", float1 == 1.0f);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        double double2 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs3 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double4 = sumOfLogs3.getResult();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean5 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs3);
        double double6 = geometricMean5.getResult();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean5);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = summaryStatistics0.getMaxImpl();
        double double9 = summaryStatistics0.getMax();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        double double9 = summaryStatistics0.getMax();
        double double10 = summaryStatistics0.getMin();
        double double11 = summaryStatistics0.getVariance();
        summaryStatistics0.clear();
        boolean boolean14 = summaryStatistics0.equals((java.lang.Object) 0.0f);
        double double15 = summaryStatistics0.getVariance();
        double double16 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic17 = summaryStatistics0.getMinImpl();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic17);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares0 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long1 = sumOfSquares0.getN();
        double double2 = sumOfSquares0.getResult();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares0 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares0.increment(9.619275968248924E151d);
        double double3 = sumOfSquares0.getResult();
        double[] doubleArray5 = new double[] { 1.0d };
        sumOfSquares0.incrementAll(doubleArray5);
        long long7 = sumOfSquares0.getN();
        double double8 = sumOfSquares0.getResult();
        double double9 = sumOfSquares0.getResult();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 9.253047015333127E303d + "'", double3 == 9.253047015333127E303d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 9.253047015333127E303d + "'", double8 == 9.253047015333127E303d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 9.253047015333127E303d + "'", double9 == 9.253047015333127E303d);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long3 = secondMoment2.getN();
        secondMoment2.increment((double) (-1));
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        double double9 = mean8.getResult();
        mean8.clear();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance13.increment(0.6476398521807292d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance16.clear();
        double double18 = variance16.getResult();
        org.apache.commons.math.stat.descriptive.rank.Max max19 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long20 = max19.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs21 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean22 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs21);
        org.apache.commons.math.stat.descriptive.rank.Max max23 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long24 = max23.getN();
        geometricMean22.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max23);
        org.apache.commons.math.stat.descriptive.summary.Sum sum26 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray33 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double34 = sum26.evaluate(doubleArray33);
        geometricMean22.incrementAll(doubleArray33);
        double double36 = max19.evaluate(doubleArray33);
        double double37 = variance16.evaluate(doubleArray33);
        double double38 = variance13.evaluate(doubleArray33);
        double double39 = mean8.evaluate(doubleArray33);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 310.0d + "'", double34 == 310.0d);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2817.0666666666666d + "'", double37 == 2817.0666666666666d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 2347.5555555555557d + "'", double38 == 2347.5555555555557d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 51.666666666666664d + "'", double39 == 51.666666666666664d);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        org.apache.commons.math.stat.descriptive.moment.Variance variance0 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance0.clear();
        double double2 = variance0.getResult();
        org.apache.commons.math.stat.descriptive.rank.Max max3 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long4 = max3.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs5 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean6 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs5);
        org.apache.commons.math.stat.descriptive.rank.Max max7 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long8 = max7.getN();
        geometricMean6.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max7);
        org.apache.commons.math.stat.descriptive.summary.Sum sum10 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray17 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double18 = sum10.evaluate(doubleArray17);
        geometricMean6.incrementAll(doubleArray17);
        double double20 = max3.evaluate(doubleArray17);
        double double21 = variance0.evaluate(doubleArray17);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment22 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean23 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment22);
        org.apache.commons.math.stat.descriptive.summary.Sum sum24 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray31 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double32 = sum24.evaluate(doubleArray31);
        double[] doubleArray39 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double42 = sum24.evaluate(doubleArray39, 0, 0);
        double double45 = mean23.evaluate(doubleArray39, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs46 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean47 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs46);
        org.apache.commons.math.stat.descriptive.rank.Max max48 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long49 = max48.getN();
        geometricMean47.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max48);
        org.apache.commons.math.stat.descriptive.summary.Sum sum51 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray58 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double59 = sum51.evaluate(doubleArray58);
        geometricMean47.incrementAll(doubleArray58);
        boolean boolean61 = org.apache.commons.math.util.MathUtils.equals(doubleArray39, doubleArray58);
        double double62 = variance0.evaluate(doubleArray58);
        org.apache.commons.math.stat.descriptive.summary.Sum sum63 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray70 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double71 = sum63.evaluate(doubleArray70);
        double[] doubleArray78 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double81 = sum63.evaluate(doubleArray78, 0, 0);
        double double83 = variance0.evaluate(doubleArray78, (double) 35);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs84 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean85 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs84);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean86 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs84);
        org.apache.commons.math.stat.descriptive.summary.Sum sum87 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray94 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double95 = sum87.evaluate(doubleArray94);
        double double96 = sumOfLogs84.evaluate(doubleArray94);
        double double97 = variance0.evaluate(doubleArray94);
        variance0.setBiasCorrected(false);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 310.0d + "'", double18 == 310.0d);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 2817.0666666666666d + "'", double21 == 2817.0666666666666d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 310.0d + "'", double32 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + (-1.0d) + "'", double45 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 310.0d + "'", double59 == 310.0d);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 2817.0666666666666d + "'", double62 == 2817.0666666666666d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 310.0d + "'", double71 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double81));
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 14635.2d + "'", double83 == 14635.2d);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 310.0d + "'", double95 == 310.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double96));
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 2817.0666666666666d + "'", double97 == 2817.0666666666666d);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long3 = secondMoment2.getN();
        secondMoment2.increment((double) (-1));
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        double double9 = mean8.getResult();
        mean8.clear();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        org.apache.commons.math.stat.descriptive.rank.Max max12 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long13 = max12.getN();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max12);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = summaryStatistics0.getMinImpl();
        double double16 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic17 = summaryStatistics0.getMinImpl();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic17);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment0);
        mean1.increment(2817.0666666666666d);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs6 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean7 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs6);
        org.apache.commons.math.stat.descriptive.rank.Max max8 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long9 = max8.getN();
        geometricMean7.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max8);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = geometricMean7.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics12 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = summaryStatistics12.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long15 = secondMoment14.getN();
        secondMoment14.increment((double) (-1));
        summaryStatistics12.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment14);
        geometricMean7.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment14);
        org.apache.commons.math.stat.descriptive.moment.Variance variance20 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment14);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs21 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double22 = sumOfLogs21.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance24.increment((double) 101L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment27);
        mean28.clear();
        double[] doubleArray35 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean28.incrementAll(doubleArray35, (int) (short) 1, (int) (byte) 0);
        double double39 = variance24.evaluate(doubleArray35);
        double double40 = sumOfLogs21.evaluate(doubleArray35);
        double double41 = variance20.evaluate(doubleArray35);
        // The following exception was thrown during execution in test generation
        try {
            double double44 = mean1.evaluate(doubleArray35, 1072693269, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 2806.7d + "'", double39 == 2806.7d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 2245.3599999999997d + "'", double41 == 2245.3599999999997d);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        float float2 = org.apache.commons.math.util.MathUtils.round((float) 2601, (int) (short) 1);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 2601.0f + "'", float2 == 2601.0f);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        double double2 = summaryStatistics0.getSum();
        long long3 = summaryStatistics0.getN();
        double double4 = summaryStatistics0.getStandardDeviation();
        double double5 = summaryStatistics0.getMean();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        java.lang.Class<?> wildcardClass9 = summaryStatistics0.getClass();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics10 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance((java.lang.Class) wildcardClass9);
        double double11 = summaryStatistics10.getMax();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs12 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double13 = sumOfLogs12.getResult();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean14 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs12);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean15 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs12);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic16 = geometricMean15.getSumLogImpl();
        summaryStatistics10.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean15);
        double double18 = summaryStatistics10.getSumsq();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(wildcardClass9);
        org.junit.Assert.assertNotNull(summaryStatistics10);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs2 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs2);
        org.apache.commons.math.stat.descriptive.rank.Max max4 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long5 = max4.getN();
        geometricMean3.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max4);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic7 = geometricMean3.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics8 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic9 = summaryStatistics8.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long11 = secondMoment10.getN();
        secondMoment10.increment((double) (-1));
        summaryStatistics8.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment10);
        geometricMean3.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment10);
        secondMoment10.clear();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic7);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        long long2 = sumOfLogs0.getN();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = summaryStatistics0.getSummary();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics4 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics4.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary6 = summaryStatistics4.getSummary();
        double double7 = summaryStatistics4.getSumsq();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = summaryStatistics4.getMinImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics9 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum10 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum10.clear();
        summaryStatistics9.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum10);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = summaryStatistics9.getMeanImpl();
        summaryStatistics4.setGeoMeanImpl(storelessUnivariateStatistic13);
        summaryStatistics0.setMaxImpl(storelessUnivariateStatistic13);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs17 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean18 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs17);
        org.apache.commons.math.stat.descriptive.rank.Max max19 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long20 = max19.getN();
        geometricMean18.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max19);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic22 = geometricMean18.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics23 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic24 = summaryStatistics23.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long26 = secondMoment25.getN();
        secondMoment25.increment((double) (-1));
        summaryStatistics23.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment25);
        geometricMean18.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment25);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs32 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double33 = sumOfLogs32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance35.increment((double) 101L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment38);
        mean39.clear();
        double[] doubleArray46 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean39.incrementAll(doubleArray46, (int) (short) 1, (int) (byte) 0);
        double double50 = variance35.evaluate(doubleArray46);
        double double51 = sumOfLogs32.evaluate(doubleArray46);
        double double52 = variance31.evaluate(doubleArray46);
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance31);
        long long54 = summaryStatistics0.getN();
        double double55 = summaryStatistics0.getMean();
        org.junit.Assert.assertNotNull(summaryStatistics0);
        org.junit.Assert.assertNotNull(statisticalSummary1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertNotNull(statisticalSummary6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic22);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2806.7d + "'", double50 == 2806.7d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2245.3599999999997d + "'", double52 == 2245.3599999999997d);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 0.0d + "'", double55 == 0.0d);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        int int2 = org.apache.commons.math.util.MathUtils.gcd((int) (byte) 0, (int) (short) 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        double double1 = org.apache.commons.math.util.MathUtils.indicator((double) 1104152832);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        double double9 = summaryStatistics0.getMax();
        double double10 = summaryStatistics0.getMin();
        double double11 = summaryStatistics0.getVariance();
        summaryStatistics0.clear();
        boolean boolean14 = summaryStatistics0.equals((java.lang.Object) 0.0f);
        double double15 = summaryStatistics0.getSum();
        long long16 = summaryStatistics0.getN();
        double double17 = summaryStatistics0.getMin();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares2 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares2.increment(9.619275968248924E151d);
        double double5 = sumOfSquares2.getResult();
        double[] doubleArray7 = new double[] { 1.0d };
        sumOfSquares2.incrementAll(doubleArray7);
        sumOfLogs0.incrementAll(doubleArray7);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean10 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 9.253047015333127E303d + "'", double5 == 9.253047015333127E303d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        double double9 = summaryStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long11 = secondMoment10.getN();
        secondMoment10.increment((double) (-1));
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment10);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = summaryStatistics0.getMeanImpl();
        double double16 = summaryStatistics0.getVariance();
        double double17 = summaryStatistics0.getMean();
        double double18 = summaryStatistics0.getMean();
        double double19 = summaryStatistics0.getSum();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics1 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics1.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long4 = secondMoment3.getN();
        secondMoment3.increment((double) (-1));
        summaryStatistics1.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment8 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean9 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment8);
        double double10 = mean9.getResult();
        mean9.clear();
        summaryStatistics1.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean9);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = summaryStatistics1.getMinImpl();
        java.lang.String str14 = summaryStatistics1.toString();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics15 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic16 = summaryStatistics15.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long18 = secondMoment17.getN();
        secondMoment17.increment((double) (-1));
        summaryStatistics15.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance22 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment17);
        summaryStatistics1.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment17);
        org.apache.commons.math.stat.descriptive.moment.Variance variance24 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment17);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics25 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic26 = summaryStatistics25.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary27 = summaryStatistics25.getSummary();
        double double28 = summaryStatistics25.getSum();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment29 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean30 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment29);
        org.apache.commons.math.stat.descriptive.summary.Sum sum31 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray38 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double39 = sum31.evaluate(doubleArray38);
        double[] doubleArray46 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double49 = sum31.evaluate(doubleArray46, 0, 0);
        double double52 = mean30.evaluate(doubleArray46, 1, (int) (byte) 1);
        mean30.increment((double) 10L);
        mean30.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment56 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean57 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment56);
        org.apache.commons.math.stat.descriptive.summary.Sum sum58 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray65 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double66 = sum58.evaluate(doubleArray65);
        double[] doubleArray73 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double76 = sum58.evaluate(doubleArray73, 0, 0);
        double double79 = mean57.evaluate(doubleArray73, 1, (int) (byte) 1);
        double double82 = mean30.evaluate(doubleArray73, 0, 0);
        summaryStatistics25.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean30);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs84 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean85 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs84);
        double double86 = sumOfLogs84.getResult();
        double double87 = sumOfLogs84.getResult();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean88 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs84);
        sumOfLogs84.clear();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics90 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic91 = summaryStatistics90.getMeanImpl();
        double double92 = summaryStatistics90.getSum();
        long long93 = summaryStatistics90.getN();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic94 = summaryStatistics90.getSumLogImpl();
        boolean boolean95 = sumOfLogs84.equals((java.lang.Object) storelessUnivariateStatistic94);
        sumOfLogs84.clear();
        summaryStatistics25.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfLogs84);
        boolean boolean98 = variance24.equals((java.lang.Object) sumOfLogs84);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str14, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic26);
        org.junit.Assert.assertNotNull(statisticalSummary27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 310.0d + "'", double39 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-1.0d) + "'", double52 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 310.0d + "'", double66 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + (-1.0d) + "'", double79 == (-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertTrue(Double.isNaN(double87));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic91);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 0L + "'", long93 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment(100.0d);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        double double1 = summaryStatistics0.getMean();
        double double2 = summaryStatistics0.getSum();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        double double2 = summaryStatistics0.getSum();
        double double3 = summaryStatistics0.getSumOfLogs();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = summaryStatistics0.getSummary();
        double double3 = summaryStatistics0.getSum();
        double double4 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getGeoMeanImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics0.getMaxImpl();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertNotNull(statisticalSummary2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic9 = summaryStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = summaryStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics11 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum12 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum12.clear();
        summaryStatistics11.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum12);
        long long15 = summaryStatistics11.getN();
        java.lang.String str16 = summaryStatistics11.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long18 = variance17.getN();
        summaryStatistics11.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance17);
        boolean boolean20 = variance17.isBiasCorrected();
        double double21 = variance17.getResult();
        summaryStatistics0.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance17);
        variance17.setBiasCorrected(false);
        long long25 = variance17.getN();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic9);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str16, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        double double1 = org.apache.commons.math.util.MathUtils.indicator((double) 2050438918);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0d + "'", double1 == 1.0d);
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        double double2 = org.apache.commons.math.util.MathUtils.binomialCoefficientLog(3190, (int) (byte) 100);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 441.4701300810326d + "'", double2 == 441.4701300810326d);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.increment((double) 1078558720);
        variance1.setBiasCorrected(true);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs6 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean7 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs6);
        org.apache.commons.math.stat.descriptive.rank.Max max8 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long9 = max8.getN();
        geometricMean7.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max8);
        org.apache.commons.math.stat.descriptive.summary.Sum sum11 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray18 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double19 = sum11.evaluate(doubleArray18);
        geometricMean7.incrementAll(doubleArray18);
        int int21 = org.apache.commons.math.util.MathUtils.hash(doubleArray18);
        int int22 = org.apache.commons.math.util.MathUtils.hash(doubleArray18);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = variance1.evaluate(doubleArray18, (double) 1072693283, 99, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 310.0d + "'", double19 == 310.0d);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1635884154) + "'", int21 == (-1635884154));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1635884154) + "'", int22 == (-1635884154));
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        long long2 = secondMoment0.getN();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        double double3 = org.apache.commons.math.util.MathUtils.round((double) Float.NaN, 990, (int) (short) 0);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares2 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares2.increment(9.619275968248924E151d);
        double double5 = sumOfSquares2.getResult();
        double[] doubleArray7 = new double[] { 1.0d };
        sumOfSquares2.incrementAll(doubleArray7);
        sumOfLogs0.incrementAll(doubleArray7);
        double double10 = sumOfLogs0.getResult();
        double double11 = sumOfLogs0.getResult();
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 9.253047015333127E303d + "'", double5 == 9.253047015333127E303d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0d + "'", double11 == 0.0d);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        double double5 = summaryStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.rank.Max max6 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long7 = max6.getN();
        long long8 = max6.getN();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max6);
        double double10 = summaryStatistics0.getVariance();
        summaryStatistics0.addValue((double) 0L);
        double double13 = summaryStatistics0.getSumOfLogs();
        long long14 = summaryStatistics0.getN();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + Double.NEGATIVE_INFINITY + "'", double13 == Double.NEGATIVE_INFINITY);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares0 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        long long1 = sumOfSquares0.getN();
        sumOfSquares0.clear();
        long long3 = sumOfSquares0.getN();
        long long4 = sumOfSquares0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long3 = secondMoment2.getN();
        secondMoment2.increment((double) (-1));
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment2);
        double double7 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = summaryStatistics0.getMinImpl();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long3 = secondMoment2.getN();
        secondMoment2.increment((double) (-1));
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance7.clear();
        summaryStatistics0.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance7);
        double double10 = summaryStatistics0.getMax();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        org.apache.commons.math.stat.descriptive.rank.Min min0 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min0.clear();
        long long2 = min0.getN();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        double double9 = summaryStatistics0.getMax();
        double double10 = summaryStatistics0.getMin();
        double double11 = summaryStatistics0.getVariance();
        summaryStatistics0.addValue((double) 33L);
        summaryStatistics0.addValue((double) 6L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        float float1 = org.apache.commons.math.util.MathUtils.sign((float) 101L);
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.0f + "'", float1 == 1.0f);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        double double1 = org.apache.commons.math.util.MathUtils.sign(0.0d);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 0.0d + "'", double1 == 0.0d);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        double double1 = secondMoment0.getResult();
        secondMoment0.increment((double) 10.0f);
        org.apache.commons.math.stat.descriptive.moment.Mean mean4 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment0);
        secondMoment0.increment(304.6868567656687d);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        int int2 = org.apache.commons.math.util.MathUtils.subAndCheck(132, (-35));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 167 + "'", int2 == 167);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        double double2 = summaryStatistics0.getSum();
        double double3 = summaryStatistics0.getGeometricMean();
        double double4 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getMaxImpl();
        double double6 = summaryStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs7 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double8 = sumOfLogs7.getResult();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean9 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs7);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean10 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs7);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = geometricMean10.getSumLogImpl();
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean10);
        double[] doubleArray13 = null;
        // The following exception was thrown during execution in test generation
        try {
            geometricMean10.incrementAll(doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: input values array is null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean2 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.rank.Min min3 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min3.increment(0.0d);
        min3.increment(0.0d);
        geometricMean2.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) min3);
        geometricMean2.clear();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs11 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean12 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs11);
        org.apache.commons.math.stat.descriptive.rank.Max max13 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long14 = max13.getN();
        geometricMean12.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max13);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic16 = geometricMean12.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics17 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic18 = summaryStatistics17.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long20 = secondMoment19.getN();
        secondMoment19.increment((double) (-1));
        summaryStatistics17.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment19);
        geometricMean12.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment19);
        org.apache.commons.math.stat.descriptive.moment.Variance variance25 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment19);
        geometricMean2.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment19);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic16);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment0);
        org.apache.commons.math.stat.descriptive.summary.Sum sum2 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray9 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double10 = sum2.evaluate(doubleArray9);
        double[] doubleArray17 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double20 = sum2.evaluate(doubleArray17, 0, 0);
        double double23 = mean1.evaluate(doubleArray17, 1, (int) (byte) 1);
        mean1.increment((double) 10L);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment27);
        org.apache.commons.math.stat.descriptive.summary.Sum sum29 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray36 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double37 = sum29.evaluate(doubleArray36);
        double[] doubleArray44 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double47 = sum29.evaluate(doubleArray44, 0, 0);
        double double50 = mean28.evaluate(doubleArray44, 1, (int) (byte) 1);
        double double53 = mean1.evaluate(doubleArray44, 0, 0);
        long long54 = mean1.getN();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment55 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean56 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment55);
        mean56.clear();
        double[] doubleArray63 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean56.incrementAll(doubleArray63, (int) (short) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.summary.Sum sum67 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray74 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double75 = sum67.evaluate(doubleArray74);
        double[] doubleArray82 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double85 = sum67.evaluate(doubleArray82, 0, 0);
        boolean boolean86 = org.apache.commons.math.util.MathUtils.equals(doubleArray63, doubleArray82);
        // The following exception was thrown during execution in test generation
        try {
            mean1.incrementAll(doubleArray63, (-1635884154), 3190);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 310.0d + "'", double10 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1.0d) + "'", double23 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 310.0d + "'", double37 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + (-1.0d) + "'", double50 == (-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 310.0d + "'", double75 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = summaryStatistics0.getSummary();
        double double2 = summaryStatistics0.getStandardDeviation();
        double double3 = summaryStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics4 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics4.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary6 = summaryStatistics4.getSummary();
        double double7 = summaryStatistics4.getSumsq();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = summaryStatistics4.getMinImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics9 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum10 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum10.clear();
        summaryStatistics9.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum10);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = summaryStatistics9.getMeanImpl();
        summaryStatistics4.setGeoMeanImpl(storelessUnivariateStatistic13);
        summaryStatistics0.setMaxImpl(storelessUnivariateStatistic13);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs17 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean18 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs17);
        org.apache.commons.math.stat.descriptive.rank.Max max19 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long20 = max19.getN();
        geometricMean18.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max19);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic22 = geometricMean18.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics23 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic24 = summaryStatistics23.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long26 = secondMoment25.getN();
        secondMoment25.increment((double) (-1));
        summaryStatistics23.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment25);
        geometricMean18.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment25);
        org.apache.commons.math.stat.descriptive.moment.Variance variance31 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment25);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs32 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double33 = sumOfLogs32.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance35 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        variance35.increment((double) 101L);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment38 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean39 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment38);
        mean39.clear();
        double[] doubleArray46 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean39.incrementAll(doubleArray46, (int) (short) 1, (int) (byte) 0);
        double double50 = variance35.evaluate(doubleArray46);
        double double51 = sumOfLogs32.evaluate(doubleArray46);
        double double52 = variance31.evaluate(doubleArray46);
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance31);
        long long54 = summaryStatistics0.getN();
        double double55 = summaryStatistics0.getSumsq();
        org.junit.Assert.assertNotNull(summaryStatistics0);
        org.junit.Assert.assertNotNull(statisticalSummary1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertNotNull(statisticalSummary6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic22);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2806.7d + "'", double50 == 2806.7d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 2245.3599999999997d + "'", double52 == 2245.3599999999997d);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs2 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs2);
        org.apache.commons.math.stat.descriptive.rank.Max max4 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long5 = max4.getN();
        geometricMean3.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max4);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic7 = geometricMean3.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics8 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic9 = summaryStatistics8.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long11 = secondMoment10.getN();
        secondMoment10.increment((double) (-1));
        summaryStatistics8.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment10);
        geometricMean3.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance18 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment10);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic7);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        double double1 = org.apache.commons.math.util.MathUtils.factorialDouble((int) '4');
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 8.065817517094494E67d + "'", double1 == 8.065817517094494E67d);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        double double2 = summaryStatistics0.getSum();
        double double3 = summaryStatistics0.getGeometricMean();
        double double4 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs7 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfLogs7);
        double double9 = summaryStatistics0.getSum();
        double double10 = summaryStatistics0.getStandardDeviation();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        long long3 = variance1.getN();
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment6 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean7 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment6);
        mean7.clear();
        double[] doubleArray14 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean7.incrementAll(doubleArray14, (int) (short) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.summary.Sum sum18 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray25 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double26 = sum18.evaluate(doubleArray25);
        double[] doubleArray33 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double36 = sum18.evaluate(doubleArray33, 0, 0);
        boolean boolean37 = org.apache.commons.math.util.MathUtils.equals(doubleArray14, doubleArray33);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics38 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic39 = summaryStatistics38.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment40 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long41 = secondMoment40.getN();
        secondMoment40.increment((double) (-1));
        summaryStatistics38.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment40);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment45 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean46 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment45);
        double double47 = mean46.getResult();
        mean46.clear();
        summaryStatistics38.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean46);
        org.apache.commons.math.stat.descriptive.summary.Sum sum50 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray57 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double58 = sum50.evaluate(doubleArray57);
        double[] doubleArray65 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double68 = sum50.evaluate(doubleArray65, 0, 0);
        int int69 = org.apache.commons.math.util.MathUtils.hash(doubleArray65);
        double double72 = mean46.evaluate(doubleArray65, 0, (int) (short) 0);
        boolean boolean73 = org.apache.commons.math.util.MathUtils.equals(doubleArray33, doubleArray65);
        // The following exception was thrown during execution in test generation
        try {
            variance1.incrementAll(doubleArray65, (-1682563522), 1104154720);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: start position cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 310.0d + "'", double26 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 310.0d + "'", double58 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2050442118 + "'", int69 == 2050442118);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment0.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean4 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment0);
        secondMoment0.increment((double) 990);
        double double7 = secondMoment0.getResult();
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 490050.0d + "'", double7 == 490050.0d);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        double double2 = sumOfLogs0.getResult();
        double double3 = sumOfLogs0.getResult();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean4 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        sumOfLogs0.clear();
        sumOfLogs0.increment((double) 101L);
        sumOfLogs0.increment((double) 97L);
        double double10 = sumOfLogs0.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 9.189831495344642d + "'", double10 == 9.189831495344642d);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs2 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs2);
        org.apache.commons.math.stat.descriptive.rank.Max max4 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long5 = max4.getN();
        geometricMean3.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max4);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic7 = geometricMean3.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics8 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic9 = summaryStatistics8.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long11 = secondMoment10.getN();
        secondMoment10.increment((double) (-1));
        summaryStatistics8.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment10);
        geometricMean3.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance16 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Variance variance17 = new org.apache.commons.math.stat.descriptive.moment.Variance(true, secondMoment10);
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment10);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic7);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean2 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment0);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        double double9 = summaryStatistics0.getMax();
        double double10 = summaryStatistics0.getMin();
        long long11 = summaryStatistics0.getN();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics12 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = summaryStatistics12.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long15 = secondMoment14.getN();
        secondMoment14.increment((double) (-1));
        summaryStatistics12.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment14);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment19);
        double double21 = mean20.getResult();
        mean20.clear();
        summaryStatistics12.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean20);
        org.apache.commons.math.stat.descriptive.rank.Max max24 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long25 = max24.getN();
        summaryStatistics12.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max24);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic27 = summaryStatistics12.getMinImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic28 = summaryStatistics12.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares29 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        double double30 = sumOfSquares29.getResult();
        double double31 = sumOfSquares29.getResult();
        summaryStatistics12.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares29);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs34 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean35 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs34);
        org.apache.commons.math.stat.descriptive.rank.Max max36 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long37 = max36.getN();
        geometricMean35.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max36);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic39 = geometricMean35.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics40 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic41 = summaryStatistics40.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long43 = secondMoment42.getN();
        secondMoment42.increment((double) (-1));
        summaryStatistics40.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment42);
        geometricMean35.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment42);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment42);
        summaryStatistics12.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment42);
        summaryStatistics0.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment42);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment51 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean52 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment51);
        mean52.clear();
        double[] doubleArray59 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean52.incrementAll(doubleArray59, (int) (short) 1, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            secondMoment42.incrementAll(doubleArray59, 35, 2050438918);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic27);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic28);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic39);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[2.0, -42.0, 1.0, 32.0, 101.0]");
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long3 = secondMoment2.getN();
        secondMoment2.increment((double) (-1));
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        double double9 = mean8.getResult();
        mean8.clear();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic12 = summaryStatistics0.getMaxImpl();
        summaryStatistics0.addValue(Double.NaN);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic12);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean2 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        geometricMean3.increment(10.000000000000002d);
        geometricMean3.clear();
        long long7 = geometricMean3.getN();
        geometricMean3.clear();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs9 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double10 = sumOfLogs9.getResult();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean11 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs9);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean12 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs9);
        geometricMean3.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfLogs9);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        double double2 = summaryStatistics0.getSum();
        double double3 = summaryStatistics0.getGeometricMean();
        double double4 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getMaxImpl();
        double double6 = summaryStatistics0.getSum();
        double double7 = summaryStatistics0.getMean();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        // The following exception was thrown during execution in test generation
        try {
            double double2 = org.apache.commons.math.util.MathUtils.binomialCoefficientDouble((int) (short) 100, 2050438918);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must have n >= k for binomial coefficient (n,k)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        double double2 = org.apache.commons.math.util.MathUtils.nextAfter((double) 51, (double) 1078034432);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 51.00000000000001d + "'", double2 == 51.00000000000001d);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        boolean boolean2 = org.apache.commons.math.util.MathUtils.equals((double) 1095479168, (double) '4');
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        secondMoment2.increment((double) (short) 0);
        org.apache.commons.math.stat.descriptive.moment.Mean mean5 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment2);
        secondMoment2.increment((double) 1076101120);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = summaryStatistics0.getSummary();
        double double3 = summaryStatistics0.getSumsq();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = summaryStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.moment.Variance variance5 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance5);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        org.apache.commons.math.stat.descriptive.summary.Sum sum9 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray16 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double17 = sum9.evaluate(doubleArray16);
        double[] doubleArray24 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double27 = sum9.evaluate(doubleArray24, 0, 0);
        double double30 = mean8.evaluate(doubleArray24, 1, (int) (byte) 1);
        mean8.increment((double) 10L);
        mean8.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment34 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean35 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment34);
        org.apache.commons.math.stat.descriptive.summary.Sum sum36 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray43 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double44 = sum36.evaluate(doubleArray43);
        double[] doubleArray51 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double54 = sum36.evaluate(doubleArray51, 0, 0);
        double double57 = mean35.evaluate(doubleArray51, 1, (int) (byte) 1);
        double double60 = mean8.evaluate(doubleArray51, 0, 0);
        // The following exception was thrown during execution in test generation
        try {
            double double63 = variance5.evaluate(doubleArray51, (int) (short) 0, (-35));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertNotNull(statisticalSummary2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 310.0d + "'", double17 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.0d) + "'", double30 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 310.0d + "'", double44 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-1.0d) + "'", double57 == (-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic9 = summaryStatistics0.getSumsqImpl();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic9);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        long long1 = org.apache.commons.math.util.MathUtils.factorial(2);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 2L + "'", long1 == 2L);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics1 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum2 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum2.clear();
        summaryStatistics1.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum2);
        long long5 = summaryStatistics1.getN();
        java.lang.String str6 = summaryStatistics1.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long8 = variance7.getN();
        summaryStatistics1.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance7);
        double double10 = summaryStatistics1.getMin();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment11 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long12 = secondMoment11.getN();
        secondMoment11.increment((double) (-1));
        summaryStatistics1.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment11);
        geometricMean0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment11);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic17 = geometricMean0.getSumLogImpl();
        double double18 = geometricMean0.getResult();
        double double19 = geometricMean0.getResult();
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str6, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.0d + "'", double19 == 1.0d);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        int int1 = org.apache.commons.math.util.MathUtils.sign((-1074790400));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        long long1 = sumOfLogs0.getN();
        sumOfLogs0.clear();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        double double9 = summaryStatistics0.getMax();
        double double10 = summaryStatistics0.getMin();
        long long11 = summaryStatistics0.getN();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics12 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = summaryStatistics12.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment14 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long15 = secondMoment14.getN();
        secondMoment14.increment((double) (-1));
        summaryStatistics12.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment14);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment19 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean20 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment19);
        double double21 = mean20.getResult();
        mean20.clear();
        summaryStatistics12.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean20);
        org.apache.commons.math.stat.descriptive.rank.Max max24 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long25 = max24.getN();
        summaryStatistics12.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max24);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic27 = summaryStatistics12.getMinImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic28 = summaryStatistics12.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares29 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        double double30 = sumOfSquares29.getResult();
        double double31 = sumOfSquares29.getResult();
        summaryStatistics12.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares29);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs34 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean35 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs34);
        org.apache.commons.math.stat.descriptive.rank.Max max36 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long37 = max36.getN();
        geometricMean35.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max36);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic39 = geometricMean35.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics40 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic41 = summaryStatistics40.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment42 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long43 = secondMoment42.getN();
        secondMoment42.increment((double) (-1));
        summaryStatistics40.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment42);
        geometricMean35.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment42);
        org.apache.commons.math.stat.descriptive.moment.Variance variance48 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment42);
        summaryStatistics12.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment42);
        summaryStatistics0.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment42);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic51 = summaryStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares52 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares52.increment(9.619275968248924E151d);
        double double55 = sumOfSquares52.getResult();
        double[] doubleArray57 = new double[] { 1.0d };
        sumOfSquares52.incrementAll(doubleArray57);
        long long59 = sumOfSquares52.getN();
        sumOfSquares52.clear();
        long long61 = sumOfSquares52.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs62 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean63 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs62);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares64 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares64.increment(9.619275968248924E151d);
        double double67 = sumOfSquares64.getResult();
        double[] doubleArray69 = new double[] { 1.0d };
        sumOfSquares64.incrementAll(doubleArray69);
        sumOfLogs62.incrementAll(doubleArray69);
        sumOfSquares52.incrementAll(doubleArray69);
        // The following exception was thrown during execution in test generation
        try {
            storelessUnivariateStatistic51.incrementAll(doubleArray69, 0, 1072693279);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic27);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic28);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic39);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic51);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 9.253047015333127E303d + "'", double55 == 9.253047015333127E303d);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.0]");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 2L + "'", long59 == 2L);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 9.253047015333127E303d + "'", double67 == 9.253047015333127E303d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[1.0]");
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = summaryStatistics0.getSummary();
        double double3 = summaryStatistics0.getSum();
        double double4 = summaryStatistics0.getMean();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertNotNull(statisticalSummary2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        double double2 = summaryStatistics0.getSum();
        double double3 = summaryStatistics0.getGeometricMean();
        double double4 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics0.getMaxImpl();
        double double6 = summaryStatistics0.getGeometricMean();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs7 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double8 = sumOfLogs7.getResult();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean9 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs7);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean10 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs7);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = geometricMean10.getSumLogImpl();
        summaryStatistics0.setGeoMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) geometricMean10);
        double double13 = summaryStatistics0.getStandardDeviation();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic14 = summaryStatistics0.getMaxImpl();
        double double15 = summaryStatistics0.getSum();
        double double16 = summaryStatistics0.getStandardDeviation();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        double double9 = summaryStatistics0.getMax();
        double double10 = summaryStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getSumLogImpl();
        summaryStatistics0.addValue((double) (-51));
        summaryStatistics0.addValue(0.0d);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        double double5 = summaryStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.summary.Sum sum6 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray13 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double14 = sum6.evaluate(doubleArray13);
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum6);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment16 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean17 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment16);
        mean17.clear();
        double[] doubleArray24 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean17.incrementAll(doubleArray24, (int) (short) 1, (int) (byte) 0);
        double double30 = sum6.evaluate(doubleArray24, (int) (byte) 1, (int) (byte) 1);
        sum6.clear();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 310.0d + "'", double14 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-42.0d) + "'", double30 == (-42.0d));
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance1.clear();
        long long3 = variance1.getN();
        variance1.setBiasCorrected(false);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics6 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum7 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum7.clear();
        summaryStatistics6.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum7);
        long long10 = summaryStatistics6.getN();
        java.lang.String str11 = summaryStatistics6.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long13 = variance12.getN();
        summaryStatistics6.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance12);
        double double15 = summaryStatistics6.getMax();
        double double16 = summaryStatistics6.getMin();
        long long17 = summaryStatistics6.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares18 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares18.increment(9.619275968248924E151d);
        double double21 = sumOfSquares18.getResult();
        double[] doubleArray23 = new double[] { 1.0d };
        sumOfSquares18.incrementAll(doubleArray23);
        summaryStatistics6.setMaxImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares18);
        boolean boolean26 = variance1.equals((java.lang.Object) summaryStatistics6);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment27);
        double double29 = mean28.getResult();
        double double30 = mean28.getResult();
        long long31 = mean28.getN();
        summaryStatistics6.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean28);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str11, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 9.253047015333127E303d + "'", double21 == 9.253047015333127E303d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        double double2 = sumOfLogs0.getResult();
        double double3 = sumOfLogs0.getResult();
        long long4 = sumOfLogs0.getN();
        double double5 = sumOfLogs0.getResult();
        double double6 = sumOfLogs0.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) (byte) 10);
        double double3 = geometricMean0.getResult();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = geometricMean0.getSumLogImpl();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 10.000000000000002d + "'", double3 == 10.000000000000002d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean0 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean0.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean4 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment3);
        mean4.clear();
        double[] doubleArray11 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean4.incrementAll(doubleArray11, (int) (short) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.summary.Sum sum15 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray22 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double23 = sum15.evaluate(doubleArray22);
        double[] doubleArray30 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double33 = sum15.evaluate(doubleArray30, 0, 0);
        boolean boolean34 = org.apache.commons.math.util.MathUtils.equals(doubleArray11, doubleArray30);
        double double37 = geometricMean0.evaluate(doubleArray11, 0, (int) (short) 1);
        boolean boolean39 = geometricMean0.equals((java.lang.Object) (-368574463));
        geometricMean0.clear();
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 310.0d + "'", double23 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 2.0d + "'", double37 == 2.0d);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long3 = secondMoment2.getN();
        secondMoment2.increment((double) (-1));
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        double double9 = mean8.getResult();
        mean8.clear();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        org.apache.commons.math.stat.descriptive.rank.Max max12 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long13 = max12.getN();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max12);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = summaryStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic16 = summaryStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares17 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        double double18 = sumOfSquares17.getResult();
        double double19 = sumOfSquares17.getResult();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares17);
        boolean boolean22 = summaryStatistics0.equals((java.lang.Object) (byte) 1);
        double double23 = summaryStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic24 = summaryStatistics0.getSumLogImpl();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic24);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.rank.Max max2 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long3 = max2.getN();
        geometricMean1.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max2);
        org.apache.commons.math.stat.descriptive.summary.Sum sum5 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray12 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double13 = sum5.evaluate(doubleArray12);
        geometricMean1.incrementAll(doubleArray12);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = geometricMean1.getSumLogImpl();
        long long16 = geometricMean1.getN();
        geometricMean1.increment((double) 'a');
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs19 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean20 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs19);
        org.apache.commons.math.stat.descriptive.rank.Max max21 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long22 = max21.getN();
        geometricMean20.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max21);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean24 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean();
        geometricMean24.increment((double) (byte) 10);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment27 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean28 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment27);
        mean28.clear();
        double[] doubleArray35 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean28.incrementAll(doubleArray35, (int) (short) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.summary.Sum sum39 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray46 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double47 = sum39.evaluate(doubleArray46);
        double[] doubleArray54 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double57 = sum39.evaluate(doubleArray54, 0, 0);
        boolean boolean58 = org.apache.commons.math.util.MathUtils.equals(doubleArray35, doubleArray54);
        double double61 = geometricMean24.evaluate(doubleArray35, 0, (int) (short) 1);
        boolean boolean63 = geometricMean24.equals((java.lang.Object) (-368574463));
        double double64 = geometricMean24.getResult();
        boolean boolean65 = max21.equals((java.lang.Object) geometricMean24);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs66 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean67 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs66);
        org.apache.commons.math.stat.descriptive.rank.Max max68 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long69 = max68.getN();
        geometricMean67.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max68);
        org.apache.commons.math.stat.descriptive.summary.Sum sum71 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray78 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double79 = sum71.evaluate(doubleArray78);
        geometricMean67.incrementAll(doubleArray78);
        int int81 = org.apache.commons.math.util.MathUtils.hash(doubleArray78);
        max21.incrementAll(doubleArray78);
        // The following exception was thrown during execution in test generation
        try {
            double double85 = geometricMean1.evaluate(doubleArray78, 2050442118, (-368574463));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 310.0d + "'", double13 == 310.0d);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 6L + "'", long16 == 6L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 310.0d + "'", double47 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 2.0d + "'", double61 == 2.0d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 10.000000000000002d + "'", double64 == 10.000000000000002d);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 310.0d + "'", double79 == 310.0d);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1635884154) + "'", int81 == (-1635884154));
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        org.apache.commons.math.stat.descriptive.rank.Min min0 = new org.apache.commons.math.stat.descriptive.rank.Min();
        double double1 = min0.getResult();
        min0.increment(310.0d);
        long long4 = min0.getN();
        double double5 = min0.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 310.0d + "'", double5 == 310.0d);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        org.apache.commons.math.stat.descriptive.rank.Min min0 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min0.increment(0.0d);
        min0.increment(0.0d);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares5 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares5.increment(9.619275968248924E151d);
        double double8 = sumOfSquares5.getResult();
        double[] doubleArray10 = new double[] { 1.0d };
        sumOfSquares5.incrementAll(doubleArray10);
        boolean boolean12 = min0.equals((java.lang.Object) sumOfSquares5);
        double double13 = min0.getResult();
        double double14 = min0.getResult();
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 9.253047015333127E303d + "'", double8 == 9.253047015333127E303d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.0d + "'", double13 == 0.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        double double2 = summaryStatistics0.getSum();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic3 = summaryStatistics0.getMaxImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics4 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = summaryStatistics4.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics4.getSumsqImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic7 = summaryStatistics4.getSumsqImpl();
        summaryStatistics0.setVarianceImpl(storelessUnivariateStatistic7);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics9 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum10 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum10.clear();
        summaryStatistics9.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum10);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = summaryStatistics9.getMeanImpl();
        long long14 = storelessUnivariateStatistic13.getN();
        summaryStatistics0.setMaxImpl(storelessUnivariateStatistic13);
        long long16 = summaryStatistics0.getN();
        long long17 = summaryStatistics0.getN();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic3);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic7);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        double double2 = org.apache.commons.math.util.MathUtils.nextAfter(0.8261459784444467d, (double) 110L);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.8261459784444468d + "'", double2 == 0.8261459784444468d);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        double double9 = summaryStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long11 = secondMoment10.getN();
        secondMoment10.increment((double) (-1));
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment10);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = summaryStatistics0.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic16 = summaryStatistics0.getSumImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic17 = summaryStatistics0.getSumLogImpl();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic16);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic17);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        org.apache.commons.math.stat.descriptive.rank.Min min0 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min0.increment(0.0d);
        double double3 = min0.getResult();
        min0.increment((-1.2181642514249999E288d));
        double double6 = min0.getResult();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.2181642514249999E288d) + "'", double6 == (-1.2181642514249999E288d));
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long1 = secondMoment0.getN();
        org.apache.commons.math.stat.descriptive.moment.Variance variance2 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment0);
        double double3 = variance2.getResult();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        long long9 = variance6.getN();
        boolean boolean10 = variance6.isBiasCorrected();
        variance6.clear();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        int int2 = org.apache.commons.math.util.MathUtils.mulAndCheck((-1635884154), (-1));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1635884154 + "'", int2 == 1635884154);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = summaryStatistics0.getSummary();
        double double2 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean4 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment3);
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        variance6.setBiasCorrected(true);
        org.junit.Assert.assertNotNull(summaryStatistics0);
        org.junit.Assert.assertNotNull(statisticalSummary1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        org.apache.commons.math.stat.descriptive.rank.Max max0 = new org.apache.commons.math.stat.descriptive.rank.Max();
        double double1 = max0.getResult();
        max0.clear();
        max0.clear();
        max0.clear();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean6 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment5);
        mean6.clear();
        double[] doubleArray13 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean6.incrementAll(doubleArray13, (int) (short) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.summary.Sum sum17 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray24 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double25 = sum17.evaluate(doubleArray24);
        double[] doubleArray32 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double35 = sum17.evaluate(doubleArray32, 0, 0);
        boolean boolean36 = org.apache.commons.math.util.MathUtils.equals(doubleArray13, doubleArray32);
        double double37 = max0.evaluate(doubleArray13);
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 310.0d + "'", double25 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 101.0d + "'", double37 == 101.0d);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        double double9 = summaryStatistics0.getMax();
        double double10 = summaryStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance12.clear();
        long long14 = variance12.getN();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics15 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum16 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum16.clear();
        summaryStatistics15.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum16);
        long long19 = summaryStatistics15.getN();
        java.lang.String str20 = summaryStatistics15.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance21 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long22 = variance21.getN();
        summaryStatistics15.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance21);
        double double24 = summaryStatistics15.getMin();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment25 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long26 = secondMoment25.getN();
        secondMoment25.increment((double) (-1));
        summaryStatistics15.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment25);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic30 = summaryStatistics15.getMeanImpl();
        boolean boolean31 = variance12.equals((java.lang.Object) storelessUnivariateStatistic30);
        boolean boolean32 = summaryStatistics0.equals((java.lang.Object) storelessUnivariateStatistic30);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic33 = summaryStatistics0.getMinImpl();
        double double34 = summaryStatistics0.getSumOfLogs();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str20, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        double double1 = org.apache.commons.math.util.MathUtils.factorialDouble(1072693283);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + Double.POSITIVE_INFINITY + "'", double1 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        double double1 = sumOfLogs0.getResult();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean2 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean3 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = geometricMean3.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic5 = geometricMean3.getSumLogImpl();
        double double6 = geometricMean3.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic5);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        org.apache.commons.math.stat.descriptive.rank.Min min0 = new org.apache.commons.math.stat.descriptive.rank.Min();
        min0.increment(0.0d);
        min0.increment(0.0d);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares5 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares5.increment(9.619275968248924E151d);
        double double8 = sumOfSquares5.getResult();
        double[] doubleArray10 = new double[] { 1.0d };
        sumOfSquares5.incrementAll(doubleArray10);
        boolean boolean12 = min0.equals((java.lang.Object) sumOfSquares5);
        long long13 = min0.getN();
        min0.clear();
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 9.253047015333127E303d + "'", double8 == 9.253047015333127E303d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[1.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2L + "'", long13 == 2L);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        long long1 = org.apache.commons.math.util.MathUtils.indicator(1L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary1 = summaryStatistics0.getSummary();
        double double2 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean4 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment3);
        summaryStatistics0.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares7 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        double double8 = sumOfSquares7.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        variance10.clear();
        variance10.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance13 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance13.clear();
        double double15 = variance13.getResult();
        org.apache.commons.math.stat.descriptive.rank.Max max16 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long17 = max16.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs18 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean19 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs18);
        org.apache.commons.math.stat.descriptive.rank.Max max20 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long21 = max20.getN();
        geometricMean19.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max20);
        org.apache.commons.math.stat.descriptive.summary.Sum sum23 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray30 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double31 = sum23.evaluate(doubleArray30);
        geometricMean19.incrementAll(doubleArray30);
        double double33 = max16.evaluate(doubleArray30);
        double double34 = variance13.evaluate(doubleArray30);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment35 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean36 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment35);
        org.apache.commons.math.stat.descriptive.summary.Sum sum37 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray44 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double45 = sum37.evaluate(doubleArray44);
        double[] doubleArray52 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double55 = sum37.evaluate(doubleArray52, 0, 0);
        double double58 = mean36.evaluate(doubleArray52, 1, (int) (byte) 1);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs59 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean60 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs59);
        org.apache.commons.math.stat.descriptive.rank.Max max61 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long62 = max61.getN();
        geometricMean60.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max61);
        org.apache.commons.math.stat.descriptive.summary.Sum sum64 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray71 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double72 = sum64.evaluate(doubleArray71);
        geometricMean60.incrementAll(doubleArray71);
        boolean boolean74 = org.apache.commons.math.util.MathUtils.equals(doubleArray52, doubleArray71);
        double double75 = variance13.evaluate(doubleArray71);
        double double77 = variance10.evaluate(doubleArray71, (double) 1078034432);
        sumOfSquares7.incrementAll(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            double double82 = variance6.evaluate(doubleArray71, 0.0d, 1104154720, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: length cannot be negative");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(summaryStatistics0);
        org.junit.Assert.assertNotNull(statisticalSummary1);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 310.0d + "'", double31 == 310.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 100.0d + "'", double33 == 100.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 2817.0666666666666d + "'", double34 == 2817.0666666666666d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 310.0d + "'", double45 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-1.0d) + "'", double58 == (-1.0d));
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 310.0d + "'", double72 == 310.0d);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 2817.0666666666666d + "'", double75 == 2817.0666666666666d);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 2389.3333333333335d + "'", double77 == 2389.3333333333335d);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        int int1 = org.apache.commons.math.util.MathUtils.sign(3190);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        double double2 = sumOfLogs0.getResult();
        double double3 = sumOfLogs0.getResult();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean4 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        sumOfLogs0.clear();
        sumOfLogs0.increment((double) 101L);
        sumOfLogs0.increment((double) 97L);
        org.apache.commons.math.stat.descriptive.moment.Variance variance10 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance10.clear();
        double double12 = variance10.getResult();
        long long13 = variance10.getN();
        variance10.increment((double) 35);
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs16 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean17 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs16);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares18 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares18.increment(9.619275968248924E151d);
        double double21 = sumOfSquares18.getResult();
        double[] doubleArray23 = new double[] { 1.0d };
        sumOfSquares18.incrementAll(doubleArray23);
        sumOfLogs16.incrementAll(doubleArray23);
        int int26 = org.apache.commons.math.util.MathUtils.hash(doubleArray23);
        int int27 = org.apache.commons.math.util.MathUtils.hash(doubleArray23);
        double double28 = variance10.evaluate(doubleArray23);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = sumOfLogs0.evaluate(doubleArray23, (int) '4', 2601);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 9.253047015333127E303d + "'", double21 == 9.253047015333127E303d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[1.0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1072693279 + "'", int26 == 1072693279);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1072693279 + "'", int27 == 1072693279);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        int int1 = org.apache.commons.math.util.MathUtils.sign(1104154720);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long3 = secondMoment2.getN();
        secondMoment2.increment((double) (-1));
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.Variance variance7 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance7.clear();
        summaryStatistics0.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance7);
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance12 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance12.clear();
        double double14 = variance12.getResult();
        org.apache.commons.math.stat.descriptive.rank.Max max15 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long16 = max15.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs17 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean18 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs17);
        org.apache.commons.math.stat.descriptive.rank.Max max19 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long20 = max19.getN();
        geometricMean18.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max19);
        org.apache.commons.math.stat.descriptive.summary.Sum sum22 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray29 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double30 = sum22.evaluate(doubleArray29);
        geometricMean18.incrementAll(doubleArray29);
        double double32 = max15.evaluate(doubleArray29);
        double double33 = variance12.evaluate(doubleArray29);
        long long34 = variance12.getN();
        variance12.increment((double) (-51));
        org.apache.commons.math.stat.descriptive.summary.Sum sum37 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray44 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double45 = sum37.evaluate(doubleArray44);
        double[] doubleArray52 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double55 = sum37.evaluate(doubleArray52, 0, 0);
        int int56 = org.apache.commons.math.util.MathUtils.hash(doubleArray52);
        double double60 = variance12.evaluate(doubleArray52, 35.0d, 0, 0);
        double double62 = variance11.evaluate(doubleArray52, 310.0d);
        double double63 = variance7.evaluate(doubleArray52);
        variance7.setBiasCorrected(false);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 310.0d + "'", double30 == 310.0d);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 2817.0666666666666d + "'", double33 == 2817.0666666666666d);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 310.0d + "'", double45 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2050442118 + "'", int56 == 2050442118);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 12196.0d + "'", double62 == 12196.0d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 14635.2d + "'", double63 == 14635.2d);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        long long1 = org.apache.commons.math.util.MathUtils.sign((long) 62);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        long long1 = org.apache.commons.math.util.MathUtils.factorial((int) (byte) 1);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long1 = sum0.getN();
        long long2 = sum0.getN();
        sum0.clear();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares4 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares4.increment(9.619275968248924E151d);
        double double7 = sumOfSquares4.getResult();
        double[] doubleArray9 = new double[] { 1.0d };
        sumOfSquares4.incrementAll(doubleArray9);
        long long11 = sumOfSquares4.getN();
        sumOfSquares4.clear();
        long long13 = sumOfSquares4.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs14 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean15 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs14);
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares16 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares16.increment(9.619275968248924E151d);
        double double19 = sumOfSquares16.getResult();
        double[] doubleArray21 = new double[] { 1.0d };
        sumOfSquares16.incrementAll(doubleArray21);
        sumOfLogs14.incrementAll(doubleArray21);
        sumOfSquares4.incrementAll(doubleArray21);
        // The following exception was thrown during execution in test generation
        try {
            double double27 = sum0.evaluate(doubleArray21, 3190, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 9.253047015333127E303d + "'", double7 == 9.253047015333127E303d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0]");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 9.253047015333127E303d + "'", double19 == 9.253047015333127E303d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.0]");
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares0 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        sumOfSquares0.increment(9.619275968248924E151d);
        double double3 = sumOfSquares0.getResult();
        double[] doubleArray5 = new double[] { 1.0d };
        sumOfSquares0.incrementAll(doubleArray5);
        long long7 = sumOfSquares0.getN();
        sumOfSquares0.clear();
        sumOfSquares0.increment(9.253047015333127E303d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 9.253047015333127E303d + "'", double3 == 9.253047015333127E303d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[1.0]");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics1 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic2 = summaryStatistics1.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment3 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long4 = secondMoment3.getN();
        secondMoment3.increment((double) (-1));
        summaryStatistics1.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        org.apache.commons.math.stat.descriptive.moment.Variance variance9 = new org.apache.commons.math.stat.descriptive.moment.Variance(secondMoment3);
        secondMoment3.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance11 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment3);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        org.apache.commons.math.stat.descriptive.rank.Max max0 = new org.apache.commons.math.stat.descriptive.rank.Max();
        double double1 = max0.getResult();
        max0.clear();
        max0.increment((double) (byte) 10);
        double double5 = max0.getResult();
        max0.clear();
        max0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        org.apache.commons.math.stat.descriptive.rank.Min min0 = new org.apache.commons.math.stat.descriptive.rank.Min();
        double double1 = min0.getResult();
        double double2 = min0.getResult();
        min0.clear();
        min0.increment((double) 1L);
        min0.clear();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        double double2 = org.apache.commons.math.util.MathUtils.log(9.253047015333127E303d, 100.0d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.006579677089914371d + "'", double2 == 0.006579677089914371d);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long3 = secondMoment2.getN();
        secondMoment2.increment((double) (-1));
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        double double9 = mean8.getResult();
        mean8.clear();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        org.apache.commons.math.stat.descriptive.rank.Max max12 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long13 = max12.getN();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max12);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = summaryStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic16 = summaryStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares17 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        double double18 = sumOfSquares17.getResult();
        double double19 = sumOfSquares17.getResult();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares17);
        double double21 = sumOfSquares17.getResult();
        double double22 = sumOfSquares17.getResult();
        double double23 = sumOfSquares17.getResult();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.math.util.MathUtils.binomialCoefficient(290, 1076101130);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must have n >= k for binomial coefficient (n,k)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        double double2 = org.apache.commons.math.util.MathUtils.binomialCoefficientDouble((int) 'a', (-1));
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.0d + "'", double2 == 0.0d);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic4 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics5 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics5.getMeanImpl();
        double double7 = summaryStatistics5.getSum();
        double double8 = summaryStatistics5.getGeometricMean();
        double double9 = summaryStatistics5.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic10 = summaryStatistics5.getMaxImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics5.getSumImpl();
        summaryStatistics0.setSumImpl(storelessUnivariateStatistic11);
        double double13 = summaryStatistics0.getMax();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic4);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic10);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        int int2 = org.apache.commons.math.util.MathUtils.gcd(51, 927863700);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs0 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean1 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean2 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs0);
        org.apache.commons.math.stat.descriptive.summary.Sum sum3 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray10 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double11 = sum3.evaluate(doubleArray10);
        double double12 = sumOfLogs0.evaluate(doubleArray10);
        sumOfLogs0.clear();
        long long14 = sumOfLogs0.getN();
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 310.0d + "'", double11 == 310.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        int int1 = org.apache.commons.math.util.MathUtils.sign((-368574453));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-1) + "'", int1 == (-1));
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment0);
        org.apache.commons.math.stat.descriptive.summary.Sum sum2 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray9 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double10 = sum2.evaluate(doubleArray9);
        double[] doubleArray17 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double20 = sum2.evaluate(doubleArray17, 0, 0);
        double double23 = mean1.evaluate(doubleArray17, 1, (int) (byte) 1);
        mean1.increment((double) 10L);
        mean1.clear();
        org.apache.commons.math.stat.descriptive.moment.Variance variance28 = new org.apache.commons.math.stat.descriptive.moment.Variance(false);
        org.apache.commons.math.stat.descriptive.moment.Variance variance29 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        variance29.clear();
        double double31 = variance29.getResult();
        org.apache.commons.math.stat.descriptive.rank.Max max32 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long33 = max32.getN();
        org.apache.commons.math.stat.descriptive.summary.SumOfLogs sumOfLogs34 = new org.apache.commons.math.stat.descriptive.summary.SumOfLogs();
        org.apache.commons.math.stat.descriptive.moment.GeometricMean geometricMean35 = new org.apache.commons.math.stat.descriptive.moment.GeometricMean(sumOfLogs34);
        org.apache.commons.math.stat.descriptive.rank.Max max36 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long37 = max36.getN();
        geometricMean35.setSumLogImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max36);
        org.apache.commons.math.stat.descriptive.summary.Sum sum39 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray46 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double47 = sum39.evaluate(doubleArray46);
        geometricMean35.incrementAll(doubleArray46);
        double double49 = max32.evaluate(doubleArray46);
        double double50 = variance29.evaluate(doubleArray46);
        long long51 = variance29.getN();
        variance29.increment((double) (-51));
        org.apache.commons.math.stat.descriptive.summary.Sum sum54 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray61 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double62 = sum54.evaluate(doubleArray61);
        double[] doubleArray69 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double72 = sum54.evaluate(doubleArray69, 0, 0);
        int int73 = org.apache.commons.math.util.MathUtils.hash(doubleArray69);
        double double77 = variance29.evaluate(doubleArray69, 35.0d, 0, 0);
        double double79 = variance28.evaluate(doubleArray69, 310.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double82 = mean1.evaluate(doubleArray69, 990, 145);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 310.0d + "'", double10 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-1.0d) + "'", double23 == (-1.0d));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 310.0d + "'", double47 == 310.0d);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 100.0d + "'", double49 == 100.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 2817.0666666666666d + "'", double50 == 2817.0666666666666d);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 310.0d + "'", double62 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray69), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2050442118 + "'", int73 == 2050442118);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 12196.0d + "'", double79 == 12196.0d);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long3 = secondMoment2.getN();
        secondMoment2.increment((double) (-1));
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        double double9 = mean8.getResult();
        mean8.clear();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        org.apache.commons.math.stat.descriptive.rank.Max max12 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long13 = max12.getN();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max12);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = summaryStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic16 = summaryStatistics0.getVarianceImpl();
        org.apache.commons.math.stat.descriptive.summary.SumOfSquares sumOfSquares17 = new org.apache.commons.math.stat.descriptive.summary.SumOfSquares();
        double double18 = sumOfSquares17.getResult();
        double double19 = sumOfSquares17.getResult();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sumOfSquares17);
        boolean boolean22 = summaryStatistics0.equals((java.lang.Object) (byte) 1);
        long long23 = summaryStatistics0.getN();
        long long24 = summaryStatistics0.getN();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic25 = summaryStatistics0.getMaxImpl();
        double double26 = summaryStatistics0.getMax();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic16);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic25);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        java.lang.Class<?> wildcardClass4 = summaryStatistics0.getClass();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics5 = org.apache.commons.math.stat.descriptive.SummaryStatistics.newInstance((java.lang.Class) wildcardClass4);
        org.junit.Assert.assertNotNull(wildcardClass4);
        org.junit.Assert.assertNotNull(summaryStatistics5);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        // The following exception was thrown during execution in test generation
        try {
            long long2 = org.apache.commons.math.util.MathUtils.binomialCoefficient(35, 1072693279);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must have n >= k for binomial coefficient (n,k)");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment0 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean1 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment0);
        double double2 = mean1.getResult();
        mean1.clear();
        double double4 = mean1.getResult();
        mean1.clear();
        long long6 = mean1.getN();
        mean1.increment((double) 145.0f);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long3 = secondMoment2.getN();
        secondMoment2.increment((double) (-1));
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment2);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment7 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean8 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment7);
        double double9 = mean8.getResult();
        mean8.clear();
        summaryStatistics0.setMinImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) mean8);
        org.apache.commons.math.stat.descriptive.rank.Max max12 = new org.apache.commons.math.stat.descriptive.rank.Max();
        long long13 = max12.getN();
        summaryStatistics0.setMeanImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) max12);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = summaryStatistics0.getMinImpl();
        double double16 = summaryStatistics0.getVariance();
        java.lang.String str17 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic18 = summaryStatistics0.getMinImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic19 = summaryStatistics0.getMeanImpl();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str17, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic18);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic19);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        double double2 = org.apache.commons.math.util.MathUtils.log((double) ' ', 14635.2d);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 2.7674309681687084d + "'", double2 == 2.7674309681687084d);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment2 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean3 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment2);
        secondMoment2.increment(1.730777995336729E7d);
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        double double7 = secondMoment2.getResult();
        org.apache.commons.math.stat.descriptive.moment.Variance variance8 = new org.apache.commons.math.stat.descriptive.moment.Variance(false, secondMoment2);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        double double2 = org.apache.commons.math.util.MathUtils.binomialCoefficientDouble(1076101130, 1);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.07610113E9d + "'", double2 == 1.07610113E9d);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        int int2 = org.apache.commons.math.util.MathUtils.lcm(2601, 3);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2601 + "'", int2 == 2601);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        float float1 = org.apache.commons.math.util.MathUtils.indicator(10.0f);
        org.junit.Assert.assertTrue("'" + float1 + "' != '" + 1.0f + "'", float1 == 1.0f);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        double double9 = summaryStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment10 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        long long11 = secondMoment10.getN();
        secondMoment10.increment((double) (-1));
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) secondMoment10);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic15 = summaryStatistics0.getMeanImpl();
        double double16 = summaryStatistics0.getVariance();
        org.apache.commons.math.stat.descriptive.summary.Sum sum17 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum17.clear();
        sum17.clear();
        double double20 = sum17.getResult();
        summaryStatistics0.setVarianceImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum17);
        sum17.clear();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic15);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        long long1 = sum0.getN();
        sum0.clear();
        sum0.clear();
        double double4 = sum0.getResult();
        long long5 = sum0.getN();
        long long6 = sum0.getN();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        org.apache.commons.math.stat.descriptive.rank.Min min0 = new org.apache.commons.math.stat.descriptive.rank.Min();
        double double1 = min0.getResult();
        min0.increment(310.0d);
        min0.increment(0.0d);
        min0.clear();
        min0.clear();
        double double8 = min0.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        float float1 = org.apache.commons.math.util.MathUtils.indicator(Float.NaN);
        org.junit.Assert.assertTrue(Float.isNaN(float1));
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        org.apache.commons.math.stat.descriptive.summary.Sum sum0 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum0.clear();
        sum0.clear();
        double double3 = sum0.getResult();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        double double1 = org.apache.commons.math.util.MathUtils.sinh(33.0d);
        org.junit.Assert.assertTrue("'" + double1 + "' != '" + 1.0732178989295803E14d + "'", double1 == 1.0732178989295803E14d);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        org.apache.commons.math.stat.descriptive.moment.Variance variance1 = new org.apache.commons.math.stat.descriptive.moment.Variance(true);
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics2 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum3 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum3.clear();
        summaryStatistics2.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum3);
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics2.getMeanImpl();
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics7 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic8 = summaryStatistics7.getMeanImpl();
        double double9 = summaryStatistics7.getSum();
        double double10 = summaryStatistics7.getGeometricMean();
        double double11 = summaryStatistics7.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic12 = summaryStatistics7.getMaxImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic13 = summaryStatistics7.getSumImpl();
        summaryStatistics2.setSumImpl(storelessUnivariateStatistic13);
        boolean boolean15 = variance1.equals((java.lang.Object) summaryStatistics2);
        double double16 = summaryStatistics2.getSumOfLogs();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic8);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic12);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        double double2 = org.apache.commons.math.util.MathUtils.binomialCoefficientLog(2050438918, (int) (short) 10);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 199.30784188410604d + "'", double2 == 199.30784188410604d);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        double double9 = summaryStatistics0.getMax();
        double double10 = summaryStatistics0.getMin();
        double double11 = summaryStatistics0.getVariance();
        summaryStatistics0.clear();
        boolean boolean14 = summaryStatistics0.equals((java.lang.Object) 0.0f);
        double double15 = summaryStatistics0.getMax();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary16 = summaryStatistics0.getSummary();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic17 = summaryStatistics0.getSumImpl();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertNotNull(statisticalSummary16);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic17);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        summaryStatistics0.addValue(1.730777995336729E7d);
        double double8 = summaryStatistics0.getGeometricMean();
        double double9 = summaryStatistics0.getMax();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.730777995336729E7d + "'", double8 == 1.730777995336729E7d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.730777995336729E7d + "'", double9 == 1.730777995336729E7d);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        org.apache.commons.math.stat.descriptive.rank.Max max0 = new org.apache.commons.math.stat.descriptive.rank.Max();
        max0.increment(0.0d);
        double double3 = max0.getResult();
        double double4 = max0.getResult();
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment5 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean6 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment5);
        mean6.clear();
        double[] doubleArray13 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean6.incrementAll(doubleArray13, (int) (short) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.moment.SecondMoment secondMoment17 = new org.apache.commons.math.stat.descriptive.moment.SecondMoment();
        org.apache.commons.math.stat.descriptive.moment.Mean mean18 = new org.apache.commons.math.stat.descriptive.moment.Mean((org.apache.commons.math.stat.descriptive.moment.FirstMoment) secondMoment17);
        mean18.clear();
        double[] doubleArray25 = new double[] { 2L, (-42), (byte) 1, ' ', 101L };
        mean18.incrementAll(doubleArray25, (int) (short) 1, (int) (byte) 0);
        org.apache.commons.math.stat.descriptive.summary.Sum sum29 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        double[] doubleArray36 = new double[] { (short) 100, 10, (short) 100, (byte) -1, 100.0f, (short) 1 };
        double double37 = sum29.evaluate(doubleArray36);
        double[] doubleArray44 = new double[] { (-1), (-1.0d), 310.0d, (short) 100, (short) -1, 97L };
        double double47 = sum29.evaluate(doubleArray44, 0, 0);
        boolean boolean48 = org.apache.commons.math.util.MathUtils.equals(doubleArray25, doubleArray44);
        boolean boolean49 = org.apache.commons.math.util.MathUtils.equals(doubleArray13, doubleArray44);
        // The following exception was thrown during execution in test generation
        try {
            double double52 = max0.evaluate(doubleArray13, 167, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: begin + length > values.length");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[2.0, -42.0, 1.0, 32.0, 101.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 10.0, 100.0, -1.0, 100.0, 1.0]");
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 310.0d + "'", double37 == 310.0d);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-1.0, -1.0, 310.0, 100.0, -1.0, 97.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.summary.Sum sum1 = new org.apache.commons.math.stat.descriptive.summary.Sum();
        sum1.clear();
        summaryStatistics0.setSumsqImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) sum1);
        long long4 = summaryStatistics0.getN();
        java.lang.String str5 = summaryStatistics0.toString();
        org.apache.commons.math.stat.descriptive.moment.Variance variance6 = new org.apache.commons.math.stat.descriptive.moment.Variance();
        long long7 = variance6.getN();
        summaryStatistics0.setSumImpl((org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic) variance6);
        double double9 = summaryStatistics0.getMax();
        double double10 = summaryStatistics0.getMin();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic11 = summaryStatistics0.getSumLogImpl();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic12 = summaryStatistics0.getMinImpl();
        double double13 = summaryStatistics0.getSumOfLogs();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic14 = summaryStatistics0.getSumImpl();
        double double15 = summaryStatistics0.getSumsq();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n" + "'", str5, "SummaryStatistics:\nn: 0\nmin: NaN\nmax: NaN\nmean: NaN\ngeometric mean: NaN\nvariance: NaN\nsum of squares: NaN\nstandard deviation: NaN\nsum of logs: NaN\n");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic11);
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic12);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic14);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        org.apache.commons.math.stat.descriptive.SummaryStatistics summaryStatistics0 = new org.apache.commons.math.stat.descriptive.SummaryStatistics();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic1 = summaryStatistics0.getMeanImpl();
        org.apache.commons.math.stat.descriptive.StatisticalSummary statisticalSummary2 = summaryStatistics0.getSummary();
        double double3 = summaryStatistics0.getSum();
        double double4 = summaryStatistics0.getStandardDeviation();
        double double5 = summaryStatistics0.getMean();
        org.apache.commons.math.stat.descriptive.StorelessUnivariateStatistic storelessUnivariateStatistic6 = summaryStatistics0.getSumsqImpl();
        double double7 = summaryStatistics0.getMax();
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic1);
        org.junit.Assert.assertNotNull(statisticalSummary2);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertNotNull(storelessUnivariateStatistic6);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }
}


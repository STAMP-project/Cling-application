import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest23 {

    public static boolean debug = false;

    @Test
    public void test11501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11501");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate7 = localDate0.plusMonths((int) (short) 100);
        org.joda.time.LocalDate.Property property8 = localDate7.weekOfWeekyear();
        java.lang.String str9 = property8.getAsString();
        org.joda.time.DateTimeField dateTimeField10 = property8.getField();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "25" + "'", str9, "25");
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test11502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11502");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.weekOfWeekyear();
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withDurationAdded(readableDuration10, (int) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime9.minusSeconds((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime9.minus(readableDuration15);
        org.joda.time.DateTime dateTime18 = dateTime9.minusSeconds((int) (byte) 100);
        int int19 = mutableDateTime4.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime4.dayOfMonth();
        mutableDateTime4.setMinuteOfDay(1);
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay((java.lang.Object) mutableDateTime4);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean27 = interval26.isBeforeNow();
        org.joda.time.Period period28 = interval26.toPeriod();
        java.lang.String str29 = period28.toString();
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay23.withPeriodAdded((org.joda.time.ReadablePeriod) period28, 1969);
        org.joda.time.TimeOfDay.Property property32 = timeOfDay31.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property32.getFieldType();
        org.joda.time.TimeOfDay timeOfDay34 = property32.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay36 = timeOfDay34.withMillisOfSecond((int) (short) 100);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT0S" + "'", str29, "PT0S");
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(timeOfDay36);
    }

    @Test
    public void test11503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11503");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight2.weekOfWeekyear();
        java.lang.String str8 = property7.getAsString();
        java.util.Locale locale9 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str10 = property7.getAsShortText(locale9);
        java.lang.String str11 = property7.getName();
        int int12 = property7.get();
        org.joda.time.DateMidnight dateMidnight14 = property7.addToCopy(7L);
        java.util.Locale locale18 = new java.util.Locale("Chinese", "10");
        java.lang.String str19 = locale18.getDisplayScript();
        java.lang.String str20 = locale18.getDisplayName();
        org.joda.time.DateMidnight dateMidnight21 = property7.setCopy("10", locale18);
        org.joda.time.DateMidnight dateMidnight22 = property7.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight23 = property7.roundHalfCeilingCopy();
        int int24 = dateMidnight23.getWeekyear();
        int int25 = dateMidnight23.getSecondOfDay();
        org.joda.time.Chronology chronology26 = dateMidnight23.getChronology();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekOfWeekyear" + "'", str11, "weekOfWeekyear");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertEquals(locale18.toString(), "chinese_10");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "chinese (10)" + "'", str20, "chinese (10)");
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(chronology26);
    }

    @Test
    public void test11504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11504");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.monthOfYear();
        int int6 = mutableDateTime4.getMillisOfSecond();
        mutableDateTime4.addYears(3);
        mutableDateTime4.addMonths(60000);
        int int11 = mutableDateTime4.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusWeeks((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusMonths(70);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean28 = interval24.abuts((org.joda.time.ReadableInterval) interval27);
        long long29 = interval27.getStartMillis();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean36 = interval32.abuts((org.joda.time.ReadableInterval) interval35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Interval interval38 = interval35.withDurationBeforeEnd(readableDuration37);
        org.joda.time.Interval interval39 = interval27.overlap((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Duration duration40 = interval35.toDuration();
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight21.withDurationAdded((org.joda.time.ReadableDuration) duration40, 0);
        mutableDateTime4.add((org.joda.time.ReadableDuration) duration40, 4);
        org.joda.time.Instant instant46 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone47 = instant46.getZone();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime51 = dateTime48.withDurationAdded(readableDuration49, (int) (byte) 0);
        org.joda.time.DateTime dateTime53 = dateTime48.minusSeconds((int) (short) 1);
        org.joda.time.LocalTime localTime55 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime57 = localTime55.minusMinutes((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.seconds();
        boolean boolean59 = localTime55.isSupported(durationFieldType58);
        org.joda.time.DateTime dateTime61 = dateTime53.withFieldAdded(durationFieldType58, 0);
        org.joda.time.DateTime.Property property62 = dateTime61.monthOfYear();
        org.joda.time.DateTime dateTime64 = dateTime61.plusHours((int) (short) -1);
        org.joda.time.DateTime dateTime66 = dateTime64.minusDays(20);
        org.joda.time.DateTime.Property property67 = dateTime64.year();
        org.joda.time.DateTime dateTime69 = dateTime64.plus((-259200000L));
        org.joda.time.DateTime.Property property70 = dateTime64.year();
        boolean boolean71 = duration40.equals((java.lang.Object) property70);
        org.joda.time.DateTime dateTime72 = property70.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNull(interval39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTime72);
    }

    @Test
    public void test11505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11505");
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime8 = timeOfDay5.toDateTime((org.joda.time.ReadableInstant) instant7);
        org.joda.time.Chronology chronology9 = instant7.getChronology();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime15 = timeOfDay12.toDateTime((org.joda.time.ReadableInstant) instant14);
        int[] intArray17 = chronology9.get((org.joda.time.ReadablePartial) timeOfDay12, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(0L, chronology9);
        mutableDateTime18.setYear(3);
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone23 = instant22.getZone();
        mutableDateTime18.setZone(dateTimeZone23);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(dateTimeZone23);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) 7, dateTimeZone23);
        java.lang.String str27 = dateTimeZone23.toString();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) 60000, dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "UTC" + "'", str27, "UTC");
    }

    @Test
    public void test11506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11506");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime(chronology23);
        org.joda.time.DateTimeField dateTimeField34 = chronology23.weekOfWeekyear();
        java.lang.String str35 = dateTimeField34.toString();
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("java.io.IOException: clockhourOfHalfday");
        java.lang.String str39 = dateTimeField34.getAsShortText(1645515024075L, locale38);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "DateTimeField[weekOfWeekyear]" + "'", str35, "DateTimeField[weekOfWeekyear]");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "8" + "'", str39, "8");
    }

    @Test
    public void test11507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11507");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = dateTime5.toString(dateTimeFormatter6);
        org.joda.time.DateTime dateTime9 = dateTime5.minusYears(2022);
        org.joda.time.DateTime.Property property10 = dateTime5.minuteOfHour();
        org.joda.time.DateTime dateTime11 = property10.withMaximumValue();
        org.joda.time.DateTime dateTime12 = property10.getDateTime();
        org.joda.time.DateTime dateTime14 = property10.addToCopy(19L);
        org.joda.time.DurationField durationField15 = property10.getDurationField();
        org.joda.time.DateTime dateTime16 = property10.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1969-12-31T00:01:00.000Z" + "'", str7, "1969-12-31T00:01:00.000Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test11508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11508");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfHalfday();
        long long29 = dateTimeField27.roundHalfFloor(0L);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        int int31 = dateTimeField27.getMaximumShortTextLength(locale30);
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale32.getDisplayName(locale34);
        java.lang.String str37 = locale30.getDisplayLanguage(locale32);
        java.util.Calendar calendar38 = mutableDateTime16.toCalendar(locale32);
        int int39 = calendar38.getWeekYear();
        calendar38.set((int) (byte) -1, (int) (byte) 100, 0, 8, (int) (short) 100);
        calendar38.set((int) (byte) 0, 35, 100, (int) 'a', 2000);
        org.joda.time.TimeOfDay timeOfDay52 = org.joda.time.TimeOfDay.fromCalendarFields(calendar38);
        calendar38.clear();
        org.joda.time.LocalTime localTime54 = org.joda.time.LocalTime.fromCalendarFields(calendar38);
        int int55 = calendar38.getWeeksInWeekYear();
        calendar38.set(27160, (-1645515404), 7366215);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str36, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u6587" + "'", str37, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=27160,MONTH=-1645515404,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=7366215,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
    }

    @Test
    public void test11509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11509");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime.Property property2 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime3 = property2.roundFloorCopy();
        org.joda.time.LocalTime localTime4 = property2.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime5 = property2.withMaximumValue();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean9 = interval8.isBeforeNow();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean16 = interval12.abuts((org.joda.time.ReadableInterval) interval15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Interval interval18 = interval15.withDurationBeforeEnd(readableDuration17);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean25 = interval21.abuts((org.joda.time.ReadableInterval) interval24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Interval interval27 = interval24.withDurationBeforeEnd(readableDuration26);
        org.joda.time.Period period28 = interval24.toPeriod();
        org.joda.time.Interval interval29 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period28);
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder33 = builder30.setExtension('x', "zh");
        boolean boolean34 = period28.equals((java.lang.Object) builder30);
        org.joda.time.Interval interval35 = interval8.withPeriodAfterStart((org.joda.time.ReadablePeriod) period28);
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime(10, 11, 11, 20);
        org.joda.time.LocalTime localTime42 = localTime40.withMillisOfSecond((int) (byte) 100);
        org.joda.time.Instant instant44 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone45 = instant44.getZone();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime49 = dateTime46.withDurationAdded(readableDuration47, (int) (byte) 0);
        org.joda.time.DateTime dateTime51 = dateTime46.minusSeconds((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.DateTime dateTime53 = dateTime46.minus(readableDuration52);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.DateTime dateTime55 = dateTime53.plus(readableDuration54);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean59 = interval58.isBeforeNow();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval65 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean66 = interval62.abuts((org.joda.time.ReadableInterval) interval65);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Interval interval68 = interval65.withDurationBeforeEnd(readableDuration67);
        org.joda.time.Interval interval71 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval74 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean75 = interval71.abuts((org.joda.time.ReadableInterval) interval74);
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Interval interval77 = interval74.withDurationBeforeEnd(readableDuration76);
        org.joda.time.Period period78 = interval74.toPeriod();
        org.joda.time.Interval interval79 = interval65.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period78);
        java.util.Locale.Builder builder80 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder83 = builder80.setExtension('x', "zh");
        boolean boolean84 = period78.equals((java.lang.Object) builder80);
        org.joda.time.Interval interval85 = interval58.withPeriodAfterStart((org.joda.time.ReadablePeriod) period78);
        org.joda.time.DateTime dateTime86 = dateTime55.plus((org.joda.time.ReadablePeriod) period78);
        org.joda.time.LocalTime localTime88 = localTime40.withPeriodAdded((org.joda.time.ReadablePeriod) period78, 19);
        org.joda.time.MutablePeriod mutablePeriod89 = period78.toMutablePeriod();
        org.joda.time.Interval interval90 = interval8.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period78);
        org.joda.time.LocalTime localTime91 = localTime5.plus((org.joda.time.ReadablePeriod) period78);
        org.joda.time.LocalTime localTime93 = localTime5.withMillisOfDay(26700803);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(localTime88);
        org.junit.Assert.assertNotNull(mutablePeriod89);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertNotNull(localTime91);
        org.junit.Assert.assertNotNull(localTime93);
    }

    @Test
    public void test11510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11510");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 30);
        org.joda.time.LocalDate localDate3 = localDate1.plusWeeks(7327559);
        org.junit.Assert.assertNotNull(localDate3);
    }

    @Test
    public void test11511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11511");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.weekyear();
        org.joda.time.LocalDate localDate3 = property1.addToCopy(26699276);
        org.joda.time.LocalDate localDate4 = property1.roundCeilingCopy();
        int int5 = localDate4.getWeekOfWeekyear();
        int int6 = localDate4.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay.Property property11 = yearMonthDay10.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay12 = property11.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.minusMonths((int) (short) -1);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean23 = interval19.abuts((org.joda.time.ReadableInterval) interval22);
        long long24 = interval22.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.Interval interval26 = interval22.withPeriodAfterStart(readablePeriod25);
        org.joda.time.DateTime dateTime27 = interval22.getStart();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean30 = localDate28.isSupported(dateTimeFieldType29);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateMidnight dateMidnight32 = localDate28.toDateMidnight(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = localDate28.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property34 = localDate28.yearOfEra();
        org.joda.time.LocalDate localDate36 = localDate28.minusMonths((int) '#');
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean43 = interval39.abuts((org.joda.time.ReadableInterval) interval42);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Interval interval45 = interval42.withDurationBeforeEnd(readableDuration44);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean52 = interval48.abuts((org.joda.time.ReadableInterval) interval51);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Interval interval54 = interval51.withDurationBeforeEnd(readableDuration53);
        org.joda.time.Period period55 = interval51.toPeriod();
        org.joda.time.Interval interval56 = interval42.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period55);
        java.util.Locale.Builder builder57 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder60 = builder57.setExtension('x', "zh");
        boolean boolean61 = period55.equals((java.lang.Object) builder57);
        org.joda.time.LocalDate localDate62 = localDate28.plus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.DateTime dateTime63 = dateTime27.minus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay16.plus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay12.plus((org.joda.time.ReadablePeriod) period55);
        org.joda.time.Chronology chronology66 = yearMonthDay65.getChronology();
        org.joda.time.YearMonthDay.Property property67 = yearMonthDay65.dayOfMonth();
        boolean boolean68 = localDate4.equals((java.lang.Object) property67);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
    }

    @Test
    public void test11512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11512");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        boolean boolean33 = mutableDateTime16.isEqualNow();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime16.secondOfDay();
        org.joda.time.DateTime dateTime35 = mutableDateTime16.toDateTimeISO();
        org.joda.time.DateTime dateTime37 = dateTime35.withMillis((long) 1970);
        org.joda.time.DateTime.Property property38 = dateTime37.minuteOfHour();
        org.joda.time.DateTime dateTime39 = property38.roundHalfCeilingCopy();
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime41 = dateTime39.minus(readableDuration40);
        org.joda.time.DateTime dateTime43 = dateTime39.minusYears((int) '4');
        org.joda.time.LocalTime localTime44 = dateTime39.toLocalTime();
        java.lang.String str46 = localTime44.toString("\u4e0b\u5348 11:56:10");
        org.joda.time.TimeOfDay timeOfDay49 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant51 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime52 = timeOfDay49.toDateTime((org.joda.time.ReadableInstant) instant51);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.DateTime dateTime55 = dateTime52.withDurationAdded(readableDuration53, (int) (short) 1);
        long long56 = dateTime55.getMillis();
        org.joda.time.DateTime dateTime58 = dateTime55.withMillis((long) 53);
        org.joda.time.LocalTime localTime59 = dateTime58.toLocalTime();
        org.joda.time.LocalTime.Property property60 = localTime59.hourOfDay();
        org.joda.time.LocalTime localTime61 = localTime44.withFields((org.joda.time.ReadablePartial) localTime59);
        org.joda.time.ReadablePartial readablePartial62 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean63 = localTime44.isBefore(readablePartial62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u4e0b\u5348 11:56:10" + "'", str46, "\u4e0b\u5348 11:56:10");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-86340000L) + "'", long56 == (-86340000L));
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(localTime61);
    }

    @Test
    public void test11513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11513");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime3 = localTime1.minusMinutes((int) (short) 1);
        org.joda.time.LocalTime localTime5 = localTime1.withMillisOfDay((int) (byte) 1);
        org.joda.time.LocalTime.Property property6 = localTime1.secondOfMinute();
        org.joda.time.LocalTime.Property property7 = localTime1.minuteOfHour();
        int int8 = localTime1.size();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
    }

    @Test
    public void test11514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11514");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.clockhourOfHalfday();
        org.joda.time.DurationField durationField9 = chronology7.eras();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType0.getField(chronology7);
        org.joda.time.DateTimeField dateTimeField11 = chronology7.hourOfDay();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(10, 11, 11, 20);
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str18 = locale17.getDisplayLanguage();
        boolean boolean19 = localTime16.equals((java.lang.Object) locale17);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeField11.getAsText((org.joda.time.ReadablePartial) localTime16, locale20);
        int int22 = dateTimeField11.getMinimumValue();
        java.lang.String str23 = dateTimeField11.getName();
        java.util.Locale.Category category25 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale26 = java.util.Locale.getDefault(category25);
        org.joda.time.Chronology chronology28 = null;
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("Chinesisch (Taiwan)");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) (-1645515250), chronology28, locale30);
        java.util.Locale.setDefault(category25, locale30);
        java.util.Locale locale33 = java.util.Locale.getDefault(category25);
        java.util.Locale locale34 = java.util.Locale.getDefault(category25);
        java.util.Locale locale35 = java.util.Locale.getDefault(category25);
        java.lang.String str36 = dateTimeField11.getAsShortText((-259199898L), locale35);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Chinese" + "'", str18, "Chinese");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "10" + "'", str21, "10");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hourOfDay" + "'", str23, "hourOfDay");
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.FORMAT + "'", category25.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale26);
// flaky:         org.junit.Assert.assertEquals(locale26.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0" + "'", str36, "0");
    }

    @Test
    public void test11515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11515");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder0.setExtension('x', "zh");
        java.util.Locale.Builder builder4 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.clear();
        java.util.Locale.Builder builder6 = builder0.clear();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        org.joda.time.Chronology chronology14 = instant12.getChronology();
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime20 = timeOfDay17.toDateTime((org.joda.time.ReadableInstant) instant19);
        int[] intArray22 = chronology14.get((org.joda.time.ReadablePartial) timeOfDay17, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(0L, chronology14);
        int int24 = mutableDateTime23.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime23.property(dateTimeFieldType25);
        org.joda.time.MutableDateTime mutableDateTime27 = property26.roundHalfEven();
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime33 = timeOfDay30.toDateTime((org.joda.time.ReadableInstant) instant32);
        org.joda.time.Chronology chronology34 = instant32.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.clockhourOfHalfday();
        long long37 = dateTimeField35.roundHalfFloor(0L);
        java.util.Locale locale38 = java.util.Locale.TRADITIONAL_CHINESE;
        int int39 = dateTimeField35.getMaximumShortTextLength(locale38);
        java.lang.String str40 = locale38.getLanguage();
        java.lang.String str41 = property26.getAsText(locale38);
        java.util.Locale.Builder builder42 = builder0.setLocale(locale38);
        org.joda.time.TimeOfDay timeOfDay46 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant48 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime49 = timeOfDay46.toDateTime((org.joda.time.ReadableInstant) instant48);
        org.joda.time.Chronology chronology50 = instant48.getChronology();
        org.joda.time.TimeOfDay timeOfDay53 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant55 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime56 = timeOfDay53.toDateTime((org.joda.time.ReadableInstant) instant55);
        int[] intArray58 = chronology50.get((org.joda.time.ReadablePartial) timeOfDay53, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(0L, chronology50);
        int int60 = mutableDateTime59.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime59.property(dateTimeFieldType61);
        org.joda.time.TimeOfDay timeOfDay65 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant67 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime68 = timeOfDay65.toDateTime((org.joda.time.ReadableInstant) instant67);
        org.joda.time.Chronology chronology69 = instant67.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.clockhourOfHalfday();
        long long72 = dateTimeField70.roundHalfFloor(0L);
        java.util.Locale locale73 = java.util.Locale.TRADITIONAL_CHINESE;
        int int74 = dateTimeField70.getMaximumShortTextLength(locale73);
        java.util.Locale locale75 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale76 = locale75.stripExtensions();
        java.util.Locale locale77 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale78 = locale77.stripExtensions();
        java.lang.String str79 = locale75.getDisplayName(locale77);
        java.lang.String str80 = locale73.getDisplayLanguage(locale75);
        java.util.Calendar calendar81 = mutableDateTime59.toCalendar(locale75);
        java.lang.String str82 = locale75.getISO3Language();
        java.util.Locale locale83 = locale75.stripExtensions();
        java.lang.String str84 = locale75.getDisplayName();
        java.util.Locale.Builder builder85 = builder42.setLocale(locale75);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder87 = builder85.addUnicodeLocaleAttribute("Property[millisOfSecond]");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: Property[millisOfSecond] [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "zh" + "'", str40, "zh");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u4e00\u6708" + "'", str41, "\u4e00\u6708");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str79, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "\u4e2d\u6587" + "'", str80, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar81);
        org.junit.Assert.assertEquals(calendar81.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "zho" + "'", str82, "zho");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Chinese (Taiwan)" + "'", str84, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test11516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11516");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate0.plusMonths((-1));
        org.joda.time.LocalDate.Property property7 = localDate6.era();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.LocalDate localDate10 = property7.addWrapFieldToCopy((-1));
        java.lang.String str11 = property7.getName();
        org.joda.time.LocalDate localDate12 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate13 = property7.withMinimumValue();
        org.joda.time.LocalDate localDate14 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear(51);
        org.joda.time.LocalDate.Property property17 = localDate14.weekyear();
        org.joda.time.LocalDate.Property property18 = localDate14.era();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "era" + "'", str11, "era");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test11517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11517");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.property(dateTimeFieldType3);
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.era();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = property6.roundFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test11518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11518");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(10, 11, 11, 20);
        org.joda.time.LocalTime localTime6 = localTime4.withMillisOfSecond((int) (byte) 100);
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withDurationAdded(readableDuration11, (int) (byte) 0);
        org.joda.time.DateTime dateTime15 = dateTime10.minusSeconds((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime10.minus(readableDuration16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.plus(readableDuration18);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean23 = interval22.isBeforeNow();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean30 = interval26.abuts((org.joda.time.ReadableInterval) interval29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Interval interval32 = interval29.withDurationBeforeEnd(readableDuration31);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean39 = interval35.abuts((org.joda.time.ReadableInterval) interval38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Interval interval41 = interval38.withDurationBeforeEnd(readableDuration40);
        org.joda.time.Period period42 = interval38.toPeriod();
        org.joda.time.Interval interval43 = interval29.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period42);
        java.util.Locale.Builder builder44 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder47 = builder44.setExtension('x', "zh");
        boolean boolean48 = period42.equals((java.lang.Object) builder44);
        org.joda.time.Interval interval49 = interval22.withPeriodAfterStart((org.joda.time.ReadablePeriod) period42);
        org.joda.time.DateTime dateTime50 = dateTime19.plus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.LocalTime localTime52 = localTime4.withPeriodAdded((org.joda.time.ReadablePeriod) period42, 19);
        org.joda.time.LocalTime localTime54 = localTime4.plusMillis(100);
        org.joda.time.LocalTime localTime56 = localTime4.minusMinutes(26805);
        org.joda.time.LocalTime localTime58 = localTime56.minusSeconds(945);
        org.joda.time.LocalTime localTime60 = localTime58.minusSeconds(3);
        org.joda.time.LocalTime localTime62 = localTime60.minusSeconds(26702386);
        org.joda.time.LocalTime.Property property63 = localTime62.hourOfDay();
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(property63);
    }

    @Test
    public void test11519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11519");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.minuteOfHour();
        int int4 = property3.get();
        org.joda.time.TimeOfDay timeOfDay6 = property3.addToCopy((int) (short) 1);
        org.joda.time.TimeOfDay timeOfDay7 = property3.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.withHourOfDay(15);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay7.plusMinutes(400);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
    }

    @Test
    public void test11520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11520");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMinutes(35);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra(7);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMinutes(35);
        int int14 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime8.toDateTime(readableInstant15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime8.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay((java.lang.Object) property17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test11521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11521");
        org.joda.time.Interval interval3 = new org.joda.time.Interval((long) (short) 10, (long) 12);
        boolean boolean4 = interval3.containsNow();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime8 = localTime6.minusMinutes((int) (short) 1);
        org.joda.time.LocalTime localTime10 = localTime6.withMillisOfDay((int) (byte) 1);
        org.joda.time.LocalTime.Property property11 = localTime6.minuteOfHour();
        org.joda.time.Chronology chronology12 = localTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfYear();
        org.joda.time.Interval interval14 = interval3.withChronology(chronology12);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.clockhourOfHalfday();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(30L, chronology12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField18 = timeOfDay16.getField((-1645515573));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -1645515573");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test11522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11522");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        int int3 = localDateTime2.getDayOfWeek();
        int int4 = localDateTime2.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.dayOfYear();
        int int6 = property5.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = property5.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 19 + "'", int4 == 19);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 365 + "'", int6 == 365);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test11523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11523");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.clockhourOfHalfday();
        org.joda.time.DurationField durationField9 = chronology7.eras();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology7.getZone();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.clockhourOfDay();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(0L, chronology7);
        org.joda.time.DateTime dateTime14 = dateTime13.toDateTimeISO();
        org.joda.time.DateTime dateTime16 = dateTime13.withYear((int) 'a');
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test11524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11524");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean13 = interval9.abuts((org.joda.time.ReadableInterval) interval12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Interval interval15 = interval12.withDurationBeforeEnd(readableDuration14);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean22 = interval18.abuts((org.joda.time.ReadableInterval) interval21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Interval interval24 = interval21.withDurationBeforeEnd(readableDuration23);
        org.joda.time.Period period25 = interval21.toPeriod();
        org.joda.time.Interval interval26 = interval12.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period25);
        org.joda.time.DateTime dateTime27 = dateTime3.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime34 = timeOfDay31.toDateTime((org.joda.time.ReadableInstant) instant33);
        org.joda.time.Chronology chronology35 = instant33.getChronology();
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime41 = timeOfDay38.toDateTime((org.joda.time.ReadableInstant) instant40);
        int[] intArray43 = chronology35.get((org.joda.time.ReadablePartial) timeOfDay38, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(0L, chronology35);
        int int45 = mutableDateTime44.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime44.property(dateTimeFieldType46);
        int int48 = dateTime27.get(dateTimeFieldType46);
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime(10, 11, 11, 20);
        org.joda.time.LocalTime localTime55 = localTime53.withMillisOfSecond((int) (byte) 100);
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.eras();
        boolean boolean57 = localTime55.isSupported(durationFieldType56);
        org.joda.time.DateTime dateTime59 = dateTime27.withFieldAdded(durationFieldType56, 0);
        org.joda.time.DateTime.Property property60 = dateTime59.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
    }

    @Test
    public void test11525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11525");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        boolean boolean33 = mutableDateTime16.isEqualNow();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime16.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight37.withDurationAdded((long) (short) 10, 1);
        mutableDateTime16.setDate((org.joda.time.ReadableInstant) dateMidnight40);
        mutableDateTime16.setMinuteOfHour(0);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime16.era();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean51 = interval47.abuts((org.joda.time.ReadableInterval) interval50);
        long long52 = interval50.getStartMillis();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean59 = interval55.abuts((org.joda.time.ReadableInterval) interval58);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Interval interval61 = interval58.withDurationBeforeEnd(readableDuration60);
        org.joda.time.Interval interval62 = interval50.overlap((org.joda.time.ReadableInterval) interval58);
        org.joda.time.Duration duration63 = interval58.toDuration();
        mutableDateTime16.add((org.joda.time.ReadableDuration) duration63, 1970);
        mutableDateTime16.addMillis(26700803);
        mutableDateTime16.addDays(60);
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime16.secondOfDay();
        org.joda.time.Instant instant71 = org.joda.time.Instant.now();
        org.joda.time.MutableDateTime mutableDateTime72 = instant71.toMutableDateTime();
        mutableDateTime72.add(100L);
        org.joda.time.TimeOfDay timeOfDay78 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant80 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime81 = timeOfDay78.toDateTime((org.joda.time.ReadableInstant) instant80);
        org.joda.time.Chronology chronology82 = instant80.getChronology();
        org.joda.time.DateTimeField dateTimeField83 = chronology82.clockhourOfHalfday();
        org.joda.time.DurationField durationField84 = chronology82.eras();
        org.joda.time.DateTimeField dateTimeField85 = chronology82.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone86 = chronology82.getZone();
        org.joda.time.DateTimeField dateTimeField87 = chronology82.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField88 = chronology82.clockhourOfHalfday();
        org.joda.time.TimeOfDay timeOfDay89 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 4, chronology82);
        org.joda.time.DateTime dateTime90 = org.joda.time.DateTime.now(chronology82);
        org.joda.time.DateTime dateTime91 = org.joda.time.DateTime.now(chronology82);
        org.joda.time.DateTimeField dateTimeField92 = chronology82.year();
        mutableDateTime72.setRounding(dateTimeField92);
        int int94 = mutableDateTime72.getMonthOfYear();
        int int95 = property70.getDifference((org.joda.time.ReadableInstant) mutableDateTime72);
        mutableDateTime72.add(25200000L);
        mutableDateTime72.setDate(0L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNull(interval62);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(timeOfDay89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 1 + "'", int94 == 1);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + (-1635784499) + "'", int95 == (-1635784499));
    }

    @Test
    public void test11526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11526");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = dateTime5.toString(dateTimeFormatter6);
        org.joda.time.DateTime dateTime9 = dateTime5.minusYears(2022);
        org.joda.time.DateTime.Property property10 = dateTime5.minuteOfHour();
        org.joda.time.DateTime dateTime11 = property10.withMaximumValue();
        org.joda.time.DateTime dateTime12 = property10.getDateTime();
        org.joda.time.DateTime dateTime13 = property10.getDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property10.getFieldType();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1969-12-31T00:01:00.000Z" + "'", str7, "1969-12-31T00:01:00.000Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
    }

    @Test
    public void test11527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11527");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) (byte) 100);
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime9 = timeOfDay6.toDateTime((org.joda.time.ReadableInstant) instant8);
        org.joda.time.Chronology chronology10 = instant8.getChronology();
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime16 = timeOfDay13.toDateTime((org.joda.time.ReadableInstant) instant15);
        int[] intArray18 = chronology10.get((org.joda.time.ReadablePartial) timeOfDay13, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(0L, chronology10);
        int int20 = mutableDateTime19.getEra();
        mutableDateTime19.setWeekyear(10079);
        mutableDateTime19.setMillisOfDay(24);
        boolean boolean25 = instant0.isBefore((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.Chronology chronology26 = instant0.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.halfdays();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
    }

    @Test
    public void test11528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11528");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.withEra((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((java.lang.Object) dateMidnight10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMinutes(86399947);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfYear();
        int int15 = localDateTime13.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.plusSeconds((-292275055));
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withDayOfYear(348);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withDayOfYear(26775814);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26775814 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3180000 + "'", int15 == 3180000);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test11529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11529");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfHalfday();
        org.joda.time.DurationField durationField8 = chronology6.eras();
        long long12 = chronology6.add((long) 365, (long) 2000, 0);
        org.joda.time.DateTimeField dateTimeField13 = chronology6.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField14 = chronology6.weekOfWeekyear();
        long long16 = dateTimeField14.roundFloor((long) 999);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 365L + "'", long12 == 365L);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-259200000L) + "'", long16 == (-259200000L));
    }

    @Test
    public void test11530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11530");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusMonths((int) (short) -1);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean10 = interval6.abuts((org.joda.time.ReadableInterval) interval9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Interval interval12 = interval9.withDurationBeforeEnd(readableDuration11);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean19 = interval15.abuts((org.joda.time.ReadableInterval) interval18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Interval interval21 = interval18.withDurationBeforeEnd(readableDuration20);
        org.joda.time.Period period22 = interval18.toPeriod();
        org.joda.time.Interval interval23 = interval9.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period22);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay3.plus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean28 = interval27.isBeforeNow();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean32 = interval31.isBeforeNow();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean39 = interval35.abuts((org.joda.time.ReadableInterval) interval38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Interval interval41 = interval38.withDurationBeforeEnd(readableDuration40);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean48 = interval44.abuts((org.joda.time.ReadableInterval) interval47);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Interval interval50 = interval47.withDurationBeforeEnd(readableDuration49);
        org.joda.time.Period period51 = interval47.toPeriod();
        org.joda.time.Interval interval52 = interval38.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period51);
        java.util.Locale.Builder builder53 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder56 = builder53.setExtension('x', "zh");
        boolean boolean57 = period51.equals((java.lang.Object) builder53);
        org.joda.time.Interval interval58 = interval31.withPeriodAfterStart((org.joda.time.ReadablePeriod) period51);
        org.joda.time.Interval interval59 = interval27.withPeriodAfterStart((org.joda.time.ReadablePeriod) period51);
        org.joda.time.YearMonthDay yearMonthDay60 = yearMonthDay24.plus((org.joda.time.ReadablePeriod) period51);
        java.lang.String str61 = yearMonthDay60.toString();
        org.joda.time.DateMidnight dateMidnight62 = yearMonthDay60.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay60.plusYears(26832012);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType66 = yearMonthDay64.getFieldType(32770);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32770");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1970-02-01" + "'", str61, "1970-02-01");
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(yearMonthDay64);
    }

    @Test
    public void test11531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11531");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusMonths((int) (short) -1);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean10 = interval6.abuts((org.joda.time.ReadableInterval) interval9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Interval interval12 = interval9.withDurationBeforeEnd(readableDuration11);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean19 = interval15.abuts((org.joda.time.ReadableInterval) interval18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Interval interval21 = interval18.withDurationBeforeEnd(readableDuration20);
        org.joda.time.Period period22 = interval18.toPeriod();
        org.joda.time.Interval interval23 = interval9.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period22);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay3.plus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean28 = interval27.isBeforeNow();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean32 = interval31.isBeforeNow();
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean39 = interval35.abuts((org.joda.time.ReadableInterval) interval38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Interval interval41 = interval38.withDurationBeforeEnd(readableDuration40);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean48 = interval44.abuts((org.joda.time.ReadableInterval) interval47);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Interval interval50 = interval47.withDurationBeforeEnd(readableDuration49);
        org.joda.time.Period period51 = interval47.toPeriod();
        org.joda.time.Interval interval52 = interval38.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period51);
        java.util.Locale.Builder builder53 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder56 = builder53.setExtension('x', "zh");
        boolean boolean57 = period51.equals((java.lang.Object) builder53);
        org.joda.time.Interval interval58 = interval31.withPeriodAfterStart((org.joda.time.ReadablePeriod) period51);
        org.joda.time.Interval interval59 = interval27.withPeriodAfterStart((org.joda.time.ReadablePeriod) period51);
        org.joda.time.YearMonthDay yearMonthDay60 = yearMonthDay24.plus((org.joda.time.ReadablePeriod) period51);
        java.lang.String str61 = yearMonthDay60.toString();
        org.joda.time.DateMidnight dateMidnight62 = yearMonthDay60.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay60.withYear(26703592);
        java.lang.String str65 = yearMonthDay64.toString();
        org.joda.time.YearMonthDay.Property property66 = yearMonthDay64.monthOfYear();
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1970-02-01" + "'", str61, "1970-02-01");
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "26703592-02-01" + "'", str65, "26703592-02-01");
        org.junit.Assert.assertNotNull(property66);
    }

    @Test
    public void test11532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11532");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime.Property property2 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime3 = property2.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime4 = property2.getLocalTime();
        org.joda.time.LocalTime localTime6 = property2.addCopy(400);
        org.joda.time.LocalTime localTime8 = localTime6.withMinuteOfHour(0);
        org.joda.time.Chronology chronology9 = localTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.clockhourOfDay();
        org.joda.time.DurationField durationField11 = chronology9.minutes();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test11533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11533");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMinutes(35);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra(7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plusMillis(21);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekOfWeekyear(5);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.year();
        org.joda.time.LocalDateTime localDateTime14 = property13.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra(32769);
        java.lang.String str17 = localDateTime14.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "292278993-02-01T06:57:43.448" + "'", str17, "292278993-02-01T06:57:43.448");
    }

    @Test
    public void test11534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11534");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 3);
        java.util.Calendar.Builder builder4 = builder2.setLenient(false);
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.util.Calendar.Builder builder6 = builder2.setLocale(locale5);
        java.util.Calendar calendar7 = builder6.build();
        org.joda.time.YearMonthDay yearMonthDay8 = org.joda.time.YearMonthDay.fromCalendarFields(calendar7);
        calendar7.setFirstDayOfWeek((-1645515705));
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=3,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=-1645515705,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=0,SECOND=0,MILLISECOND=3,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay8);
    }

    @Test
    public void test11535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11535");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate0.plusMonths((-1));
        org.joda.time.LocalDate.Property property7 = localDate6.era();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.LocalDate localDate10 = property7.addWrapFieldToCopy((-1));
        java.lang.String str11 = property7.getName();
        org.joda.time.LocalDate localDate12 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate13 = property7.withMinimumValue();
        org.joda.time.LocalDate localDate14 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear(51);
        org.joda.time.YearMonthDay yearMonthDay18 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay18.plusDays(17);
        org.joda.time.DateTime dateTime21 = yearMonthDay20.toDateTimeAtMidnight();
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone24 = instant23.getZone();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime28 = dateTime25.withDurationAdded(readableDuration26, (int) (byte) 0);
        org.joda.time.DateTime dateTime30 = dateTime25.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime32 = dateTime30.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime34 = dateTime30.plusWeeks((int) (byte) -1);
        org.joda.time.DateTime.Property property35 = dateTime30.hourOfDay();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean38 = localDate36.isSupported(dateTimeFieldType37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = localDate36.toDateMidnight(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = localDate36.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property42 = localDate36.yearOfEra();
        org.joda.time.LocalDate localDate44 = localDate36.minusMonths((int) '#');
        int int45 = localDate44.getYearOfCentury();
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone47 = dateMidnight46.getZone();
        org.joda.time.DateTime dateTime48 = localDate44.toDateTimeAtStartOfDay(dateTimeZone47);
        boolean boolean49 = dateTime30.isEqual((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime50 = yearMonthDay20.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime51 = yearMonthDay20.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTime.Property property53 = dateTime51.property(dateTimeFieldType52);
        boolean boolean54 = localDate14.isSupported(dateTimeFieldType52);
        org.joda.time.LocalDate localDate56 = localDate14.minusYears(348);
        org.joda.time.YearMonthDay yearMonthDay58 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay60 = yearMonthDay58.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay.Property property61 = yearMonthDay60.monthOfYear();
        int int62 = property61.get();
        org.joda.time.YearMonthDay yearMonthDay64 = property61.addWrapFieldToCopy(4);
        org.joda.time.YearMonthDay yearMonthDay66 = property61.addToCopy(12);
        org.joda.time.YearMonthDay yearMonthDay67 = property61.withMaximumValue();
        org.joda.time.Chronology chronology68 = yearMonthDay67.getChronology();
        org.joda.time.YearMonthDay yearMonthDay70 = yearMonthDay67.plusDays(0);
        org.joda.time.YearMonthDay yearMonthDay72 = yearMonthDay67.minusDays(32769);
        org.joda.time.YearMonthDay.Property property73 = yearMonthDay72.year();
        org.joda.time.LocalDate localDate74 = localDate14.withFields((org.joda.time.ReadablePartial) yearMonthDay72);
        org.joda.time.LocalDateTime localDateTime75 = org.joda.time.LocalDateTime.now();
        int int76 = localDateTime75.getMinuteOfHour();
        org.joda.time.DurationFieldType durationFieldType77 = org.joda.time.DurationFieldType.eras();
        boolean boolean78 = localDateTime75.isSupported(durationFieldType77);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate80 = localDate74.withFieldAdded(durationFieldType77, 26789081);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'eras' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "era" + "'", str11, "era");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 19 + "'", int45 == 19);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(yearMonthDay66);
        org.junit.Assert.assertNotNull(yearMonthDay67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(yearMonthDay70);
        org.junit.Assert.assertNotNull(yearMonthDay72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(localDateTime75);
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 32 + "'", int76 == 32);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test11536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11536");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay.Property property4 = yearMonthDay3.monthOfYear();
        int int5 = property4.get();
        org.joda.time.YearMonthDay yearMonthDay7 = property4.addWrapFieldToCopy((-600));
        java.lang.String str8 = property4.getAsString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay10 = property4.setCopy("22 Feb 2022 07:26:00 GMT");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"22 Feb 2022 07:26:00 GMT\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2" + "'", str8, "2");
    }

    @Test
    public void test11537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11537");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        mutableDateTime16.setMillisOfDay(2);
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property25 = timeOfDay24.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property25.getFieldType();
        org.joda.time.DurationField durationField27 = property25.getDurationField();
        boolean boolean28 = mutableDateTime16.equals((java.lang.Object) durationField27);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone31 = instant30.getZone();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTime dateTime35 = dateTime32.withDurationAdded(readableDuration33, (int) (byte) 0);
        org.joda.time.DateTime dateTime37 = dateTime32.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime39 = dateTime37.plusMinutes((int) (byte) 10);
        int int40 = dateTime39.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime41 = dateTime39.toDateTimeISO();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean48 = interval44.abuts((org.joda.time.ReadableInterval) interval47);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Interval interval50 = interval47.withDurationBeforeEnd(readableDuration49);
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean57 = interval53.abuts((org.joda.time.ReadableInterval) interval56);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Interval interval59 = interval56.withDurationBeforeEnd(readableDuration58);
        org.joda.time.Interval interval62 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval65 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean66 = interval62.abuts((org.joda.time.ReadableInterval) interval65);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Interval interval68 = interval65.withDurationBeforeEnd(readableDuration67);
        org.joda.time.Period period69 = interval65.toPeriod();
        org.joda.time.Interval interval70 = interval56.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period69);
        org.joda.time.Interval interval71 = interval47.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period69);
        org.joda.time.DateTime dateTime72 = dateTime39.plus((org.joda.time.ReadablePeriod) period69);
        mutableDateTime16.add((org.joda.time.ReadablePeriod) period69, 0);
        org.joda.time.PeriodType periodType75 = period69.getPeriodType();
        java.lang.String str76 = period69.toString();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "PT0S" + "'", str76, "PT0S");
    }

    @Test
    public void test11538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11538");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean6 = interval2.abuts((org.joda.time.ReadableInterval) interval5);
        long long7 = interval5.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Interval interval9 = interval5.withPeriodAfterStart(readablePeriod8);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone12 = instant11.getZone();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded(readableDuration14, (int) (byte) 0);
        int int17 = dateTime16.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int19 = dateTime16.get(dateTimeFieldType18);
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay21.minusMonths((int) (short) -1);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean30 = interval26.abuts((org.joda.time.ReadableInterval) interval29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Interval interval32 = interval29.withDurationBeforeEnd(readableDuration31);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean39 = interval35.abuts((org.joda.time.ReadableInterval) interval38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Interval interval41 = interval38.withDurationBeforeEnd(readableDuration40);
        org.joda.time.Period period42 = interval38.toPeriod();
        org.joda.time.Interval interval43 = interval29.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period42);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay23.plus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay44.plusYears(1);
        org.joda.time.DateTime dateTime47 = dateTime16.withFields((org.joda.time.ReadablePartial) yearMonthDay44);
        boolean boolean48 = interval9.isBefore((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean55 = interval51.abuts((org.joda.time.ReadableInterval) interval54);
        long long56 = interval54.getStartMillis();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval62 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean63 = interval59.abuts((org.joda.time.ReadableInterval) interval62);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.Interval interval65 = interval62.withDurationBeforeEnd(readableDuration64);
        org.joda.time.Interval interval66 = interval54.overlap((org.joda.time.ReadableInterval) interval62);
        boolean boolean68 = interval62.isAfter((long) 1970);
        org.joda.time.Interval interval71 = new org.joda.time.Interval((long) 2, (long) 10);
        org.joda.time.Interval interval72 = interval62.gap((org.joda.time.ReadableInterval) interval71);
        boolean boolean73 = interval9.contains((org.joda.time.ReadableInterval) interval62);
        java.lang.String str74 = interval62.toString();
        org.joda.time.Duration duration75 = interval62.toDuration();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 27163491 + "'", int17 == 27163491);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 7 + "'", int19 == 7);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNull(interval66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z" + "'", str74, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(duration75);
    }

    @Test
    public void test11539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11539");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfHalfday();
        long long11 = dateTimeField9.roundHalfFloor(0L);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        int int13 = dateTimeField9.getMaximumShortTextLength(locale12);
        java.lang.String str14 = locale12.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology1, locale12);
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        java.lang.Object obj17 = dateTimeParserBucket15.saveState();
        int int18 = dateTimeParserBucket15.getOffset();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket15.getZone();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone19);
    }

    @Test
    public void test11540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11540");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property2 = localDate1.weekyear();
        org.joda.time.LocalDate localDate4 = localDate1.withWeekyear((-1));
        org.joda.time.LocalDate localDate6 = localDate4.minusYears((int) (byte) -1);
        int int7 = localDate4.getDayOfMonth();
        int int8 = localDate4.getYear();
        org.joda.time.LocalDate localDate10 = localDate4.withWeekyear(1970);
        org.joda.time.LocalDate localDate12 = localDate4.plusWeeks((int) (byte) 1);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean15 = localDate13.isSupported(dateTimeFieldType14);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = localDate13.toDateMidnight(dateTimeZone16);
        org.joda.time.LocalDate localDate19 = localDate13.plusMonths((-1));
        org.joda.time.LocalDate.Property property20 = localDate19.era();
        org.joda.time.LocalDate localDate21 = property20.getLocalDate();
        org.joda.time.LocalDate localDate23 = property20.addWrapFieldToCopy((-1));
        org.joda.time.LocalDate localDate24 = property20.withMinimumValue();
        int int25 = localDate24.getYearOfCentury();
        int int26 = localDate24.size();
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay.Property property31 = yearMonthDay30.monthOfYear();
        int int32 = property31.get();
        org.joda.time.YearMonthDay yearMonthDay34 = property31.addWrapFieldToCopy(4);
        org.joda.time.YearMonthDay yearMonthDay35 = property31.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(575);
        org.joda.time.DateTime dateTime38 = yearMonthDay35.toDateTimeAtMidnight(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = localDate24.toDateTimeAtMidnight(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = localDate4.toDateTimeAtStartOfDay(dateTimeZone37);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) (-1645515409), dateTimeZone37);
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now(dateTimeZone37);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 23 + "'", int7 == 23);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 22 + "'", int25 == 22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime42);
    }

    @Test
    public void test11541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11541");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusMonths((int) (short) -1);
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean10 = interval6.abuts((org.joda.time.ReadableInterval) interval9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Interval interval12 = interval9.withDurationBeforeEnd(readableDuration11);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean19 = interval15.abuts((org.joda.time.ReadableInterval) interval18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Interval interval21 = interval18.withDurationBeforeEnd(readableDuration20);
        org.joda.time.Period period22 = interval18.toPeriod();
        org.joda.time.Interval interval23 = interval9.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period22);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay3.plus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay3.plusMonths(26796);
        int int27 = yearMonthDay26.getDayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay26.plusYears(16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay29.withDayOfMonth((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay29);
    }

    @Test
    public void test11542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11542");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusMonths((int) (short) -1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean6 = localDate4.isSupported(dateTimeFieldType5);
        int int7 = yearMonthDay1.indexOf(dateTimeFieldType5);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        org.joda.time.DateTime dateTime11 = yearMonthDay1.toDateTimeAtCurrentTime(dateTimeZone10);
        int int12 = yearMonthDay1.getMonthOfYear();
        org.joda.time.Chronology chronology13 = yearMonthDay1.getChronology();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(26855);
        org.joda.time.DateMidnight dateMidnight16 = yearMonthDay1.toDateMidnight(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, 0);
        java.lang.String str20 = dateTimeZone19.toString();
        long long24 = dateTimeZone19.convertLocalToUTC((long) 10, false, (long) 0);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate(dateTimeZone19);
        long long27 = dateTimeZone19.convertUTCToLocal(1645515373445L);
        boolean boolean28 = dateTimeZone15.equals((java.lang.Object) long27);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+10:00" + "'", str20, "+10:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-35999990L) + "'", long24 == (-35999990L));
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645551373445L + "'", long27 == 1645551373445L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test11543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11543");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay.Property property4 = yearMonthDay3.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay5 = property4.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay5.minusDays(69);
        org.joda.time.LocalDate localDate8 = yearMonthDay5.toLocalDate();
        int int9 = yearMonthDay5.getMonthOfYear();
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test11544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11544");
        org.joda.time.Instant instant3 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone4 = instant3.getZone();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) (short) -1, dateTimeZone4);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate9 = localDate6.minusWeeks(53);
        org.joda.time.LocalDate.Property property10 = localDate6.yearOfCentury();
        org.joda.time.LocalDate localDate12 = localDate6.minusWeeks(36000000);
        int int13 = localDate6.getEra();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test11545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11545");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        java.lang.Object obj17 = mutableDateTime16.clone();
        int int18 = mutableDateTime16.getMinuteOfHour();
        mutableDateTime16.addMinutes((int) (byte) 10);
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str22 = locale21.getDisplayLanguage();
        java.util.Calendar calendar23 = mutableDateTime16.toCalendar(locale21);
        org.joda.time.TimeOfDay timeOfDay24 = org.joda.time.TimeOfDay.fromCalendarFields(calendar23);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay24.minusMinutes(25571564);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Chinese" + "'", str22, "Chinese");
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=10,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(timeOfDay26);
    }

    @Test
    public void test11546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11546");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.property(dateTimeFieldType3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withMillisOfDay((int) '#');
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean13 = interval9.abuts((org.joda.time.ReadableInterval) interval12);
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean21 = interval17.abuts((org.joda.time.ReadableInterval) interval20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Interval interval23 = interval20.withDurationBeforeEnd(readableDuration22);
        org.joda.time.Interval interval24 = interval12.overlap((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Duration duration25 = interval20.toDuration();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime0.withDurationAdded((org.joda.time.ReadableDuration) duration25, 25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime0.minusHours(53);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.yearOfEra();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusYears((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property35 = localDateTime31.property(dateTimeFieldType34);
        java.util.Locale locale40 = new java.util.Locale("\u5341\u4e8c\u6708", "hi!", "10");
        java.lang.String str41 = localDateTime31.toString("+10:00", locale40);
        int int42 = localDateTime31.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime29.plusYears(26722694);
        org.joda.time.DateTime dateTime46 = localDateTime29.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone48);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight49.withDurationAdded((long) 2, 100);
        int int53 = dateMidnight52.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime54.minusMinutes((-292275054));
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withMinuteOfHour(2);
        org.joda.time.Interval interval63 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval66 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean67 = interval63.abuts((org.joda.time.ReadableInterval) interval66);
        long long68 = interval66.getStartMillis();
        org.joda.time.Interval interval71 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval74 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean75 = interval71.abuts((org.joda.time.ReadableInterval) interval74);
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Interval interval77 = interval74.withDurationBeforeEnd(readableDuration76);
        org.joda.time.Interval interval78 = interval66.overlap((org.joda.time.ReadableInterval) interval74);
        org.joda.time.Duration duration79 = interval74.toDuration();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime60.withDurationAdded((org.joda.time.ReadableDuration) duration79, 112);
        org.joda.time.DateMidnight dateMidnight83 = dateMidnight52.withDurationAdded((org.joda.time.ReadableDuration) duration79, (-1645515269));
        org.joda.time.DateTime dateTime84 = dateTime46.plus((org.joda.time.ReadableDuration) duration79);
        org.joda.time.Period period85 = duration79.toPeriod();
        java.lang.String str86 = duration79.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNull(interval24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals(locale40.toString(), "\u5341\u4e8c\u6708_HI!_10");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+10:00" + "'", str41, "+10:00");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 7 + "'", int42 == 7);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNull(interval78);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "PT0S" + "'", str86, "PT0S");
    }

    @Test
    public void test11547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11547");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.monthOfYear();
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableDateTime4.add(readableDuration6, (int) (short) 10);
        mutableDateTime4.addMillis(11);
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime18 = timeOfDay15.toDateTime((org.joda.time.ReadableInstant) instant17);
        org.joda.time.Chronology chronology19 = instant17.getChronology();
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        int[] intArray27 = chronology19.get((org.joda.time.ReadablePartial) timeOfDay22, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(0L, chronology19);
        mutableDateTime28.setYear(3);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone33 = instant32.getZone();
        mutableDateTime28.setZone(dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight(dateTimeZone33);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime(1L, dateTimeZone33);
        org.joda.time.Chronology chronology37 = localTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime40 = mutableDateTime4.toMutableDateTime(chronology37);
        java.lang.String str41 = mutableDateTime4.toString();
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone44 = instant43.getZone();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTime dateTime48 = dateTime45.withDurationAdded(readableDuration46, (int) (byte) 0);
        org.joda.time.DateTime dateTime50 = dateTime45.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime52 = dateTime50.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime54 = dateTime52.plusDays(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int56 = dateTime54.get(dateTimeFieldType55);
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType55.getDurationType();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime4.set(dateTimeFieldType55, 81);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 81 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970-01-01T00:00:00.013Z" + "'", str41, "1970-01-01T00:00:00.013Z");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 7 + "'", int56 == 7);
        org.junit.Assert.assertNotNull(durationFieldType57);
    }

    @Test
    public void test11548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11548");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        boolean boolean33 = mutableDateTime16.isEqualNow();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime16.secondOfDay();
        mutableDateTime16.setMillisOfDay((int) (short) 100);
        int int37 = mutableDateTime16.getHourOfDay();
        org.joda.time.TimeOfDay timeOfDay41 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime44 = timeOfDay41.toDateTime((org.joda.time.ReadableInstant) instant43);
        org.joda.time.Chronology chronology45 = instant43.getChronology();
        org.joda.time.TimeOfDay timeOfDay48 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant50 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime51 = timeOfDay48.toDateTime((org.joda.time.ReadableInstant) instant50);
        int[] intArray53 = chronology45.get((org.joda.time.ReadablePartial) timeOfDay48, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(0L, chronology45);
        mutableDateTime54.setYear(3);
        org.joda.time.Instant instant58 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone59 = instant58.getZone();
        mutableDateTime54.setZone(dateTimeZone59);
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(dateTimeZone59);
        java.lang.String str63 = dateTimeZone59.getName((long) 'x');
        mutableDateTime16.setZoneRetainFields(dateTimeZone59);
        org.joda.time.LocalTime localTime66 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime68 = localTime66.minusMinutes((int) (short) 1);
        org.joda.time.LocalTime localTime70 = localTime66.withMillisOfDay((int) (byte) 1);
        org.joda.time.LocalTime.Property property71 = localTime66.minuteOfHour();
        org.joda.time.LocalTime localTime73 = property71.addWrapFieldToCopy(10);
        boolean boolean74 = dateTimeZone59.equals((java.lang.Object) property71);
        org.joda.time.LocalTime localTime76 = property71.addCopy((long) 4503347);
        org.joda.time.LocalTime.Property property77 = localTime76.millisOfSecond();
        org.joda.time.LocalTime localTime78 = property77.withMaximumValue();
        org.joda.time.LocalTime localTime80 = localTime78.plusMinutes(11);
        java.lang.String str81 = localTime78.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray82 = localTime78.getFields();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00" + "'", str63, "+00:00");
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertNotNull(localTime80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "07:47:00.999" + "'", str81, "07:47:00.999");
        org.junit.Assert.assertNotNull(dateTimeFieldArray82);
    }

    @Test
    public void test11549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11549");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        boolean boolean33 = mutableDateTime16.isEqualNow();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime16.secondOfDay();
        mutableDateTime16.setMillisOfDay((int) (short) 100);
        int int37 = mutableDateTime16.getHourOfDay();
        org.joda.time.TimeOfDay timeOfDay41 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime44 = timeOfDay41.toDateTime((org.joda.time.ReadableInstant) instant43);
        org.joda.time.Chronology chronology45 = instant43.getChronology();
        org.joda.time.TimeOfDay timeOfDay48 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant50 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime51 = timeOfDay48.toDateTime((org.joda.time.ReadableInstant) instant50);
        int[] intArray53 = chronology45.get((org.joda.time.ReadablePartial) timeOfDay48, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(0L, chronology45);
        mutableDateTime54.setYear(3);
        org.joda.time.Instant instant58 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone59 = instant58.getZone();
        mutableDateTime54.setZone(dateTimeZone59);
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(dateTimeZone59);
        java.lang.String str63 = dateTimeZone59.getName((long) 'x');
        mutableDateTime16.setZoneRetainFields(dateTimeZone59);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay68 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant70 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime71 = timeOfDay68.toDateTime((org.joda.time.ReadableInstant) instant70);
        org.joda.time.Chronology chronology72 = instant70.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.clockhourOfHalfday();
        org.joda.time.DurationField durationField74 = chronology72.eras();
        org.joda.time.DateTimeField dateTimeField75 = dateTimeFieldType65.getField(chronology72);
        org.joda.time.DateTimeField dateTimeField76 = chronology72.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime77 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime16, chronology72);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateMidnight dateMidnight80 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone79);
        org.joda.time.DateMidnight dateMidnight83 = dateMidnight80.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight85 = dateMidnight83.minusWeeks((int) (short) 100);
        int int86 = dateMidnight85.getMonthOfYear();
        mutableDateTime77.setMillis((org.joda.time.ReadableInstant) dateMidnight85);
        org.joda.time.MutableDateTime.Property property88 = mutableDateTime77.dayOfYear();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00" + "'", str63, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(property88);
    }

    @Test
    public void test11550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11550");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) (byte) 100);
        org.joda.time.Instant instant4 = instant2.withMillis(0L);
        org.joda.time.Instant instant6 = instant2.minus((long) 13);
        org.joda.time.Instant instant8 = instant6.minus(1645511379023L);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant8);
    }

    @Test
    public void test11551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11551");
        java.util.Date date3 = new java.util.Date(0, (int) '4', 0);
        int int4 = date3.getMinutes();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((java.lang.Object) date3);
        int int6 = date3.getDay();
        date3.setMonth(6);
        date3.setMonth((-292275054));
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromDateFields(date3);
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime19 = timeOfDay16.toDateTime((org.joda.time.ReadableInstant) instant18);
        org.joda.time.Chronology chronology20 = instant18.getChronology();
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime26 = timeOfDay23.toDateTime((org.joda.time.ReadableInstant) instant25);
        int[] intArray28 = chronology20.get((org.joda.time.ReadablePartial) timeOfDay23, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(0L, chronology20);
        mutableDateTime29.setYear(3);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone34 = instant33.getZone();
        mutableDateTime29.setZone(dateTimeZone34);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight(dateTimeZone34);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime(1L, dateTimeZone34);
        org.joda.time.Chronology chronology38 = localTime37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.centuryOfEra();
        org.joda.time.Chronology chronology41 = chronology38.withUTC();
        org.joda.time.DateTimeField dateTimeField42 = chronology38.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay11.withChronologyRetainFields(chronology38);
// flaky:         org.junit.Assert.assertEquals(date3.toString(), "Wed Jul 30 00:00:00 GMT+10:00 24354352");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 6 + "'", int6 == 6);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(timeOfDay43);
    }

    @Test
    public void test11552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11552");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfHalfday();
        long long29 = dateTimeField27.roundHalfFloor(0L);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        int int31 = dateTimeField27.getMaximumShortTextLength(locale30);
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale32.getDisplayName(locale34);
        java.lang.String str37 = locale30.getDisplayLanguage(locale32);
        java.util.Calendar calendar38 = mutableDateTime16.toCalendar(locale32);
        java.util.Date date42 = new java.util.Date(0, (int) '4', 0);
        int int43 = date42.getMinutes();
        date42.setYear(12);
        calendar38.setTime(date42);
        java.util.TimeZone timeZone47 = null;
        calendar38.setTimeZone(timeZone47);
        java.util.Date date49 = calendar38.getTime();
        int int50 = calendar38.getMinimalDaysInFirstWeek();
        java.time.Instant instant51 = calendar38.toInstant();
        java.util.Date date52 = calendar38.getTime();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str36, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u6587" + "'", str37, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-1820052000000,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=null,firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1912,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=120,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Tue Apr 30 00:00:00 GMT+10:00 1912");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(date49);
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Tue Apr 30 00:00:00 GMT+10:00 1912");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(date52);
// flaky:         org.junit.Assert.assertEquals(date52.toString(), "Tue Apr 30 00:00:00 GMT+10:00 1912");
    }

    @Test
    public void test11553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11553");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMinutes(35);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = property5.addWrapFieldToCopy(26702386);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekyear(383);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test11554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11554");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int14 = dateTime12.get(dateTimeFieldType13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minusWeeks((int) (short) 100);
        org.joda.time.DateMidnight.Property property23 = dateMidnight22.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean25 = dateMidnight22.isSupported(dateTimeFieldType24);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime33 = timeOfDay30.toDateTime((org.joda.time.ReadableInstant) instant32);
        org.joda.time.Chronology chronology34 = instant32.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.clockhourOfHalfday();
        org.joda.time.DurationField durationField36 = chronology34.eras();
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType27.getField(chronology34);
        org.joda.time.DateTimeField dateTimeField38 = chronology34.hourOfDay();
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) 22, chronology34);
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType24.getField(chronology34);
        org.joda.time.DateMidnight dateMidnight41 = org.joda.time.DateMidnight.now(chronology34);
        boolean boolean42 = dateTimeFieldType13.isSupported(chronology34);
        org.joda.time.DurationFieldType durationFieldType43 = dateTimeFieldType13.getRangeDurationType();
        java.lang.String str44 = durationFieldType43.getName();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 7 + "'", int14 == 7);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "days" + "'", str44, "days");
    }

    @Test
    public void test11555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11555");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        int[] intArray16 = chronology8.get((org.joda.time.ReadablePartial) timeOfDay11, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(0L, chronology8);
        int int18 = mutableDateTime17.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.property(dateTimeFieldType19);
        mutableDateTime17.setMillisOfDay(2);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone25 = instant24.getZone();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime29 = dateTime26.withDurationAdded(readableDuration27, (int) (byte) 0);
        org.joda.time.DateTime dateTime31 = dateTime26.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = dateTime33.plusDays(2);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMillis((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay41 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime44 = timeOfDay41.toDateTime((org.joda.time.ReadableInstant) instant43);
        org.joda.time.Chronology chronology45 = instant43.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.clockhourOfHalfday();
        org.joda.time.DurationField durationField47 = chronology45.eras();
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType38.getField(chronology45);
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime37, chronology45);
        org.joda.time.MutableDateTime mutableDateTime50 = mutableDateTime17.toMutableDateTime(chronology45);
        org.joda.time.DateTimeField dateTimeField51 = chronology45.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField52 = chronology45.hourOfHalfday();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) 4, chronology45);
        org.joda.time.DateTime.Property property54 = dateTime53.hourOfDay();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(property54);
    }

    @Test
    public void test11556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11556");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay.Property property4 = yearMonthDay3.monthOfYear();
        int int5 = property4.get();
        org.joda.time.YearMonthDay yearMonthDay7 = property4.addWrapFieldToCopy(4);
        org.joda.time.YearMonthDay yearMonthDay9 = property4.addToCopy(12);
        org.joda.time.DateTimeField dateTimeField10 = property4.getField();
        java.lang.String str11 = property4.getAsShortText();
        org.joda.time.YearMonthDay yearMonthDay12 = property4.withMaximumValue();
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Feb" + "'", str11, "Feb");
        org.junit.Assert.assertNotNull(yearMonthDay12);
    }

    @Test
    public void test11557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11557");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusMonths((int) (short) -1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean6 = localDate4.isSupported(dateTimeFieldType5);
        int int7 = yearMonthDay1.indexOf(dateTimeFieldType5);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.minusYears(1970);
        java.lang.String str10 = yearMonthDay1.toString();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay1.withDayOfMonth(14);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01" + "'", str10, "1970-01-01");
        org.junit.Assert.assertNotNull(yearMonthDay12);
    }

    @Test
    public void test11558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11558");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfHalfday();
        long long11 = dateTimeField9.roundHalfFloor(0L);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        int int13 = dateTimeField9.getMaximumShortTextLength(locale12);
        java.lang.String str14 = locale12.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology1, locale12);
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        long long19 = dateTimeParserBucket15.computeMillis(true, "");
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        int[] intArray23 = timeOfDay22.getValues();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay26.minusMinutes((int) '4');
        int int32 = timeOfDay22.compareTo((org.joda.time.ReadablePartial) timeOfDay26);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay22.minusMinutes((int) (short) -1);
        int int35 = timeOfDay34.size();
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime39 = localTime37.minusMinutes((int) (short) 1);
        int int40 = localTime37.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight43.withDurationAdded((long) 2, 100);
        org.joda.time.TimeOfDay timeOfDay49 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay51 = timeOfDay49.withSecondOfMinute((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight46.withFields((org.joda.time.ReadablePartial) timeOfDay51);
        boolean boolean53 = localTime37.equals((java.lang.Object) timeOfDay51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int55 = localTime37.get(dateTimeFieldType54);
        boolean boolean56 = timeOfDay34.isSupported(dateTimeFieldType54);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.TimeOfDay timeOfDay62 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant64 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime65 = timeOfDay62.toDateTime((org.joda.time.ReadableInstant) instant64);
        org.joda.time.Chronology chronology66 = instant64.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.clockhourOfHalfday();
        long long69 = dateTimeField67.roundHalfFloor(0L);
        java.util.Locale locale70 = java.util.Locale.TRADITIONAL_CHINESE;
        int int71 = dateTimeField67.getMaximumShortTextLength(locale70);
        java.lang.String str72 = locale70.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology59, locale70);
        java.lang.String str74 = locale70.getDisplayVariant();
        java.lang.String str75 = locale70.getDisplayScript();
        org.joda.time.TimeOfDay timeOfDay78 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant80 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime81 = timeOfDay78.toDateTime((org.joda.time.ReadableInstant) instant80);
        org.joda.time.Chronology chronology82 = instant80.getChronology();
        org.joda.time.DateTimeField dateTimeField83 = chronology82.clockhourOfHalfday();
        long long85 = dateTimeField83.roundHalfFloor(0L);
        java.util.Locale locale86 = java.util.Locale.TRADITIONAL_CHINESE;
        int int87 = dateTimeField83.getMaximumShortTextLength(locale86);
        java.lang.String str88 = locale70.getDisplayLanguage(locale86);
        java.lang.String str89 = locale70.getVariant();
        dateTimeParserBucket15.saveField(dateTimeFieldType54, "Tue Apr 30 00:00:00 UTC 1912", locale70);
        java.lang.Integer int91 = dateTimeParserBucket15.getOffsetInteger();
        dateTimeParserBucket15.setOffset((java.lang.Integer) 26773);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "zh" + "'", str72, "zh");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "\u4e2d\u6587" + "'", str88, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNull(int91);
    }

    @Test
    public void test11559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11559");
        java.util.Date date0 = new java.util.Date();
        int int1 = date0.getTimezoneOffset();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromDateFields(date0);
        date0.setDate((int) ' ');
        int int5 = date0.getHours();
        java.util.Date date9 = new java.util.Date(0, (int) '4', 0);
        int int10 = date9.getMinutes();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) date9);
        int int12 = date9.getDay();
        date9.setMonth(6);
        java.lang.String str15 = date9.toLocaleString();
        java.util.Calendar.Builder builder16 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder18 = builder16.setInstant((long) 3);
        java.util.Date date22 = new java.util.Date(0, (int) '4', 0);
        int int23 = date22.getMinutes();
        date22.setYear(12);
        java.util.Calendar.Builder builder26 = builder16.setInstant(date22);
        boolean boolean27 = date9.before(date22);
        int int28 = date9.getMinutes();
        int int29 = date9.getMonth();
        boolean boolean30 = date0.before(date9);
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Fri Mar 04 17:32:43 GMT+10:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-600) + "'", int1 == (-600));
        org.junit.Assert.assertNotNull(localTime2);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 17 + "'", int5 == 17);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Sat Jul 30 00:00:00 GMT+10:00 1904");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 6 + "'", int12 == 6);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Jul 30, 1904 12:00:00 AM" + "'", str15, "Jul 30, 1904 12:00:00 AM");
        org.junit.Assert.assertNotNull(builder18);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Apr 30 00:00:00 GMT+10:00 1912");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 6 + "'", int29 == 6);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test11560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11560");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.Instant instant2 = instant1.toInstant();
        org.joda.time.Instant instant5 = instant1.withDurationAdded((long) 2, 8818442);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone6);
        int int9 = dateTime8.getSecondOfDay();
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime8.toMutableDateTimeISO();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean17 = interval13.abuts((org.joda.time.ReadableInterval) interval16);
        long long18 = interval16.getStartMillis();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean25 = interval21.abuts((org.joda.time.ReadableInterval) interval24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Interval interval27 = interval24.withDurationBeforeEnd(readableDuration26);
        org.joda.time.Interval interval28 = interval16.overlap((org.joda.time.ReadableInterval) interval24);
        org.joda.time.Duration duration29 = interval24.toDuration();
        org.joda.time.Duration duration30 = duration29.toDuration();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean37 = interval33.abuts((org.joda.time.ReadableInterval) interval36);
        long long38 = interval36.getStartMillis();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean45 = interval41.abuts((org.joda.time.ReadableInterval) interval44);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Interval interval47 = interval44.withDurationBeforeEnd(readableDuration46);
        org.joda.time.Interval interval48 = interval36.overlap((org.joda.time.ReadableInterval) interval44);
        org.joda.time.Duration duration49 = interval44.toDuration();
        org.joda.time.Duration duration50 = duration49.toDuration();
        int int51 = duration29.compareTo((org.joda.time.ReadableDuration) duration50);
        mutableDateTime10.add((org.joda.time.ReadableDuration) duration29, 2000);
        org.joda.time.Instant instant54 = instant5.plus((org.joda.time.ReadableDuration) duration29);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 27163 + "'", int9 == 27163);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNull(interval28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNull(interval48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(instant54);
    }

    @Test
    public void test11561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11561");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date4 = new java.util.Date(0, (int) '4', 0);
        int int5 = date4.getMinutes();
        date4.setYear(12);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date4);
        java.util.Calendar.Builder builder10 = builder0.setInstant((long) (-1645515250));
        java.util.Calendar calendar11 = builder0.build();
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime15 = localTime13.minusMinutes((int) (short) 1);
        int int16 = localTime13.getMillisOfDay();
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime24 = timeOfDay21.toDateTime((org.joda.time.ReadableInstant) instant23);
        org.joda.time.Chronology chronology25 = instant23.getChronology();
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime31 = timeOfDay28.toDateTime((org.joda.time.ReadableInstant) instant30);
        int[] intArray33 = chronology25.get((org.joda.time.ReadablePartial) timeOfDay28, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(0L, chronology25);
        int int35 = mutableDateTime34.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime34.property(dateTimeFieldType36);
        org.joda.time.TimeOfDay timeOfDay40 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant42 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime43 = timeOfDay40.toDateTime((org.joda.time.ReadableInstant) instant42);
        org.joda.time.Chronology chronology44 = instant42.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.clockhourOfHalfday();
        long long47 = dateTimeField45.roundHalfFloor(0L);
        java.util.Locale locale48 = java.util.Locale.TRADITIONAL_CHINESE;
        int int49 = dateTimeField45.getMaximumShortTextLength(locale48);
        java.util.Locale locale50 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale51 = locale50.stripExtensions();
        java.util.Locale locale52 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale53 = locale52.stripExtensions();
        java.lang.String str54 = locale50.getDisplayName(locale52);
        java.lang.String str55 = locale48.getDisplayLanguage(locale50);
        java.util.Calendar calendar56 = mutableDateTime34.toCalendar(locale50);
        java.lang.String str57 = localTime13.toString("+00:00", locale50);
        java.util.Set<java.lang.String> strSet58 = locale50.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet59 = locale50.getUnicodeLocaleAttributes();
        java.util.Calendar.Builder builder60 = builder0.setLocale(locale50);
        org.joda.time.TimeOfDay timeOfDay64 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant66 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime67 = timeOfDay64.toDateTime((org.joda.time.ReadableInstant) instant66);
        org.joda.time.Chronology chronology68 = instant66.getChronology();
        org.joda.time.TimeOfDay timeOfDay71 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant73 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime74 = timeOfDay71.toDateTime((org.joda.time.ReadableInstant) instant73);
        int[] intArray76 = chronology68.get((org.joda.time.ReadablePartial) timeOfDay71, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime77 = new org.joda.time.MutableDateTime(0L, chronology68);
        java.lang.Object obj78 = mutableDateTime77.clone();
        int int79 = mutableDateTime77.getMinuteOfHour();
        mutableDateTime77.addMinutes((int) (byte) 10);
        java.util.Locale locale82 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str83 = locale82.getDisplayLanguage();
        java.util.Calendar calendar84 = mutableDateTime77.toCalendar(locale82);
        int int86 = calendar84.getMinimum(10);
        java.util.TimeZone timeZone87 = calendar84.getTimeZone();
        java.util.Calendar.Builder builder88 = builder0.setTimeZone(timeZone87);
        java.util.Locale locale93 = new java.util.Locale("\u53f0\u7063", "2022-02-22T07:27:12.819");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str94 = timeZone87.getDisplayName(true, 53, locale93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 53");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Tue Apr 30 00:00:00 GMT+10:00 1912");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1645515250,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=347,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=54,SECOND=44,MILLISECOND=750,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str54, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u4e2d\u6587" + "'", str55, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(obj78);
        org.junit.Assert.assertEquals(obj78.toString(), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj78), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj78), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Chinese" + "'", str83, "Chinese");
        org.junit.Assert.assertNotNull(calendar84);
        org.junit.Assert.assertEquals(calendar84.toString(), "java.util.GregorianCalendar[time=600000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=10,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(timeZone87);
        org.junit.Assert.assertEquals(timeZone87.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertEquals(locale93.toString(), "\u53f0\u7063_2022-02-22T07:27:12.819");
    }

    @Test
    public void test11562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11562");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, 0);
        java.lang.String str3 = dateTimeZone2.toString();
        java.util.TimeZone timeZone4 = dateTimeZone2.toTimeZone();
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfHalfday();
        long long14 = dateTimeField12.roundHalfFloor(0L);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        int int16 = dateTimeField12.getMaximumShortTextLength(locale15);
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale20 = locale19.stripExtensions();
        java.lang.String str21 = locale17.getDisplayName(locale19);
        java.lang.String str22 = locale15.getDisplayLanguage(locale17);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone4, locale15);
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(locale15);
        org.joda.time.TimeOfDay timeOfDay25 = org.joda.time.TimeOfDay.fromCalendarFields(calendar24);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((java.lang.Object) timeOfDay25);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+10:00" + "'", str3, "+10:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str21, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u4e2d\u6587" + "'", str22, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645515164026,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=32,SECOND=44,MILLISECOND=26,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1645515164026,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=32,SECOND=44,MILLISECOND=26,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeOfDay25);
    }

    @Test
    public void test11563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11563");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean6 = interval2.abuts((org.joda.time.ReadableInterval) interval5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Interval interval8 = interval5.withDurationBeforeEnd(readableDuration7);
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean15 = interval11.abuts((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Interval interval17 = interval14.withDurationBeforeEnd(readableDuration16);
        org.joda.time.Period period18 = interval14.toPeriod();
        org.joda.time.Interval interval19 = interval5.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period18);
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder20.setExtension('x', "zh");
        boolean boolean24 = period18.equals((java.lang.Object) builder20);
        java.util.Locale.Builder builder25 = builder20.clear();
        java.util.Locale.Builder builder28 = builder20.setExtension('a', "");
        java.util.Locale.Builder builder29 = builder20.clear();
        java.util.TimeZone timeZone31 = java.util.TimeZone.getTimeZone("clockhourOfHalfday");
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        java.util.Calendar calendar33 = java.util.Calendar.getInstance(timeZone31, locale32);
        java.lang.String str34 = locale32.getCountry();
        java.util.Locale.Builder builder35 = builder20.setLocale(locale32);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder38 = builder20.setUnicodeLocaleKeyword("\u4e0b\u5348 07:03:22", "Mon Jun 07 01:14:06 GMT+10:00 798247");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2072/12/6 ?? 07:03:22 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=1645515164100,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=32,SECOND=44,MILLISECOND=100,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test11564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11564");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        int[] intArray16 = chronology8.get((org.joda.time.ReadablePartial) timeOfDay11, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(0L, chronology8);
        mutableDateTime17.setYear(3);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone22 = instant21.getZone();
        mutableDateTime17.setZone(dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone22);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(1L, dateTimeZone22);
        org.joda.time.Chronology chronology26 = localTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        boolean boolean28 = dateTimeField27.isLenient();
        int int30 = dateTimeField27.getMinimumValue((long) (byte) -1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test11565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11565");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.withDurationAdded((long) 2, 100);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.withSecondOfMinute((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight5.withFields((org.joda.time.ReadablePartial) timeOfDay10);
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight11.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.dayOfWeek();
        mutableDateTime12.add((long) 1);
        org.joda.time.DateTimeField dateTimeField16 = mutableDateTime12.getRoundingField();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime12.minuteOfHour();
        mutableDateTime12.addSeconds(27390952);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.year();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology26);
        java.lang.String str29 = chronology26.toString();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.hourOfDay();
        mutableDateTime12.setChronology(chronology26);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNull(dateTimeField16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ISOChronology[UTC]" + "'", str29, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test11566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11566");
        java.lang.String[] strArray12 = new java.lang.String[] { "java.util.GregorianCalendar[time=-1820016000000,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=null,firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1912,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=121,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", "weekOfWeekyear", "PT0S", "hourOfHalfday", "clockhourOfHalfday", "1969-12-31T00:01:00.000Z", "+10:00", "0", "1", "\u4e0a\u5348 12:00:00", "11", "11" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.util.Iterator<java.lang.String> strItor15 = strSet13.iterator();
        java.util.Iterator<java.lang.String> strItor16 = strSet13.iterator();
        boolean boolean18 = strSet13.add("");
        strSet13.clear();
        boolean boolean20 = strSet13.isEmpty();
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone23 = instant22.getZone();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.withDurationAdded(readableDuration25, (int) (byte) 0);
        org.joda.time.DateTime dateTime29 = dateTime24.minusSeconds((int) (short) 1);
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime33 = localTime31.minusMinutes((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.seconds();
        boolean boolean35 = localTime31.isSupported(durationFieldType34);
        org.joda.time.DateTime dateTime37 = dateTime29.withFieldAdded(durationFieldType34, 0);
        org.joda.time.DateTime.Property property38 = dateTime37.monthOfYear();
        org.joda.time.DateTime dateTime40 = dateTime37.plusHours((int) (short) -1);
        org.joda.time.DateTime dateTime42 = dateTime37.minusDays(0);
        java.util.Locale locale47 = new java.util.Locale("\u5341\u4e8c\u6708", "hi!", "10");
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleKeys();
        org.joda.time.TimeOfDay timeOfDay51 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant53 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime54 = timeOfDay51.toDateTime((org.joda.time.ReadableInstant) instant53);
        org.joda.time.Chronology chronology55 = instant53.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.clockhourOfHalfday();
        org.joda.time.DurationField durationField57 = chronology55.eras();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.dayOfYear();
        org.joda.time.TimeOfDay timeOfDay61 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant63 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime64 = timeOfDay61.toDateTime((org.joda.time.ReadableInstant) instant63);
        org.joda.time.Chronology chronology65 = instant63.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.clockhourOfHalfday();
        long long68 = dateTimeField66.roundHalfFloor(0L);
        java.util.Locale locale69 = java.util.Locale.TRADITIONAL_CHINESE;
        int int70 = dateTimeField66.getMaximumShortTextLength(locale69);
        java.lang.String str71 = locale69.getLanguage();
        int int72 = dateTimeField58.getMaximumTextLength(locale69);
        java.lang.String str73 = locale47.getDisplayVariant(locale69);
        java.lang.String str74 = dateTime42.toString("8", locale69);
        boolean boolean75 = strSet13.equals((java.lang.Object) dateTime42);
        strSet13.clear();
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertEquals(locale47.toString(), "\u5341\u4e8c\u6708_HI!_10");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "zh" + "'", str71, "zh");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 3 + "'", int72 == 3);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "10" + "'", str73, "10");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "8" + "'", str74, "8");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
    }

    @Test
    public void test11567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11567");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.CHINESE;
        java.lang.String str2 = locale1.getVariant();
        java.lang.String str5 = nameProvider0.getName(locale1, "\u4e2d\u6587", "\u4e2d\u6587");
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime12 = timeOfDay9.toDateTime((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Chronology chronology13 = instant11.getChronology();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime19 = timeOfDay16.toDateTime((org.joda.time.ReadableInstant) instant18);
        int[] intArray21 = chronology13.get((org.joda.time.ReadablePartial) timeOfDay16, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(0L, chronology13);
        int int23 = mutableDateTime22.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime22.property(dateTimeFieldType24);
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime31 = timeOfDay28.toDateTime((org.joda.time.ReadableInstant) instant30);
        org.joda.time.Chronology chronology32 = instant30.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.clockhourOfHalfday();
        long long35 = dateTimeField33.roundHalfFloor(0L);
        java.util.Locale locale36 = java.util.Locale.TRADITIONAL_CHINESE;
        int int37 = dateTimeField33.getMaximumShortTextLength(locale36);
        java.util.Locale locale38 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale39 = locale38.stripExtensions();
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale41 = locale40.stripExtensions();
        java.lang.String str42 = locale38.getDisplayName(locale40);
        java.lang.String str43 = locale36.getDisplayLanguage(locale38);
        java.util.Calendar calendar44 = mutableDateTime22.toCalendar(locale38);
        java.lang.String str45 = locale38.getISO3Language();
        java.util.Locale locale46 = locale38.stripExtensions();
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleAttributes();
        java.lang.String str50 = nameProvider0.getName(locale46, "-2022-01-22", "MONTHOFYEAR");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str42, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u4e2d\u6587" + "'", str43, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar44);
        org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "zho" + "'", str45, "zho");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertNull(str50);
    }

    @Test
    public void test11568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11568");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        int int3 = localDateTime2.getDayOfWeek();
        boolean boolean5 = localDateTime2.equals((java.lang.Object) 0);
        int int6 = localDateTime2.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minusHours(24783290);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test11569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11569");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears(17);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusWeeks(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime.Property property9 = localDateTime7.property(dateTimeFieldType8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The DateTimeFieldType must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test11570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11570");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (short) 10, (long) 12);
        boolean boolean3 = interval2.containsNow();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime7 = localTime5.minusMinutes((int) (short) 1);
        org.joda.time.LocalTime localTime9 = localTime5.withMillisOfDay((int) (byte) 1);
        org.joda.time.LocalTime.Property property10 = localTime5.minuteOfHour();
        org.joda.time.Chronology chronology11 = localTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.dayOfYear();
        org.joda.time.Interval interval13 = interval2.withChronology(chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(chronology11);
        org.joda.time.DurationField durationField16 = chronology11.eras();
        org.joda.time.DateTimeField dateTimeField17 = chronology11.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long20 = dateTimeField17.set((long) 26807868, "Feb");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Feb\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test11571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11571");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        int[] intArray16 = chronology8.get((org.joda.time.ReadablePartial) timeOfDay11, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(0L, chronology8);
        mutableDateTime17.setYear(3);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone22 = instant21.getZone();
        mutableDateTime17.setZone(dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone22);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(1L, dateTimeZone22);
        org.joda.time.Chronology chronology26 = localTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        long long31 = chronology26.add(0L, (long) 2022, 9);
        org.joda.time.DurationField durationField32 = chronology26.months();
        long long33 = durationField32.getUnitMillis();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 18198L + "'", long31 == 18198L);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 2629746000L + "'", long33 == 2629746000L);
    }

    @Test
    public void test11572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11572");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.weekOfWeekyear();
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withDurationAdded(readableDuration10, (int) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime9.minusSeconds((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime9.minus(readableDuration15);
        org.joda.time.DateTime dateTime18 = dateTime9.minusSeconds((int) (byte) 100);
        int int19 = mutableDateTime4.compareTo((org.joda.time.ReadableInstant) dateTime18);
        mutableDateTime4.addMonths(112);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime4.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone24);
        org.joda.time.DateMidnight.Property property26 = dateMidnight25.year();
        org.joda.time.DateMidnight dateMidnight27 = property26.getDateMidnight();
        boolean boolean28 = mutableDateTime4.isEqual((org.joda.time.ReadableInstant) dateMidnight27);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test11573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11573");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.plusDays(17);
        org.joda.time.YearMonthDay yearMonthDay5 = yearMonthDay3.minusYears((int) 'a');
        org.joda.time.Chronology chronology6 = yearMonthDay3.getChronology();
        int int7 = yearMonthDay3.getMonthOfYear();
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay3.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay10 = property8.addWrapFieldToCopy(0);
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime17 = timeOfDay14.toDateTime((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Chronology chronology18 = instant16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfHalfday();
        org.joda.time.DurationField durationField20 = dateTimeField19.getLeapDurationField();
        java.util.Locale locale22 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str23 = dateTimeField19.getAsShortText((long) 365, locale22);
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Chronology chronology30 = instant28.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.year();
        org.joda.time.DateTimeField dateTimeField32 = chronology30.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        int[] intArray36 = timeOfDay35.getValues();
        org.joda.time.TimeOfDay timeOfDay39 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime42 = timeOfDay39.toDateTime((org.joda.time.ReadableInstant) instant41);
        org.joda.time.TimeOfDay timeOfDay44 = timeOfDay39.minusMinutes((int) '4');
        int int45 = timeOfDay35.compareTo((org.joda.time.ReadablePartial) timeOfDay39);
        org.joda.time.TimeOfDay timeOfDay48 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant50 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime51 = timeOfDay48.toDateTime((org.joda.time.ReadableInstant) instant50);
        org.joda.time.Chronology chronology52 = instant50.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.clockhourOfHalfday();
        org.joda.time.DurationField durationField54 = chronology52.eras();
        org.joda.time.TimeOfDay timeOfDay55 = timeOfDay35.withChronologyRetainFields(chronology52);
        org.joda.time.DateTimeField[] dateTimeFieldArray56 = timeOfDay35.getFields();
        org.joda.time.TimeOfDay timeOfDay59 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant61 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime62 = timeOfDay59.toDateTime((org.joda.time.ReadableInstant) instant61);
        org.joda.time.Chronology chronology63 = instant61.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.clockhourOfHalfday();
        long long66 = dateTimeField64.roundHalfFloor(0L);
        java.util.Locale locale67 = java.util.Locale.TRADITIONAL_CHINESE;
        int int68 = dateTimeField64.getMaximumShortTextLength(locale67);
        java.lang.String str69 = locale67.getLanguage();
        java.lang.String str70 = dateTimeField32.getAsShortText((org.joda.time.ReadablePartial) timeOfDay35, locale67);
        java.lang.String str71 = locale67.getDisplayVariant();
        java.lang.String str72 = locale22.getDisplayName(locale67);
        java.lang.String str73 = locale67.getScript();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay74 = property8.setCopy("Property[monthOfYear]", locale67);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Property[monthOfYear]\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNull(durationField20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "12" + "'", str23, "12");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(dateTimeFieldArray56);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "zh" + "'", str69, "zh");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1" + "'", str70, "1");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str72, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
    }

    @Test
    public void test11574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11574");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.year();
        org.joda.time.DateMidnight dateMidnight4 = property3.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight5 = property3.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight6 = property3.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.withWeekOfWeekyear(2222);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2222 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight6);
    }

    @Test
    public void test11575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11575");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property6 = localDate0.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.millis();
        boolean boolean8 = localDate0.isSupported(durationFieldType7);
        org.joda.time.LocalDate.Property property9 = localDate0.weekyear();
        org.joda.time.LocalDate localDate11 = property9.setCopy(7333089);
        org.joda.time.DateTimeField dateTimeField12 = property9.getField();
        org.joda.time.LocalDate localDate13 = property9.roundHalfCeilingCopy();
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay16.minusMonths((int) (short) -1);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean21 = localDate19.isSupported(dateTimeFieldType20);
        int int22 = yearMonthDay16.indexOf(dateTimeFieldType20);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone25 = instant24.getZone();
        org.joda.time.DateTime dateTime26 = yearMonthDay16.toDateTimeAtCurrentTime(dateTimeZone25);
        java.lang.String str28 = dateTimeZone25.getName((long) 11);
        long long32 = dateTimeZone25.convertLocalToUTC(27428135L, true, (long) (-292275054));
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 466, dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight34 = localDate13.toDateMidnight(dateTimeZone25);
        int int35 = localDate13.getMonthOfYear();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight38.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minusWeeks((int) (short) 100);
        org.joda.time.DateMidnight.Property property44 = dateMidnight43.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean46 = dateMidnight43.isSupported(dateTimeFieldType45);
        java.lang.String str47 = dateTimeFieldType45.getName();
        int int48 = localDate13.get(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 27428135L + "'", long32 == 27428135L);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "weekyear" + "'", str47, "weekyear");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2022 + "'", int48 == 2022);
    }

    @Test
    public void test11576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11576");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMinutes(35);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.millisOfDay();
        int int6 = localDateTime4.getMinuteOfHour();
        int int7 = localDateTime4.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.minusSeconds(26883985);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 57 + "'", int6 == 57);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 25064301 + "'", int7 == 25064301);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test11577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11577");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.property(dateTimeFieldType3);
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfCeilingCopy();
        int int7 = localDateTime6.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.era();
        org.joda.time.LocalDateTime localDateTime10 = property8.addWrapFieldToCopy((-1645515350));
        int int11 = localDateTime10.getMillisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test11578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11578");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfHalfday();
        long long11 = dateTimeField9.roundHalfFloor(0L);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        int int13 = dateTimeField9.getMaximumShortTextLength(locale12);
        java.lang.String str14 = locale12.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology1, locale12);
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale20 = locale19.stripExtensions();
        dateTimeParserBucket15.saveField(dateTimeFieldType17, "zh", locale19);
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime28 = timeOfDay25.toDateTime((org.joda.time.ReadableInstant) instant27);
        org.joda.time.Chronology chronology29 = instant27.getChronology();
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime35 = timeOfDay32.toDateTime((org.joda.time.ReadableInstant) instant34);
        int[] intArray37 = chronology29.get((org.joda.time.ReadablePartial) timeOfDay32, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(0L, chronology29);
        org.joda.time.TimeOfDay timeOfDay41 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime44 = timeOfDay41.toDateTime((org.joda.time.ReadableInstant) instant43);
        org.joda.time.Chronology chronology45 = instant43.getChronology();
        org.joda.time.TimeOfDay timeOfDay48 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant50 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime51 = timeOfDay48.toDateTime((org.joda.time.ReadableInstant) instant50);
        int[] intArray53 = chronology45.get((org.joda.time.ReadablePartial) timeOfDay48, (long) (short) -1);
        mutableDateTime38.setChronology(chronology45);
        boolean boolean55 = mutableDateTime38.isEqualNow();
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime38.secondOfDay();
        mutableDateTime38.setMillisOfDay((int) (short) 100);
        int int59 = mutableDateTime38.getHourOfDay();
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime38.hourOfDay();
        boolean boolean61 = dateTimeParserBucket15.restoreState((java.lang.Object) mutableDateTime38);
        java.lang.Integer int62 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone64 = dateMidnight63.getZone();
        org.joda.time.DateMidnight.Property property65 = dateMidnight63.era();
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight63.withYearOfEra(17);
        org.joda.time.DateMidnight.Property property68 = dateMidnight63.weekyear();
        org.joda.time.Instant instant70 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone71 = instant70.getZone();
        org.joda.time.MutableDateTime mutableDateTime72 = instant70.toMutableDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone73 = instant70.getZone();
        long long75 = dateTimeZone73.convertUTCToLocal(365L);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight63.withZoneRetainFields(dateTimeZone73);
        org.joda.time.DateTime dateTime77 = org.joda.time.DateTime.now(dateTimeZone73);
        dateTimeParserBucket15.setZone(dateTimeZone73);
        java.lang.Object obj79 = dateTimeParserBucket15.saveState();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(int62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 365L + "'", long75 == 365L);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(obj79);
    }

    @Test
    public void test11579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11579");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property6 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = localDate0.minusMonths((int) '#');
        int int9 = localDate8.getYearOfCentury();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        org.joda.time.DateTime dateTime12 = localDate8.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.plusSeconds(229);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTimeISO();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 19 + "'", int9 == 19);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test11580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11580");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.DateTime dateTime10 = property9.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime12 = property9.addWrapFieldToCopy((-1645515253));
        org.joda.time.DateTime.Property property13 = dateTime12.monthOfYear();
        org.joda.time.DateTime dateTime15 = dateTime12.minus((long) 26708123);
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime21 = timeOfDay18.toDateTime((org.joda.time.ReadableInstant) instant20);
        boolean boolean23 = timeOfDay18.equals((java.lang.Object) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTime((org.joda.time.ReadableInstant) instant29);
        org.joda.time.Chronology chronology31 = instant29.getChronology();
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime37 = timeOfDay34.toDateTime((org.joda.time.ReadableInstant) instant36);
        int[] intArray39 = chronology31.get((org.joda.time.ReadablePartial) timeOfDay34, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(0L, chronology31);
        mutableDateTime40.setYear(3);
        org.joda.time.Instant instant44 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone45 = instant44.getZone();
        mutableDateTime40.setZone(dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight(dateTimeZone45);
        java.lang.String str49 = dateTimeZone45.getName((long) 'x');
        org.joda.time.DateTime dateTime50 = timeOfDay18.toDateTimeToday(dateTimeZone45);
        int int51 = timeOfDay18.getHourOfDay();
        org.joda.time.TimeOfDay timeOfDay54 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant56 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime57 = timeOfDay54.toDateTime((org.joda.time.ReadableInstant) instant56);
        org.joda.time.TimeOfDay timeOfDay59 = timeOfDay54.minusMinutes((int) '4');
        org.joda.time.TimeOfDay timeOfDay61 = timeOfDay54.withMillisOfSecond(1);
        org.joda.time.Chronology chronology62 = timeOfDay61.getChronology();
        org.joda.time.TimeOfDay timeOfDay63 = timeOfDay18.withChronologyRetainFields(chronology62);
        org.joda.time.LocalTime localTime64 = org.joda.time.LocalTime.now(chronology62);
        org.joda.time.DateTime dateTime65 = dateTime15.withChronology(chronology62);
        org.joda.time.DateTime.Property property66 = dateTime15.millisOfSecond();
        org.joda.time.Interval interval67 = property66.toInterval();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00" + "'", str49, "+00:00");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(timeOfDay59);
        org.junit.Assert.assertNotNull(timeOfDay61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(interval67);
    }

    @Test
    public void test11581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11581");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((-24683698L));
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.minusSeconds((-1645515461));
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusHours(92);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test11582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11582");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.Instant instant5 = instant1.withDurationAdded((long) (byte) 100, (int) (short) 1);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withDurationAdded(readableDuration10, (int) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime9.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusDays(2);
        org.joda.time.DateTime dateTime20 = dateTime16.withHourOfDay(22);
        int int21 = dateTime16.getMonthOfYear();
        boolean boolean22 = instant1.isEqual((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime23 = instant1.toDateTimeISO();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean26 = localDate24.isSupported(dateTimeFieldType25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateMidnight dateMidnight28 = localDate24.toDateMidnight(dateTimeZone27);
        org.joda.time.LocalDate localDate30 = localDate24.minusMonths((int) (short) 10);
        int int31 = localDate24.getDayOfYear();
        org.joda.time.LocalDate.Property property32 = localDate24.monthOfYear();
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean35 = localDate33.isSupported(dateTimeFieldType34);
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = localDate33.toDateMidnight(dateTimeZone36);
        org.joda.time.DateTime dateTime38 = localDate33.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate40 = localDate33.plusMonths((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean43 = dateTimeZone41.equals((java.lang.Object) 604800000L);
        org.joda.time.Interval interval44 = localDate33.toInterval(dateTimeZone41);
        org.joda.time.Interval interval45 = localDate24.toInterval(dateTimeZone41);
        java.lang.String str47 = dateTimeZone41.getName((long) 363);
        org.joda.time.DateTime dateTime48 = dateTime23.toDateTime(dateTimeZone41);
        java.lang.String str49 = dateTime23.toString();
        int int50 = dateTime23.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 53 + "'", int31 == 53);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(interval45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1969-12-31T23:59:59.999Z" + "'", str49, "1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 59 + "'", int50 == 59);
    }

    @Test
    public void test11583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11583");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = dateTime5.toString(dateTimeFormatter6);
        org.joda.time.DateTime dateTime9 = dateTime5.minusYears(2022);
        org.joda.time.DateTime.Property property10 = dateTime5.minuteOfHour();
        org.joda.time.DateTime dateTime11 = property10.withMaximumValue();
        org.joda.time.DateTime dateTime12 = property10.getDateTime();
        org.joda.time.TimeOfDay timeOfDay13 = dateTime12.toTimeOfDay();
        org.joda.time.DateTime dateTime16 = dateTime12.withDurationAdded((long) 514, (int) '#');
        org.joda.time.DateTime dateTime18 = dateTime16.minusHours(575);
        org.joda.time.DateTime dateTime19 = dateTime16.withTimeAtStartOfDay();
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime27 = timeOfDay24.toDateTime((org.joda.time.ReadableInstant) instant26);
        org.joda.time.Chronology chronology28 = instant26.getChronology();
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime34 = timeOfDay31.toDateTime((org.joda.time.ReadableInstant) instant33);
        int[] intArray36 = chronology28.get((org.joda.time.ReadablePartial) timeOfDay31, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(0L, chronology28);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) (-1), chronology28);
        org.joda.time.DateTime dateTime40 = dateTime38.minus((long) 100);
        org.joda.time.TimeOfDay timeOfDay43 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property44 = timeOfDay43.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = property44.getFieldType();
        int int46 = dateTime38.get(dateTimeFieldType45);
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType45.getDurationType();
        org.joda.time.DateTime.Property property48 = dateTime16.property(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1969-12-31T00:01:00.000Z" + "'", str7, "1969-12-31T00:01:00.000Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 59 + "'", int46 == 59);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(property48);
    }

    @Test
    public void test11584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11584");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("zho");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"zho\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11585");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime.Property property4 = dateTime3.monthOfYear();
        org.joda.time.DateTime dateTime5 = property4.roundCeilingCopy();
        org.joda.time.DateTime dateTime6 = property4.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.minusWeeks((int) (short) 100);
        org.joda.time.DateMidnight.Property property17 = dateMidnight16.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean19 = dateMidnight16.isSupported(dateTimeFieldType18);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime27 = timeOfDay24.toDateTime((org.joda.time.ReadableInstant) instant26);
        org.joda.time.Chronology chronology28 = instant26.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.clockhourOfHalfday();
        org.joda.time.DurationField durationField30 = chronology28.eras();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType21.getField(chronology28);
        org.joda.time.DateTimeField dateTimeField32 = chronology28.hourOfDay();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) 22, chronology28);
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType18.getField(chronology28);
        org.joda.time.DateMidnight dateMidnight35 = org.joda.time.DateMidnight.now(chronology28);
        org.joda.time.Instant instant38 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone39 = instant38.getZone();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone39);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.minuteOfDay();
        java.util.Locale locale42 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str43 = property41.getAsShortText(locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((-2678399900L), chronology28, locale42, (java.lang.Integer) 0);
        long long49 = chronology28.add((long) 2, (long) 4, 70);
        org.joda.time.DateTimeField dateTimeField50 = chronology28.hourOfHalfday();
        long long52 = dateTimeField50.roundHalfFloor(290340864646379000L);
        java.util.Locale locale57 = new java.util.Locale("\u5341\u4e8c\u6708", "hi!", "10");
        java.util.Set<java.lang.String> strSet58 = locale57.getUnicodeLocaleKeys();
        org.joda.time.TimeOfDay timeOfDay61 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant63 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime64 = timeOfDay61.toDateTime((org.joda.time.ReadableInstant) instant63);
        org.joda.time.Chronology chronology65 = instant63.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.clockhourOfHalfday();
        org.joda.time.DurationField durationField67 = chronology65.eras();
        org.joda.time.DateTimeField dateTimeField68 = chronology65.dayOfYear();
        org.joda.time.TimeOfDay timeOfDay71 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant73 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime74 = timeOfDay71.toDateTime((org.joda.time.ReadableInstant) instant73);
        org.joda.time.Chronology chronology75 = instant73.getChronology();
        org.joda.time.DateTimeField dateTimeField76 = chronology75.clockhourOfHalfday();
        long long78 = dateTimeField76.roundHalfFloor(0L);
        java.util.Locale locale79 = java.util.Locale.TRADITIONAL_CHINESE;
        int int80 = dateTimeField76.getMaximumShortTextLength(locale79);
        java.lang.String str81 = locale79.getLanguage();
        int int82 = dateTimeField68.getMaximumTextLength(locale79);
        java.lang.String str83 = locale57.getDisplayVariant(locale79);
        java.util.Locale locale84 = locale79.stripExtensions();
        java.lang.String str85 = dateTimeField50.getAsShortText((-1645515415), locale79);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime86 = property4.setCopy("1970-01-01T00:10:00.000Z", locale79);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1970-01-01T00:10:00.000Z\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "0" + "'", str43, "0");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 282L + "'", long49 == 282L);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 290340864648000000L + "'", long52 == 290340864648000000L);
        org.junit.Assert.assertEquals(locale57.toString(), "\u5341\u4e8c\u6708_HI!_10");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "zh" + "'", str81, "zh");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 3 + "'", int82 == 3);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "10" + "'", str83, "10");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "-1645515415" + "'", str85, "-1645515415");
    }

    @Test
    public void test11586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11586");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(36000052L);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean6 = dateTimeZone4.equals((java.lang.Object) 604800000L);
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((java.lang.Object) 36000052L, dateTimeZone4);
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.now(dateTimeZone4);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval9 = new org.joda.time.Interval((long) 700, (long) (-1645515653), dateTimeZone4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test11587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11587");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.property(dateTimeFieldType3);
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusMinutes(35);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusMinutes(22);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.yearOfCentury();
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.yearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.minusMinutes(26707024);
        boolean boolean20 = localDateTime6.isEqual((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.Chronology chronology21 = localDateTime13.getChronology();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
    }

    @Test
    public void test11588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11588");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        boolean boolean33 = mutableDateTime16.isEqualNow();
        int int34 = mutableDateTime16.getWeekOfWeekyear();
        mutableDateTime16.setMinuteOfHour(16);
        java.lang.String str38 = mutableDateTime16.toString("\u661f\u671f\u4e94");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u661f\u671f\u4e94" + "'", str38, "\u661f\u671f\u4e94");
    }

    @Test
    public void test11589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11589");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfHalfday();
        long long29 = dateTimeField27.roundHalfFloor(0L);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        int int31 = dateTimeField27.getMaximumShortTextLength(locale30);
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale32.getDisplayName(locale34);
        java.lang.String str37 = locale30.getDisplayLanguage(locale32);
        java.util.Calendar calendar38 = mutableDateTime16.toCalendar(locale32);
        int int39 = calendar38.getWeekYear();
        calendar38.set((int) (byte) -1, (int) (byte) 100, 0, 8, (int) (short) 100);
        calendar38.set((int) (byte) 0, 35, 100, (int) 'a', 2000);
        calendar38.setWeekDate((int) (short) 0, 26693441, 7);
        java.util.Date date56 = new java.util.Date();
        int int57 = date56.getTimezoneOffset();
        calendar38.setTime(date56);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str36, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u6587" + "'", str37, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=1645515164573,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=32,SECOND=44,MILLISECOND=573,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
// flaky:         org.junit.Assert.assertEquals(date56.toString(), "Tue Feb 22 17:32:44 GMT+10:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-600) + "'", int57 == (-600));
    }

    @Test
    public void test11590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11590");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        int[] intArray16 = chronology8.get((org.joda.time.ReadablePartial) timeOfDay11, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(0L, chronology8);
        int int18 = mutableDateTime17.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.property(dateTimeFieldType19);
        mutableDateTime17.setMillisOfDay(2);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone25 = instant24.getZone();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.DateTime dateTime29 = dateTime26.withDurationAdded(readableDuration27, (int) (byte) 0);
        org.joda.time.DateTime dateTime31 = dateTime26.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime35 = dateTime33.plusDays(2);
        org.joda.time.DateTime dateTime37 = dateTime35.minusMillis((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay41 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime44 = timeOfDay41.toDateTime((org.joda.time.ReadableInstant) instant43);
        org.joda.time.Chronology chronology45 = instant43.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.clockhourOfHalfday();
        org.joda.time.DurationField durationField47 = chronology45.eras();
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType38.getField(chronology45);
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime37, chronology45);
        org.joda.time.MutableDateTime mutableDateTime50 = mutableDateTime17.toMutableDateTime(chronology45);
        org.joda.time.DateTimeField dateTimeField51 = chronology45.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField52 = chronology45.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime((long) 26747, chronology45);
        mutableDateTime53.setDate((-61851081600000L));
        mutableDateTime53.setMillis((long) 10079);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime53.setHourOfDay(26904357);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26904357 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
    }

    @Test
    public void test11591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11591");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, 0);
        java.lang.String str3 = dateTimeZone2.toString();
        java.util.TimeZone timeZone4 = dateTimeZone2.toTimeZone();
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfHalfday();
        long long14 = dateTimeField12.roundHalfFloor(0L);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        int int16 = dateTimeField12.getMaximumShortTextLength(locale15);
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale20 = locale19.stripExtensions();
        java.lang.String str21 = locale17.getDisplayName(locale19);
        java.lang.String str22 = locale15.getDisplayLanguage(locale17);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone4, locale15);
        java.util.TimeZone.setDefault(timeZone4);
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime31 = timeOfDay28.toDateTime((org.joda.time.ReadableInstant) instant30);
        org.joda.time.Chronology chronology32 = instant30.getChronology();
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant37 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime38 = timeOfDay35.toDateTime((org.joda.time.ReadableInstant) instant37);
        int[] intArray40 = chronology32.get((org.joda.time.ReadablePartial) timeOfDay35, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(0L, chronology32);
        org.joda.time.TimeOfDay timeOfDay44 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant46 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime47 = timeOfDay44.toDateTime((org.joda.time.ReadableInstant) instant46);
        org.joda.time.Chronology chronology48 = instant46.getChronology();
        org.joda.time.TimeOfDay timeOfDay51 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant53 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime54 = timeOfDay51.toDateTime((org.joda.time.ReadableInstant) instant53);
        int[] intArray56 = chronology48.get((org.joda.time.ReadablePartial) timeOfDay51, (long) (short) -1);
        mutableDateTime41.setChronology(chronology48);
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime(chronology48);
        org.joda.time.DateTimeField dateTimeField59 = chronology48.weekOfWeekyear();
        java.util.Locale locale61 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale62 = locale61.stripExtensions();
        java.util.Locale locale63 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale64 = locale63.stripExtensions();
        java.lang.String str65 = locale61.getDisplayName(locale63);
        java.lang.String str66 = dateTimeField59.getAsText(2022, locale61);
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(timeZone4, locale61);
        java.util.TimeZone timeZone68 = calendar67.getTimeZone();
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(timeZone68);
        java.util.Date date70 = calendar69.getTime();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+10:00" + "'", str3, "+10:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str21, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u4e2d\u6587" + "'", str22, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645515164632,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=32,SECOND=44,MILLISECOND=632,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str65, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2022" + "'", str66, "2022");
        org.junit.Assert.assertNotNull(calendar67);
// flaky:         org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=1645515164632,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=32,SECOND=44,MILLISECOND=632,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone68);
        org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(calendar69);
// flaky:         org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=1645515164632,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=32,SECOND=44,MILLISECOND=632,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date70);
// flaky:         org.junit.Assert.assertEquals(date70.toString(), "Tue Feb 22 17:32:44 GMT+10:00 2022");
    }

    @Test
    public void test11592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11592");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, 0);
        java.lang.String str3 = dateTimeZone2.toString();
        java.util.TimeZone timeZone4 = dateTimeZone2.toTimeZone();
        java.util.TimeZone.setDefault(timeZone4);
        java.util.Calendar calendar6 = java.util.Calendar.getInstance(timeZone4);
        java.util.Calendar calendar7 = java.util.Calendar.getInstance(timeZone4);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(dateTimeZone10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime14 = dateTime11.withDurationAdded(readableDuration12, (int) (byte) 0);
        org.joda.time.DateTime dateTime16 = dateTime11.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime20 = dateTime16.plusWeeks((int) (byte) -1);
        org.joda.time.DateTime.Property property21 = dateTime16.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime28 = timeOfDay25.toDateTime((org.joda.time.ReadableInstant) instant27);
        org.joda.time.Chronology chronology29 = instant27.getChronology();
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime35 = timeOfDay32.toDateTime((org.joda.time.ReadableInstant) instant34);
        int[] intArray37 = chronology29.get((org.joda.time.ReadablePartial) timeOfDay32, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(0L, chronology29);
        org.joda.time.DurationField durationField39 = chronology29.weeks();
        org.joda.time.DateTimeField dateTimeField40 = chronology29.weekOfWeekyear();
        org.joda.time.DateTime dateTime41 = dateTime16.toDateTime(chronology29);
        org.joda.time.DateTime.Property property42 = dateTime16.dayOfWeek();
        org.joda.time.DateTime dateTime43 = property42.roundFloorCopy();
        int int44 = dateTime43.getSecondOfDay();
        boolean boolean45 = calendar7.after((java.lang.Object) dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+10:00" + "'", str3, "+10:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(calendar6);
// flaky:         org.junit.Assert.assertEquals(calendar6.toString(), "java.util.GregorianCalendar[time=1645515164671,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=32,SECOND=44,MILLISECOND=671,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar7);
// flaky:         org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=1645515164671,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=32,SECOND=44,MILLISECOND=671,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test11593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11593");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, 0);
        java.lang.String str3 = dateTimeZone2.toString();
        java.util.TimeZone timeZone4 = dateTimeZone2.toTimeZone();
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfHalfday();
        long long14 = dateTimeField12.roundHalfFloor(0L);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        int int16 = dateTimeField12.getMaximumShortTextLength(locale15);
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale20 = locale19.stripExtensions();
        java.lang.String str21 = locale17.getDisplayName(locale19);
        java.lang.String str22 = locale15.getDisplayLanguage(locale17);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone4, locale15);
        java.util.TimeZone.setDefault(timeZone4);
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime31 = timeOfDay28.toDateTime((org.joda.time.ReadableInstant) instant30);
        org.joda.time.Chronology chronology32 = instant30.getChronology();
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant37 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime38 = timeOfDay35.toDateTime((org.joda.time.ReadableInstant) instant37);
        int[] intArray40 = chronology32.get((org.joda.time.ReadablePartial) timeOfDay35, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(0L, chronology32);
        org.joda.time.TimeOfDay timeOfDay44 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant46 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime47 = timeOfDay44.toDateTime((org.joda.time.ReadableInstant) instant46);
        org.joda.time.Chronology chronology48 = instant46.getChronology();
        org.joda.time.TimeOfDay timeOfDay51 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant53 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime54 = timeOfDay51.toDateTime((org.joda.time.ReadableInstant) instant53);
        int[] intArray56 = chronology48.get((org.joda.time.ReadablePartial) timeOfDay51, (long) (short) -1);
        mutableDateTime41.setChronology(chronology48);
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime(chronology48);
        org.joda.time.DateTimeField dateTimeField59 = chronology48.weekOfWeekyear();
        java.util.Locale locale61 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale62 = locale61.stripExtensions();
        java.util.Locale locale63 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale64 = locale63.stripExtensions();
        java.lang.String str65 = locale61.getDisplayName(locale63);
        java.lang.String str66 = dateTimeField59.getAsText(2022, locale61);
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(timeZone4, locale61);
        java.util.TimeZone timeZone68 = calendar67.getTimeZone();
        java.util.Calendar calendar69 = java.util.Calendar.getInstance(timeZone68);
        int int70 = calendar69.getMinimalDaysInFirstWeek();
        long long71 = calendar69.getTimeInMillis();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+10:00" + "'", str3, "+10:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str21, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u4e2d\u6587" + "'", str22, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645515164702,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=32,SECOND=44,MILLISECOND=702,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str65, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2022" + "'", str66, "2022");
        org.junit.Assert.assertNotNull(calendar67);
// flaky:         org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=1645515164702,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=32,SECOND=44,MILLISECOND=702,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone68);
        org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(calendar69);
// flaky:         org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=1645515164702,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=32,SECOND=44,MILLISECOND=702,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1645515164702L + "'", long71 == 1645515164702L);
    }

    @Test
    public void test11594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11594");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        boolean boolean33 = mutableDateTime16.isEqualNow();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime16.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime36 = property34.set(22);
        org.joda.time.MutableDateTime mutableDateTime38 = property34.add((long) 1);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean45 = interval41.abuts((org.joda.time.ReadableInterval) interval44);
        long long46 = interval44.getStartMillis();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean53 = interval49.abuts((org.joda.time.ReadableInterval) interval52);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Interval interval55 = interval52.withDurationBeforeEnd(readableDuration54);
        org.joda.time.Interval interval56 = interval44.overlap((org.joda.time.ReadableInterval) interval52);
        org.joda.time.Duration duration57 = interval52.toDuration();
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval63 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean64 = interval60.abuts((org.joda.time.ReadableInterval) interval63);
        long long65 = interval63.getStartMillis();
        org.joda.time.Interval interval68 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval71 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean72 = interval68.abuts((org.joda.time.ReadableInterval) interval71);
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Interval interval74 = interval71.withDurationBeforeEnd(readableDuration73);
        org.joda.time.Interval interval75 = interval63.overlap((org.joda.time.ReadableInterval) interval71);
        org.joda.time.Duration duration76 = interval71.toDuration();
        org.joda.time.Duration duration77 = duration76.toDuration();
        boolean boolean78 = duration57.isEqual((org.joda.time.ReadableDuration) duration77);
        org.joda.time.Duration duration79 = duration77.toDuration();
        mutableDateTime38.add((org.joda.time.ReadableDuration) duration77);
        mutableDateTime38.addWeeks((-1645515350));
        mutableDateTime38.addDays(26775814);
        boolean boolean85 = mutableDateTime38.isEqualNow();
        int int86 = mutableDateTime38.getMillisOfDay();
        mutableDateTime38.addWeekyears(217);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime38.setMillisOfSecond(10079);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 10079 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNull(interval56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNull(interval75);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 23000 + "'", int86 == 23000);
    }

    @Test
    public void test11595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11595");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfHalfday();
        long long29 = dateTimeField27.roundHalfFloor(0L);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        int int31 = dateTimeField27.getMaximumShortTextLength(locale30);
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale32.getDisplayName(locale34);
        java.lang.String str37 = locale30.getDisplayLanguage(locale32);
        java.util.Calendar calendar38 = mutableDateTime16.toCalendar(locale32);
        int int39 = calendar38.getWeekYear();
        calendar38.set((int) (byte) -1, (int) (byte) 100, 0, 8, (int) (short) 100);
        calendar38.set((int) (byte) 0, 35, 100, (int) 'a', 2000);
        org.joda.time.TimeOfDay timeOfDay52 = org.joda.time.TimeOfDay.fromCalendarFields(calendar38);
        calendar38.clear();
        int int54 = calendar38.getMinimalDaysInFirstWeek();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, 0);
        java.lang.String str58 = dateTimeZone57.toString();
        java.util.TimeZone timeZone59 = dateTimeZone57.toTimeZone();
        org.joda.time.TimeOfDay timeOfDay62 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant64 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime65 = timeOfDay62.toDateTime((org.joda.time.ReadableInstant) instant64);
        org.joda.time.Chronology chronology66 = instant64.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.clockhourOfHalfday();
        long long69 = dateTimeField67.roundHalfFloor(0L);
        java.util.Locale locale70 = java.util.Locale.TRADITIONAL_CHINESE;
        int int71 = dateTimeField67.getMaximumShortTextLength(locale70);
        java.util.Locale locale72 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale73 = locale72.stripExtensions();
        java.util.Locale locale74 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale75 = locale74.stripExtensions();
        java.lang.String str76 = locale72.getDisplayName(locale74);
        java.lang.String str77 = locale70.getDisplayLanguage(locale72);
        java.util.Calendar calendar78 = java.util.Calendar.getInstance(timeZone59, locale70);
        timeZone59.setRawOffset(20);
        int int81 = timeZone59.getRawOffset();
        int int83 = timeZone59.getOffset((long) 26702386);
        calendar38.setTimeZone(timeZone59);
        timeZone59.setRawOffset(69);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str36, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u6587" + "'", str37, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=69,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+10:00" + "'", str58, "+10:00");
        org.junit.Assert.assertNotNull(timeZone59);
        org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str76, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\u4e2d\u6587" + "'", str77, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar78);
// flaky:         org.junit.Assert.assertEquals(calendar78.toString(), "java.util.GregorianCalendar[time=1645515164760,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=69,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=32,SECOND=44,MILLISECOND=760,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 20 + "'", int81 == 20);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 20 + "'", int83 == 20);
    }

    @Test
    public void test11596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11596");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears(17);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusWeeks(0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHours(0);
        org.joda.time.DateTime dateTime10 = localDateTime4.toDateTime(dateTimeZone9);
        org.joda.time.Instant instant11 = dateTime10.toInstant();
        org.joda.time.Instant instant12 = instant11.toInstant();
        org.joda.time.Instant instant14 = instant11.minus(1645514931076L);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.minusMinutes((-292275054));
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withMinuteOfHour(2);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean28 = interval24.abuts((org.joda.time.ReadableInterval) interval27);
        long long29 = interval27.getStartMillis();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean36 = interval32.abuts((org.joda.time.ReadableInterval) interval35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Interval interval38 = interval35.withDurationBeforeEnd(readableDuration37);
        org.joda.time.Interval interval39 = interval27.overlap((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Duration duration40 = interval35.toDuration();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime21.withDurationAdded((org.joda.time.ReadableDuration) duration40, 112);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean49 = interval45.abuts((org.joda.time.ReadableInterval) interval48);
        long long50 = interval48.getStartMillis();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean57 = interval53.abuts((org.joda.time.ReadableInterval) interval56);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Interval interval59 = interval56.withDurationBeforeEnd(readableDuration58);
        org.joda.time.Interval interval60 = interval48.overlap((org.joda.time.ReadableInterval) interval56);
        org.joda.time.Duration duration61 = interval56.toDuration();
        org.joda.time.Interval interval64 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval67 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean68 = interval64.abuts((org.joda.time.ReadableInterval) interval67);
        long long69 = interval67.getStartMillis();
        org.joda.time.Interval interval72 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval75 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean76 = interval72.abuts((org.joda.time.ReadableInterval) interval75);
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.Interval interval78 = interval75.withDurationBeforeEnd(readableDuration77);
        org.joda.time.Interval interval79 = interval67.overlap((org.joda.time.ReadableInterval) interval75);
        org.joda.time.Duration duration80 = interval75.toDuration();
        org.joda.time.Duration duration81 = duration80.toDuration();
        boolean boolean82 = duration61.isEqual((org.joda.time.ReadableDuration) duration81);
        boolean boolean83 = duration40.isShorterThan((org.joda.time.ReadableDuration) duration61);
        org.joda.time.Instant instant84 = instant14.minus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Instant instant85 = instant14.toInstant();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNull(interval39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNull(interval60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(interval78);
        org.junit.Assert.assertNull(interval79);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertNotNull(instant85);
    }

    @Test
    public void test11597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11597");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        mutableDateTime16.setYear(3);
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone21 = instant20.getZone();
        mutableDateTime16.setZone(dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(dateTimeZone21);
        java.lang.String str25 = dateTimeZone21.getName((long) 'x');
        java.lang.String str27 = dateTimeZone21.getName(19L);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
    }

    @Test
    public void test11598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11598");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime9 = timeOfDay6.toDateTime((org.joda.time.ReadableInstant) instant8);
        org.joda.time.Chronology chronology10 = instant8.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfHalfday();
        long long13 = dateTimeField11.roundHalfFloor(0L);
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        int int15 = dateTimeField11.getMaximumShortTextLength(locale14);
        java.lang.String str16 = locale14.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology3, locale14);
        java.util.Locale locale18 = dateTimeParserBucket17.getLocale();
        java.util.Locale.setDefault(category0, locale18);
        java.util.Locale locale20 = java.util.Locale.getDefault(category0);
        java.lang.String str21 = locale20.toLanguageTag();
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(locale20);
        java.util.Date date23 = calendar22.getTime();
        int int24 = calendar22.getWeeksInWeekYear();
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone28 = instant27.getZone();
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone28);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.weekOfWeekyear();
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone33 = instant32.getZone();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(dateTimeZone33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime37 = dateTime34.withDurationAdded(readableDuration35, (int) (byte) 0);
        org.joda.time.DateTime dateTime39 = dateTime34.minusSeconds((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime41 = dateTime34.minus(readableDuration40);
        org.joda.time.DateTime dateTime43 = dateTime34.minusSeconds((int) (byte) 100);
        int int44 = mutableDateTime29.compareTo((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime29.dayOfMonth();
        mutableDateTime29.setMinuteOfDay(1);
        org.joda.time.TimeOfDay timeOfDay48 = new org.joda.time.TimeOfDay((java.lang.Object) mutableDateTime29);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean52 = interval51.isBeforeNow();
        org.joda.time.Period period53 = interval51.toPeriod();
        java.lang.String str54 = period53.toString();
        org.joda.time.TimeOfDay timeOfDay56 = timeOfDay48.withPeriodAdded((org.joda.time.ReadablePeriod) period53, 1969);
        boolean boolean57 = calendar22.equals((java.lang.Object) 1969);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zh" + "'", str16, "zh");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zh-TW" + "'", str21, "zh-TW");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645515164829,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=32,SECOND=44,MILLISECOND=829,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date23);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Tue Feb 22 17:32:44 GMT+10:00 2022");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 53 + "'", int24 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PT0S" + "'", str54, "PT0S");
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test11599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11599");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, 0);
        java.lang.String str3 = dateTimeZone2.toString();
        java.util.TimeZone timeZone4 = dateTimeZone2.toTimeZone();
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfHalfday();
        long long14 = dateTimeField12.roundHalfFloor(0L);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        int int16 = dateTimeField12.getMaximumShortTextLength(locale15);
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale20 = locale19.stripExtensions();
        java.lang.String str21 = locale17.getDisplayName(locale19);
        java.lang.String str22 = locale15.getDisplayLanguage(locale17);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone4, locale15);
        java.util.TimeZone.setDefault(timeZone4);
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime31 = timeOfDay28.toDateTime((org.joda.time.ReadableInstant) instant30);
        org.joda.time.Chronology chronology32 = instant30.getChronology();
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant37 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime38 = timeOfDay35.toDateTime((org.joda.time.ReadableInstant) instant37);
        int[] intArray40 = chronology32.get((org.joda.time.ReadablePartial) timeOfDay35, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(0L, chronology32);
        org.joda.time.TimeOfDay timeOfDay44 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant46 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime47 = timeOfDay44.toDateTime((org.joda.time.ReadableInstant) instant46);
        org.joda.time.Chronology chronology48 = instant46.getChronology();
        org.joda.time.TimeOfDay timeOfDay51 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant53 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime54 = timeOfDay51.toDateTime((org.joda.time.ReadableInstant) instant53);
        int[] intArray56 = chronology48.get((org.joda.time.ReadablePartial) timeOfDay51, (long) (short) -1);
        mutableDateTime41.setChronology(chronology48);
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime(chronology48);
        org.joda.time.DateTimeField dateTimeField59 = chronology48.weekOfWeekyear();
        java.util.Locale locale61 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale62 = locale61.stripExtensions();
        java.util.Locale locale63 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale64 = locale63.stripExtensions();
        java.lang.String str65 = locale61.getDisplayName(locale63);
        java.lang.String str66 = dateTimeField59.getAsText(2022, locale61);
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(timeZone4, locale61);
        int int69 = timeZone4.getOffset((-62135596799948L));
        int int71 = timeZone4.getOffset((long) 60);
        java.time.ZoneId zoneId72 = timeZone4.toZoneId();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = timeZone4.getDisplayName(false, 794);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 794");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+10:00" + "'", str3, "+10:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str21, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u4e2d\u6587" + "'", str22, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645515164861,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=32,SECOND=44,MILLISECOND=861,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str65, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2022" + "'", str66, "2022");
        org.junit.Assert.assertNotNull(calendar67);
// flaky:         org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=1645515164861,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=32,SECOND=44,MILLISECOND=861,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 36000000 + "'", int69 == 36000000);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 36000000 + "'", int71 == 36000000);
        org.junit.Assert.assertNotNull(zoneId72);
    }

    @Test
    public void test11600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11600");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateMidnight2.toString(dateTimeFormatter5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight2.plusMonths(53);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight2.withDayOfMonth(22);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight2.minus(readableDuration11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.withYear(5);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight12.withWeekyear(49);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.withDayOfYear((-1645515597));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1645515597 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str6, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
    }

    @Test
    public void test11601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11601");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime4 = localTime2.minusMinutes((int) (short) 1);
        org.joda.time.LocalTime localTime6 = localTime2.withMillisOfDay((int) (byte) 1);
        org.joda.time.LocalTime.Property property7 = localTime2.minuteOfHour();
        org.joda.time.Chronology chronology8 = localTime2.getChronology();
        org.joda.time.DurationField durationField9 = durationFieldType0.getField(chronology8);
        long long11 = durationField9.getMillis(86399);
        long long14 = durationField9.add((-1L), 403200097L);
        long long17 = durationField9.add((-62135596799948L), 100);
        int int19 = durationField9.getValue(282L);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 86399L + "'", long11 == 86399L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 403200096L + "'", long14 == 403200096L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-62135596799848L) + "'", long17 == (-62135596799848L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 282 + "'", int19 == 282);
    }

    @Test
    public void test11602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11602");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime8.plusWeeks((int) (byte) -1);
        org.joda.time.DateTime.Property property13 = dateTime8.hourOfDay();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean16 = localDate14.isSupported(dateTimeFieldType15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = localDate14.toDateMidnight(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate14.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property20 = localDate14.yearOfEra();
        org.joda.time.LocalDate localDate22 = localDate14.minusMonths((int) '#');
        int int23 = localDate22.getYearOfCentury();
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone25 = dateMidnight24.getZone();
        org.joda.time.DateTime dateTime26 = localDate22.toDateTimeAtStartOfDay(dateTimeZone25);
        boolean boolean27 = dateTime8.isEqual((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime26.plus(readableDuration28);
        org.joda.time.DateTime dateTime31 = dateTime26.plusHours((-1));
        org.joda.time.DateTime dateTime33 = dateTime31.withMillis((-4928L));
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone35 = dateMidnight34.getZone();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight34.withWeekyear(53);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean44 = interval40.abuts((org.joda.time.ReadableInterval) interval43);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Interval interval46 = interval43.withDurationBeforeEnd(readableDuration45);
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean53 = interval49.abuts((org.joda.time.ReadableInterval) interval52);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Interval interval55 = interval52.withDurationBeforeEnd(readableDuration54);
        org.joda.time.Period period56 = interval52.toPeriod();
        org.joda.time.Interval interval57 = interval43.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period56);
        java.util.Locale.Builder builder58 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder61 = builder58.setExtension('x', "zh");
        boolean boolean62 = period56.equals((java.lang.Object) builder58);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight37.plus((org.joda.time.ReadablePeriod) period56);
        org.joda.time.DateTime dateTime64 = dateTime33.plus((org.joda.time.ReadablePeriod) period56);
        org.joda.time.DateTime dateTime66 = dateTime33.plusSeconds(26942);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 19 + "'", int23 == 19);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
    }

    @Test
    public void test11603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11603");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTime((org.joda.time.ReadableInstant) instant10);
        org.joda.time.Chronology chronology12 = instant10.getChronology();
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime18 = timeOfDay15.toDateTime((org.joda.time.ReadableInstant) instant17);
        int[] intArray20 = chronology12.get((org.joda.time.ReadablePartial) timeOfDay15, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(0L, chronology12);
        java.lang.Object obj22 = mutableDateTime21.clone();
        int int23 = mutableDateTime21.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTime((org.joda.time.ReadableInstant) instant29);
        org.joda.time.Chronology chronology31 = instant29.getChronology();
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime37 = timeOfDay34.toDateTime((org.joda.time.ReadableInstant) instant36);
        int[] intArray39 = chronology31.get((org.joda.time.ReadablePartial) timeOfDay34, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(0L, chronology31);
        mutableDateTime40.setYear(3);
        org.joda.time.Instant instant44 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone45 = instant44.getZone();
        mutableDateTime40.setZone(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone45);
        mutableDateTime21.setZoneRetainFields(dateTimeZone45);
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(604800000L, dateTimeZone45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter3.withZone(dateTimeZone45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter3.withDefaultYear(0);
        org.joda.time.Chronology chronology53 = dateTimeFormatter52.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant54 = org.joda.time.Instant.parse("hours", dateTimeFormatter52);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNull(chronology53);
    }

    @Test
    public void test11604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11604");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.property(dateTimeFieldType3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withMillisOfDay((int) '#');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.weekyear();
        java.util.Date date8 = localDateTime6.toDate();
        java.util.Date date9 = localDateTime6.toDate();
        date9.setMonth((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.fromDateFields(date9);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusWeeks(4522);
        // The following exception was thrown during execution in test generation
        try {
            int int16 = localDateTime12.getValue(1910);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1910");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Tue Feb 22 00:00:00 GMT+10:00 2022");
        org.junit.Assert.assertNotNull(date9);
        org.junit.Assert.assertEquals(date9.toString(), "Tue Nov 22 00:00:00 GMT+10:00 2022");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test11605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11605");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.minuteOfHour();
        java.lang.String str4 = property3.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withPeriodAdded(readablePeriod11, (int) (short) 0);
        int int14 = property3.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime.Property property15 = dateTime10.yearOfEra();
        org.joda.time.DateTime dateTime16 = property15.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTime16.withTime(173, 24909638, 25064301, 26870594);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 173 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test11606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11606");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        int[] intArray16 = chronology8.get((org.joda.time.ReadablePartial) timeOfDay11, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(0L, chronology8);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (-1), chronology8);
        org.joda.time.DateTimeField dateTimeField19 = chronology8.era();
        org.joda.time.DateTimeField dateTimeField20 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology8.weekyear();
        org.joda.time.DateTimeField dateTimeField22 = chronology8.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology8.getZone();
        long long25 = dateTimeZone23.convertUTCToLocal(1645515061474L);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1645515061474L + "'", long25 == 1645515061474L);
    }

    @Test
    public void test11607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11607");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean6 = interval2.abuts((org.joda.time.ReadableInterval) interval5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Interval interval8 = interval5.withDurationBeforeEnd(readableDuration7);
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean15 = interval11.abuts((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Interval interval17 = interval14.withDurationBeforeEnd(readableDuration16);
        org.joda.time.Period period18 = interval14.toPeriod();
        org.joda.time.Interval interval19 = interval5.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period18);
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder20.setExtension('x', "zh");
        boolean boolean24 = period18.equals((java.lang.Object) builder20);
        java.util.Locale.Builder builder25 = builder20.clear();
        java.util.Locale.Builder builder28 = builder20.setExtension('a', "");
        java.util.Locale.Builder builder29 = builder28.clear();
        java.util.Locale.Builder builder30 = builder29.clearExtensions();
        java.util.Locale.Builder builder33 = builder30.setExtension('u', "und");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder35 = builder30.setLanguage("10:11:11.020");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 10:11:11.020 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test11608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11608");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMinutes(35);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra(7);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMinutes(35);
        int int14 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime8.toDateTime(readableInstant15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime8.millisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDateTime8.withHourOfDay(27163491);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27163491 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test11609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11609");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.DateTime dateTime7 = instant4.toDateTimeISO();
        org.joda.time.DateTime dateTime8 = instant4.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime9 = instant4.toMutableDateTimeISO();
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime16 = timeOfDay13.toDateTime((org.joda.time.ReadableInstant) instant15);
        org.joda.time.Chronology chronology17 = instant15.getChronology();
        org.joda.time.TimeOfDay timeOfDay20 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime23 = timeOfDay20.toDateTime((org.joda.time.ReadableInstant) instant22);
        int[] intArray25 = chronology17.get((org.joda.time.ReadablePartial) timeOfDay20, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(0L, chronology17);
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime32 = timeOfDay29.toDateTime((org.joda.time.ReadableInstant) instant31);
        org.joda.time.Chronology chronology33 = instant31.getChronology();
        org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant38 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime39 = timeOfDay36.toDateTime((org.joda.time.ReadableInstant) instant38);
        int[] intArray41 = chronology33.get((org.joda.time.ReadablePartial) timeOfDay36, (long) (short) -1);
        mutableDateTime26.setChronology(chronology33);
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime(chronology33);
        org.joda.time.DateTimeField dateTimeField44 = chronology33.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField45 = chronology33.clockhourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = dateTimeField45.getType();
        boolean boolean47 = instant4.isSupported(dateTimeFieldType46);
        org.joda.time.Instant instant48 = instant4.toInstant();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(instant48);
    }

    @Test
    public void test11610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11610");
        java.util.Date date3 = new java.util.Date(7, 100, 1);
        int int4 = date3.getHours();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromDateFields(date3);
        date3.setMonth((int) (byte) 100);
        int int8 = date3.getYear();
        int int9 = date3.getMinutes();
        org.junit.Assert.assertEquals(date3.toString(), "Tue May 01 00:00:00 GMT+10:00 1923");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 23 + "'", int8 == 23);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test11611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11611");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        org.joda.time.MutableDateTime mutableDateTime20 = property19.roundHalfEven();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.yearOfEra();
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime28 = timeOfDay25.toDateTime((org.joda.time.ReadableInstant) instant27);
        org.joda.time.Chronology chronology29 = instant27.getChronology();
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime35 = timeOfDay32.toDateTime((org.joda.time.ReadableInstant) instant34);
        int[] intArray37 = chronology29.get((org.joda.time.ReadablePartial) timeOfDay32, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(0L, chronology29);
        mutableDateTime38.setYear(3);
        org.joda.time.Instant instant42 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone43 = instant42.getZone();
        mutableDateTime38.setZone(dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(dateTimeZone43);
        mutableDateTime20.setZone(dateTimeZone43);
        boolean boolean47 = dateTimeZone43.isFixed();
        long long49 = dateTimeZone43.previousTransition((-19047L));
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-19047L) + "'", long49 == (-19047L));
    }

    @Test
    public void test11612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11612");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime17 = timeOfDay14.toDateTime((org.joda.time.ReadableInstant) instant16);
        int[] intArray19 = chronology11.get((org.joda.time.ReadablePartial) timeOfDay14, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(0L, chronology11);
        java.lang.Object obj21 = mutableDateTime20.clone();
        int int22 = mutableDateTime20.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Chronology chronology30 = instant28.getChronology();
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime36 = timeOfDay33.toDateTime((org.joda.time.ReadableInstant) instant35);
        int[] intArray38 = chronology30.get((org.joda.time.ReadablePartial) timeOfDay33, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(0L, chronology30);
        mutableDateTime39.setYear(3);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone44 = instant43.getZone();
        mutableDateTime39.setZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone44);
        mutableDateTime20.setZoneRetainFields(dateTimeZone44);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(604800000L, dateTimeZone44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter2.withZone(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTimeFormatter49.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter49.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter51.withZoneUTC();
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone54 = dateMidnight53.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter51.withZone(dateTimeZone54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter51.withZoneUTC();
        org.joda.time.Chronology chronology57 = dateTimeFormatter56.getChronolgy();
        boolean boolean58 = dateTimeFormatter56.isParser();
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNull(chronology57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test11613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11613");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = property4.getFieldType();
        org.joda.time.DurationField durationField6 = property4.getDurationField();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        org.joda.time.Chronology chronology14 = instant12.getChronology();
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime20 = timeOfDay17.toDateTime((org.joda.time.ReadableInstant) instant19);
        int[] intArray22 = chronology14.get((org.joda.time.ReadablePartial) timeOfDay17, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(0L, chronology14);
        int int24 = mutableDateTime23.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime23.property(dateTimeFieldType25);
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime32 = timeOfDay29.toDateTime((org.joda.time.ReadableInstant) instant31);
        org.joda.time.Chronology chronology33 = instant31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.clockhourOfHalfday();
        long long36 = dateTimeField34.roundHalfFloor(0L);
        java.util.Locale locale37 = java.util.Locale.TRADITIONAL_CHINESE;
        int int38 = dateTimeField34.getMaximumShortTextLength(locale37);
        java.util.Locale locale39 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale40 = locale39.stripExtensions();
        java.util.Locale locale41 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale42 = locale41.stripExtensions();
        java.lang.String str43 = locale39.getDisplayName(locale41);
        java.lang.String str44 = locale37.getDisplayLanguage(locale39);
        java.util.Calendar calendar45 = mutableDateTime23.toCalendar(locale39);
        java.lang.String str46 = property4.getAsShortText(locale39);
        java.lang.String str47 = locale39.getDisplayName();
        java.lang.String str50 = nameProvider0.getName(locale39, "0", "\u5341\u4e8c\u6708");
        java.util.Locale locale54 = new java.util.Locale("29 Apr 1912 14:00:00 GMT", "1970-01-18", "1970-01-01T01:57:00.002Z");
        java.lang.String str57 = nameProvider0.getName(locale54, "2022-02-22T07:26:22.963Z", "millis");
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.TimeOfDay timeOfDay62 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant64 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime65 = timeOfDay62.toDateTime((org.joda.time.ReadableInstant) instant64);
        org.joda.time.Chronology chronology66 = instant64.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.clockhourOfHalfday();
        long long69 = dateTimeField67.roundHalfFloor(0L);
        java.util.Locale locale70 = java.util.Locale.TRADITIONAL_CHINESE;
        int int71 = dateTimeField67.getMaximumShortTextLength(locale70);
        java.lang.String str72 = locale70.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology59, locale70);
        java.lang.String str74 = locale70.getDisplayVariant();
        java.lang.String str76 = locale70.getUnicodeLocaleType("11");
        java.lang.String str77 = locale70.getDisplayLanguage();
        java.lang.String str80 = nameProvider0.getName(locale70, "und", "1969-12-31T00:00:00.000Z");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale82 = java.util.Locale.getDefault();
        java.lang.String str85 = nameProvider0.getName(locale82, "2022-02-22T06:53:41.925", "2022-02-22T07:40:46.387Z");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str43, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u4e2d\u6587" + "'", str44, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar45);
        org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1" + "'", str46, "1");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Chinese (Taiwan)" + "'", str47, "Chinese (Taiwan)");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertEquals(locale54.toString(), "29 apr 1912 14:00:00 gmt_1970-01-18_1970-01-01T01:57:00.002Z");
        org.junit.Assert.assertNull(str57);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "zh" + "'", str72, "zh");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Chinese" + "'", str77, "Chinese");
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(locale82);
// flaky:         org.junit.Assert.assertEquals(locale82.toString(), "\u53f0\u7063");
        org.junit.Assert.assertNull(str85);
    }

    @Test
    public void test11614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11614");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfHalfday();
        long long11 = dateTimeField9.roundHalfFloor(0L);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        int int13 = dateTimeField9.getMaximumShortTextLength(locale12);
        java.lang.String str14 = locale12.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology1, locale12);
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        long long19 = dateTimeParserBucket15.computeMillis(true, "");
        dateTimeParserBucket15.setPivotYear((java.lang.Integer) 7359830);
        org.joda.time.Chronology chronology22 = dateTimeParserBucket15.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.weekyears();
        long long25 = durationField23.getMillis((int) (byte) 100);
        long long27 = durationField23.getMillis((long) 229);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3155695200000L + "'", long25 == 3155695200000L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 7226542008000L + "'", long27 == 7226542008000L);
    }

    @Test
    public void test11615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11615");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        int[] intArray16 = chronology8.get((org.joda.time.ReadablePartial) timeOfDay11, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(0L, chronology8);
        org.joda.time.TimeOfDay timeOfDay20 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime23 = timeOfDay20.toDateTime((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Chronology chronology24 = instant22.getChronology();
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTime((org.joda.time.ReadableInstant) instant29);
        int[] intArray32 = chronology24.get((org.joda.time.ReadablePartial) timeOfDay27, (long) (short) -1);
        mutableDateTime17.setChronology(chronology24);
        boolean boolean34 = mutableDateTime17.isEqualNow();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime17.secondOfDay();
        org.joda.time.DateTime dateTime36 = mutableDateTime17.toDateTimeISO();
        org.joda.time.DateTime dateTime38 = dateTime36.withMillis((long) 1970);
        org.joda.time.DateTime dateTime40 = dateTime36.plusYears(24);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DateTime dateTime43 = dateTime36.withFieldAdded(durationFieldType41, 21);
        org.joda.time.Chronology chronology44 = dateTime36.getChronology();
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.fromMillisOfDay((long) 'u', chronology44);
        int int46 = localTime45.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 117 + "'", int46 == 117);
    }

    @Test
    public void test11616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11616");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.property(dateTimeFieldType3);
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = property4.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.withWeekyear(2);
        org.joda.time.DateMidnight.Property property14 = dateMidnight9.weekOfWeekyear();
        java.lang.String str15 = property14.getAsString();
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale17 = locale16.stripExtensions();
        int int18 = property14.getMaximumTextLength(locale16);
        org.joda.time.DateMidnight dateMidnight19 = property14.roundHalfCeilingCopy();
        int int20 = property14.getMinimumValueOverall();
        org.joda.time.DateMidnight dateMidnight21 = property14.roundHalfEvenCopy();
        boolean boolean22 = localDateTime6.equals((java.lang.Object) dateMidnight21);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean29 = interval25.abuts((org.joda.time.ReadableInterval) interval28);
        long long30 = interval28.getStartMillis();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean37 = interval33.abuts((org.joda.time.ReadableInterval) interval36);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Interval interval39 = interval36.withDurationBeforeEnd(readableDuration38);
        org.joda.time.Interval interval40 = interval28.overlap((org.joda.time.ReadableInterval) interval36);
        org.joda.time.Duration duration41 = interval36.toDuration();
        org.joda.time.Duration duration42 = duration41.toDuration();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean49 = interval45.abuts((org.joda.time.ReadableInterval) interval48);
        long long50 = interval48.getStartMillis();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean57 = interval53.abuts((org.joda.time.ReadableInterval) interval56);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Interval interval59 = interval56.withDurationBeforeEnd(readableDuration58);
        org.joda.time.Interval interval60 = interval48.overlap((org.joda.time.ReadableInterval) interval56);
        org.joda.time.Duration duration61 = interval56.toDuration();
        long long62 = duration61.getMillis();
        int int63 = duration41.compareTo((org.joda.time.ReadableDuration) duration61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight21.plus((org.joda.time.ReadableDuration) duration61);
        org.joda.time.ReadablePartial readablePartial65 = null;
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight64.withFields(readablePartial65);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNull(interval40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNull(interval60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateMidnight66);
    }

    @Test
    public void test11617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11617");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusMonths((int) (short) -1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean6 = localDate4.isSupported(dateTimeFieldType5);
        int int7 = yearMonthDay1.indexOf(dateTimeFieldType5);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        org.joda.time.DateTime dateTime11 = yearMonthDay1.toDateTimeAtCurrentTime(dateTimeZone10);
        java.lang.String str13 = dateTimeZone10.getName((long) 11);
        long long16 = dateTimeZone10.convertLocalToUTC((long) 2, false);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone19 = instant18.getZone();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withHourOfDay(20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight25.withWeekyear(2);
        org.joda.time.DateMidnight.Property property30 = dateMidnight25.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight25.withYearOfCentury(1);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean36 = interval35.isBeforeNow();
        org.joda.time.Period period37 = interval35.toPeriod();
        java.lang.String str38 = period37.toString();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight25.withPeriodAdded((org.joda.time.ReadablePeriod) period37, (int) (byte) 0);
        org.joda.time.DateTime dateTime42 = dateTime22.withPeriodAdded((org.joda.time.ReadablePeriod) period37, 26722694);
        int int43 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.LocalDate localDate44 = org.joda.time.LocalDate.now(dateTimeZone10);
        int int46 = dateTimeZone10.getStandardOffset(16140297600000L);
        long long48 = dateTimeZone10.convertUTCToLocal(363L);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2L + "'", long16 == 2L);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT0S" + "'", str38, "PT0S");
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 363L + "'", long48 == 363L);
    }

    @Test
    public void test11618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11618");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        org.joda.time.MutableDateTime mutableDateTime20 = property19.roundHalfEven();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.yearOfEra();
        java.lang.Object obj22 = mutableDateTime20.clone();
        mutableDateTime20.setMillis((long) 2922730);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime20.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime27 = property25.add((-36000001L));
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
    }

    @Test
    public void test11619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11619");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = property3.getFieldType();
        org.joda.time.DurationField durationField5 = property3.getDurationField();
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withDurationAdded(readableDuration10, (int) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime9.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusDays(2);
        org.joda.time.DateTime dateTime20 = dateTime16.withHourOfDay(22);
        int int21 = property3.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime23 = dateTime16.plusWeeks((int) (short) 10);
        org.joda.time.DateTime.Property property24 = dateTime16.yearOfEra();
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime31 = timeOfDay28.toDateTime((org.joda.time.ReadableInstant) instant30);
        org.joda.time.Chronology chronology32 = instant30.getChronology();
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant37 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime38 = timeOfDay35.toDateTime((org.joda.time.ReadableInstant) instant37);
        int[] intArray40 = chronology32.get((org.joda.time.ReadablePartial) timeOfDay35, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(0L, chronology32);
        org.joda.time.TimeOfDay timeOfDay44 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant46 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime47 = timeOfDay44.toDateTime((org.joda.time.ReadableInstant) instant46);
        org.joda.time.Chronology chronology48 = instant46.getChronology();
        org.joda.time.TimeOfDay timeOfDay51 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant53 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime54 = timeOfDay51.toDateTime((org.joda.time.ReadableInstant) instant53);
        int[] intArray56 = chronology48.get((org.joda.time.ReadablePartial) timeOfDay51, (long) (short) -1);
        mutableDateTime41.setChronology(chronology48);
        boolean boolean58 = mutableDateTime41.isEqualNow();
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime41.secondOfDay();
        org.joda.time.TimeOfDay timeOfDay64 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant66 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime67 = timeOfDay64.toDateTime((org.joda.time.ReadableInstant) instant66);
        org.joda.time.Chronology chronology68 = instant66.getChronology();
        org.joda.time.TimeOfDay timeOfDay71 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant73 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime74 = timeOfDay71.toDateTime((org.joda.time.ReadableInstant) instant73);
        int[] intArray76 = chronology68.get((org.joda.time.ReadablePartial) timeOfDay71, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime77 = new org.joda.time.MutableDateTime(0L, chronology68);
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) (-1), chronology68);
        org.joda.time.DateTimeField dateTimeField79 = chronology68.era();
        mutableDateTime41.setChronology(chronology68);
        mutableDateTime41.setDayOfYear(53);
        org.joda.time.MutableDateTime.Property property83 = mutableDateTime41.minuteOfHour();
        int int84 = dateTime16.compareTo((org.joda.time.ReadableInstant) mutableDateTime41);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
    }

    @Test
    public void test11620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11620");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        int int3 = dateMidnight2.getYearOfCentury();
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.minusDays((-1645515262));
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight2.withDurationAdded((long) 979, 1912);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 70 + "'", int3 == 70);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight8);
    }

    @Test
    public void test11621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11621");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime8.plusWeeks((int) (byte) -1);
        org.joda.time.DateTime.Property property13 = dateTime8.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime20 = timeOfDay17.toDateTime((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Chronology chronology21 = instant19.getChronology();
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime27 = timeOfDay24.toDateTime((org.joda.time.ReadableInstant) instant26);
        int[] intArray29 = chronology21.get((org.joda.time.ReadablePartial) timeOfDay24, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(0L, chronology21);
        org.joda.time.DurationField durationField31 = chronology21.weeks();
        org.joda.time.DateTimeField dateTimeField32 = chronology21.weekOfWeekyear();
        org.joda.time.DateTime dateTime33 = dateTime8.toDateTime(chronology21);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, 0);
        java.lang.String str37 = dateTimeZone36.toString();
        boolean boolean38 = dateTimeZone36.isFixed();
        org.joda.time.DateTime dateTime39 = dateTime8.withZoneRetainFields(dateTimeZone36);
        java.lang.String str40 = dateTime8.toString();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+10:00" + "'", str37, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-22T07:32:44.390Z" + "'", str40, "2022-02-22T07:32:44.390Z");
    }

    @Test
    public void test11622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11622");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime6 = property5.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property5.roundFloor();
        java.lang.Object obj8 = mutableDateTime7.clone();
        mutableDateTime7.setMillisOfDay(0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "1970-01-01T00:00:00.000Z");
    }

    @Test
    public void test11623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11623");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay.Property property4 = yearMonthDay3.monthOfYear();
        org.joda.time.DateTime dateTime5 = yearMonthDay3.toDateTimeAtMidnight();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusWeeks((int) (short) 100);
        org.joda.time.DateMidnight.Property property14 = dateMidnight11.dayOfYear();
        boolean boolean15 = dateTime5.isEqual((org.joda.time.ReadableInstant) dateMidnight11);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int17 = dateMidnight11.get(dateTimeFieldType16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight11.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight20 = property18.addToCopy(341);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight20);
    }

    @Test
    public void test11624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11624");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime4 = dateTime2.withMillis((long) (short) -1);
        org.joda.time.DateTime.Property property5 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime6 = property5.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime8 = dateTime6.withCenturyOfEra(47640000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 47640000 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test11625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11625");
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.weeks();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.secondOfMinute();
        org.joda.time.DurationField durationField7 = chronology4.eras();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(5222, 26881, 27070, chronology4);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26881 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test11626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11626");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.weekOfWeekyear();
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withDurationAdded(readableDuration10, (int) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime9.minusSeconds((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime9.minus(readableDuration15);
        org.joda.time.DateTime dateTime18 = dateTime9.minusSeconds((int) (byte) 100);
        int int19 = mutableDateTime4.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime4.dayOfMonth();
        mutableDateTime4.setMinuteOfDay(1);
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay((java.lang.Object) mutableDateTime4);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean27 = interval26.isBeforeNow();
        org.joda.time.Period period28 = interval26.toPeriod();
        java.lang.String str29 = period28.toString();
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay23.withPeriodAdded((org.joda.time.ReadablePeriod) period28, 1969);
        org.joda.time.DateTimeZone dateTimeZone33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight34.withDurationAdded((long) 2, 100);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean44 = interval40.abuts((org.joda.time.ReadableInterval) interval43);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Interval interval46 = interval43.withDurationBeforeEnd(readableDuration45);
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean53 = interval49.abuts((org.joda.time.ReadableInterval) interval52);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Interval interval55 = interval52.withDurationBeforeEnd(readableDuration54);
        org.joda.time.Period period56 = interval52.toPeriod();
        org.joda.time.Interval interval57 = interval43.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period56);
        java.util.Locale.Builder builder58 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder61 = builder58.setExtension('x', "zh");
        boolean boolean62 = period56.equals((java.lang.Object) builder58);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight34.withPeriodAdded((org.joda.time.ReadablePeriod) period56, 2022);
        org.joda.time.TimeOfDay timeOfDay66 = timeOfDay31.withPeriodAdded((org.joda.time.ReadablePeriod) period56, (-46800000));
        org.joda.time.TimeOfDay timeOfDay68 = timeOfDay66.minusSeconds(428);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType70 = timeOfDay66.getFieldType(2577);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2577");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT0S" + "'", str29, "PT0S");
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(timeOfDay66);
        org.junit.Assert.assertNotNull(timeOfDay68);
    }

    @Test
    public void test11627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11627");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean6 = interval2.abuts((org.joda.time.ReadableInterval) interval5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Interval interval8 = interval5.withDurationBeforeEnd(readableDuration7);
        org.joda.time.Period period9 = interval5.toPeriod();
        boolean boolean11 = interval5.isAfter((long) 454);
        boolean boolean12 = interval5.isBeforeNow();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusMinutes(35);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.plusMinutes((int) (byte) -1);
        org.joda.time.Chronology chronology20 = localDateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.centuryOfEra();
        org.joda.time.Interval interval22 = interval5.withChronology(chronology20);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(interval22);
    }

    @Test
    public void test11628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11628");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.minusDays(69);
        org.joda.time.LocalDate localDate4 = localDate2.withWeekyear(26995040);
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
    }

    @Test
    public void test11629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11629");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.DateTime dateTime7 = instant4.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.weekOfWeekyear();
        org.joda.time.DateTime dateTime9 = dateTime7.withEarlierOffsetAtOverlap();
        int int10 = dateTime7.getSecondOfMinute();
        org.joda.time.DateTime dateTime12 = dateTime7.minus((-1645515480L));
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 59 + "'", int10 == 59);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test11630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11630");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfHalfday();
        long long11 = dateTimeField9.roundHalfFloor(0L);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        int int13 = dateTimeField9.getMaximumShortTextLength(locale12);
        java.lang.String str14 = locale12.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology1, locale12);
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        dateTimeParserBucket15.setOffset((java.lang.Integer) 22);
        java.util.Locale locale19 = dateTimeParserBucket15.getLocale();
        java.lang.Object obj20 = dateTimeParserBucket15.saveState();
        long long22 = dateTimeParserBucket15.computeMillis(false);
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Chronology chronology30 = instant28.getChronology();
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime36 = timeOfDay33.toDateTime((org.joda.time.ReadableInstant) instant35);
        int[] intArray38 = chronology30.get((org.joda.time.ReadablePartial) timeOfDay33, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(0L, chronology30);
        int int40 = mutableDateTime39.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime39.property(dateTimeFieldType41);
        org.joda.time.MutableDateTime mutableDateTime43 = property42.roundHalfEven();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.yearOfEra();
        org.joda.time.TimeOfDay timeOfDay48 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant50 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime51 = timeOfDay48.toDateTime((org.joda.time.ReadableInstant) instant50);
        org.joda.time.Chronology chronology52 = instant50.getChronology();
        org.joda.time.TimeOfDay timeOfDay55 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant57 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime58 = timeOfDay55.toDateTime((org.joda.time.ReadableInstant) instant57);
        int[] intArray60 = chronology52.get((org.joda.time.ReadablePartial) timeOfDay55, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime(0L, chronology52);
        mutableDateTime61.setYear(3);
        org.joda.time.Instant instant65 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone66 = instant65.getZone();
        mutableDateTime61.setZone(dateTimeZone66);
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight(dateTimeZone66);
        mutableDateTime43.setZone(dateTimeZone66);
        org.joda.time.TimeOfDay timeOfDay70 = new org.joda.time.TimeOfDay(dateTimeZone66);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = timeOfDay70.getFieldType(0);
        java.util.Locale locale74 = null;
        dateTimeParserBucket15.saveField(dateTimeFieldType72, "1969-12-07", locale74);
        // The following exception was thrown during execution in test generation
        try {
            long long78 = dateTimeParserBucket15.computeMillis(true, "Wed");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Cannot parse \"Wed\": Value \"1969-12-07\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-23L) + "'", long22 == (-23L));
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
    }

    @Test
    public void test11631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11631");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withDayOfYear(22);
        org.joda.time.DateMidnight.Property property7 = dateMidnight6.era();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.withWeekyear(2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = dateMidnight10.toString(dateTimeFormatter13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight10.plusMonths(53);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight10.withDayOfMonth(22);
        int int19 = dateMidnight18.getSecondOfDay();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime23 = localTime21.minusMinutes((int) (short) 1);
        int int24 = localTime21.getMillisOfDay();
        org.joda.time.LocalTime localTime26 = localTime21.plusSeconds(100);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime34 = timeOfDay31.toDateTime((org.joda.time.ReadableInstant) instant33);
        org.joda.time.Chronology chronology35 = instant33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.clockhourOfHalfday();
        long long38 = dateTimeField36.roundHalfFloor(0L);
        java.util.Locale locale39 = java.util.Locale.TRADITIONAL_CHINESE;
        int int40 = dateTimeField36.getMaximumShortTextLength(locale39);
        java.lang.String str41 = locale39.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology28, locale39);
        java.util.Locale locale43 = dateTimeParserBucket42.getLocale();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.util.Locale locale46 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale47 = locale46.stripExtensions();
        dateTimeParserBucket42.saveField(dateTimeFieldType44, "zh", locale46);
        org.joda.time.LocalTime.Property property49 = localTime21.property(dateTimeFieldType44);
        org.joda.time.DateMidnight.Property property50 = dateMidnight18.property(dateTimeFieldType44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight52 = dateMidnight6.withField(dateTimeFieldType44, (-1645515478));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1645515478 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str14, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 35 + "'", int24 == 35);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "zh" + "'", str41, "zh");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test11632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11632");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = instant0.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime4 = instant0.toMutableDateTime();
        mutableDateTime4.addWeeks(26725);
        mutableDateTime4.add(0L);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
    }

    @Test
    public void test11633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11633");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        mutableDateTime16.setMinuteOfDay(8);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone37 = instant36.getZone();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight40.withWeekyear(2);
        org.joda.time.DateTimeZone dateTimeZone45 = dateMidnight40.getZone();
        long long47 = dateTimeZone37.getMillisKeepLocal(dateTimeZone45, 10L);
        mutableDateTime16.setZoneRetainFields(dateTimeZone37);
        long long51 = dateTimeZone37.convertLocalToUTC(1L, true);
        org.joda.time.TimeOfDay timeOfDay52 = new org.joda.time.TimeOfDay(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
    }

    @Test
    public void test11634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11634");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate7 = localDate0.plusMonths((int) (short) 100);
        org.joda.time.LocalDate localDate9 = localDate7.withWeekyear((int) (byte) 100);
        int int10 = localDate7.getDayOfWeek();
        org.joda.time.LocalDate.Property property11 = localDate7.era();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test11635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11635");
        java.util.Date date1 = new java.util.Date((long) 11);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromDateFields(date1);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusMinutes((-292275054));
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(2);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withDurationAdded(readableDuration10, 26680936);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean19 = interval15.abuts((org.joda.time.ReadableInterval) interval18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Interval interval21 = interval18.withDurationBeforeEnd(readableDuration20);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean28 = interval24.abuts((org.joda.time.ReadableInterval) interval27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Interval interval30 = interval27.withDurationBeforeEnd(readableDuration29);
        org.joda.time.Period period31 = interval27.toPeriod();
        org.joda.time.Interval interval32 = interval18.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime12.withPeriodAdded((org.joda.time.ReadablePeriod) period31, 0);
        int int35 = period31.size();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime2.plus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusMillis((-1645515630));
        org.junit.Assert.assertEquals(date1.toString(), "Thu Jan 01 10:00:00 GMT+10:00 1970");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 8 + "'", int35 == 8);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
    }

    @Test
    public void test11636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11636");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime.Property property2 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime3 = property2.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime5 = property2.setCopy(1);
        org.joda.time.LocalTime.Property property6 = localTime5.hourOfDay();
        org.joda.time.LocalTime localTime8 = property6.addCopy(4519481543L);
        org.joda.time.LocalTime localTime9 = property6.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime10 = property6.getLocalTime();
        org.joda.time.LocalTime localTime11 = property6.roundFloorCopy();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test11637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11637");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime17 = timeOfDay14.toDateTime((org.joda.time.ReadableInstant) instant16);
        int[] intArray19 = chronology11.get((org.joda.time.ReadablePartial) timeOfDay14, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(0L, chronology11);
        java.lang.Object obj21 = mutableDateTime20.clone();
        int int22 = mutableDateTime20.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Chronology chronology30 = instant28.getChronology();
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime36 = timeOfDay33.toDateTime((org.joda.time.ReadableInstant) instant35);
        int[] intArray38 = chronology30.get((org.joda.time.ReadablePartial) timeOfDay33, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(0L, chronology30);
        mutableDateTime39.setYear(3);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone44 = instant43.getZone();
        mutableDateTime39.setZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone44);
        mutableDateTime20.setZoneRetainFields(dateTimeZone44);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(604800000L, dateTimeZone44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter2.withZone(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTimeFormatter49.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter49.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter49.withPivotYear(1);
        org.joda.time.Instant instant54 = new org.joda.time.Instant();
        org.joda.time.Instant instant56 = instant54.withMillis((long) (byte) 100);
        org.joda.time.Instant instant57 = instant54.toInstant();
        org.joda.time.DateTime dateTime58 = instant57.toDateTimeISO();
        org.joda.time.TimeOfDay timeOfDay61 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant63 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime64 = timeOfDay61.toDateTime((org.joda.time.ReadableInstant) instant63);
        org.joda.time.Chronology chronology65 = instant63.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.clockhourOfHalfday();
        org.joda.time.DurationField durationField67 = chronology65.eras();
        org.joda.time.DateTimeField dateTimeField68 = chronology65.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone69 = chronology65.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone69);
        org.joda.time.TimeOfDay timeOfDay71 = new org.joda.time.TimeOfDay(dateTimeZone69);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime((java.lang.Object) instant57, dateTimeZone69);
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime(dateTimeZone69);
        long long75 = dateTimeZone69.nextTransition((long) 26688);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter53.withZone(dateTimeZone69);
        org.joda.time.Chronology chronology77 = dateTimeFormatter76.getChronology();
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 26688L + "'", long75 == 26688L);
        org.junit.Assert.assertNotNull(dateTimeFormatter76);
        org.junit.Assert.assertNull(chronology77);
    }

    @Test
    public void test11638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11638");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate0.plusMonths((-1));
        org.joda.time.LocalDate.Property property7 = localDate6.era();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.LocalDate localDate10 = property7.addWrapFieldToCopy((-1));
        org.joda.time.LocalDate localDate11 = property7.roundHalfCeilingCopy();
        int[] intArray12 = localDate11.getValues();
        org.joda.time.LocalDate.Property property13 = localDate11.year();
        org.joda.time.LocalDate.Property property14 = localDate11.year();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean17 = localDate15.isSupported(dateTimeFieldType16);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = localDate15.toDateMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = localDate15.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property21 = localDate15.yearOfEra();
        org.joda.time.LocalDate localDate23 = localDate15.minusMonths((int) '#');
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean30 = interval26.abuts((org.joda.time.ReadableInterval) interval29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Interval interval32 = interval29.withDurationBeforeEnd(readableDuration31);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean39 = interval35.abuts((org.joda.time.ReadableInterval) interval38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Interval interval41 = interval38.withDurationBeforeEnd(readableDuration40);
        org.joda.time.Period period42 = interval38.toPeriod();
        org.joda.time.Interval interval43 = interval29.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period42);
        java.util.Locale.Builder builder44 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder47 = builder44.setExtension('x', "zh");
        boolean boolean48 = period42.equals((java.lang.Object) builder44);
        org.joda.time.LocalDate localDate49 = localDate15.plus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, 0);
        java.lang.String str53 = dateTimeZone52.toString();
        boolean boolean54 = dateTimeZone52.isFixed();
        org.joda.time.Interval interval55 = localDate15.toInterval(dateTimeZone52);
        org.joda.time.YearMonthDay yearMonthDay56 = new org.joda.time.YearMonthDay(dateTimeZone52);
        org.joda.time.DateTime dateTime57 = org.joda.time.DateTime.now(dateTimeZone52);
        org.joda.time.DateTime dateTime58 = localDate11.toDateTimeAtCurrentTime(dateTimeZone52);
        org.joda.time.DateTime dateTime60 = dateTime58.plusMinutes(36000000);
        org.joda.time.DateTime dateTime62 = dateTime60.withYearOfEra(27390952);
        org.joda.time.DateTime dateTime64 = dateTime60.plusMonths(7378498);
        int int65 = dateTime60.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[1, 1, 1]");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+10:00" + "'", str53, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 32 + "'", int65 == 32);
    }

    @Test
    public void test11639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11639");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime17 = timeOfDay14.toDateTime((org.joda.time.ReadableInstant) instant16);
        int[] intArray19 = chronology11.get((org.joda.time.ReadablePartial) timeOfDay14, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(0L, chronology11);
        java.lang.Object obj21 = mutableDateTime20.clone();
        int int22 = mutableDateTime20.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Chronology chronology30 = instant28.getChronology();
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime36 = timeOfDay33.toDateTime((org.joda.time.ReadableInstant) instant35);
        int[] intArray38 = chronology30.get((org.joda.time.ReadablePartial) timeOfDay33, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(0L, chronology30);
        mutableDateTime39.setYear(3);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone44 = instant43.getZone();
        mutableDateTime39.setZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone44);
        mutableDateTime20.setZoneRetainFields(dateTimeZone44);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(604800000L, dateTimeZone44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter2.withZone(dateTimeZone44);
        int int50 = dateTimeFormatter49.getDefaultYear();
        boolean boolean51 = dateTimeFormatter49.isOffsetParsed();
        java.util.Locale locale52 = dateTimeFormatter49.getLocale();
        int int53 = dateTimeFormatter49.getDefaultYear();
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2000 + "'", int50 == 2000);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNull(locale52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2000 + "'", int53 == 2000);
    }

    @Test
    public void test11640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11640");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusMinutes((-292275054));
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMinuteOfHour(2);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withDurationAdded(readableDuration7, 26680936);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plusMonths(1969);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMillisOfSecond(180);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.secondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test11641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11641");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate0.minusMonths((int) (short) 10);
        int int7 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate.Property property8 = localDate0.year();
        org.joda.time.LocalDate localDate9 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate11 = localDate9.plusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime13 = localDate11.toDateTimeAtMidnight(dateTimeZone12);
        int int14 = localDate11.getYear();
        int int15 = localDate11.getMonthOfYear();
        org.joda.time.LocalDate localDate17 = localDate11.plusYears(50);
        int int18 = localDate17.getDayOfWeek();
        org.joda.time.DateMidnight dateMidnight19 = localDate17.toDateMidnight();
        org.joda.time.DateTime dateTime20 = localDate17.toDateTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 5 + "'", int18 == 5);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test11642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11642");
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime7 = localTime5.minusMinutes((int) (short) 1);
        int int8 = localTime5.getMillisOfDay();
        org.joda.time.LocalTime localTime10 = localTime5.plusSeconds(100);
        org.joda.time.LocalTime localTime12 = localTime5.minusMillis(444);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight15.withDurationAdded((long) 2, 100);
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay21.withSecondOfMinute((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight18.withFields((org.joda.time.ReadablePartial) timeOfDay23);
        org.joda.time.Interval interval25 = dateMidnight24.toInterval();
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone29 = instant28.getZone();
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone29);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.weekOfWeekyear();
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone34 = instant33.getZone();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.DateTime dateTime38 = dateTime35.withDurationAdded(readableDuration36, (int) (byte) 0);
        org.joda.time.DateTime dateTime40 = dateTime35.minusSeconds((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime42 = dateTime35.minus(readableDuration41);
        org.joda.time.DateTime dateTime44 = dateTime35.minusSeconds((int) (byte) 100);
        int int45 = mutableDateTime30.compareTo((org.joda.time.ReadableInstant) dateTime44);
        int int46 = mutableDateTime30.getDayOfWeek();
        boolean boolean47 = dateMidnight24.isEqual((org.joda.time.ReadableInstant) mutableDateTime30);
        boolean boolean48 = localTime5.equals((java.lang.Object) dateMidnight24);
        org.joda.time.LocalTime.Property property49 = localTime5.secondOfMinute();
        org.joda.time.Chronology chronology50 = localTime5.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay51 = new org.joda.time.TimeOfDay(3, 26874435, (int) (short) 100, 27126, chronology50);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26874435 for minuteOfHour must not be larger than 59");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 35 + "'", int8 == 35);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(chronology50);
    }

    @Test
    public void test11643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11643");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime16.yearOfEra();
        org.joda.time.DurationField durationField19 = property18.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime20 = property18.roundCeiling();
        org.joda.time.DurationField durationField21 = property18.getDurationField();
        long long24 = durationField21.getValueAsLong((long) 26, 41731200000L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNull(durationField19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test11644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11644");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfHalfday();
        long long11 = dateTimeField9.roundHalfFloor(0L);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        int int13 = dateTimeField9.getMaximumShortTextLength(locale12);
        java.lang.String str14 = locale12.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology1, locale12);
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        long long19 = dateTimeParserBucket15.computeMillis(true, "");
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        int[] intArray23 = timeOfDay22.getValues();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay26.minusMinutes((int) '4');
        int int32 = timeOfDay22.compareTo((org.joda.time.ReadablePartial) timeOfDay26);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay22.minusMinutes((int) (short) -1);
        int int35 = timeOfDay34.size();
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime39 = localTime37.minusMinutes((int) (short) 1);
        int int40 = localTime37.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight43.withDurationAdded((long) 2, 100);
        org.joda.time.TimeOfDay timeOfDay49 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay51 = timeOfDay49.withSecondOfMinute((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight46.withFields((org.joda.time.ReadablePartial) timeOfDay51);
        boolean boolean53 = localTime37.equals((java.lang.Object) timeOfDay51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int55 = localTime37.get(dateTimeFieldType54);
        boolean boolean56 = timeOfDay34.isSupported(dateTimeFieldType54);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.TimeOfDay timeOfDay62 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant64 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime65 = timeOfDay62.toDateTime((org.joda.time.ReadableInstant) instant64);
        org.joda.time.Chronology chronology66 = instant64.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.clockhourOfHalfday();
        long long69 = dateTimeField67.roundHalfFloor(0L);
        java.util.Locale locale70 = java.util.Locale.TRADITIONAL_CHINESE;
        int int71 = dateTimeField67.getMaximumShortTextLength(locale70);
        java.lang.String str72 = locale70.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology59, locale70);
        java.lang.String str74 = locale70.getDisplayVariant();
        java.lang.String str75 = locale70.getDisplayScript();
        org.joda.time.TimeOfDay timeOfDay78 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant80 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime81 = timeOfDay78.toDateTime((org.joda.time.ReadableInstant) instant80);
        org.joda.time.Chronology chronology82 = instant80.getChronology();
        org.joda.time.DateTimeField dateTimeField83 = chronology82.clockhourOfHalfday();
        long long85 = dateTimeField83.roundHalfFloor(0L);
        java.util.Locale locale86 = java.util.Locale.TRADITIONAL_CHINESE;
        int int87 = dateTimeField83.getMaximumShortTextLength(locale86);
        java.lang.String str88 = locale70.getDisplayLanguage(locale86);
        java.lang.String str89 = locale70.getVariant();
        dateTimeParserBucket15.saveField(dateTimeFieldType54, "Tue Apr 30 00:00:00 UTC 1912", locale70);
        java.lang.Integer int91 = dateTimeParserBucket15.getOffsetInteger();
        dateTimeParserBucket15.setOffset((java.lang.Integer) 1108);
        java.lang.Integer int94 = dateTimeParserBucket15.getPivotYear();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "zh" + "'", str72, "zh");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "\u4e2d\u6587" + "'", str88, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNull(int91);
        org.junit.Assert.assertNull(int94);
    }

    @Test
    public void test11645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11645");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.DateTime dateTime6 = timeOfDay2.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay2.minusHours((int) (short) 1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay2.minusMillis(26775814);
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime17 = timeOfDay14.toDateTime((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Chronology chronology18 = instant16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfHalfday();
        org.joda.time.DurationField durationField20 = chronology18.eras();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.dayOfYear();
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime27 = timeOfDay24.toDateTime((org.joda.time.ReadableInstant) instant26);
        org.joda.time.Chronology chronology28 = instant26.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.clockhourOfHalfday();
        long long31 = dateTimeField29.roundHalfFloor(0L);
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        int int33 = dateTimeField29.getMaximumShortTextLength(locale32);
        java.lang.String str34 = locale32.getLanguage();
        int int35 = dateTimeField21.getMaximumTextLength(locale32);
        java.lang.String str36 = timeOfDay2.toString("11", locale32);
        org.joda.time.TimeOfDay.Property property37 = timeOfDay2.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "zh" + "'", str34, "zh");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "11" + "'", str36, "11");
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test11646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11646");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = property4.getFieldType();
        org.joda.time.DurationField durationField6 = property4.getDurationField();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        org.joda.time.Chronology chronology14 = instant12.getChronology();
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime20 = timeOfDay17.toDateTime((org.joda.time.ReadableInstant) instant19);
        int[] intArray22 = chronology14.get((org.joda.time.ReadablePartial) timeOfDay17, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(0L, chronology14);
        int int24 = mutableDateTime23.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime23.property(dateTimeFieldType25);
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime32 = timeOfDay29.toDateTime((org.joda.time.ReadableInstant) instant31);
        org.joda.time.Chronology chronology33 = instant31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.clockhourOfHalfday();
        long long36 = dateTimeField34.roundHalfFloor(0L);
        java.util.Locale locale37 = java.util.Locale.TRADITIONAL_CHINESE;
        int int38 = dateTimeField34.getMaximumShortTextLength(locale37);
        java.util.Locale locale39 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale40 = locale39.stripExtensions();
        java.util.Locale locale41 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale42 = locale41.stripExtensions();
        java.lang.String str43 = locale39.getDisplayName(locale41);
        java.lang.String str44 = locale37.getDisplayLanguage(locale39);
        java.util.Calendar calendar45 = mutableDateTime23.toCalendar(locale39);
        java.lang.String str46 = property4.getAsShortText(locale39);
        java.lang.String str47 = locale39.getDisplayName();
        java.lang.String str50 = nameProvider0.getName(locale39, "0", "\u5341\u4e8c\u6708");
        org.joda.time.TimeOfDay timeOfDay55 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant57 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime58 = timeOfDay55.toDateTime((org.joda.time.ReadableInstant) instant57);
        org.joda.time.Chronology chronology59 = instant57.getChronology();
        org.joda.time.TimeOfDay timeOfDay62 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant64 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime65 = timeOfDay62.toDateTime((org.joda.time.ReadableInstant) instant64);
        int[] intArray67 = chronology59.get((org.joda.time.ReadablePartial) timeOfDay62, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime(0L, chronology59);
        mutableDateTime68.setYear(3);
        org.joda.time.Instant instant72 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone73 = instant72.getZone();
        mutableDateTime68.setZone(dateTimeZone73);
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight(dateTimeZone73);
        org.joda.time.LocalTime localTime76 = new org.joda.time.LocalTime(1L, dateTimeZone73);
        org.joda.time.Chronology chronology77 = localTime76.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.minuteOfHour();
        long long80 = dateTimeField78.roundFloor((-86340000L));
        long long82 = dateTimeField78.roundHalfEven((long) 22);
        java.util.Locale locale86 = new java.util.Locale("Chinese", "10");
        java.lang.String str87 = locale86.getDisplayScript();
        java.lang.String str88 = locale86.getDisplayName();
        java.lang.String str89 = dateTimeField78.getAsText(25, locale86);
        java.lang.String str92 = nameProvider0.getName(locale86, "07:25:03.592", "java.util.GregorianCalendar[time=1645514908286,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=28,SECOND=28,MILLISECOND=286,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str43, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u4e2d\u6587" + "'", str44, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar45);
        org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1" + "'", str46, "1");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Chinese (Taiwan)" + "'", str47, "Chinese (Taiwan)");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + (-86340000L) + "'", long80 == (-86340000L));
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertEquals(locale86.toString(), "chinese_10");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "chinese (10)" + "'", str88, "chinese (10)");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "25" + "'", str89, "25");
        org.junit.Assert.assertNull(str92);
    }

    @Test
    public void test11647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11647");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime17 = timeOfDay14.toDateTime((org.joda.time.ReadableInstant) instant16);
        int[] intArray19 = chronology11.get((org.joda.time.ReadablePartial) timeOfDay14, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(0L, chronology11);
        java.lang.Object obj21 = mutableDateTime20.clone();
        int int22 = mutableDateTime20.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Chronology chronology30 = instant28.getChronology();
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime36 = timeOfDay33.toDateTime((org.joda.time.ReadableInstant) instant35);
        int[] intArray38 = chronology30.get((org.joda.time.ReadablePartial) timeOfDay33, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(0L, chronology30);
        mutableDateTime39.setYear(3);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone44 = instant43.getZone();
        mutableDateTime39.setZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone44);
        mutableDateTime20.setZoneRetainFields(dateTimeZone44);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(604800000L, dateTimeZone44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter2.withZone(dateTimeZone44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 178);
        org.joda.time.format.DateTimeParser dateTimeParser52 = dateTimeFormatter2.getParser();
        org.joda.time.Instant instant54 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime55 = instant54.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime56 = instant54.toMutableDateTimeISO();
        mutableDateTime56.setMillisOfSecond(20);
        mutableDateTime56.setMillisOfDay(26687);
        // The following exception was thrown during execution in test generation
        try {
            int int63 = dateTimeFormatter2.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime56, "2022-02-22T07:40:46.387Z", 92);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNull(dateTimeParser52);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
    }

    @Test
    public void test11648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11648");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = null;
        java.lang.String str9 = dateTime7.toString(dateTimeFormatter8);
        org.joda.time.DateTime dateTime11 = dateTime7.minusYears(2022);
        org.joda.time.DateTime.Property property12 = dateTime7.minuteOfHour();
        org.joda.time.DateTime dateTime14 = property12.addToCopy(5);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone16 = dateMidnight15.getZone();
        int int18 = dateTimeZone16.getStandardOffset((-6048000000L));
        org.joda.time.DateTime dateTime19 = dateTime14.withZone(dateTimeZone16);
        org.joda.time.Interval interval20 = new org.joda.time.Interval(1645514930590L, 12644958734193000L, dateTimeZone16);
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime26 = timeOfDay23.toDateTime((org.joda.time.ReadableInstant) instant25);
        org.joda.time.DateTime.Property property27 = dateTime26.era();
        org.joda.time.DateTime dateTime28 = property27.getDateTime();
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean32 = interval31.isBeforeNow();
        org.joda.time.Period period33 = interval31.toPeriod();
        java.lang.String str34 = period33.toString();
        org.joda.time.TimeOfDay timeOfDay37 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant39 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime40 = timeOfDay37.toDateTime((org.joda.time.ReadableInstant) instant39);
        org.joda.time.Chronology chronology41 = instant39.getChronology();
        org.joda.time.TimeOfDay timeOfDay44 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant46 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime47 = timeOfDay44.toDateTime((org.joda.time.ReadableInstant) instant46);
        int[] intArray49 = chronology41.get((org.joda.time.ReadablePartial) timeOfDay44, (long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay51 = timeOfDay44.withHourOfDay(0);
        int int52 = timeOfDay51.getSecondOfMinute();
        boolean boolean53 = period33.equals((java.lang.Object) timeOfDay51);
        org.joda.time.DateTime dateTime55 = dateTime28.withPeriodAdded((org.joda.time.ReadablePeriod) period33, (-292273032));
        org.joda.time.Interval interval56 = interval20.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Period period57 = interval56.toPeriod();
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval63 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean64 = interval60.abuts((org.joda.time.ReadableInterval) interval63);
        long long65 = interval63.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod66 = null;
        org.joda.time.Interval interval67 = interval63.withPeriodAfterStart(readablePeriod66);
        org.joda.time.DateTime dateTime68 = interval63.getStart();
        org.joda.time.Interval interval71 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval74 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean75 = interval71.abuts((org.joda.time.ReadableInterval) interval74);
        long long76 = interval74.getStartMillis();
        org.joda.time.Interval interval79 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval82 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean83 = interval79.abuts((org.joda.time.ReadableInterval) interval82);
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.Interval interval85 = interval82.withDurationBeforeEnd(readableDuration84);
        org.joda.time.Interval interval86 = interval74.overlap((org.joda.time.ReadableInterval) interval82);
        org.joda.time.Interval interval87 = interval63.overlap((org.joda.time.ReadableInterval) interval74);
        boolean boolean89 = interval63.equals((java.lang.Object) 26680936);
        boolean boolean91 = interval63.contains((-123016200626500000L));
        boolean boolean92 = interval56.contains((org.joda.time.ReadableInterval) interval63);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1969-12-31T00:01:00.000Z" + "'", str9, "1969-12-31T00:01:00.000Z");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT0S" + "'", str34, "PT0S");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNull(interval86);
        org.junit.Assert.assertNull(interval87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test11649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11649");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.minusWeeks((int) (short) 100);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean12 = dateMidnight9.isSupported(dateTimeFieldType11);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime20 = timeOfDay17.toDateTime((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Chronology chronology21 = instant19.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfHalfday();
        org.joda.time.DurationField durationField23 = chronology21.eras();
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType14.getField(chronology21);
        org.joda.time.DateTimeField dateTimeField25 = chronology21.hourOfDay();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) 22, chronology21);
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType11.getField(chronology21);
        org.joda.time.DateMidnight dateMidnight28 = org.joda.time.DateMidnight.now(chronology21);
        org.joda.time.Chronology chronology29 = chronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.weekOfWeekyear();
        org.joda.time.Interval interval31 = new org.joda.time.Interval(0L, 74096214808496000L, chronology29);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test11650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11650");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMinutes(35);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.millisOfDay();
        int int6 = localDateTime4.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.withWeekyear(2);
        org.joda.time.DateMidnight.Property property14 = dateMidnight9.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight9.withYearOfCentury(1);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean20 = interval19.isBeforeNow();
        org.joda.time.Period period21 = interval19.toPeriod();
        java.lang.String str22 = period21.toString();
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight9.withPeriodAdded((org.joda.time.ReadablePeriod) period21, (int) (byte) 0);
        org.joda.time.MutablePeriod mutablePeriod25 = period21.toMutablePeriod();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime4.minus((org.joda.time.ReadablePeriod) mutablePeriod25);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean33 = interval29.abuts((org.joda.time.ReadableInterval) interval32);
        long long34 = interval32.getStartMillis();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean41 = interval37.abuts((org.joda.time.ReadableInterval) interval40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Interval interval43 = interval40.withDurationBeforeEnd(readableDuration42);
        org.joda.time.Interval interval44 = interval32.overlap((org.joda.time.ReadableInterval) interval40);
        org.joda.time.Duration duration45 = interval40.toDuration();
        org.joda.time.Duration duration46 = duration45.toDuration();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean53 = interval49.abuts((org.joda.time.ReadableInterval) interval52);
        long long54 = interval52.getStartMillis();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean61 = interval57.abuts((org.joda.time.ReadableInterval) interval60);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Interval interval63 = interval60.withDurationBeforeEnd(readableDuration62);
        org.joda.time.Interval interval64 = interval52.overlap((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Duration duration65 = interval60.toDuration();
        org.joda.time.Duration duration66 = duration65.toDuration();
        int int67 = duration45.compareTo((org.joda.time.ReadableDuration) duration66);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime26.minus((org.joda.time.ReadableDuration) duration45);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime26.plusHours(6);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime26.plusMonths(444);
        org.joda.time.LocalDateTime.Property property73 = localDateTime26.dayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1922 + "'", int6 == 1922);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT0S" + "'", str22, "PT0S");
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(mutablePeriod25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNull(interval44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNull(interval64);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(property73);
    }

    @Test
    public void test11651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11651");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.DateTime dateTime7 = instant4.toDateTimeISO();
        org.joda.time.DateTime dateTime8 = instant4.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.plusMillis(60);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test11652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11652");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("Fri Jan 02 07:00:00 GMT+10:00 1970");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Fri Jan 02 07:00:00 GMT+10:00 1970\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11653");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate7 = localDate0.plusMonths((int) (short) 100);
        org.joda.time.LocalDate localDate9 = localDate0.minusWeeks(0);
        org.joda.time.LocalDate localDate11 = localDate0.withYear(157);
        org.joda.time.LocalDate localDate13 = localDate0.minusMonths((-1645515350));
        org.joda.time.LocalDate localDate15 = localDate13.minusWeeks((-1645515440));
        org.joda.time.DateMidnight dateMidnight16 = localDate15.toDateMidnight();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateMidnight16);
    }

    @Test
    public void test11654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11654");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(16140297600000L);
        org.joda.time.Instant instant3 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone4 = instant3.getZone();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(dateTimeZone4);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime8 = dateTime5.withDurationAdded(readableDuration6, (int) (byte) 0);
        org.joda.time.DateTime dateTime10 = dateTime5.minusSeconds((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime5.minus(readableDuration11);
        org.joda.time.DateTime dateTime14 = dateTime5.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime15 = dateTime5.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime5.minus(readableDuration16);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean24 = interval20.abuts((org.joda.time.ReadableInterval) interval23);
        long long25 = interval23.getStartMillis();
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean32 = interval28.abuts((org.joda.time.ReadableInterval) interval31);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Interval interval34 = interval31.withDurationBeforeEnd(readableDuration33);
        org.joda.time.Interval interval35 = interval23.overlap((org.joda.time.ReadableInterval) interval31);
        org.joda.time.Duration duration36 = interval31.toDuration();
        org.joda.time.Duration duration37 = duration36.toDuration();
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean44 = interval40.abuts((org.joda.time.ReadableInterval) interval43);
        long long45 = interval43.getStartMillis();
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean52 = interval48.abuts((org.joda.time.ReadableInterval) interval51);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Interval interval54 = interval51.withDurationBeforeEnd(readableDuration53);
        org.joda.time.Interval interval55 = interval43.overlap((org.joda.time.ReadableInterval) interval51);
        org.joda.time.Duration duration56 = interval51.toDuration();
        org.joda.time.Interval interval59 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval62 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean63 = interval59.abuts((org.joda.time.ReadableInterval) interval62);
        long long64 = interval62.getStartMillis();
        org.joda.time.Interval interval67 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval70 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean71 = interval67.abuts((org.joda.time.ReadableInterval) interval70);
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Interval interval73 = interval70.withDurationBeforeEnd(readableDuration72);
        org.joda.time.Interval interval74 = interval62.overlap((org.joda.time.ReadableInterval) interval70);
        org.joda.time.Duration duration75 = interval70.toDuration();
        org.joda.time.Duration duration76 = duration75.toDuration();
        boolean boolean77 = duration56.isEqual((org.joda.time.ReadableDuration) duration76);
        boolean boolean78 = duration37.isShorterThan((org.joda.time.ReadableDuration) duration76);
        org.joda.time.Period period79 = duration37.toPeriod();
        org.joda.time.DateTime dateTime80 = dateTime5.plus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.YearMonthDay yearMonthDay82 = new org.joda.time.YearMonthDay(0L);
        java.lang.String str83 = yearMonthDay82.toString();
        org.joda.time.DateTime dateTime84 = yearMonthDay82.toDateTimeAtMidnight();
        org.joda.time.DateMidnight dateMidnight85 = yearMonthDay82.toDateMidnight();
        org.joda.time.MutableDateTime mutableDateTime86 = dateMidnight85.toMutableDateTime();
        org.joda.time.Interval interval87 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration37, (org.joda.time.ReadableInstant) mutableDateTime86);
        org.joda.time.Instant instant88 = instant1.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Instant instant90 = instant88.withMillis(403200097L);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNull(interval35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNull(interval55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNull(interval74);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "1970-01-01" + "'", str83, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertNotNull(mutableDateTime86);
        org.junit.Assert.assertNotNull(instant88);
        org.junit.Assert.assertNotNull(instant90);
    }

    @Test
    public void test11655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11655");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        boolean boolean33 = mutableDateTime16.isEqualNow();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime16.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight37.withDurationAdded((long) (short) 10, 1);
        mutableDateTime16.setDate((org.joda.time.ReadableInstant) dateMidnight40);
        mutableDateTime16.setMinuteOfHour(0);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime16.dayOfMonth();
        org.joda.time.Instant instant46 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone47 = instant46.getZone();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone47);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime51 = dateTime48.withDurationAdded(readableDuration49, (int) (byte) 0);
        org.joda.time.DateTime dateTime53 = dateTime48.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime55 = dateTime53.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime57 = dateTime55.plusDays(2);
        org.joda.time.DateTime dateTime59 = dateTime55.withHourOfDay(22);
        int int60 = dateTime55.getMonthOfYear();
        org.joda.time.DateTime dateTime63 = dateTime55.withDurationAdded(0L, 0);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.DateTime dateTime66 = dateTime55.withDurationAdded(readableDuration64, 25);
        boolean boolean67 = dateTime66.isEqualNow();
        mutableDateTime16.setDate((org.joda.time.ReadableInstant) dateTime66);
        java.util.GregorianCalendar gregorianCalendar69 = dateTime66.toGregorianCalendar();
        java.lang.String str70 = gregorianCalendar69.getCalendarType();
        java.time.Instant instant71 = gregorianCalendar69.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            int int73 = gregorianCalendar69.getActualMaximum(27133712);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 27133712");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "gregory" + "'", str70, "gregory");
        org.junit.Assert.assertNotNull(instant71);
    }

    @Test
    public void test11656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11656");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.property(dateTimeFieldType3);
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfCeilingCopy();
        int int7 = localDateTime6.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.plusWeeks((-1645515415));
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test11657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11657");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.weekyear();
        org.joda.time.LocalDate localDate3 = localDate0.withWeekyear((-1));
        int int4 = localDate3.getEra();
        org.joda.time.LocalDate.Property property5 = localDate3.year();
        int int6 = localDate3.getYearOfCentury();
        int int7 = localDate3.getYearOfCentury();
        int int8 = localDate3.getDayOfMonth();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 23 + "'", int8 == 23);
    }

    @Test
    public void test11658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11658");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfHalfday();
        long long29 = dateTimeField27.roundHalfFloor(0L);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        int int31 = dateTimeField27.getMaximumShortTextLength(locale30);
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale32.getDisplayName(locale34);
        java.lang.String str37 = locale30.getDisplayLanguage(locale32);
        java.util.Calendar calendar38 = mutableDateTime16.toCalendar(locale32);
        int int39 = calendar38.getWeekYear();
        calendar38.set((int) (byte) -1, (int) (byte) 100, 0, 8, (int) (short) 100);
        calendar38.set((int) (byte) 0, 35, 100, (int) 'a', 2000);
        org.joda.time.TimeOfDay timeOfDay52 = org.joda.time.TimeOfDay.fromCalendarFields(calendar38);
        calendar38.clear();
        calendar38.clear();
        calendar38.clear();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str36, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u6587" + "'", str37, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(timeOfDay52);
    }

    @Test
    public void test11659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11659");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        mutableDateTime16.setMillisOfDay(2);
        mutableDateTime16.addMinutes((int) 'x');
        java.util.GregorianCalendar gregorianCalendar24 = mutableDateTime16.toGregorianCalendar();
        java.util.Date date25 = gregorianCalendar24.getTime();
        java.util.Date date32 = new java.util.Date(575, 32770, 26693441, 0, 465, 2022);
        date32.setMonth((int) (byte) 0);
        date32.setDate(31);
        boolean boolean37 = date25.before(date32);
        date25.setMinutes(26887536);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(gregorianCalendar24);
        org.junit.Assert.assertNotNull(date25);
        org.junit.Assert.assertEquals(date25.toString(), "Sun Feb 14 09:36:00 GMT+10:00 2021");
        org.junit.Assert.assertEquals(date32.toString(), "Thu Jan 31 08:18:42 GMT+10:00 78289");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test11660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11660");
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime8 = timeOfDay5.toDateTime((org.joda.time.ReadableInstant) instant7);
        org.joda.time.Chronology chronology9 = instant7.getChronology();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime15 = timeOfDay12.toDateTime((org.joda.time.ReadableInstant) instant14);
        int[] intArray17 = chronology9.get((org.joda.time.ReadablePartial) timeOfDay12, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(0L, chronology9);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.DateTimeField dateTimeField20 = chronology9.era();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((-61851081600000L), chronology9);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTimeField dateTimeField23 = chronology9.dayOfMonth();
        int int24 = dateTimeField23.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 31 + "'", int24 == 31);
    }

    @Test
    public void test11661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11661");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.weekyear();
        org.joda.time.LocalDate localDate3 = localDate0.withWeekyear((-1));
        org.joda.time.LocalDate localDate5 = localDate3.minusYears((int) (byte) -1);
        int int6 = localDate3.getDayOfMonth();
        org.joda.time.DateTime dateTime7 = localDate3.toDateTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 23 + "'", int6 == 23);
        org.junit.Assert.assertNotNull(dateTime7);
    }

    @Test
    public void test11662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11662");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight2.weekOfWeekyear();
        java.lang.String str8 = property7.getAsString();
        java.util.Locale locale9 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale10 = locale9.stripExtensions();
        int int11 = property7.getMaximumTextLength(locale9);
        org.joda.time.DateMidnight dateMidnight12 = property7.getDateMidnight();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean19 = interval15.abuts((org.joda.time.ReadableInterval) interval18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Interval interval21 = interval18.withDurationBeforeEnd(readableDuration20);
        long long22 = interval21.toDurationMillis();
        boolean boolean23 = property7.equals((java.lang.Object) interval21);
        long long24 = interval21.toDurationMillis();
        java.util.Date date28 = new java.util.Date(7, 100, 1);
        date28.setMinutes(70);
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.fromDateFields(date28);
        int int32 = date28.getHours();
        int int33 = date28.getYear();
        boolean boolean34 = interval21.equals((java.lang.Object) date28);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertEquals(date28.toString(), "Sat May 01 01:10:00 GMT+10:00 1915");
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 15 + "'", int33 == 15);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test11663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11663");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime17 = timeOfDay14.toDateTime((org.joda.time.ReadableInstant) instant16);
        int[] intArray19 = chronology11.get((org.joda.time.ReadablePartial) timeOfDay14, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(0L, chronology11);
        java.lang.Object obj21 = mutableDateTime20.clone();
        int int22 = mutableDateTime20.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Chronology chronology30 = instant28.getChronology();
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime36 = timeOfDay33.toDateTime((org.joda.time.ReadableInstant) instant35);
        int[] intArray38 = chronology30.get((org.joda.time.ReadablePartial) timeOfDay33, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(0L, chronology30);
        mutableDateTime39.setYear(3);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone44 = instant43.getZone();
        mutableDateTime39.setZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone44);
        mutableDateTime20.setZoneRetainFields(dateTimeZone44);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(604800000L, dateTimeZone44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter2.withZone(dateTimeZone44);
        org.joda.time.LocalTime localTime51 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime53 = localTime51.minusMinutes((int) (short) 1);
        org.joda.time.LocalTime localTime55 = localTime51.withMillisOfDay((int) (byte) 1);
        org.joda.time.LocalTime.Property property56 = localTime51.minuteOfHour();
        org.joda.time.Chronology chronology57 = localTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.dayOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter2.withChronology(chronology57);
        java.util.Locale locale60 = java.util.Locale.US;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter2.withLocale(locale60);
        org.joda.time.DateTimeZone dateTimeZone62 = dateTimeFormatter61.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter61.withPivotYear((java.lang.Integer) 7359830);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter64.withChronology(chronology65);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter64.withPivotYear((java.lang.Integer) 30);
        java.util.TimeZone timeZone70 = java.util.TimeZone.getTimeZone("clockhourOfHalfday");
        java.util.Locale locale71 = java.util.Locale.CHINESE;
        java.util.Calendar calendar72 = java.util.Calendar.getInstance(timeZone70, locale71);
        java.lang.String str73 = locale71.getCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter64.withLocale(locale71);
        java.util.Locale locale75 = locale71.stripExtensions();
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_US");
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertNotNull(timeZone70);
        org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar72);
// flaky:         org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=1645515166338,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=32,SECOND=46,MILLISECOND=338,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh");
    }

    @Test
    public void test11664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11664");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        java.lang.Object obj17 = mutableDateTime16.clone();
        int int18 = mutableDateTime16.getMinuteOfHour();
        mutableDateTime16.addMinutes((int) (byte) 10);
        mutableDateTime16.setMillis(0L);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime16.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime24 = property23.roundHalfEven();
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        mutableDateTime24.setZone(dateTimeZone25);
        mutableDateTime24.add(15552001201627L);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime24.setSecondOfMinute(178);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 178 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
    }

    @Test
    public void test11665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11665");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("0");
        org.joda.time.LocalDate.Property property2 = localDate1.weekyear();
        org.joda.time.LocalDate localDate3 = property2.roundCeilingCopy();
        org.joda.time.LocalDate localDate5 = property2.setCopy("428");
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
    }

    @Test
    public void test11666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11666");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.withDurationAdded((long) 2, 100);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.withSecondOfMinute((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight5.withFields((org.joda.time.ReadablePartial) timeOfDay10);
        org.joda.time.MutableDateTime mutableDateTime12 = dateMidnight11.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.dayOfWeek();
        mutableDateTime12.add((long) 1);
        org.joda.time.DateTimeField dateTimeField16 = mutableDateTime12.getRoundingField();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight19.withWeekyear(2);
        org.joda.time.DateMidnight.Property property24 = dateMidnight19.weekOfWeekyear();
        java.lang.String str25 = property24.getAsString();
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime31 = timeOfDay28.toDateTime((org.joda.time.ReadableInstant) instant30);
        org.joda.time.Chronology chronology32 = instant30.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.clockhourOfHalfday();
        long long35 = dateTimeField33.roundHalfFloor(0L);
        java.util.Locale locale36 = java.util.Locale.TRADITIONAL_CHINESE;
        int int37 = dateTimeField33.getMaximumShortTextLength(locale36);
        int int38 = property24.getMaximumShortTextLength(locale36);
        org.joda.time.DateMidnight dateMidnight40 = property24.addToCopy(22);
        org.joda.time.DateMidnight.Property property41 = dateMidnight40.weekyear();
        org.joda.time.DateMidnight dateMidnight42 = property41.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight43 = property41.withMinimumValue();
        mutableDateTime12.setMillis((org.joda.time.ReadableInstant) dateMidnight43);
        org.joda.time.DateMidnight.Property property45 = dateMidnight43.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight43.minusMonths(7361852);
        org.joda.time.Instant instant49 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone50 = instant49.getZone();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(dateTimeZone50);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.DateTime dateTime54 = dateTime51.withDurationAdded(readableDuration52, (int) (byte) 0);
        org.joda.time.DateTime dateTime56 = dateTime51.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime58 = dateTime56.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime60 = dateTime58.plusDays(2);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int62 = dateTime60.get(dateTimeFieldType61);
        org.joda.time.DurationFieldType durationFieldType63 = dateTimeFieldType61.getDurationType();
        org.joda.time.DurationFieldType durationFieldType64 = dateTimeFieldType61.getDurationType();
        boolean boolean65 = dateMidnight47.isSupported(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 7 + "'", int62 == 7);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test11667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11667");
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property6 = timeOfDay5.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property6.getFieldType();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        org.joda.time.Chronology chronology15 = instant13.getChronology();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime21 = timeOfDay18.toDateTime((org.joda.time.ReadableInstant) instant20);
        int[] intArray23 = chronology15.get((org.joda.time.ReadablePartial) timeOfDay18, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(0L, chronology15);
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTime((org.joda.time.ReadableInstant) instant29);
        org.joda.time.Chronology chronology31 = instant29.getChronology();
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime37 = timeOfDay34.toDateTime((org.joda.time.ReadableInstant) instant36);
        int[] intArray39 = chronology31.get((org.joda.time.ReadablePartial) timeOfDay34, (long) (short) -1);
        mutableDateTime24.setChronology(chronology31);
        boolean boolean41 = mutableDateTime24.isEqualNow();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime24.secondOfDay();
        mutableDateTime24.setMillisOfDay((int) (short) 100);
        boolean boolean45 = property6.equals((java.lang.Object) mutableDateTime24);
        org.joda.time.TimeOfDay timeOfDay46 = property6.getTimeOfDay();
        org.joda.time.LocalTime localTime48 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime50 = localTime48.minusMinutes((int) (short) 1);
        int int51 = localTime48.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone53);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight54.withDurationAdded((long) 2, 100);
        org.joda.time.TimeOfDay timeOfDay60 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay62 = timeOfDay60.withSecondOfMinute((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight57.withFields((org.joda.time.ReadablePartial) timeOfDay62);
        boolean boolean64 = localTime48.equals((java.lang.Object) timeOfDay62);
        org.joda.time.Chronology chronology65 = localTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.yearOfEra();
        org.joda.time.TimeOfDay timeOfDay67 = timeOfDay46.withChronologyRetainFields(chronology65);
        org.joda.time.DateTimeField dateTimeField68 = chronology65.halfdayOfDay();
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(1645688116958L, chronology65);
        org.joda.time.Interval interval70 = new org.joda.time.Interval(1622682180975L, 1645488000000L, chronology65);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(timeOfDay46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35 + "'", int51 == 35);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(timeOfDay67);
        org.junit.Assert.assertNotNull(dateTimeField68);
    }

    @Test
    public void test11668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11668");
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.property(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = property6.addToCopy((-292275054));
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusMillis(19);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean14 = dateTimeZone12.equals((java.lang.Object) 604800000L);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime8, dateTimeZone12);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) 27035431, 1645514897953L, dateTimeZone12);
        java.lang.String str17 = interval16.toString();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T07:30:35.431Z/2022-02-22T07:28:17.953Z" + "'", str17, "1970-01-01T07:30:35.431Z/2022-02-22T07:28:17.953Z");
    }

    @Test
    public void test11669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11669");
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone3);
        int int5 = dateMidnight4.getYearOfCentury();
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight4.minusDays((-1645515262));
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone11 = instant10.getZone();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.weekOfWeekyear();
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone16 = instant15.getZone();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.withDurationAdded(readableDuration18, (int) (byte) 0);
        org.joda.time.DateTime dateTime22 = dateTime17.minusSeconds((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.DateTime dateTime24 = dateTime17.minus(readableDuration23);
        org.joda.time.DateTime dateTime26 = dateTime17.minusSeconds((int) (byte) 100);
        int int27 = mutableDateTime12.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime12.dayOfMonth();
        mutableDateTime12.setMinuteOfDay(1);
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay((java.lang.Object) mutableDateTime12);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean35 = interval34.isBeforeNow();
        org.joda.time.Period period36 = interval34.toPeriod();
        java.lang.String str37 = period36.toString();
        org.joda.time.TimeOfDay timeOfDay39 = timeOfDay31.withPeriodAdded((org.joda.time.ReadablePeriod) period36, 1969);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight42.withDurationAdded((long) 2, 100);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean52 = interval48.abuts((org.joda.time.ReadableInterval) interval51);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Interval interval54 = interval51.withDurationBeforeEnd(readableDuration53);
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean61 = interval57.abuts((org.joda.time.ReadableInterval) interval60);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Interval interval63 = interval60.withDurationBeforeEnd(readableDuration62);
        org.joda.time.Period period64 = interval60.toPeriod();
        org.joda.time.Interval interval65 = interval51.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period64);
        java.util.Locale.Builder builder66 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder69 = builder66.setExtension('x', "zh");
        boolean boolean70 = period64.equals((java.lang.Object) builder66);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight42.withPeriodAdded((org.joda.time.ReadablePeriod) period64, 2022);
        org.joda.time.TimeOfDay timeOfDay74 = timeOfDay39.withPeriodAdded((org.joda.time.ReadablePeriod) period64, (-46800000));
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone76);
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight77.withWeekyear(2);
        org.joda.time.Interval interval80 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period64, (org.joda.time.ReadableInstant) dateMidnight79);
        org.joda.time.DateMidnight dateMidnight82 = dateMidnight79.withDayOfYear((int) (short) 10);
        boolean boolean83 = dateMidnight7.isAfter((org.joda.time.ReadableInstant) dateMidnight82);
        org.joda.time.Chronology chronology84 = dateMidnight82.getChronology();
        java.util.Locale.Builder builder85 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder88 = builder85.setExtension('x', "zh");
        java.util.Locale locale89 = builder88.build();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket90 = new org.joda.time.format.DateTimeParserBucket(0L, chronology84, locale89);
        org.joda.time.DateMidnight dateMidnight91 = new org.joda.time.DateMidnight((long) 7321627, chronology84);
        org.joda.time.DateTimeField dateTimeField92 = chronology84.weekOfWeekyear();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 70 + "'", int5 == 70);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT0S" + "'", str37, "PT0S");
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(timeOfDay74);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeField92);
    }

    @Test
    public void test11670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11670");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.weekOfWeekyear();
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withDurationAdded(readableDuration10, (int) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime9.minusSeconds((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime9.minus(readableDuration15);
        org.joda.time.DateTime dateTime18 = dateTime9.minusSeconds((int) (byte) 100);
        int int19 = mutableDateTime4.compareTo((org.joda.time.ReadableInstant) dateTime18);
        mutableDateTime4.addMonths(112);
        mutableDateTime4.setMillis((long) 514);
        mutableDateTime4.addDays(24827794);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime4.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime27 = property26.roundHalfFloor();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime29 = property26.set(27007544);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27007544 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
    }

    @Test
    public void test11671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11671");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.weekOfWeekyear();
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withDurationAdded(readableDuration10, (int) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime9.minusSeconds((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime9.minus(readableDuration15);
        org.joda.time.DateTime dateTime18 = dateTime9.minusSeconds((int) (byte) 100);
        int int19 = mutableDateTime4.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime4.dayOfMonth();
        mutableDateTime4.setMinuteOfDay(1);
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay((java.lang.Object) mutableDateTime4);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime4.millisOfSecond();
        mutableDateTime4.addMonths(75);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime4.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test11672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11672");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property6 = localDate0.yearOfEra();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.DurationField durationField8 = property6.getRangeDurationField();
        org.joda.time.LocalDate localDate9 = property6.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate11 = localDate9.withYearOfEra(13);
        org.joda.time.DateTime dateTime12 = localDate11.toDateTimeAtCurrentTime();
        org.joda.time.DateTime.Property property13 = dateTime12.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNull(durationField8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test11673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11673");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.DateMidnight.Property property2 = dateMidnight0.era();
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight0.minus((long) 2040);
        org.joda.time.DateMidnight.Property property5 = dateMidnight0.monthOfYear();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone7 = dateMidnight6.getZone();
        org.joda.time.DateTime dateTime8 = org.joda.time.DateTime.now(dateTimeZone7);
        org.joda.time.DateTime dateTime10 = dateTime8.withMillis((long) (short) -1);
        org.joda.time.DateTime dateTime11 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone14 = instant13.getZone();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight17.withWeekyear(2);
        org.joda.time.DateTimeZone dateTimeZone22 = dateMidnight17.getZone();
        long long24 = dateTimeZone14.getMillisKeepLocal(dateTimeZone22, 10L);
        java.lang.String str26 = dateTimeZone22.getShortName((-2678399900L));
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((java.lang.Object) dateTime10, dateTimeZone22);
        int int28 = dateTime10.getDayOfYear();
        boolean boolean29 = dateMidnight0.isBefore((org.joda.time.ReadableInstant) dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 10L + "'", long24 == 10L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 365 + "'", int28 == 365);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test11674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11674");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusWeeks((int) (short) 100);
        int int8 = dateMidnight5.getCenturyOfEra();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone10 = dateMidnight9.getZone();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.withWeekyear(53);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean19 = interval15.abuts((org.joda.time.ReadableInterval) interval18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Interval interval21 = interval18.withDurationBeforeEnd(readableDuration20);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean28 = interval24.abuts((org.joda.time.ReadableInterval) interval27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Interval interval30 = interval27.withDurationBeforeEnd(readableDuration29);
        org.joda.time.Period period31 = interval27.toPeriod();
        org.joda.time.Interval interval32 = interval18.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period31);
        java.util.Locale.Builder builder33 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder36 = builder33.setExtension('x', "zh");
        boolean boolean37 = period31.equals((java.lang.Object) builder33);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight12.plus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight5.minus((org.joda.time.ReadablePeriod) period31);
        int int40 = dateMidnight39.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusYears((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property45 = localDateTime41.property(dateTimeFieldType44);
        org.joda.time.LocalDateTime localDateTime46 = property45.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withYear((int) '4');
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight39.withFields((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight39.plusDays(7327559);
        org.joda.time.ReadablePartial readablePartial52 = null;
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.withFields(readablePartial52);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 19 + "'", int8 == 19);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight53);
    }

    @Test
    public void test11675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11675");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.DateTime dateTime7 = instant4.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.weekOfWeekyear();
        org.joda.time.DateTime.Property property9 = dateTime7.dayOfWeek();
        int int10 = dateTime7.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = dateTime7.withYearOfCentury((-259));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -259 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 23 + "'", int10 == 23);
    }

    @Test
    public void test11676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11676");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight2.weekOfWeekyear();
        java.lang.String str8 = property7.getAsString();
        java.util.Locale locale9 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale10 = locale9.stripExtensions();
        int int11 = property7.getMaximumTextLength(locale9);
        org.joda.time.DateMidnight dateMidnight12 = property7.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight14 = property7.addWrapFieldToCopy(31);
        org.joda.time.DateMidnight dateMidnight15 = property7.withMaximumValue();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight15);
    }

    @Test
    public void test11677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11677");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        int[] intArray3 = timeOfDay2.getValues();
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime9 = timeOfDay6.toDateTime((org.joda.time.ReadableInstant) instant8);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay6.minusMinutes((int) '4');
        int int12 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay2.minusMinutes((int) (short) -1);
        int int15 = timeOfDay14.size();
        java.lang.String str17 = timeOfDay14.toString("1");
        org.joda.time.TimeOfDay timeOfDay20 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime23 = timeOfDay20.toDateTime((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Chronology chronology24 = instant22.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.year();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.minuteOfHour();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean33 = interval29.abuts((org.joda.time.ReadableInterval) interval32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Interval interval35 = interval32.withDurationBeforeEnd(readableDuration34);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean42 = interval38.abuts((org.joda.time.ReadableInterval) interval41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Interval interval44 = interval41.withDurationBeforeEnd(readableDuration43);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean51 = interval47.abuts((org.joda.time.ReadableInterval) interval50);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Interval interval53 = interval50.withDurationBeforeEnd(readableDuration52);
        org.joda.time.Period period54 = interval50.toPeriod();
        org.joda.time.Interval interval55 = interval41.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period54);
        org.joda.time.Interval interval56 = interval32.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period54);
        int[] intArray59 = chronology24.get((org.joda.time.ReadablePeriod) period54, (long) 363, (long) (byte) 100);
        org.joda.time.TimeOfDay timeOfDay60 = timeOfDay14.plus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.TimeOfDay timeOfDay62 = timeOfDay60.withSecondOfMinute(50);
        org.joda.time.TimeOfDay timeOfDay66 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant68 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime69 = timeOfDay66.toDateTime((org.joda.time.ReadableInstant) instant68);
        org.joda.time.Chronology chronology70 = instant68.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.clockhourOfHalfday();
        org.joda.time.DurationField durationField72 = chronology70.eras();
        org.joda.time.DateTimeField dateTimeField73 = chronology70.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone74 = chronology70.getZone();
        org.joda.time.DateTimeField dateTimeField75 = chronology70.clockhourOfDay();
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime(3098892765600052L, chronology70);
        org.joda.time.TimeOfDay timeOfDay77 = timeOfDay62.withChronologyRetainFields(chronology70);
        org.joda.time.TimeOfDay.Property property78 = timeOfDay62.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay79 = property78.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay81 = property78.addNoWrapToCopy(0);
        org.joda.time.Chronology chronology82 = timeOfDay81.getChronology();
        org.joda.time.TimeOfDay.Property property83 = timeOfDay81.secondOfMinute();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 0, 0, 0, 0, 0, 0, -263]");
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(timeOfDay77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(timeOfDay79);
        org.junit.Assert.assertNotNull(timeOfDay81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(property83);
    }

    @Test
    public void test11678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11678");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        int[] intArray16 = chronology8.get((org.joda.time.ReadablePartial) timeOfDay11, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(0L, chronology8);
        org.joda.time.TimeOfDay timeOfDay20 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime23 = timeOfDay20.toDateTime((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Chronology chronology24 = instant22.getChronology();
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTime((org.joda.time.ReadableInstant) instant29);
        int[] intArray32 = chronology24.get((org.joda.time.ReadablePartial) timeOfDay27, (long) (short) -1);
        mutableDateTime17.setChronology(chronology24);
        boolean boolean34 = mutableDateTime17.isEqualNow();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime17.secondOfDay();
        boolean boolean36 = mutableDateTime17.isAfterNow();
        mutableDateTime17.setMillisOfSecond((int) (byte) 0);
        int int39 = mutableDateTime17.getHourOfDay();
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone42 = instant41.getZone();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(dateTimeZone42);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.DateTime dateTime46 = dateTime43.withDurationAdded(readableDuration44, (int) (byte) 0);
        org.joda.time.DateTime dateTime48 = dateTime43.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime50 = dateTime48.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime52 = dateTime48.plusWeeks((int) (byte) -1);
        org.joda.time.DateTime.Property property53 = dateTime48.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay57 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant59 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime60 = timeOfDay57.toDateTime((org.joda.time.ReadableInstant) instant59);
        org.joda.time.Chronology chronology61 = instant59.getChronology();
        org.joda.time.TimeOfDay timeOfDay64 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant66 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime67 = timeOfDay64.toDateTime((org.joda.time.ReadableInstant) instant66);
        int[] intArray69 = chronology61.get((org.joda.time.ReadablePartial) timeOfDay64, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime70 = new org.joda.time.MutableDateTime(0L, chronology61);
        org.joda.time.DurationField durationField71 = chronology61.weeks();
        org.joda.time.DateTimeField dateTimeField72 = chronology61.weekOfWeekyear();
        org.joda.time.DateTime dateTime73 = dateTime48.toDateTime(chronology61);
        org.joda.time.DateTimeField dateTimeField74 = chronology61.hourOfDay();
        mutableDateTime17.setChronology(chronology61);
        org.joda.time.DateMidnight dateMidnight76 = new org.joda.time.DateMidnight(chronology61);
        org.joda.time.LocalTime localTime77 = new org.joda.time.LocalTime(chronology61);
        org.joda.time.MutableDateTime mutableDateTime78 = org.joda.time.MutableDateTime.now(chronology61);
        org.joda.time.DateTimeField dateTimeField79 = chronology61.clockhourOfHalfday();
        org.joda.time.TimeOfDay timeOfDay80 = new org.joda.time.TimeOfDay((long) 511589, chronology61);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(mutableDateTime78);
        org.junit.Assert.assertNotNull(dateTimeField79);
    }

    @Test
    public void test11679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11679");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay.Property property4 = yearMonthDay3.monthOfYear();
        int int5 = property4.get();
        org.joda.time.YearMonthDay yearMonthDay7 = property4.addWrapFieldToCopy(4);
        org.joda.time.YearMonthDay yearMonthDay9 = property4.addToCopy(12);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean16 = interval12.abuts((org.joda.time.ReadableInterval) interval15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Interval interval18 = interval15.withDurationBeforeEnd(readableDuration17);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean25 = interval21.abuts((org.joda.time.ReadableInterval) interval24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Interval interval27 = interval24.withDurationBeforeEnd(readableDuration26);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean34 = interval30.abuts((org.joda.time.ReadableInterval) interval33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Interval interval36 = interval33.withDurationBeforeEnd(readableDuration35);
        org.joda.time.Period period37 = interval33.toPeriod();
        org.joda.time.Interval interval38 = interval24.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Interval interval39 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period37);
        org.joda.time.YearMonthDay yearMonthDay41 = yearMonthDay9.withPeriodAdded((org.joda.time.ReadablePeriod) period37, 21);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean44 = localDate42.isSupported(dateTimeFieldType43);
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateMidnight dateMidnight46 = localDate42.toDateMidnight(dateTimeZone45);
        org.joda.time.LocalDate localDate48 = localDate42.minusMonths((int) (short) 10);
        int int49 = localDate42.getDayOfMonth();
        org.joda.time.LocalDate.Property property50 = localDate42.year();
        org.joda.time.LocalDate localDate51 = property50.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate53 = localDate51.plusDays((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime55 = localDate53.toDateTimeAtMidnight(dateTimeZone54);
        org.joda.time.Interval interval56 = yearMonthDay9.toInterval(dateTimeZone54);
        long long59 = dateTimeZone54.adjustOffset((long) 466, false);
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight(dateTimeZone54);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 22 + "'", int49 == 22);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 466L + "'", long59 == 466L);
    }

    @Test
    public void test11680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11680");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean6 = interval2.abuts((org.joda.time.ReadableInterval) interval5);
        long long7 = interval5.getStartMillis();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean14 = interval10.abuts((org.joda.time.ReadableInterval) interval13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Interval interval16 = interval13.withDurationBeforeEnd(readableDuration15);
        org.joda.time.Interval interval17 = interval5.overlap((org.joda.time.ReadableInterval) interval13);
        org.joda.time.Duration duration18 = interval13.toDuration();
        org.joda.time.Duration duration19 = duration18.toDuration();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean26 = interval22.abuts((org.joda.time.ReadableInterval) interval25);
        long long27 = interval25.getStartMillis();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean34 = interval30.abuts((org.joda.time.ReadableInterval) interval33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Interval interval36 = interval33.withDurationBeforeEnd(readableDuration35);
        org.joda.time.Interval interval37 = interval25.overlap((org.joda.time.ReadableInterval) interval33);
        org.joda.time.Duration duration38 = interval33.toDuration();
        long long39 = duration38.getMillis();
        int int40 = duration18.compareTo((org.joda.time.ReadableDuration) duration38);
        java.lang.String str41 = duration38.toString();
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusYears((int) (short) 100);
        int int45 = localDateTime44.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withWeekyear(32769);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.minusMinutes((-292275054));
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withMinuteOfHour(2);
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean61 = interval57.abuts((org.joda.time.ReadableInterval) interval60);
        long long62 = interval60.getStartMillis();
        org.joda.time.Interval interval65 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval68 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean69 = interval65.abuts((org.joda.time.ReadableInterval) interval68);
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.Interval interval71 = interval68.withDurationBeforeEnd(readableDuration70);
        org.joda.time.Interval interval72 = interval60.overlap((org.joda.time.ReadableInterval) interval68);
        org.joda.time.Duration duration73 = interval68.toDuration();
        org.joda.time.LocalDateTime localDateTime75 = localDateTime54.withDurationAdded((org.joda.time.ReadableDuration) duration73, 112);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime47.plus((org.joda.time.ReadableDuration) duration73);
        boolean boolean77 = duration38.isLongerThan((org.joda.time.ReadableDuration) duration73);
        org.joda.time.Duration duration78 = duration73.toDuration();
        long long79 = duration78.getMillis();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNull(interval17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNull(interval37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT0S" + "'", str41, "PT0S");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 3 + "'", int45 == 3);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNull(interval72);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
    }

    @Test
    public void test11681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11681");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateMidnight2.toString(dateTimeFormatter5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight2.plusMonths(53);
        org.joda.time.DateMidnight.Property property9 = dateMidnight2.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight10 = property9.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight11 = property9.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str6, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight11);
    }

    @Test
    public void test11682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11682");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.monthOfYear();
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableDateTime4.add(readableDuration6, (int) (short) 10);
        mutableDateTime4.addMillis(11);
        org.joda.time.Chronology chronology11 = mutableDateTime4.getChronology();
        mutableDateTime4.setMinuteOfDay(7);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMinutes(35);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.plusMinutes((int) (byte) -1);
        org.joda.time.Chronology chronology22 = localDateTime17.getChronology();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) 4, chronology22);
        mutableDateTime4.setChronology(chronology22);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight(chronology22);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test11683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11683");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusMinutes((-292275054));
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusSeconds(4);
        org.joda.time.DurationFieldType durationFieldType7 = null;
        boolean boolean8 = localDateTime4.isSupported(durationFieldType7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withMillisOfDay((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime4.hourOfDay();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.joda.time.LocalDateTime localDateTime13 = property11.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMillis(456);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.yearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test11684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11684");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean6 = interval2.abuts((org.joda.time.ReadableInterval) interval5);
        long long7 = interval5.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Interval interval9 = interval5.withPeriodAfterStart(readablePeriod8);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone12 = instant11.getZone();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded(readableDuration14, (int) (byte) 0);
        int int17 = dateTime16.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int19 = dateTime16.get(dateTimeFieldType18);
        org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay21.minusMonths((int) (short) -1);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean30 = interval26.abuts((org.joda.time.ReadableInterval) interval29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Interval interval32 = interval29.withDurationBeforeEnd(readableDuration31);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean39 = interval35.abuts((org.joda.time.ReadableInterval) interval38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Interval interval41 = interval38.withDurationBeforeEnd(readableDuration40);
        org.joda.time.Period period42 = interval38.toPeriod();
        org.joda.time.Interval interval43 = interval29.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period42);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay23.plus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.YearMonthDay yearMonthDay46 = yearMonthDay44.plusYears(1);
        org.joda.time.DateTime dateTime47 = dateTime16.withFields((org.joda.time.ReadablePartial) yearMonthDay44);
        boolean boolean48 = interval9.isBefore((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime50 = dateTime47.withCenturyOfEra(378);
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay53.plusDays(17);
        org.joda.time.DateTime dateTime56 = yearMonthDay55.toDateTimeAtMidnight();
        int int57 = dateTime56.getEra();
        java.lang.String str58 = dateTime56.toString();
        org.joda.time.DateTime dateTime60 = dateTime56.minusMonths(19);
        org.joda.time.YearMonthDay yearMonthDay62 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay62.minusMonths((int) (short) -1);
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean67 = localDate65.isSupported(dateTimeFieldType66);
        int int68 = yearMonthDay62.indexOf(dateTimeFieldType66);
        org.joda.time.Instant instant70 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone71 = instant70.getZone();
        org.joda.time.DateTime dateTime72 = yearMonthDay62.toDateTimeAtCurrentTime(dateTimeZone71);
        java.lang.String str74 = dateTimeZone71.getName((long) 11);
        long long77 = dateTimeZone71.convertLocalToUTC((long) 2, false);
        long long79 = dateTimeZone71.nextTransition(4519481543L);
        org.joda.time.MutableDateTime mutableDateTime80 = new org.joda.time.MutableDateTime(dateTimeZone71);
        org.joda.time.DateTime dateTime81 = dateTime56.withZoneRetainFields(dateTimeZone71);
        org.joda.time.DateMidnight dateMidnight82 = new org.joda.time.DateMidnight((long) 363, dateTimeZone71);
        org.joda.time.DateTime dateTime83 = dateTime47.toDateTime(dateTimeZone71);
        int int84 = dateTime47.getYearOfEra();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 27166886 + "'", int17 == 27166886);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 7 + "'", int19 == 7);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(yearMonthDay46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1970-01-18T00:00:00.000Z" + "'", str58, "1970-01-18T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00" + "'", str74, "+00:00");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 2L + "'", long77 == 2L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 4519481543L + "'", long79 == 4519481543L);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1970 + "'", int84 == 1970);
    }

    @Test
    public void test11685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11685");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfHalfday();
        long long11 = dateTimeField9.roundHalfFloor(0L);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        int int13 = dateTimeField9.getMaximumShortTextLength(locale12);
        java.lang.String str14 = locale12.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology1, locale12);
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        long long19 = dateTimeParserBucket15.computeMillis(true, "");
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        int[] intArray23 = timeOfDay22.getValues();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay26.minusMinutes((int) '4');
        int int32 = timeOfDay22.compareTo((org.joda.time.ReadablePartial) timeOfDay26);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay22.minusMinutes((int) (short) -1);
        int int35 = timeOfDay34.size();
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime39 = localTime37.minusMinutes((int) (short) 1);
        int int40 = localTime37.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight43.withDurationAdded((long) 2, 100);
        org.joda.time.TimeOfDay timeOfDay49 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay51 = timeOfDay49.withSecondOfMinute((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight46.withFields((org.joda.time.ReadablePartial) timeOfDay51);
        boolean boolean53 = localTime37.equals((java.lang.Object) timeOfDay51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int55 = localTime37.get(dateTimeFieldType54);
        boolean boolean56 = timeOfDay34.isSupported(dateTimeFieldType54);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.TimeOfDay timeOfDay62 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant64 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime65 = timeOfDay62.toDateTime((org.joda.time.ReadableInstant) instant64);
        org.joda.time.Chronology chronology66 = instant64.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.clockhourOfHalfday();
        long long69 = dateTimeField67.roundHalfFloor(0L);
        java.util.Locale locale70 = java.util.Locale.TRADITIONAL_CHINESE;
        int int71 = dateTimeField67.getMaximumShortTextLength(locale70);
        java.lang.String str72 = locale70.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology59, locale70);
        java.lang.String str74 = locale70.getDisplayVariant();
        java.lang.String str75 = locale70.getDisplayScript();
        org.joda.time.TimeOfDay timeOfDay78 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant80 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime81 = timeOfDay78.toDateTime((org.joda.time.ReadableInstant) instant80);
        org.joda.time.Chronology chronology82 = instant80.getChronology();
        org.joda.time.DateTimeField dateTimeField83 = chronology82.clockhourOfHalfday();
        long long85 = dateTimeField83.roundHalfFloor(0L);
        java.util.Locale locale86 = java.util.Locale.TRADITIONAL_CHINESE;
        int int87 = dateTimeField83.getMaximumShortTextLength(locale86);
        java.lang.String str88 = locale70.getDisplayLanguage(locale86);
        java.lang.String str89 = locale70.getVariant();
        dateTimeParserBucket15.saveField(dateTimeFieldType54, "Tue Apr 30 00:00:00 UTC 1912", locale70);
        boolean boolean91 = locale70.hasExtensions();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "zh" + "'", str72, "zh");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "\u4e2d\u6587" + "'", str88, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test11686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11686");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight2.weekOfWeekyear();
        java.lang.String str8 = property7.getAsString();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        org.joda.time.Chronology chronology15 = instant13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.clockhourOfHalfday();
        long long18 = dateTimeField16.roundHalfFloor(0L);
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        int int20 = dateTimeField16.getMaximumShortTextLength(locale19);
        int int21 = property7.getMaximumShortTextLength(locale19);
        org.joda.time.DateMidnight dateMidnight23 = property7.addToCopy(22);
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.weekyear();
        org.joda.time.DateMidnight dateMidnight25 = property24.roundHalfCeilingCopy();
        org.joda.time.DateMidnight.Property property26 = dateMidnight25.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight28 = dateMidnight25.withWeekOfWeekyear(27060);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27060 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test11687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11687");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfHalfday();
        long long11 = dateTimeField9.roundHalfFloor(0L);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        int int13 = dateTimeField9.getMaximumShortTextLength(locale12);
        java.lang.String str14 = locale12.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology1, locale12);
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        boolean boolean32 = dateTimeParserBucket15.restoreState((java.lang.Object) (short) -1);
        java.util.Locale locale33 = dateTimeParserBucket15.getLocale();
        long long35 = dateTimeParserBucket15.computeMillis(true);
        java.lang.Integer int36 = dateTimeParserBucket15.getPivotYear();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertNull(int36);
    }

    @Test
    public void test11688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11688");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (short) 10, (long) 12);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone5);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight6.withDurationAdded((long) 2, 100);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean16 = interval12.abuts((org.joda.time.ReadableInterval) interval15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Interval interval18 = interval15.withDurationBeforeEnd(readableDuration17);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean25 = interval21.abuts((org.joda.time.ReadableInterval) interval24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Interval interval27 = interval24.withDurationBeforeEnd(readableDuration26);
        org.joda.time.Period period28 = interval24.toPeriod();
        org.joda.time.Interval interval29 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period28);
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder33 = builder30.setExtension('x', "zh");
        boolean boolean34 = period28.equals((java.lang.Object) builder30);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight6.withPeriodAdded((org.joda.time.ReadablePeriod) period28, 2022);
        org.joda.time.Interval interval37 = new org.joda.time.Interval(readableDuration3, (org.joda.time.ReadableInstant) dateMidnight6);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean44 = interval40.abuts((org.joda.time.ReadableInterval) interval43);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Interval interval46 = interval43.withDurationBeforeEnd(readableDuration45);
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean53 = interval49.abuts((org.joda.time.ReadableInterval) interval52);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Interval interval55 = interval52.withDurationBeforeEnd(readableDuration54);
        org.joda.time.Period period56 = interval52.toPeriod();
        org.joda.time.Interval interval57 = interval43.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period56);
        boolean boolean58 = interval37.contains((org.joda.time.ReadableInterval) interval57);
        long long59 = interval57.toDurationMillis();
        boolean boolean61 = interval57.isBefore((long) (byte) 10);
        boolean boolean62 = interval2.isBefore((org.joda.time.ReadableInterval) interval57);
        org.joda.time.MutableInterval mutableInterval63 = interval57.toMutableInterval();
        boolean boolean64 = interval57.isAfterNow();
        org.joda.time.Instant instant67 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone68 = instant67.getZone();
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone68);
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime69.weekOfWeekyear();
        org.joda.time.Instant instant72 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone73 = instant72.getZone();
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone73);
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.DateTime dateTime77 = dateTime74.withDurationAdded(readableDuration75, (int) (byte) 0);
        org.joda.time.DateTime dateTime79 = dateTime74.minusSeconds((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.DateTime dateTime81 = dateTime74.minus(readableDuration80);
        org.joda.time.DateTime dateTime83 = dateTime74.minusSeconds((int) (byte) 100);
        int int84 = mutableDateTime69.compareTo((org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.MutableDateTime.Property property85 = mutableDateTime69.dayOfMonth();
        mutableDateTime69.setMinuteOfDay(1);
        org.joda.time.TimeOfDay timeOfDay88 = new org.joda.time.TimeOfDay((java.lang.Object) mutableDateTime69);
        org.joda.time.MutableDateTime.Property property89 = mutableDateTime69.yearOfCentury();
        boolean boolean90 = interval57.isBefore((org.joda.time.ReadableInstant) mutableDateTime69);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(mutableInterval63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test11689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11689");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.minuteOfHour();
        java.lang.String str4 = property3.getAsShortText();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.TimeOfDay timeOfDay7 = property3.addNoWrapToCopy(100);
        java.util.Locale locale8 = java.util.Locale.TRADITIONAL_CHINESE;
        int int9 = property3.getMaximumTextLength(locale8);
        int int10 = property3.get();
        org.joda.time.TimeOfDay timeOfDay11 = property3.withMaximumValue();
        org.joda.time.TimeOfDay.Property property12 = timeOfDay11.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay14 = property12.addToCopy(8447027);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay16 = property12.setCopy("17:32:06.641");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"17:32:06.641\" for millisOfSecond is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(timeOfDay14);
    }

    @Test
    public void test11690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11690");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfHalfday();
        org.joda.time.DurationField durationField10 = chronology8.eras();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) (byte) 10, 30L, chronology8);
        org.joda.time.DateTimeField dateTimeField12 = chronology8.secondOfDay();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test11691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11691");
        java.lang.String[] strArray12 = new java.lang.String[] { "java.util.GregorianCalendar[time=-1820016000000,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=null,firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1912,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=121,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", "weekOfWeekyear", "PT0S", "hourOfHalfday", "clockhourOfHalfday", "1969-12-31T00:01:00.000Z", "+10:00", "0", "1", "\u4e0a\u5348 12:00:00", "11", "11" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.util.Iterator<java.lang.String> strItor15 = strSet13.iterator();
        java.util.Iterator<java.lang.String> strItor16 = strSet13.iterator();
        boolean boolean18 = strSet13.add("");
        strSet13.clear();
        boolean boolean20 = strSet13.isEmpty();
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone23 = instant22.getZone();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.withDurationAdded(readableDuration25, (int) (byte) 0);
        org.joda.time.DateTime dateTime29 = dateTime24.minusSeconds((int) (short) 1);
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime33 = localTime31.minusMinutes((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.seconds();
        boolean boolean35 = localTime31.isSupported(durationFieldType34);
        org.joda.time.DateTime dateTime37 = dateTime29.withFieldAdded(durationFieldType34, 0);
        org.joda.time.DateTime.Property property38 = dateTime37.monthOfYear();
        org.joda.time.DateTime dateTime40 = dateTime37.plusHours((int) (short) -1);
        org.joda.time.DateTime dateTime42 = dateTime37.minusDays(0);
        java.util.Locale locale47 = new java.util.Locale("\u5341\u4e8c\u6708", "hi!", "10");
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleKeys();
        org.joda.time.TimeOfDay timeOfDay51 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant53 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime54 = timeOfDay51.toDateTime((org.joda.time.ReadableInstant) instant53);
        org.joda.time.Chronology chronology55 = instant53.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.clockhourOfHalfday();
        org.joda.time.DurationField durationField57 = chronology55.eras();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.dayOfYear();
        org.joda.time.TimeOfDay timeOfDay61 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant63 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime64 = timeOfDay61.toDateTime((org.joda.time.ReadableInstant) instant63);
        org.joda.time.Chronology chronology65 = instant63.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.clockhourOfHalfday();
        long long68 = dateTimeField66.roundHalfFloor(0L);
        java.util.Locale locale69 = java.util.Locale.TRADITIONAL_CHINESE;
        int int70 = dateTimeField66.getMaximumShortTextLength(locale69);
        java.lang.String str71 = locale69.getLanguage();
        int int72 = dateTimeField58.getMaximumTextLength(locale69);
        java.lang.String str73 = locale47.getDisplayVariant(locale69);
        java.lang.String str74 = dateTime42.toString("8", locale69);
        boolean boolean75 = strSet13.equals((java.lang.Object) dateTime42);
        org.joda.time.TimeOfDay timeOfDay78 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant80 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime81 = timeOfDay78.toDateTime((org.joda.time.ReadableInstant) instant80);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter82 = null;
        java.lang.String str83 = dateTime81.toString(dateTimeFormatter82);
        org.joda.time.DateTime dateTime85 = dateTime81.minusYears(2022);
        org.joda.time.DateTime.Property property86 = dateTime81.minuteOfHour();
        org.joda.time.DateTime dateTime87 = dateTime81.toDateTime();
        org.joda.time.DateTime dateTime89 = dateTime87.withYear(89);
        java.util.GregorianCalendar gregorianCalendar90 = dateTime87.toGregorianCalendar();
        boolean boolean91 = strSet13.equals((java.lang.Object) gregorianCalendar90);
        org.joda.time.LocalTime localTime92 = org.joda.time.LocalTime.fromCalendarFields((java.util.Calendar) gregorianCalendar90);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertEquals(locale47.toString(), "\u5341\u4e8c\u6708_HI!_10");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "zh" + "'", str71, "zh");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 3 + "'", int72 == 3);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "10" + "'", str73, "10");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "8" + "'", str74, "8");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "1969-12-31T00:01:00.000Z" + "'", str83, "1969-12-31T00:01:00.000Z");
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(gregorianCalendar90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(localTime92);
    }

    @Test
    public void test11692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11692");
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime9 = timeOfDay6.toDateTime((org.joda.time.ReadableInstant) instant8);
        org.joda.time.Chronology chronology10 = instant8.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.year();
        org.joda.time.DateTimeField dateTimeField12 = chronology10.minuteOfHour();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean19 = interval15.abuts((org.joda.time.ReadableInterval) interval18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Interval interval21 = interval18.withDurationBeforeEnd(readableDuration20);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean28 = interval24.abuts((org.joda.time.ReadableInterval) interval27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Interval interval30 = interval27.withDurationBeforeEnd(readableDuration29);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean37 = interval33.abuts((org.joda.time.ReadableInterval) interval36);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Interval interval39 = interval36.withDurationBeforeEnd(readableDuration38);
        org.joda.time.Period period40 = interval36.toPeriod();
        org.joda.time.Interval interval41 = interval27.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Interval interval42 = interval18.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period40);
        int[] intArray45 = chronology10.get((org.joda.time.ReadablePeriod) period40, (long) 363, (long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now(chronology10);
        org.joda.time.DateTimeField dateTimeField47 = chronology10.dayOfMonth();
        org.joda.time.TimeOfDay timeOfDay48 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 26723186, chronology10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay49 = new org.joda.time.YearMonthDay(35, (-46800000), 75, chronology10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -46800000 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 0, 0, 0, 0, 0, 0, -263]");
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(timeOfDay48);
    }

    @Test
    public void test11693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11693");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.minusMinutes(60);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime4 = localTime0.withSecondOfMinute(982);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 982 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime2);
    }

    @Test
    public void test11694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11694");
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTime((org.joda.time.ReadableInstant) instant10);
        org.joda.time.Chronology chronology12 = instant10.getChronology();
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime18 = timeOfDay15.toDateTime((org.joda.time.ReadableInstant) instant17);
        int[] intArray20 = chronology12.get((org.joda.time.ReadablePartial) timeOfDay15, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(0L, chronology12);
        org.joda.time.DurationField durationField22 = chronology12.weeks();
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime.Property property25 = localTime24.hourOfDay();
        org.joda.time.LocalTime localTime26 = property25.roundFloorCopy();
        org.joda.time.LocalTime localTime28 = property25.setCopy(0);
        org.joda.time.LocalTime localTime30 = property25.addWrapFieldToCopy(7);
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        int[] intArray34 = timeOfDay33.getValues();
        org.joda.time.TimeOfDay timeOfDay37 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant39 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime40 = timeOfDay37.toDateTime((org.joda.time.ReadableInstant) instant39);
        org.joda.time.TimeOfDay timeOfDay42 = timeOfDay37.minusMinutes((int) '4');
        int int43 = timeOfDay33.compareTo((org.joda.time.ReadablePartial) timeOfDay37);
        org.joda.time.DateTimeField[] dateTimeFieldArray44 = timeOfDay37.getFields();
        int[] intArray45 = timeOfDay37.getValues();
        chronology12.validate((org.joda.time.ReadablePartial) localTime30, intArray45);
        org.joda.time.DurationField durationField47 = chronology12.days();
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(52L, chronology12);
        org.joda.time.Chronology chronology49 = chronology12.withUTC();
        org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.now(chronology49);
        org.joda.time.DateTimeField dateTimeField51 = chronology49.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime(1969, 214, 365, 26817, chronology49);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1969 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeField51);
    }

    @Test
    public void test11695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11695");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate0.minusMonths((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDate localDate8 = localDate6.plus(readablePeriod7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = localDate6.getFieldTypes();
        org.joda.time.LocalDate localDate11 = localDate6.minusWeeks((-600));
        org.joda.time.LocalDate.Property property12 = localDate11.yearOfEra();
        org.joda.time.LocalDate localDate13 = property12.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test11696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11696");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfHalfday();
        long long9 = dateTimeField7.roundHalfFloor(0L);
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        int int11 = dateTimeField7.getMaximumShortTextLength(locale10);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale13 = locale12.stripExtensions();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = locale12.getDisplayName(locale14);
        java.lang.String str17 = locale10.getDisplayLanguage(locale12);
        org.joda.time.TimeOfDay timeOfDay20 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime23 = timeOfDay20.toDateTime((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Chronology chronology24 = instant22.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.clockhourOfHalfday();
        long long27 = dateTimeField25.roundHalfFloor(0L);
        java.util.Locale locale28 = java.util.Locale.TRADITIONAL_CHINESE;
        int int29 = dateTimeField25.getMaximumShortTextLength(locale28);
        java.lang.String str30 = locale28.getDisplayVariant();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight33.withWeekyear(2);
        org.joda.time.DateMidnight.Property property38 = dateMidnight33.weekOfWeekyear();
        java.lang.String str39 = property38.getAsString();
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str41 = property38.getAsShortText(locale40);
        org.joda.time.TimeOfDay timeOfDay44 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant46 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime47 = timeOfDay44.toDateTime((org.joda.time.ReadableInstant) instant46);
        org.joda.time.Chronology chronology48 = instant46.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.clockhourOfHalfday();
        long long51 = dateTimeField49.roundHalfFloor(0L);
        java.util.Locale locale52 = java.util.Locale.TRADITIONAL_CHINESE;
        int int53 = dateTimeField49.getMaximumShortTextLength(locale52);
        java.util.Locale locale54 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale55 = locale54.stripExtensions();
        java.util.Locale locale56 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale57 = locale56.stripExtensions();
        java.lang.String str58 = locale54.getDisplayName(locale56);
        java.lang.String str59 = locale52.getDisplayLanguage(locale54);
        java.lang.String str60 = locale52.toLanguageTag();
        java.util.Set<java.lang.String> strSet61 = locale52.getUnicodeLocaleKeys();
        java.lang.String str62 = locale40.getDisplayCountry(locale52);
        java.lang.String str63 = locale28.getDisplayScript(locale40);
        java.lang.String str64 = locale10.getDisplayName(locale28);
        java.util.Calendar calendar65 = java.util.Calendar.getInstance(locale10);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean67 = calendar65.isSet(27057641);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 27057641");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str16, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u4e2d\u6587" + "'", str17, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1" + "'", str39, "1");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1" + "'", str41, "1");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str58, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u4e2d\u6587" + "'", str59, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "zh-TW" + "'", str60, "zh-TW");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u53f0\u7063" + "'", str62, "\u53f0\u7063");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str64, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertNotNull(calendar65);
// flaky:         org.junit.Assert.assertEquals(calendar65.toString(), "java.util.GregorianCalendar[time=1645515167181,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=32,SECOND=47,MILLISECOND=181,ZONE_OFFSET=36000000,DST_OFFSET=0]");
    }

    @Test
    public void test11697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11697");
        org.joda.time.YearMonthDay yearMonthDay2 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay2.plusDays(17);
        org.joda.time.DateTime dateTime5 = yearMonthDay4.toDateTimeAtMidnight();
        int int6 = dateTime5.getEra();
        java.lang.String str7 = dateTime5.toString();
        org.joda.time.DateTime dateTime9 = dateTime5.minusMonths(19);
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.minusMonths((int) (short) -1);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean16 = localDate14.isSupported(dateTimeFieldType15);
        int int17 = yearMonthDay11.indexOf(dateTimeFieldType15);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone20 = instant19.getZone();
        org.joda.time.DateTime dateTime21 = yearMonthDay11.toDateTimeAtCurrentTime(dateTimeZone20);
        java.lang.String str23 = dateTimeZone20.getName((long) 11);
        long long26 = dateTimeZone20.convertLocalToUTC((long) 2, false);
        long long28 = dateTimeZone20.nextTransition(4519481543L);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime30 = dateTime5.withZoneRetainFields(dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) 2008, dateTimeZone20);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-18T00:00:00.000Z" + "'", str7, "1970-01-18T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 2L + "'", long26 == 2L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 4519481543L + "'", long28 == 4519481543L);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test11698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11698");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay.Property property4 = yearMonthDay3.monthOfYear();
        int int5 = property4.get();
        org.joda.time.YearMonthDay yearMonthDay7 = property4.addWrapFieldToCopy(4);
        org.joda.time.YearMonthDay yearMonthDay8 = property4.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(575);
        org.joda.time.DateTime dateTime11 = yearMonthDay8.toDateTimeAtMidnight(dateTimeZone10);
        org.joda.time.DateTime.Property property12 = dateTime11.millisOfSecond();
        org.joda.time.DateTime dateTime14 = property12.addToCopy(26810864);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMonths(769);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test11699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11699");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfHalfday();
        long long11 = dateTimeField9.roundHalfFloor(0L);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        int int13 = dateTimeField9.getMaximumShortTextLength(locale12);
        java.lang.String str14 = locale12.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology1, locale12);
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        dateTimeParserBucket15.setOffset((java.lang.Integer) 22);
        dateTimeParserBucket15.setOffset(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfDay();
        dateTimeParserBucket15.saveField(dateTimeFieldType21, 303);
        int int24 = dateTimeParserBucket15.getOffset();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test11700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11700");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.property(dateTimeFieldType3);
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusMinutes(35);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusMinutes(22);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.yearOfCentury();
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.yearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.minusMinutes(26707024);
        boolean boolean20 = localDateTime6.isEqual((org.joda.time.ReadablePartial) localDateTime13);
        java.lang.String str21 = localDateTime13.toString();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime13.minusDays(33);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-22T06:57:47.249" + "'", str21, "2022-02-22T06:57:47.249");
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test11701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11701");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.property(dateTimeFieldType3);
        java.util.Locale locale9 = new java.util.Locale("\u5341\u4e8c\u6708", "hi!", "10");
        java.lang.String str10 = localDateTime0.toString("+10:00", locale9);
        int int11 = localDateTime0.getHourOfDay();
        int int12 = localDateTime0.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime0.withFieldAdded(durationFieldType13, 229);
        org.joda.time.LocalDateTime.Property property16 = localDateTime0.year();
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean23 = interval19.abuts((org.joda.time.ReadableInterval) interval22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Interval interval25 = interval22.withDurationBeforeEnd(readableDuration24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        boolean boolean27 = interval22.overlaps(readableInterval26);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean34 = interval30.abuts((org.joda.time.ReadableInterval) interval33);
        long long35 = interval33.getStartMillis();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean42 = interval38.abuts((org.joda.time.ReadableInterval) interval41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Interval interval44 = interval41.withDurationBeforeEnd(readableDuration43);
        org.joda.time.Interval interval45 = interval33.overlap((org.joda.time.ReadableInterval) interval41);
        org.joda.time.Duration duration46 = interval41.toDuration();
        org.joda.time.Duration duration47 = duration46.toDuration();
        org.joda.time.Interval interval48 = interval22.withDurationAfterStart((org.joda.time.ReadableDuration) duration46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime0.minus((org.joda.time.ReadableDuration) duration46);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.plusMillis(100);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals(locale9.toString(), "\u5341\u4e8c\u6708_HI!_10");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+10:00" + "'", str10, "+10:00");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 7 + "'", int11 == 7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20 + "'", int12 == 20);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNull(interval45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test11702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11702");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime3 = localTime1.minusMinutes((int) (short) 1);
        org.joda.time.LocalTime localTime5 = localTime1.withMillisOfDay((int) (byte) 1);
        org.joda.time.LocalTime.Property property6 = localTime1.minuteOfHour();
        org.joda.time.Chronology chronology7 = localTime1.getChronology();
        org.joda.time.LocalTime localTime9 = localTime1.minusMillis(53);
        int int10 = localTime9.getMillisOfSecond();
        org.joda.time.LocalTime localTime12 = localTime9.minusMinutes(26707024);
        org.joda.time.Chronology chronology13 = localTime9.getChronology();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 982 + "'", int10 == 982);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(chronology13);
    }

    @Test
    public void test11703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11703");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        mutableDateTime16.setYear(3);
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone21 = instant20.getZone();
        mutableDateTime16.setZone(dateTimeZone21);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(dateTimeZone21);
        java.lang.String str25 = dateTimeZone21.getName((long) 'x');
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now(dateTimeZone21);
        mutableDateTime26.addWeeks((-1645515368));
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone29);
        long long33 = dateTimeZone29.nextTransition(29635200000L);
        java.util.Locale locale35 = java.util.Locale.JAPAN;
        java.lang.String str36 = dateTimeZone29.getShortName((long) 32772, locale35);
        mutableDateTime26.setZoneRetainFields(dateTimeZone29);
        java.lang.String str38 = dateTimeZone29.getID();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 29635200000L + "'", long33 == 29635200000L);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
    }

    @Test
    public void test11704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11704");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate7 = localDate0.plusMonths((int) (short) 100);
        org.joda.time.LocalDate localDate9 = localDate7.withWeekyear((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int11 = localDate7.get(dateTimeFieldType10);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight14.withDurationAdded((long) 2, 100);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean24 = interval20.abuts((org.joda.time.ReadableInterval) interval23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Interval interval26 = interval23.withDurationBeforeEnd(readableDuration25);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean33 = interval29.abuts((org.joda.time.ReadableInterval) interval32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Interval interval35 = interval32.withDurationBeforeEnd(readableDuration34);
        org.joda.time.Period period36 = interval32.toPeriod();
        org.joda.time.Interval interval37 = interval23.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period36);
        java.util.Locale.Builder builder38 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder41 = builder38.setExtension('x', "zh");
        boolean boolean42 = period36.equals((java.lang.Object) builder38);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight14.withPeriodAdded((org.joda.time.ReadablePeriod) period36, 2022);
        org.joda.time.LocalDate localDate45 = localDate7.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.LocalDate.Property property46 = localDate7.weekOfWeekyear();
        int int47 = localDate7.getEra();
        org.joda.time.LocalDate.Property property48 = localDate7.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate50 = property48.setCopy("java.io.IOException: clockhourOfHalfday");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"java.io.IOException: clockhourOfHalfday\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 30 + "'", int11 == 30);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(property48);
    }

    @Test
    public void test11705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11705");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        org.joda.time.Instant instant33 = mutableDateTime16.toInstant();
        org.joda.time.DateTime dateTime34 = instant33.toDateTime();
        org.joda.time.DateTime dateTime36 = dateTime34.minusMinutes(35);
        org.joda.time.DateTime.Property property37 = dateTime36.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField38 = property37.getField();
        org.joda.time.DateTime dateTime40 = property37.addWrapFieldToCopy(26831);
        org.joda.time.TimeOfDay timeOfDay43 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant45 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime46 = timeOfDay43.toDateTime((org.joda.time.ReadableInstant) instant45);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime49 = dateTime46.withDurationAdded(readableDuration47, (int) (short) 1);
        org.joda.time.TimeOfDay timeOfDay53 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant55 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime56 = timeOfDay53.toDateTime((org.joda.time.ReadableInstant) instant55);
        org.joda.time.Chronology chronology57 = instant55.getChronology();
        org.joda.time.TimeOfDay timeOfDay60 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant62 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime63 = timeOfDay60.toDateTime((org.joda.time.ReadableInstant) instant62);
        int[] intArray65 = chronology57.get((org.joda.time.ReadablePartial) timeOfDay60, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime(0L, chronology57);
        mutableDateTime66.setYear(3);
        org.joda.time.Instant instant70 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone71 = instant70.getZone();
        mutableDateTime66.setZone(dateTimeZone71);
        org.joda.time.DateTime dateTime73 = org.joda.time.DateTime.now(dateTimeZone71);
        org.joda.time.DateTime dateTime74 = dateTime49.withZoneRetainFields(dateTimeZone71);
        org.joda.time.DateTime dateTime75 = dateTime40.withZoneRetainFields(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(intArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
    }

    @Test
    public void test11706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11706");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = property3.getFieldType();
        org.joda.time.DurationField durationField5 = property3.getDurationField();
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime12 = timeOfDay9.toDateTime((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Chronology chronology13 = instant11.getChronology();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime19 = timeOfDay16.toDateTime((org.joda.time.ReadableInstant) instant18);
        int[] intArray21 = chronology13.get((org.joda.time.ReadablePartial) timeOfDay16, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(0L, chronology13);
        int int23 = mutableDateTime22.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime22.property(dateTimeFieldType24);
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime31 = timeOfDay28.toDateTime((org.joda.time.ReadableInstant) instant30);
        org.joda.time.Chronology chronology32 = instant30.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.clockhourOfHalfday();
        long long35 = dateTimeField33.roundHalfFloor(0L);
        java.util.Locale locale36 = java.util.Locale.TRADITIONAL_CHINESE;
        int int37 = dateTimeField33.getMaximumShortTextLength(locale36);
        java.util.Locale locale38 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale39 = locale38.stripExtensions();
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale41 = locale40.stripExtensions();
        java.lang.String str42 = locale38.getDisplayName(locale40);
        java.lang.String str43 = locale36.getDisplayLanguage(locale38);
        java.util.Calendar calendar44 = mutableDateTime22.toCalendar(locale38);
        java.lang.String str45 = property3.getAsShortText(locale38);
        org.joda.time.DurationField durationField46 = property3.getDurationField();
        int int49 = durationField46.getValue((long) 363, (long) 30);
        long long51 = durationField46.getMillis((long) 24959078);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str42, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u4e2d\u6587" + "'", str43, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar44);
        org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1" + "'", str45, "1");
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1497544680000L + "'", long51 == 1497544680000L);
    }

    @Test
    public void test11707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11707");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        org.joda.time.Chronology chronology3 = null;
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("Chinesisch (Taiwan)");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (-1645515250), chronology3, locale5);
        java.util.Locale.setDefault(category0, locale5);
        java.util.Locale locale8 = java.util.Locale.getDefault(category0);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone12 = instant11.getZone();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime18 = property14.add((long) 365);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType20 = dateTimeFieldType19.getRangeDurationType();
        java.lang.String str21 = durationFieldType20.toString();
        mutableDateTime18.add(durationFieldType20, 13);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime18.secondOfDay();
        java.util.Locale locale27 = new java.util.Locale("PT0S", "Property[millisOfSecond]");
        java.lang.String str28 = property24.getAsText(locale27);
        java.lang.String str29 = locale27.getDisplayVariant();
        java.util.Locale.setDefault(category0, locale27);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "\u53f0\u7063");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "halfdays" + "'", str21, "halfdays");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals(locale27.toString(), "pt0s_PROPERTY[MILLISOFSECOND]");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "65100" + "'", str28, "65100");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test11708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11708");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.clockhourOfHalfday();
        org.joda.time.DurationField durationField9 = chronology7.eras();
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType0.getField(chronology7);
        org.joda.time.DateTimeField dateTimeField11 = chronology7.hourOfDay();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology7);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.DateTime dateTime14 = dateTime12.plus(readableDuration13);
        org.joda.time.DateTime dateTime16 = dateTime12.withYearOfEra(26673621);
        org.joda.time.DateTime dateTime18 = dateTime12.plusYears(292275055);
        org.joda.time.DateTime dateTime20 = dateTime18.withYearOfEra(4503347);
        org.joda.time.DateTime dateTime22 = dateTime18.plusHours((-600));
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTimeISO();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test11709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11709");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        org.joda.time.MutableDateTime mutableDateTime20 = property19.roundHalfEven();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.yearOfEra();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime20.centuryOfEra();
        int int23 = property22.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2922789 + "'", int23 == 2922789);
    }

    @Test
    public void test11710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11710");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(2);
        org.joda.time.DateTime dateTime14 = dateTime10.withHourOfDay(22);
        org.joda.time.DateTime dateTime16 = dateTime14.withDayOfYear(9);
        org.joda.time.LocalTime localTime17 = dateTime16.toLocalTime();
        org.joda.time.DateTime dateTime19 = dateTime16.plusMonths(9);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test11711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11711");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean6 = interval2.abuts((org.joda.time.ReadableInterval) interval5);
        long long7 = interval5.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.Interval interval9 = interval5.withPeriodAfterStart(readablePeriod8);
        org.joda.time.Interval interval11 = interval9.withEndMillis((long) 26688);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone14 = instant13.getZone();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.withDurationAdded(readableDuration16, (int) (byte) 0);
        org.joda.time.DateTime dateTime20 = dateTime15.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime22 = dateTime20.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime24 = dateTime22.plusDays(2);
        org.joda.time.Interval interval25 = interval11.withEnd((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime27 = dateTime24.plusMinutes((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime30 = dateTime24.withField(dateTimeFieldType28, 0);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean37 = interval33.abuts((org.joda.time.ReadableInterval) interval36);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Interval interval39 = interval36.withDurationBeforeEnd(readableDuration38);
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean46 = interval42.abuts((org.joda.time.ReadableInterval) interval45);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Interval interval48 = interval45.withDurationBeforeEnd(readableDuration47);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean55 = interval51.abuts((org.joda.time.ReadableInterval) interval54);
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Interval interval57 = interval54.withDurationBeforeEnd(readableDuration56);
        org.joda.time.Period period58 = interval54.toPeriod();
        org.joda.time.Interval interval59 = interval45.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period58);
        org.joda.time.Interval interval60 = interval36.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period58);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Interval interval62 = interval36.withDurationAfterStart(readableDuration61);
        long long63 = interval62.getStartMillis();
        java.lang.String str64 = interval62.toString();
        org.joda.time.Chronology chronology65 = interval62.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = dateTimeFieldType28.getField(chronology65);
        org.joda.time.DateTimeField dateTimeField67 = chronology65.dayOfMonth();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z" + "'", str64, "1970-01-01T00:00:00.000Z/1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
    }

    @Test
    public void test11712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11712");
        java.util.Date date3 = new java.util.Date(7, 100, 1);
        int int4 = date3.getHours();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean7 = localDate5.isSupported(dateTimeFieldType6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = localDate5.toDateMidnight(dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate5.minusMonths((int) (short) 10);
        int int12 = localDate5.getDayOfYear();
        org.joda.time.LocalDate.Property property13 = localDate5.monthOfYear();
        java.util.Date date14 = localDate5.toDate();
        boolean boolean15 = date3.after(date14);
        java.lang.String str16 = date14.toLocaleString();
        date14.setSeconds(4194);
        int int19 = date14.getHours();
        date14.setSeconds(26999258);
        org.junit.Assert.assertEquals(date3.toString(), "Sat May 01 00:00:00 GMT+10:00 1915");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(date14);
        org.junit.Assert.assertEquals(date14.toString(), "Sat Dec 31 12:56:38 GMT+10:00 2022");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Feb 22, 2022 12:00:00 AM" + "'", str16, "Feb 22, 2022 12:00:00 AM");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test11713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11713");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight2.weekOfWeekyear();
        java.lang.String str8 = property7.getAsString();
        java.util.Locale locale9 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale10 = locale9.stripExtensions();
        int int11 = property7.getMaximumTextLength(locale9);
        org.joda.time.DateMidnight dateMidnight12 = property7.roundHalfCeilingCopy();
        int int13 = property7.getMinimumValueOverall();
        org.joda.time.DateMidnight dateMidnight14 = property7.withMinimumValue();
        org.joda.time.DateMidnight dateMidnight16 = property7.addWrapFieldToCopy(178);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean24 = interval20.abuts((org.joda.time.ReadableInterval) interval23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Interval interval26 = interval23.withDurationBeforeEnd(readableDuration25);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean33 = interval29.abuts((org.joda.time.ReadableInterval) interval32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Interval interval35 = interval32.withDurationBeforeEnd(readableDuration34);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean42 = interval38.abuts((org.joda.time.ReadableInterval) interval41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Interval interval44 = interval41.withDurationBeforeEnd(readableDuration43);
        org.joda.time.Period period45 = interval41.toPeriod();
        org.joda.time.Interval interval46 = interval32.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period45);
        org.joda.time.Interval interval47 = interval23.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period45);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.Interval interval49 = interval23.withDurationAfterStart(readableDuration48);
        org.joda.time.TimeOfDay timeOfDay52 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant54 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime55 = timeOfDay52.toDateTime((org.joda.time.ReadableInstant) instant54);
        org.joda.time.Chronology chronology56 = instant54.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.clockhourOfHalfday();
        org.joda.time.DurationField durationField58 = chronology56.eras();
        org.joda.time.DateTimeField dateTimeField59 = chronology56.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone60 = chronology56.getZone();
        org.joda.time.DateTimeField dateTimeField61 = chronology56.clockhourOfDay();
        org.joda.time.Interval interval62 = interval23.withChronology(chronology56);
        org.joda.time.DateTimeField dateTimeField63 = chronology56.millisOfDay();
        long long65 = dateTimeField63.roundHalfFloor(32768L);
        org.joda.time.Instant instant69 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone70 = instant69.getZone();
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone70);
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime71.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime73 = property72.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime74 = property72.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime76 = property72.add((long) 365);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DurationFieldType durationFieldType78 = dateTimeFieldType77.getRangeDurationType();
        java.lang.String str79 = durationFieldType78.toString();
        mutableDateTime76.add(durationFieldType78, 13);
        org.joda.time.MutableDateTime.Property property82 = mutableDateTime76.secondOfDay();
        java.util.Locale locale85 = new java.util.Locale("PT0S", "Property[millisOfSecond]");
        java.lang.String str86 = property82.getAsText(locale85);
        java.lang.String str87 = locale85.getDisplayCountry();
        java.lang.String str88 = dateTimeField63.getAsShortText(26599339L, locale85);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight89 = property7.setCopy("", locale85);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 32768L + "'", long65 == 32768L);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(mutableDateTime73);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(mutableDateTime76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(durationFieldType78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "halfdays" + "'", str79, "halfdays");
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertEquals(locale85.toString(), "pt0s_PROPERTY[MILLISOFSECOND]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "65100" + "'", str86, "65100");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "PROPERTY[MILLISOFSECOND]" + "'", str87, "PROPERTY[MILLISOFSECOND]");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "26599339" + "'", str88, "26599339");
    }

    @Test
    public void test11714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11714");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = dateTime3.withHourOfDay(20);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight8.withWeekyear(2);
        org.joda.time.DateMidnight.Property property13 = dateMidnight8.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight8.withYearOfCentury(1);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean19 = interval18.isBeforeNow();
        org.joda.time.Period period20 = interval18.toPeriod();
        java.lang.String str21 = period20.toString();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight8.withPeriodAdded((org.joda.time.ReadablePeriod) period20, (int) (byte) 0);
        org.joda.time.DateTime dateTime25 = dateTime5.withPeriodAdded((org.joda.time.ReadablePeriod) period20, 26722694);
        org.joda.time.DateMidnight dateMidnight26 = dateTime25.toDateMidnight();
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime32 = timeOfDay29.toDateTime((org.joda.time.ReadableInstant) instant31);
        org.joda.time.DateTime dateTime33 = timeOfDay29.toDateTimeToday();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight26.withFields((org.joda.time.ReadablePartial) timeOfDay29);
        long long35 = dateMidnight34.getMillis();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT0S" + "'", str21, "PT0S");
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1645488000000L + "'", long35 == 1645488000000L);
    }

    @Test
    public void test11715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11715");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfHalfday();
        long long29 = dateTimeField27.roundHalfFloor(0L);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        int int31 = dateTimeField27.getMaximumShortTextLength(locale30);
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale32.getDisplayName(locale34);
        java.lang.String str37 = locale30.getDisplayLanguage(locale32);
        java.util.Calendar calendar38 = mutableDateTime16.toCalendar(locale32);
        int int39 = calendar38.getWeekYear();
        calendar38.set((int) (byte) -1, (int) (byte) 100, 0, 8, (int) (short) 100);
        calendar38.set((int) (byte) 0, 35, 100, (int) 'a', 2000);
        calendar38.set(9, (-46800000));
        java.util.Date date58 = new java.util.Date(0, (int) '4', 0);
        int int59 = date58.getMinutes();
        date58.setDate(32770);
        int int62 = date58.getDay();
        date58.setYear((int) (byte) 0);
        calendar38.setTime(date58);
        date58.setHours(26702077);
        int int68 = date58.getHours();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str36, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u6587" + "'", str37, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-2178612000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1900,MONTH=11,WEEK_OF_YEAR=51,WEEK_OF_MONTH=4,DAY_OF_MONTH=18,DAY_OF_YEAR=352,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertEquals(date58.toString(), "Tue Feb 14 13:00:00 GMT+10:00 4947");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 13 + "'", int68 == 13);
    }

    @Test
    public void test11716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11716");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        mutableDateTime16.setMillisOfDay(2);
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property25 = timeOfDay24.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property25.getFieldType();
        org.joda.time.DurationField durationField27 = property25.getDurationField();
        boolean boolean28 = mutableDateTime16.equals((java.lang.Object) durationField27);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone31 = instant30.getZone();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(dateTimeZone31);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTime dateTime35 = dateTime32.withDurationAdded(readableDuration33, (int) (byte) 0);
        org.joda.time.DateTime dateTime37 = dateTime32.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime39 = dateTime37.plusMinutes((int) (byte) 10);
        int int40 = dateTime39.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime41 = dateTime39.toDateTimeISO();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean48 = interval44.abuts((org.joda.time.ReadableInterval) interval47);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Interval interval50 = interval47.withDurationBeforeEnd(readableDuration49);
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean57 = interval53.abuts((org.joda.time.ReadableInterval) interval56);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Interval interval59 = interval56.withDurationBeforeEnd(readableDuration58);
        org.joda.time.Interval interval62 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval65 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean66 = interval62.abuts((org.joda.time.ReadableInterval) interval65);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Interval interval68 = interval65.withDurationBeforeEnd(readableDuration67);
        org.joda.time.Period period69 = interval65.toPeriod();
        org.joda.time.Interval interval70 = interval56.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period69);
        org.joda.time.Interval interval71 = interval47.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period69);
        org.joda.time.DateTime dateTime72 = dateTime39.plus((org.joda.time.ReadablePeriod) period69);
        mutableDateTime16.add((org.joda.time.ReadablePeriod) period69, 0);
        mutableDateTime16.setMonthOfYear(1);
        mutableDateTime16.setMinuteOfDay(17);
        int int79 = mutableDateTime16.getSecondOfMinute();
        org.joda.time.Instant instant80 = new org.joda.time.Instant();
        org.joda.time.Instant instant82 = instant80.plus((long) 2);
        org.joda.time.DateTime dateTime83 = instant82.toDateTime();
        long long84 = instant82.getMillis();
        org.joda.time.Chronology chronology85 = instant82.getChronology();
        mutableDateTime16.setChronology(chronology85);
        org.joda.time.DateTimeField dateTimeField87 = chronology85.era();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 8 + "'", int40 == 8);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(instant82);
        org.junit.Assert.assertNotNull(dateTime83);
// flaky:         org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1645515167635L + "'", long84 == 1645515167635L);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField87);
    }

    @Test
    public void test11717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11717");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.property(dateTimeFieldType3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withMillisOfDay((int) '#');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.weekyear();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMillis((-1645515262));
        int int11 = localDateTime10.getEra();
        int int12 = localDateTime10.getEra();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withYear(57170897);
        int int15 = localDateTime10.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test11718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11718");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 10);
        int int11 = dateTime10.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime10.plusDays(1);
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone16 = instant15.getZone();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime20 = dateTime17.withDurationAdded(readableDuration18, (int) (byte) 0);
        int int21 = dateTime20.getMillisOfDay();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Chronology chronology30 = instant28.getChronology();
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime36 = timeOfDay33.toDateTime((org.joda.time.ReadableInstant) instant35);
        int[] intArray38 = chronology30.get((org.joda.time.ReadablePartial) timeOfDay33, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(0L, chronology30);
        mutableDateTime39.setYear(3);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone44 = instant43.getZone();
        mutableDateTime39.setZone(dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight(dateTimeZone44);
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime(1L, dateTimeZone44);
        org.joda.time.Chronology chronology48 = localTime47.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime20, chronology48);
        org.joda.time.DateTime dateTime51 = dateTime10.withChronology(chronology48);
        org.joda.time.DateTime.Property property52 = dateTime51.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 27167680 + "'", int21 == 27167680);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test11719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11719");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.DateTime dateTime8 = instant5.toDateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.plusWeeks(2022);
        org.joda.time.DateTime dateTime12 = dateTime10.plus(2L);
        org.joda.time.DateTime dateTime14 = dateTime10.plusMinutes(59);
        int int15 = dateTime14.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight18.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.minusWeeks((int) (short) 100);
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean26 = dateMidnight23.isSupported(dateTimeFieldType25);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime34 = timeOfDay31.toDateTime((org.joda.time.ReadableInstant) instant33);
        org.joda.time.Chronology chronology35 = instant33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.clockhourOfHalfday();
        org.joda.time.DurationField durationField37 = chronology35.eras();
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType28.getField(chronology35);
        org.joda.time.DateTimeField dateTimeField39 = chronology35.hourOfDay();
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((long) 22, chronology35);
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType25.getField(chronology35);
        org.joda.time.DateMidnight dateMidnight42 = org.joda.time.DateMidnight.now(chronology35);
        org.joda.time.Chronology chronology43 = chronology35.withUTC();
        org.joda.time.DateTime dateTime44 = dateTime14.toDateTime(chronology35);
        java.util.Locale locale45 = java.util.Locale.SIMPLIFIED_CHINESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket(1645511099224L, chronology35, locale45, (java.lang.Integer) 121);
        java.lang.String str48 = locale45.getScript();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
    }

    @Test
    public void test11720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11720");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime3 = localTime1.minusMinutes((int) (short) 1);
        org.joda.time.LocalTime localTime5 = localTime1.withMillisOfDay((int) (byte) 1);
        org.joda.time.LocalTime.Property property6 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime8 = property6.addCopy((int) '4');
        org.joda.time.LocalTime.Property property9 = localTime8.secondOfMinute();
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay13.monthOfYear();
        int int15 = property14.get();
        org.joda.time.YearMonthDay yearMonthDay17 = property14.addWrapFieldToCopy(4);
        org.joda.time.YearMonthDay yearMonthDay19 = property14.addToCopy((int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay20 = property14.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = property14.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            int int22 = localTime8.get(dateTimeFieldType21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'monthOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
    }

    @Test
    public void test11721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11721");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusWeeks((int) (short) 100);
        int int8 = dateMidnight5.getCenturyOfEra();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight5.withMillis((long) 26874435);
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime17 = timeOfDay14.toDateTime((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Chronology chronology18 = instant16.getChronology();
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime24 = timeOfDay21.toDateTime((org.joda.time.ReadableInstant) instant23);
        int[] intArray26 = chronology18.get((org.joda.time.ReadablePartial) timeOfDay21, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(0L, chronology18);
        mutableDateTime27.setYear(3);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone32 = instant31.getZone();
        mutableDateTime27.setZone(dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(dateTimeZone32);
        long long38 = dateTimeZone32.convertLocalToUTC((long) 982, true, (long) (short) 10);
        long long40 = dateTimeZone32.convertUTCToLocal(3120000L);
        boolean boolean41 = dateTimeZone32.isFixed();
        int int43 = dateTimeZone32.getStandardOffset((long) (-1645515420));
        org.joda.time.MutableDateTime mutableDateTime44 = dateMidnight5.toMutableDateTime(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 19 + "'", int8 == 19);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 982L + "'", long38 == 982L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 3120000L + "'", long40 == 3120000L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime44);
    }

    @Test
    public void test11722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11722");
        java.lang.Object obj2 = null;
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime8 = timeOfDay5.toDateTime((org.joda.time.ReadableInstant) instant7);
        org.joda.time.Chronology chronology9 = instant7.getChronology();
        org.joda.time.Interval interval10 = new org.joda.time.Interval(obj2, chronology9);
        org.joda.time.DateMidnight dateMidnight11 = org.joda.time.DateMidnight.now(chronology9);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) (-1645515391), chronology9);
        org.joda.time.DateTimeField dateTimeField13 = chronology9.clockhourOfDay();
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 26831, chronology9);
        org.joda.time.LocalTime localTime15 = timeOfDay14.toLocalTime();
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(localTime15);
    }

    @Test
    public void test11723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11723");
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        int[] intArray6 = timeOfDay5.getValues();
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime12 = timeOfDay9.toDateTime((org.joda.time.ReadableInstant) instant11);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay9.minusMinutes((int) '4');
        int int15 = timeOfDay5.compareTo((org.joda.time.ReadablePartial) timeOfDay9);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay5.minusMinutes((int) (short) -1);
        int int18 = timeOfDay17.size();
        java.lang.String str20 = timeOfDay17.toString("1");
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime26 = timeOfDay23.toDateTime((org.joda.time.ReadableInstant) instant25);
        org.joda.time.Chronology chronology27 = instant25.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.year();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.minuteOfHour();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean36 = interval32.abuts((org.joda.time.ReadableInterval) interval35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Interval interval38 = interval35.withDurationBeforeEnd(readableDuration37);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean45 = interval41.abuts((org.joda.time.ReadableInterval) interval44);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Interval interval47 = interval44.withDurationBeforeEnd(readableDuration46);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean54 = interval50.abuts((org.joda.time.ReadableInterval) interval53);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.Interval interval56 = interval53.withDurationBeforeEnd(readableDuration55);
        org.joda.time.Period period57 = interval53.toPeriod();
        org.joda.time.Interval interval58 = interval44.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period57);
        org.joda.time.Interval interval59 = interval35.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period57);
        int[] intArray62 = chronology27.get((org.joda.time.ReadablePeriod) period57, (long) 363, (long) (byte) 100);
        org.joda.time.TimeOfDay timeOfDay63 = timeOfDay17.plus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.TimeOfDay timeOfDay65 = timeOfDay63.withSecondOfMinute(50);
        org.joda.time.TimeOfDay timeOfDay69 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant71 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime72 = timeOfDay69.toDateTime((org.joda.time.ReadableInstant) instant71);
        org.joda.time.Chronology chronology73 = instant71.getChronology();
        org.joda.time.DateTimeField dateTimeField74 = chronology73.clockhourOfHalfday();
        org.joda.time.DurationField durationField75 = chronology73.eras();
        org.joda.time.DateTimeField dateTimeField76 = chronology73.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone77 = chronology73.getZone();
        org.joda.time.DateTimeField dateTimeField78 = chronology73.clockhourOfDay();
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(3098892765600052L, chronology73);
        org.joda.time.TimeOfDay timeOfDay80 = timeOfDay65.withChronologyRetainFields(chronology73);
        org.joda.time.TimeOfDay.Property property81 = timeOfDay65.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay82 = property81.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay84 = property81.addNoWrapToCopy(0);
        org.joda.time.Chronology chronology85 = timeOfDay84.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate86 = new org.joda.time.LocalDate(4522, 26937, 28800100, chronology85);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26937 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1" + "'", str20, "1");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 0, 0, 0, 0, 0, 0, -263]");
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertNotNull(timeOfDay65);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(timeOfDay80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(timeOfDay82);
        org.junit.Assert.assertNotNull(timeOfDay84);
        org.junit.Assert.assertNotNull(chronology85);
    }

    @Test
    public void test11724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11724");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        boolean boolean33 = mutableDateTime16.isEqualNow();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime16.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime36 = property34.set(22);
        org.joda.time.Instant instant38 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone39 = instant38.getZone();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone39);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime43 = dateTime40.withDurationAdded(readableDuration41, (int) (byte) 0);
        org.joda.time.DateTime dateTime45 = dateTime40.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime47 = dateTime45.plusMinutes((int) (byte) 10);
        int int48 = dateTime47.getYearOfCentury();
        int int49 = property34.getDifference((org.joda.time.ReadableInstant) dateTime47);
        int int50 = property34.get();
        org.joda.time.MutableDateTime mutableDateTime51 = property34.roundCeiling();
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime51.centuryOfEra();
        mutableDateTime51.setMillis(1920019L);
        org.joda.time.Instant instant56 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone57 = instant56.getZone();
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone59);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight60.withWeekyear(2);
        org.joda.time.DateTimeZone dateTimeZone65 = dateMidnight60.getZone();
        long long67 = dateTimeZone57.getMillisKeepLocal(dateTimeZone65, 10L);
        mutableDateTime51.setZone(dateTimeZone57);
        java.util.TimeZone timeZone69 = dateTimeZone57.toTimeZone();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 22 + "'", int48 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1645515744) + "'", int49 == (-1645515744));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 22 + "'", int50 == 22);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 10L + "'", long67 == 10L);
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test11725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11725");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.clockhourOfHalfday();
        long long9 = dateTimeField7.roundHalfFloor(0L);
        java.util.Locale locale10 = java.util.Locale.TRADITIONAL_CHINESE;
        int int11 = dateTimeField7.getMaximumShortTextLength(locale10);
        java.lang.String str12 = locale10.getScript();
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property16 = timeOfDay15.minuteOfHour();
        java.lang.String str17 = property16.getAsShortText();
        org.joda.time.DateTimeField dateTimeField18 = property16.getField();
        org.joda.time.TimeOfDay timeOfDay20 = property16.addNoWrapToCopy(100);
        java.util.Locale locale21 = java.util.Locale.TRADITIONAL_CHINESE;
        int int22 = property16.getMaximumTextLength(locale21);
        java.lang.String str23 = locale10.getDisplayLanguage(locale21);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u4e2d\u6587" + "'", str23, "\u4e2d\u6587");
    }

    @Test
    public void test11726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11726");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) 65);
        org.joda.time.LocalTime.Property property2 = localTime1.secondOfMinute();
        org.joda.time.LocalTime localTime4 = localTime1.minusHours(122);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
    }

    @Test
    public void test11727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11727");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = dateTime5.toString(dateTimeFormatter6);
        org.joda.time.DateTime dateTime9 = dateTime5.minusYears(2022);
        org.joda.time.DateTime.Property property10 = dateTime5.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property10.addToCopy(5);
        org.joda.time.DateMidnight dateMidnight13 = dateTime12.toDateMidnight();
        int int14 = dateMidnight13.getMinuteOfHour();
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.withDayOfYear((int) 'a');
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(dateTimeZone17);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.minutes();
        mutableDateTime18.add(durationFieldType19, 24);
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone24 = instant23.getZone();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight27.withWeekyear(2);
        org.joda.time.DateTimeZone dateTimeZone32 = dateMidnight27.getZone();
        long long34 = dateTimeZone24.getMillisKeepLocal(dateTimeZone32, 10L);
        boolean boolean36 = dateTimeZone24.isStandardOffset((long) 365);
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now(dateTimeZone24);
        boolean boolean39 = dateTimeZone24.isStandardOffset((-53L));
        mutableDateTime18.setZone(dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight13.withZoneRetainFields(dateTimeZone24);
        int int42 = dateMidnight41.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1969-12-31T00:01:00.000Z" + "'", str7, "1969-12-31T00:01:00.000Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 19 + "'", int42 == 19);
    }

    @Test
    public void test11728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11728");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, 0);
        java.lang.String str3 = dateTimeZone2.toString();
        java.util.TimeZone timeZone4 = dateTimeZone2.toTimeZone();
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfHalfday();
        long long14 = dateTimeField12.roundHalfFloor(0L);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        int int16 = dateTimeField12.getMaximumShortTextLength(locale15);
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale20 = locale19.stripExtensions();
        java.lang.String str21 = locale17.getDisplayName(locale19);
        java.lang.String str22 = locale15.getDisplayLanguage(locale17);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone4, locale15);
        java.util.TimeZone.setDefault(timeZone4);
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime31 = timeOfDay28.toDateTime((org.joda.time.ReadableInstant) instant30);
        org.joda.time.Chronology chronology32 = instant30.getChronology();
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant37 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime38 = timeOfDay35.toDateTime((org.joda.time.ReadableInstant) instant37);
        int[] intArray40 = chronology32.get((org.joda.time.ReadablePartial) timeOfDay35, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(0L, chronology32);
        org.joda.time.TimeOfDay timeOfDay44 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant46 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime47 = timeOfDay44.toDateTime((org.joda.time.ReadableInstant) instant46);
        org.joda.time.Chronology chronology48 = instant46.getChronology();
        org.joda.time.TimeOfDay timeOfDay51 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant53 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime54 = timeOfDay51.toDateTime((org.joda.time.ReadableInstant) instant53);
        int[] intArray56 = chronology48.get((org.joda.time.ReadablePartial) timeOfDay51, (long) (short) -1);
        mutableDateTime41.setChronology(chronology48);
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime(chronology48);
        org.joda.time.DateTimeField dateTimeField59 = chronology48.weekOfWeekyear();
        java.util.Locale locale61 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale62 = locale61.stripExtensions();
        java.util.Locale locale63 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale64 = locale63.stripExtensions();
        java.lang.String str65 = locale61.getDisplayName(locale63);
        java.lang.String str66 = dateTimeField59.getAsText(2022, locale61);
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(timeZone4, locale61);
        java.util.TimeZone timeZone68 = calendar67.getTimeZone();
        int int69 = calendar67.getWeekYear();
        java.time.Instant instant70 = calendar67.toInstant();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+10:00" + "'", str3, "+10:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str21, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u4e2d\u6587" + "'", str22, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645515167912,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=32,SECOND=47,MILLISECOND=912,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str65, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2022" + "'", str66, "2022");
        org.junit.Assert.assertNotNull(calendar67);
// flaky:         org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=1645515167912,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=32,SECOND=47,MILLISECOND=912,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone68);
        org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2022 + "'", int69 == 2022);
        org.junit.Assert.assertNotNull(instant70);
    }

    @Test
    public void test11729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11729");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        int[] intArray3 = timeOfDay2.getValues();
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime9 = timeOfDay6.toDateTime((org.joda.time.ReadableInstant) instant8);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay6.minusMinutes((int) '4');
        int int12 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay2.minusMinutes((int) (short) -1);
        int int15 = timeOfDay14.size();
        java.lang.String str17 = timeOfDay14.toString("1");
        org.joda.time.TimeOfDay timeOfDay20 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime23 = timeOfDay20.toDateTime((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Chronology chronology24 = instant22.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.year();
        org.joda.time.DateTimeField dateTimeField26 = chronology24.minuteOfHour();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean33 = interval29.abuts((org.joda.time.ReadableInterval) interval32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Interval interval35 = interval32.withDurationBeforeEnd(readableDuration34);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean42 = interval38.abuts((org.joda.time.ReadableInterval) interval41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Interval interval44 = interval41.withDurationBeforeEnd(readableDuration43);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean51 = interval47.abuts((org.joda.time.ReadableInterval) interval50);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Interval interval53 = interval50.withDurationBeforeEnd(readableDuration52);
        org.joda.time.Period period54 = interval50.toPeriod();
        org.joda.time.Interval interval55 = interval41.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period54);
        org.joda.time.Interval interval56 = interval32.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period54);
        int[] intArray59 = chronology24.get((org.joda.time.ReadablePeriod) period54, (long) 363, (long) (byte) 100);
        org.joda.time.TimeOfDay timeOfDay60 = timeOfDay14.plus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.TimeOfDay timeOfDay62 = timeOfDay60.withSecondOfMinute(50);
        org.joda.time.TimeOfDay.Property property63 = timeOfDay60.hourOfDay();
        org.joda.time.TimeOfDay.Property property64 = timeOfDay60.secondOfMinute();
        org.joda.time.TimeOfDay.Property property65 = timeOfDay60.millisOfSecond();
        java.lang.String str66 = property65.toString();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1" + "'", str17, "1");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 0, 0, 0, 0, 0, 0, -263]");
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertNotNull(timeOfDay62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Property[millisOfSecond]" + "'", str66, "Property[millisOfSecond]");
    }

    @Test
    public void test11730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11730");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = instant0.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime4 = instant0.toMutableDateTime();
        mutableDateTime4.setMillis(0L);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean13 = interval9.abuts((org.joda.time.ReadableInterval) interval12);
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean18 = interval17.isBeforeNow();
        org.joda.time.Period period19 = interval17.toPeriod();
        java.lang.String str20 = period19.toString();
        org.joda.time.MutablePeriod mutablePeriod21 = period19.toMutablePeriod();
        org.joda.time.Interval interval22 = interval12.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod21);
        mutableDateTime4.add((org.joda.time.ReadablePeriod) mutablePeriod21);
        mutableDateTime4.addWeeks(26874435);
        int int26 = mutableDateTime4.getWeekyear();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT0S" + "'", str20, "PT0S");
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 517027 + "'", int26 == 517027);
    }

    @Test
    public void test11731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11731");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        boolean boolean33 = mutableDateTime16.isEqualNow();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime16.secondOfDay();
        org.joda.time.DateTime dateTime35 = mutableDateTime16.toDateTimeISO();
        org.joda.time.DateTime dateTime37 = dateTime35.withMillis((long) 1970);
        org.joda.time.DateTime dateTime38 = dateTime35.withLaterOffsetAtOverlap();
        boolean boolean39 = dateTime38.isAfterNow();
        org.joda.time.Instant instant40 = dateTime38.toInstant();
        org.joda.time.DateTime dateTime42 = dateTime38.minusDays(26844);
        org.joda.time.DateTime dateTime44 = dateTime38.plusMonths(88822);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
    }

    @Test
    public void test11732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11732");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = property3.getFieldType();
        org.joda.time.DurationField durationField5 = property3.getDurationField();
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime12 = timeOfDay9.toDateTime((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Chronology chronology13 = instant11.getChronology();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime19 = timeOfDay16.toDateTime((org.joda.time.ReadableInstant) instant18);
        int[] intArray21 = chronology13.get((org.joda.time.ReadablePartial) timeOfDay16, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(0L, chronology13);
        int int23 = mutableDateTime22.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime22.property(dateTimeFieldType24);
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime31 = timeOfDay28.toDateTime((org.joda.time.ReadableInstant) instant30);
        org.joda.time.Chronology chronology32 = instant30.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.clockhourOfHalfday();
        long long35 = dateTimeField33.roundHalfFloor(0L);
        java.util.Locale locale36 = java.util.Locale.TRADITIONAL_CHINESE;
        int int37 = dateTimeField33.getMaximumShortTextLength(locale36);
        java.util.Locale locale38 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale39 = locale38.stripExtensions();
        java.util.Locale locale40 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale41 = locale40.stripExtensions();
        java.lang.String str42 = locale38.getDisplayName(locale40);
        java.lang.String str43 = locale36.getDisplayLanguage(locale38);
        java.util.Calendar calendar44 = mutableDateTime22.toCalendar(locale38);
        java.lang.String str45 = property3.getAsShortText(locale38);
        org.joda.time.DurationField durationField46 = property3.getDurationField();
        org.joda.time.DurationField durationField47 = property3.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay48 = property3.withMaximumValue();
        java.lang.String str49 = property3.getAsText();
        org.joda.time.TimeOfDay timeOfDay50 = property3.getTimeOfDay();
        int int51 = property3.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str42, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u4e2d\u6587" + "'", str43, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar44);
        org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1" + "'", str45, "1");
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1" + "'", str49, "1");
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
    }

    @Test
    public void test11733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11733");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate0.minusMonths((int) (short) 10);
        int int7 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate.Property property8 = localDate0.year();
        org.joda.time.LocalDate localDate10 = property8.addToCopy((int) 'x');
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean14 = interval13.isBeforeNow();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean21 = interval17.abuts((org.joda.time.ReadableInterval) interval20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Interval interval23 = interval20.withDurationBeforeEnd(readableDuration22);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean30 = interval26.abuts((org.joda.time.ReadableInterval) interval29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Interval interval32 = interval29.withDurationBeforeEnd(readableDuration31);
        org.joda.time.Period period33 = interval29.toPeriod();
        org.joda.time.Interval interval34 = interval20.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period33);
        java.util.Locale.Builder builder35 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder38 = builder35.setExtension('x', "zh");
        boolean boolean39 = period33.equals((java.lang.Object) builder35);
        org.joda.time.Interval interval40 = interval13.withPeriodAfterStart((org.joda.time.ReadablePeriod) period33);
        org.joda.time.LocalDate localDate41 = localDate10.plus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.LocalDate localDate43 = localDate10.minusWeeks(15);
        org.joda.time.LocalDate localDate45 = localDate43.withYearOfEra(50);
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay49 = yearMonthDay47.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay.Property property50 = yearMonthDay49.monthOfYear();
        int int51 = property50.get();
        org.joda.time.YearMonthDay yearMonthDay53 = property50.addWrapFieldToCopy(4);
        org.joda.time.YearMonthDay yearMonthDay55 = property50.addToCopy(12);
        org.joda.time.YearMonthDay yearMonthDay56 = property50.withMaximumValue();
        org.joda.time.Chronology chronology57 = yearMonthDay56.getChronology();
        org.joda.time.YearMonthDay yearMonthDay59 = yearMonthDay56.plusDays(0);
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay56.minusDays(32769);
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay56.minusYears(400);
        java.lang.String str64 = yearMonthDay56.toString();
        org.joda.time.LocalDate localDate65 = localDate43.withFields((org.joda.time.ReadablePartial) yearMonthDay56);
        org.joda.time.LocalDate localDate66 = yearMonthDay56.toLocalDate();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(yearMonthDay59);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1970-12-01" + "'", str64, "1970-12-01");
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(localDate66);
    }

    @Test
    public void test11734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11734");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.property(dateTimeFieldType3);
        java.util.Locale locale9 = new java.util.Locale("\u5341\u4e8c\u6708", "hi!", "10");
        java.lang.String str10 = localDateTime0.toString("+10:00", locale9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime0.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime0.minusHours(229);
        org.joda.time.LocalDateTime.Property property15 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime16 = property15.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime18 = property15.addWrapFieldToCopy(70);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals(locale9.toString(), "\u5341\u4e8c\u6708_HI!_10");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+10:00" + "'", str10, "+10:00");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test11735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11735");
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone5 = instant4.getZone();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.withDurationAdded(readableDuration7, (int) (byte) 0);
        org.joda.time.DateTime dateTime11 = dateTime6.minusSeconds((int) (short) 1);
        org.joda.time.DateTime.Property property12 = dateTime11.centuryOfEra();
        org.joda.time.DateTime dateTime13 = property12.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime14 = property12.roundCeilingCopy();
        org.joda.time.DateTime dateTime16 = property12.addWrapFieldToCopy(25);
        int int17 = dateTime16.getYearOfEra();
        org.joda.time.DateTime dateTime18 = dateTime16.toDateTime();
        org.joda.time.DateTime.Property property19 = dateTime18.millisOfSecond();
        int int20 = dateTime18.getDayOfWeek();
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime28 = timeOfDay25.toDateTime((org.joda.time.ReadableInstant) instant27);
        org.joda.time.Chronology chronology29 = instant27.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.clockhourOfHalfday();
        org.joda.time.DurationField durationField31 = chronology29.eras();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (byte) 10, 30L, chronology29);
        org.joda.time.DateTime dateTime33 = dateTime18.withChronology(chronology29);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(982, 26687, 27604830, chronology29);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26687 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4522 + "'", int17 == 4522);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 7 + "'", int20 == 7);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test11736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11736");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) (byte) 100);
        org.joda.time.Instant instant3 = instant0.toInstant();
        org.joda.time.Instant instant5 = instant0.minus(2306086600740000L);
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime12 = timeOfDay9.toDateTime((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Chronology chronology13 = instant11.getChronology();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime19 = timeOfDay16.toDateTime((org.joda.time.ReadableInstant) instant18);
        int[] intArray21 = chronology13.get((org.joda.time.ReadablePartial) timeOfDay16, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(0L, chronology13);
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime28 = timeOfDay25.toDateTime((org.joda.time.ReadableInstant) instant27);
        org.joda.time.Chronology chronology29 = instant27.getChronology();
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime35 = timeOfDay32.toDateTime((org.joda.time.ReadableInstant) instant34);
        int[] intArray37 = chronology29.get((org.joda.time.ReadablePartial) timeOfDay32, (long) (short) -1);
        mutableDateTime22.setChronology(chronology29);
        boolean boolean39 = mutableDateTime22.isEqualNow();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime22.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime42 = property40.set(22);
        org.joda.time.Instant instant44 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone45 = instant44.getZone();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime49 = dateTime46.withDurationAdded(readableDuration47, (int) (byte) 0);
        org.joda.time.DateTime dateTime51 = dateTime46.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime53 = dateTime51.plusMinutes((int) (byte) 10);
        int int54 = dateTime53.getYearOfCentury();
        int int55 = property40.getDifference((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Interval interval56 = property40.toInterval();
        org.joda.time.Duration duration57 = interval56.toDuration();
        org.joda.time.Instant instant58 = instant5.plus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Chronology chronology59 = instant58.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.minuteOfDay();
        boolean boolean62 = dateTimeField60.isLeap((long) (-1645515433));
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 22 + "'", int54 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1645515745) + "'", int55 == (-1645515745));
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test11737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11737");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.minuteOfHour();
        java.lang.String str4 = property3.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withPeriodAdded(readablePeriod11, (int) (short) 0);
        int int14 = property3.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime.Property property15 = dateTime10.yearOfEra();
        org.joda.time.DateTime.Property property16 = dateTime10.minuteOfDay();
        org.joda.time.Chronology chronology17 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.dayOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test11738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11738");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime17 = timeOfDay14.toDateTime((org.joda.time.ReadableInstant) instant16);
        int[] intArray19 = chronology11.get((org.joda.time.ReadablePartial) timeOfDay14, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(0L, chronology11);
        java.lang.Object obj21 = mutableDateTime20.clone();
        int int22 = mutableDateTime20.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Chronology chronology30 = instant28.getChronology();
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime36 = timeOfDay33.toDateTime((org.joda.time.ReadableInstant) instant35);
        int[] intArray38 = chronology30.get((org.joda.time.ReadablePartial) timeOfDay33, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(0L, chronology30);
        mutableDateTime39.setYear(3);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone44 = instant43.getZone();
        mutableDateTime39.setZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone44);
        mutableDateTime20.setZoneRetainFields(dateTimeZone44);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(604800000L, dateTimeZone44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter2.withZone(dateTimeZone44);
        org.joda.time.LocalTime localTime51 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime53 = localTime51.minusMinutes((int) (short) 1);
        org.joda.time.LocalTime localTime55 = localTime51.withMillisOfDay((int) (byte) 1);
        org.joda.time.LocalTime.Property property56 = localTime51.minuteOfHour();
        org.joda.time.Chronology chronology57 = localTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.dayOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter2.withChronology(chronology57);
        java.util.Locale locale60 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 70);
        boolean boolean63 = dateTimeFormatter2.isParser();
        org.joda.time.format.DateTimeParser dateTimeParser64 = dateTimeFormatter2.getParser();
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNull(locale60);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(dateTimeParser64);
    }

    @Test
    public void test11739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11739");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime3 = localTime1.minusMinutes((int) (short) 1);
        int int4 = localTime1.getMillisOfSecond();
        org.joda.time.LocalTime localTime6 = localTime1.withMillisOfSecond(0);
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime12 = timeOfDay9.toDateTime((org.joda.time.ReadableInstant) instant11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = dateTime12.toString(dateTimeFormatter13);
        org.joda.time.DateTime dateTime16 = dateTime12.minusYears(2022);
        org.joda.time.DateTime.Property property17 = dateTime12.year();
        org.joda.time.DateMidnight dateMidnight18 = dateTime12.toDateMidnight();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean25 = interval21.abuts((org.joda.time.ReadableInterval) interval24);
        long long26 = interval24.getStartMillis();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean33 = interval29.abuts((org.joda.time.ReadableInterval) interval32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Interval interval35 = interval32.withDurationBeforeEnd(readableDuration34);
        org.joda.time.Interval interval36 = interval24.overlap((org.joda.time.ReadableInterval) interval32);
        org.joda.time.Duration duration37 = interval32.toDuration();
        org.joda.time.DateTime dateTime38 = dateTime12.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean40 = dateTime12.isSupported(dateTimeFieldType39);
        boolean boolean41 = localTime6.isSupported(dateTimeFieldType39);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.minutes();
        java.lang.String str43 = durationFieldType42.toString();
        boolean boolean44 = localTime6.isSupported(durationFieldType42);
        int int45 = localTime6.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1969-12-31T00:01:00.000Z" + "'", str14, "1969-12-31T00:01:00.000Z");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNull(interval36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "minutes" + "'", str43, "minutes");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test11740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11740");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.property(dateTimeFieldType3);
        org.joda.time.DateTimeField dateTimeField5 = property4.getField();
        org.joda.time.LocalDateTime localDateTime6 = property4.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        org.joda.time.DurationField durationField8 = property7.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime10 = property7.addToCopy((-62135596800000L));
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNull(durationField8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test11741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11741");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = dateTime5.toString(dateTimeFormatter6);
        org.joda.time.DateMidnight dateMidnight8 = dateTime5.toDateMidnight();
        org.joda.time.DateTime dateTime10 = dateTime5.plusDays(70);
        int int11 = dateTime10.getMinuteOfDay();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1969-12-31T00:01:00.000Z" + "'", str7, "1969-12-31T00:01:00.000Z");
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test11742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11742");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        int[] intArray16 = chronology8.get((org.joda.time.ReadablePartial) timeOfDay11, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(0L, chronology8);
        mutableDateTime17.setYear(3);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone22 = instant21.getZone();
        mutableDateTime17.setZone(dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone22);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(1L, dateTimeZone22);
        org.joda.time.Chronology chronology26 = localTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        org.joda.time.DurationField durationField28 = chronology26.halfdays();
        long long30 = durationField28.getMillis(1920019L);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 82944820800000L + "'", long30 == 82944820800000L);
    }

    @Test
    public void test11743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11743");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.clockhourOfHalfday();
        org.joda.time.DurationField durationField9 = chronology7.eras();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.dayOfMonth();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime19 = timeOfDay16.toDateTime((org.joda.time.ReadableInstant) instant18);
        org.joda.time.Chronology chronology20 = instant18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.clockhourOfHalfday();
        long long23 = dateTimeField21.roundHalfFloor(0L);
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        int int25 = dateTimeField21.getMaximumShortTextLength(locale24);
        java.lang.String str26 = locale24.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology13, locale24);
        java.util.Locale locale28 = dateTimeParserBucket27.getLocale();
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime34 = timeOfDay31.toDateTime((org.joda.time.ReadableInstant) instant33);
        org.joda.time.Chronology chronology35 = instant33.getChronology();
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime41 = timeOfDay38.toDateTime((org.joda.time.ReadableInstant) instant40);
        int[] intArray43 = chronology35.get((org.joda.time.ReadablePartial) timeOfDay38, (long) (short) -1);
        boolean boolean44 = dateTimeParserBucket27.restoreState((java.lang.Object) (short) -1);
        java.util.Locale locale45 = dateTimeParserBucket27.getLocale();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(9L, chronology7, locale45, (java.lang.Integer) 11, 365);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean55 = interval54.isBeforeNow();
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval61 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean62 = interval58.abuts((org.joda.time.ReadableInterval) interval61);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Interval interval64 = interval61.withDurationBeforeEnd(readableDuration63);
        org.joda.time.Interval interval67 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval70 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean71 = interval67.abuts((org.joda.time.ReadableInterval) interval70);
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Interval interval73 = interval70.withDurationBeforeEnd(readableDuration72);
        org.joda.time.Period period74 = interval70.toPeriod();
        org.joda.time.Interval interval75 = interval61.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period74);
        java.util.Locale.Builder builder76 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder79 = builder76.setExtension('x', "zh");
        boolean boolean80 = period74.equals((java.lang.Object) builder76);
        org.joda.time.Interval interval81 = interval54.withPeriodAfterStart((org.joda.time.ReadablePeriod) period74);
        org.joda.time.Interval interval82 = interval51.withPeriodAfterStart((org.joda.time.ReadablePeriod) period74);
        boolean boolean83 = dateTimeParserBucket48.restoreState((java.lang.Object) interval51);
        int int84 = dateTimeParserBucket48.getOffset();
        java.util.Locale locale85 = dateTimeParserBucket48.getLocale();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "zh" + "'", str26, "zh");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 0 + "'", int84 == 0);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "zh_TW");
    }

    @Test
    public void test11744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11744");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfHalfday();
        long long11 = dateTimeField9.roundHalfFloor(0L);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        int int13 = dateTimeField9.getMaximumShortTextLength(locale12);
        java.lang.String str14 = locale12.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology1, locale12);
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        long long19 = dateTimeParserBucket15.computeMillis(true, "");
        dateTimeParserBucket15.setPivotYear((java.lang.Integer) 7359830);
        org.joda.time.Chronology chronology22 = dateTimeParserBucket15.getChronology();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        long long24 = dateTime23.getMillis();
        int int25 = dateTime23.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(chronology22);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1645515168357L + "'", long24 == 1645515168357L);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 27168357 + "'", int25 == 27168357);
    }

    @Test
    public void test11745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11745");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean3 = localDate1.isSupported(dateTimeFieldType2);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.DateMidnight dateMidnight5 = localDate1.toDateMidnight(dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.plus((long) 100);
        org.joda.time.Chronology chronology8 = dateMidnight5.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.secondOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.centuryOfEra();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate(0L, chronology8);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test11746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11746");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.minuteOfHour();
        int int4 = property3.get();
        org.joda.time.TimeOfDay timeOfDay6 = property3.addToCopy((int) (short) 1);
        org.joda.time.TimeOfDay timeOfDay7 = property3.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.withHourOfDay(15);
        org.joda.time.LocalTime localTime10 = timeOfDay9.toLocalTime();
        java.lang.String str11 = localTime10.toString();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "15:01:00.000" + "'", str11, "15:01:00.000");
    }

    @Test
    public void test11747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11747");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMinutes(35);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusMinutes(22);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime.Property property10 = localDateTime6.yearOfEra();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.minusMinutes(26707024);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusHours(1922);
        java.util.Date date15 = localDateTime14.toDate();
        int int16 = localDateTime14.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.minusHours(26688);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = localDateTime18.withTime(0, 26821867, (-1645515591), (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26821867 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(date15);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Tue Feb 23 15:53:48 GMT+10:00 1971");
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 57228390 + "'", int16 == 57228390);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test11748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11748");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        org.joda.time.Instant instant6 = instant2.withDurationAdded((long) (byte) 100, (int) (short) 1);
        org.joda.time.DateTime dateTime7 = instant6.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime7.getZone();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate(3098892765600052L, dateTimeZone8);
        java.lang.String str11 = dateTimeZone8.getNameKey((-313318065L));
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "UTC" + "'", str11, "UTC");
    }

    @Test
    public void test11749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11749");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime17 = timeOfDay14.toDateTime((org.joda.time.ReadableInstant) instant16);
        int[] intArray19 = chronology11.get((org.joda.time.ReadablePartial) timeOfDay14, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(0L, chronology11);
        java.lang.Object obj21 = mutableDateTime20.clone();
        int int22 = mutableDateTime20.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Chronology chronology30 = instant28.getChronology();
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime36 = timeOfDay33.toDateTime((org.joda.time.ReadableInstant) instant35);
        int[] intArray38 = chronology30.get((org.joda.time.ReadablePartial) timeOfDay33, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(0L, chronology30);
        mutableDateTime39.setYear(3);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone44 = instant43.getZone();
        mutableDateTime39.setZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone44);
        mutableDateTime20.setZoneRetainFields(dateTimeZone44);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(604800000L, dateTimeZone44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter2.withZone(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTimeFormatter49.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter49.withZoneUTC();
        int int52 = dateTimeFormatter51.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter51.withOffsetParsed();
        boolean boolean54 = dateTimeFormatter53.isPrinter();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay60 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant62 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime63 = timeOfDay60.toDateTime((org.joda.time.ReadableInstant) instant62);
        org.joda.time.Chronology chronology64 = instant62.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.clockhourOfHalfday();
        org.joda.time.DurationField durationField66 = chronology64.eras();
        org.joda.time.DateTimeField dateTimeField67 = dateTimeFieldType57.getField(chronology64);
        org.joda.time.DateTimeField dateTimeField68 = chronology64.hourOfDay();
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(chronology64);
        org.joda.time.TimeOfDay timeOfDay70 = new org.joda.time.TimeOfDay(chronology64);
        org.joda.time.TimeOfDay timeOfDay71 = new org.joda.time.TimeOfDay(0, 2, chronology64);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter53.withChronology(chronology64);
        java.lang.Appendable appendable73 = null;
        org.joda.time.TimeOfDay timeOfDay75 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 26707024);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter72.printTo(appendable73, (org.joda.time.ReadablePartial) timeOfDay75);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2000 + "'", int52 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertNotNull(timeOfDay75);
    }

    @Test
    public void test11750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11750");
        java.io.IOException iOException1 = new java.io.IOException("\u4e0a\u5348 12:00:00");
        java.io.IOException iOException2 = new java.io.IOException();
        iOException1.addSuppressed((java.lang.Throwable) iOException2);
        java.io.IOException iOException5 = new java.io.IOException("\u4e0a\u5348 12:00:00");
        java.io.IOException iOException7 = new java.io.IOException("");
        java.io.IOException iOException9 = new java.io.IOException("");
        iOException7.addSuppressed((java.lang.Throwable) iOException9);
        java.io.IOException iOException12 = new java.io.IOException("");
        java.io.IOException iOException14 = new java.io.IOException("");
        iOException12.addSuppressed((java.lang.Throwable) iOException14);
        java.lang.Throwable[] throwableArray16 = iOException12.getSuppressed();
        iOException9.addSuppressed((java.lang.Throwable) iOException12);
        iOException5.addSuppressed((java.lang.Throwable) iOException9);
        iOException1.addSuppressed((java.lang.Throwable) iOException5);
        java.io.IOException iOException20 = new java.io.IOException((java.lang.Throwable) iOException5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay21 = new org.joda.time.YearMonthDay((java.lang.Object) iOException5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.io.IOException");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(throwableArray16);
    }

    @Test
    public void test11751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11751");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate0.plusMonths((-1));
        org.joda.time.LocalDate.Property property7 = localDate6.era();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.LocalDate localDate10 = property7.addWrapFieldToCopy((-1));
        org.joda.time.LocalDate localDate11 = property7.withMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property7.getFieldType();
        org.joda.time.LocalDate localDate13 = property7.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate14 = property7.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test11752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11752");
        org.joda.time.DateTimeZone dateTimeZone2 = null;
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight6.minusWeeks((int) (short) 100);
        org.joda.time.DateMidnight.Property property9 = dateMidnight8.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean11 = dateMidnight8.isSupported(dateTimeFieldType10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime19 = timeOfDay16.toDateTime((org.joda.time.ReadableInstant) instant18);
        org.joda.time.Chronology chronology20 = instant18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.clockhourOfHalfday();
        org.joda.time.DurationField durationField22 = chronology20.eras();
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType13.getField(chronology20);
        org.joda.time.DateTimeField dateTimeField24 = chronology20.hourOfDay();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 22, chronology20);
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType10.getField(chronology20);
        org.joda.time.DateMidnight dateMidnight27 = org.joda.time.DateMidnight.now(chronology20);
        org.joda.time.Chronology chronology28 = chronology20.withUTC();
        org.joda.time.DateTimeField dateTimeField29 = chronology20.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(514L, chronology20);
        org.joda.time.DateTimeField dateTimeField31 = chronology20.hourOfHalfday();
        boolean boolean32 = dateTimeField31.isSupported();
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test11753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11753");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.DurationField durationField17 = chronology7.weeks();
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime.Property property20 = localTime19.hourOfDay();
        org.joda.time.LocalTime localTime21 = property20.roundFloorCopy();
        org.joda.time.LocalTime localTime23 = property20.setCopy(0);
        org.joda.time.LocalTime localTime25 = property20.addWrapFieldToCopy(7);
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        int[] intArray29 = timeOfDay28.getValues();
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime35 = timeOfDay32.toDateTime((org.joda.time.ReadableInstant) instant34);
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay32.minusMinutes((int) '4');
        int int38 = timeOfDay28.compareTo((org.joda.time.ReadablePartial) timeOfDay32);
        org.joda.time.DateTimeField[] dateTimeFieldArray39 = timeOfDay32.getFields();
        int[] intArray40 = timeOfDay32.getValues();
        chronology7.validate((org.joda.time.ReadablePartial) localTime25, intArray40);
        int int42 = localTime25.getMinuteOfHour();
        org.joda.time.DateTime dateTime43 = localTime25.toDateTimeToday();
        org.joda.time.DateTime.Property property44 = dateTime43.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight47.withWeekyear(2);
        org.joda.time.DateMidnight.Property property52 = dateMidnight47.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight47.withYearOfCentury(1);
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean58 = interval57.isBeforeNow();
        org.joda.time.Period period59 = interval57.toPeriod();
        java.lang.String str60 = period59.toString();
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight47.withPeriodAdded((org.joda.time.ReadablePeriod) period59, (int) (byte) 0);
        org.joda.time.MutablePeriod mutablePeriod63 = period59.toMutablePeriod();
        org.joda.time.Interval interval64 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadablePeriod) period59);
        java.lang.String str65 = period59.toString();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "PT0S" + "'", str60, "PT0S");
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(mutablePeriod63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "PT0S" + "'", str65, "PT0S");
    }

    @Test
    public void test11754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11754");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.property(dateTimeFieldType3);
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.ReadablePartial readablePartial6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withFields(readablePartial6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDayOfYear(25);
        int int10 = localDateTime9.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusMillis(2056);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test11755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11755");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfHalfday();
        org.joda.time.DurationField durationField10 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.dayOfYear();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.dayOfMonth();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime20 = timeOfDay17.toDateTime((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Chronology chronology21 = instant19.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfHalfday();
        long long24 = dateTimeField22.roundHalfFloor(0L);
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        int int26 = dateTimeField22.getMaximumShortTextLength(locale25);
        java.lang.String str27 = locale25.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology14, locale25);
        java.util.Locale locale29 = dateTimeParserBucket28.getLocale();
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime35 = timeOfDay32.toDateTime((org.joda.time.ReadableInstant) instant34);
        org.joda.time.Chronology chronology36 = instant34.getChronology();
        org.joda.time.TimeOfDay timeOfDay39 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime42 = timeOfDay39.toDateTime((org.joda.time.ReadableInstant) instant41);
        int[] intArray44 = chronology36.get((org.joda.time.ReadablePartial) timeOfDay39, (long) (short) -1);
        boolean boolean45 = dateTimeParserBucket28.restoreState((java.lang.Object) (short) -1);
        java.util.Locale locale46 = dateTimeParserBucket28.getLocale();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket(9L, chronology8, locale46, (java.lang.Integer) 11, 365);
        org.joda.time.TimeOfDay timeOfDay50 = new org.joda.time.TimeOfDay((long) (short) -1, chronology8);
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay50.plusMinutes(292273033);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "zh" + "'", str27, "zh");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(timeOfDay52);
    }

    @Test
    public void test11756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11756");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Date date4 = new java.util.Date(0, (int) '4', 0);
        int int5 = date4.getMinutes();
        date4.setYear(12);
        java.util.Calendar.Builder builder8 = builder0.setInstant(date4);
        java.util.Calendar.Builder builder10 = builder0.setInstant((long) (-1645515250));
        java.util.Calendar calendar11 = builder0.build();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, 0);
        java.lang.String str15 = dateTimeZone14.toString();
        java.util.TimeZone timeZone16 = dateTimeZone14.toTimeZone();
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfHalfday();
        long long26 = dateTimeField24.roundHalfFloor(0L);
        java.util.Locale locale27 = java.util.Locale.TRADITIONAL_CHINESE;
        int int28 = dateTimeField24.getMaximumShortTextLength(locale27);
        java.util.Locale locale29 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale30 = locale29.stripExtensions();
        java.util.Locale locale31 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale32 = locale31.stripExtensions();
        java.lang.String str33 = locale29.getDisplayName(locale31);
        java.lang.String str34 = locale27.getDisplayLanguage(locale29);
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone16, locale27);
        java.util.TimeZone.setDefault(timeZone16);
        boolean boolean37 = timeZone16.observesDaylightTime();
        java.util.Calendar.Builder builder38 = builder0.setTimeZone(timeZone16);
        java.util.Calendar.Builder builder42 = builder0.setWeekDate(26687, 24827794, 0);
        java.util.Calendar.Builder builder47 = builder0.setTimeOfDay((-1), 545, 360360000, 26673621);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder50 = builder47.setWeekDefinition((-292273032), 26942);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date4.toString(), "Tue Apr 30 00:00:00 GMT+10:00 1912");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(calendar11);
        org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=-1645515250,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=50,WEEK_OF_MONTH=2,DAY_OF_MONTH=13,DAY_OF_YEAR=347,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=8,HOUR_OF_DAY=8,MINUTE=54,SECOND=44,MILLISECOND=750,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+10:00" + "'", str15, "+10:00");
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str33, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u4e2d\u6587" + "'", str34, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1645515168773,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=32,SECOND=48,MILLISECOND=773,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test11757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11757");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.year();
        org.joda.time.DateMidnight dateMidnight4 = property3.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.minusYears(35);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean13 = interval9.abuts((org.joda.time.ReadableInterval) interval12);
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean21 = interval17.abuts((org.joda.time.ReadableInterval) interval20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Interval interval23 = interval20.withDurationBeforeEnd(readableDuration22);
        org.joda.time.Interval interval24 = interval12.overlap((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Duration duration25 = interval20.toDuration();
        org.joda.time.Duration duration26 = duration25.toDuration();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean33 = interval29.abuts((org.joda.time.ReadableInterval) interval32);
        long long34 = interval32.getStartMillis();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean41 = interval37.abuts((org.joda.time.ReadableInterval) interval40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Interval interval43 = interval40.withDurationBeforeEnd(readableDuration42);
        org.joda.time.Interval interval44 = interval32.overlap((org.joda.time.ReadableInterval) interval40);
        org.joda.time.Duration duration45 = interval40.toDuration();
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean52 = interval48.abuts((org.joda.time.ReadableInterval) interval51);
        long long53 = interval51.getStartMillis();
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean60 = interval56.abuts((org.joda.time.ReadableInterval) interval59);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Interval interval62 = interval59.withDurationBeforeEnd(readableDuration61);
        org.joda.time.Interval interval63 = interval51.overlap((org.joda.time.ReadableInterval) interval59);
        org.joda.time.Duration duration64 = interval59.toDuration();
        org.joda.time.Duration duration65 = duration64.toDuration();
        boolean boolean66 = duration45.isEqual((org.joda.time.ReadableDuration) duration65);
        boolean boolean67 = duration26.isShorterThan((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Duration duration68 = duration65.toDuration();
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight4.minus((org.joda.time.ReadableDuration) duration65);
        int int70 = dateMidnight69.getDayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight72 = dateMidnight69.withEra((-1645515556));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1645515556 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNull(interval24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNull(interval44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNull(interval63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test11758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11758");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.withDurationAdded((long) 2, 100);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean12 = interval8.abuts((org.joda.time.ReadableInterval) interval11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Interval interval14 = interval11.withDurationBeforeEnd(readableDuration13);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean21 = interval17.abuts((org.joda.time.ReadableInterval) interval20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Interval interval23 = interval20.withDurationBeforeEnd(readableDuration22);
        org.joda.time.Period period24 = interval20.toPeriod();
        org.joda.time.Interval interval25 = interval11.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period24);
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder26.setExtension('x', "zh");
        boolean boolean30 = period24.equals((java.lang.Object) builder26);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight2.withPeriodAdded((org.joda.time.ReadablePeriod) period24, 2022);
        org.joda.time.DateMidnight.Property property33 = dateMidnight2.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField34 = property33.getField();
        org.joda.time.DateMidnight dateMidnight35 = property33.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateMidnight35);
    }

    @Test
    public void test11759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11759");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfHalfday();
        long long29 = dateTimeField27.roundHalfFloor(0L);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        int int31 = dateTimeField27.getMaximumShortTextLength(locale30);
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale32.getDisplayName(locale34);
        java.lang.String str37 = locale30.getDisplayLanguage(locale32);
        java.util.Calendar calendar38 = mutableDateTime16.toCalendar(locale32);
        java.util.Date date42 = new java.util.Date(0, (int) '4', 0);
        int int43 = date42.getMinutes();
        date42.setYear(12);
        calendar38.setTime(date42);
        org.joda.time.TimeOfDay timeOfDay47 = org.joda.time.TimeOfDay.fromCalendarFields(calendar38);
        org.joda.time.TimeOfDay.Property property48 = timeOfDay47.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = property48.getFieldType();
        org.joda.time.DurationField durationField50 = property48.getDurationField();
        long long52 = durationField50.getMillis((long) 6000);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str36, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u6587" + "'", str37, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=-1820052000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1912,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=120,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals(date42.toString(), "Tue Apr 30 00:00:00 GMT+10:00 1912");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 6000000L + "'", long52 == 6000000L);
    }

    @Test
    public void test11760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11760");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime17 = timeOfDay14.toDateTime((org.joda.time.ReadableInstant) instant16);
        int[] intArray19 = chronology11.get((org.joda.time.ReadablePartial) timeOfDay14, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(0L, chronology11);
        java.lang.Object obj21 = mutableDateTime20.clone();
        int int22 = mutableDateTime20.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Chronology chronology30 = instant28.getChronology();
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime36 = timeOfDay33.toDateTime((org.joda.time.ReadableInstant) instant35);
        int[] intArray38 = chronology30.get((org.joda.time.ReadablePartial) timeOfDay33, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(0L, chronology30);
        mutableDateTime39.setYear(3);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone44 = instant43.getZone();
        mutableDateTime39.setZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone44);
        mutableDateTime20.setZoneRetainFields(dateTimeZone44);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(604800000L, dateTimeZone44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter2.withZone(dateTimeZone44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.TimeOfDay timeOfDay56 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant58 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime59 = timeOfDay56.toDateTime((org.joda.time.ReadableInstant) instant58);
        org.joda.time.Chronology chronology60 = instant58.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.clockhourOfHalfday();
        long long63 = dateTimeField61.roundHalfFloor(0L);
        java.util.Locale locale64 = java.util.Locale.TRADITIONAL_CHINESE;
        int int65 = dateTimeField61.getMaximumShortTextLength(locale64);
        java.lang.String str66 = locale64.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology53, locale64);
        java.util.Locale locale68 = dateTimeParserBucket67.getLocale();
        dateTimeParserBucket67.setOffset((java.lang.Integer) 22);
        java.util.Locale locale71 = dateTimeParserBucket67.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter51.withLocale(locale71);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter51.withPivotYear((java.lang.Integer) 26724);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter51.withDefaultYear(2020);
        java.lang.StringBuffer stringBuffer77 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter51.printTo(stringBuffer77, (long) 838);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "zh" + "'", str66, "zh");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNotNull(dateTimeFormatter76);
    }

    @Test
    public void test11761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11761");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property6 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = localDate0.minusMonths((int) '#');
        int int9 = localDate8.getYearOfCentury();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        org.joda.time.DateTime dateTime12 = localDate8.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime15 = dateTime12.plusSeconds(229);
        int int16 = dateTime15.getDayOfWeek();
        org.joda.time.DateTime.Property property17 = dateTime15.secondOfDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime15.toMutableDateTime(chronology18);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 19 + "'", int9 == 19);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
    }

    @Test
    public void test11762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11762");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.DateTime dateTime11 = dateTime8.plusMillis((int) (byte) 0);
        boolean boolean12 = dateTime11.isEqualNow();
        org.joda.time.DateTime dateTime14 = dateTime11.plusWeeks(36000000);
        org.joda.time.DateTime dateTime16 = dateTime11.plusDays(2008);
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight19.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minusWeeks((int) (short) 100);
        org.joda.time.DateMidnight.Property property25 = dateMidnight24.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean27 = dateMidnight24.isSupported(dateTimeFieldType26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime35 = timeOfDay32.toDateTime((org.joda.time.ReadableInstant) instant34);
        org.joda.time.Chronology chronology36 = instant34.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.clockhourOfHalfday();
        org.joda.time.DurationField durationField38 = chronology36.eras();
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType29.getField(chronology36);
        org.joda.time.DateTimeField dateTimeField40 = chronology36.hourOfDay();
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((long) 22, chronology36);
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType26.getField(chronology36);
        org.joda.time.DateMidnight dateMidnight43 = org.joda.time.DateMidnight.now(chronology36);
        org.joda.time.Chronology chronology44 = chronology36.withUTC();
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((java.lang.Object) dateTime11, chronology36);
        org.joda.time.DateMidnight.Property property46 = dateMidnight45.monthOfYear();
        org.joda.time.DateMidnight.Property property47 = dateMidnight45.yearOfCentury();
        org.joda.time.DateMidnight dateMidnight48 = property47.roundFloorCopy();
        org.joda.time.MutableDateTime mutableDateTime49 = dateMidnight48.toMutableDateTime();
        int int50 = mutableDateTime49.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 6 + "'", int50 == 6);
    }

    @Test
    public void test11763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11763");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.weekOfWeekyear();
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withDurationAdded(readableDuration10, (int) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime9.minusSeconds((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime9.minus(readableDuration15);
        org.joda.time.DateTime dateTime18 = dateTime9.minusSeconds((int) (byte) 100);
        int int19 = mutableDateTime4.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime4.dayOfMonth();
        mutableDateTime4.setMinuteOfDay(1);
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay((java.lang.Object) mutableDateTime4);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean27 = interval26.isBeforeNow();
        org.joda.time.Period period28 = interval26.toPeriod();
        java.lang.String str29 = period28.toString();
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay23.withPeriodAdded((org.joda.time.ReadablePeriod) period28, 1969);
        org.joda.time.MutablePeriod mutablePeriod32 = period28.toMutablePeriod();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT0S" + "'", str29, "PT0S");
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(mutablePeriod32);
    }

    @Test
    public void test11764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11764");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfHalfday();
        long long29 = dateTimeField27.roundHalfFloor(0L);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        int int31 = dateTimeField27.getMaximumShortTextLength(locale30);
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale32.getDisplayName(locale34);
        java.lang.String str37 = locale30.getDisplayLanguage(locale32);
        java.util.Calendar calendar38 = mutableDateTime16.toCalendar(locale32);
        int int39 = calendar38.getWeekYear();
        int int41 = calendar38.getGreatestMinimum(15);
        int int42 = calendar38.getWeekYear();
        org.joda.time.DateTimeZone dateTimeZone44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight45.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.minusWeeks((int) (short) 100);
        int int51 = dateMidnight48.getCenturyOfEra();
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone53 = dateMidnight52.getZone();
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight52.withWeekyear(53);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval61 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean62 = interval58.abuts((org.joda.time.ReadableInterval) interval61);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Interval interval64 = interval61.withDurationBeforeEnd(readableDuration63);
        org.joda.time.Interval interval67 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval70 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean71 = interval67.abuts((org.joda.time.ReadableInterval) interval70);
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Interval interval73 = interval70.withDurationBeforeEnd(readableDuration72);
        org.joda.time.Period period74 = interval70.toPeriod();
        org.joda.time.Interval interval75 = interval61.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period74);
        java.util.Locale.Builder builder76 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder79 = builder76.setExtension('x', "zh");
        boolean boolean80 = period74.equals((java.lang.Object) builder76);
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight55.plus((org.joda.time.ReadablePeriod) period74);
        org.joda.time.DateMidnight dateMidnight82 = dateMidnight48.minus((org.joda.time.ReadablePeriod) period74);
        int int83 = dateMidnight48.getDayOfWeek();
        java.util.GregorianCalendar gregorianCalendar84 = dateMidnight48.toGregorianCalendar();
        org.joda.time.TimeOfDay timeOfDay85 = org.joda.time.TimeOfDay.fromCalendarFields((java.util.Calendar) gregorianCalendar84);
        int int86 = calendar38.compareTo((java.util.Calendar) gregorianCalendar84);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str36, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u6587" + "'", str37, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-46800000) + "'", int41 == (-46800000));
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1970 + "'", int42 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 19 + "'", int51 == 19);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 4 + "'", int83 == 4);
        org.junit.Assert.assertNotNull(gregorianCalendar84);
        org.junit.Assert.assertNotNull(timeOfDay85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
    }

    @Test
    public void test11765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11765");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.clockhourOfHalfday();
        org.joda.time.DurationField durationField9 = chronology7.eras();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology7.getZone();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.clockhourOfHalfday();
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 4, chronology7);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology7);
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(chronology7);
        org.joda.time.DateTime dateTime18 = dateTime16.minusHours(575);
        int int19 = dateTime16.getMinuteOfDay();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 452 + "'", int19 == 452);
    }

    @Test
    public void test11766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11766");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.property(dateTimeFieldType3);
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusWeeks((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight11.minusWeeks(0);
        long long16 = property4.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.DateMidnight.Property property17 = dateMidnight15.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((java.lang.Object) dateMidnight15);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.monthOfYear();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.year();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.withWeekyear(781);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test11767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11767");
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, 0);
        java.lang.String str10 = dateTimeZone9.toString();
        java.util.TimeZone timeZone11 = dateTimeZone9.toTimeZone();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime17 = timeOfDay14.toDateTime((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Chronology chronology18 = instant16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.clockhourOfHalfday();
        long long21 = dateTimeField19.roundHalfFloor(0L);
        java.util.Locale locale22 = java.util.Locale.TRADITIONAL_CHINESE;
        int int23 = dateTimeField19.getMaximumShortTextLength(locale22);
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale25 = locale24.stripExtensions();
        java.util.Locale locale26 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale27 = locale26.stripExtensions();
        java.lang.String str28 = locale24.getDisplayName(locale26);
        java.lang.String str29 = locale22.getDisplayLanguage(locale24);
        java.util.Calendar calendar30 = java.util.Calendar.getInstance(timeZone11, locale22);
        java.util.TimeZone.setDefault(timeZone11);
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant37 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime38 = timeOfDay35.toDateTime((org.joda.time.ReadableInstant) instant37);
        org.joda.time.Chronology chronology39 = instant37.getChronology();
        org.joda.time.TimeOfDay timeOfDay42 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant44 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime45 = timeOfDay42.toDateTime((org.joda.time.ReadableInstant) instant44);
        int[] intArray47 = chronology39.get((org.joda.time.ReadablePartial) timeOfDay42, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(0L, chronology39);
        org.joda.time.TimeOfDay timeOfDay51 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant53 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime54 = timeOfDay51.toDateTime((org.joda.time.ReadableInstant) instant53);
        org.joda.time.Chronology chronology55 = instant53.getChronology();
        org.joda.time.TimeOfDay timeOfDay58 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant60 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime61 = timeOfDay58.toDateTime((org.joda.time.ReadableInstant) instant60);
        int[] intArray63 = chronology55.get((org.joda.time.ReadablePartial) timeOfDay58, (long) (short) -1);
        mutableDateTime48.setChronology(chronology55);
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime(chronology55);
        org.joda.time.DateTimeField dateTimeField66 = chronology55.weekOfWeekyear();
        java.util.Locale locale68 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale69 = locale68.stripExtensions();
        java.util.Locale locale70 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale71 = locale70.stripExtensions();
        java.lang.String str72 = locale68.getDisplayName(locale70);
        java.lang.String str73 = dateTimeField66.getAsText(2022, locale68);
        java.util.Calendar calendar74 = java.util.Calendar.getInstance(timeZone11, locale68);
        int int76 = timeZone11.getOffset((-62135596799948L));
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        long long81 = dateTimeZone77.convertLocalToUTC((long) (byte) 100, false, (long) 13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((-1645515629), 27163, 199, 385, 1970, 577, (int) (short) 0, dateTimeZone77);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 385 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+10:00" + "'", str10, "+10:00");
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str28, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u4e2d\u6587" + "'", str29, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar30);
// flaky:         org.junit.Assert.assertEquals(calendar30.toString(), "java.util.GregorianCalendar[time=1645515169004,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=32,SECOND=49,MILLISECOND=4,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str72, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2022" + "'", str73, "2022");
        org.junit.Assert.assertNotNull(calendar74);
// flaky:         org.junit.Assert.assertEquals(calendar74.toString(), "java.util.GregorianCalendar[time=1645515169004,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=32,SECOND=49,MILLISECOND=4,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 36000000 + "'", int76 == 36000000);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-35999900L) + "'", long81 == (-35999900L));
    }

    @Test
    public void test11768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11768");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateMidnight2.toString(dateTimeFormatter5);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight2.plusMonths(53);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight2.withDayOfMonth(22);
        int int11 = dateMidnight10.getDayOfYear();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean18 = interval14.abuts((org.joda.time.ReadableInterval) interval17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Interval interval20 = interval17.withDurationBeforeEnd(readableDuration19);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean27 = interval23.abuts((org.joda.time.ReadableInterval) interval26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Interval interval29 = interval26.withDurationBeforeEnd(readableDuration28);
        org.joda.time.Period period30 = interval26.toPeriod();
        org.joda.time.Interval interval31 = interval17.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period30);
        java.util.Locale.Builder builder32 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder35 = builder32.setExtension('x', "zh");
        boolean boolean36 = period30.equals((java.lang.Object) builder32);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight10.withPeriodAdded((org.joda.time.ReadablePeriod) period30, 22);
        org.joda.time.DateMidnight.Property property39 = dateMidnight10.weekyear();
        org.joda.time.DateMidnight dateMidnight41 = property39.setCopy(17);
        int int42 = dateMidnight41.getWeekOfWeekyear();
        long long43 = dateMidnight41.getMillis();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str6, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 4 + "'", int42 == 4);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-61628515200000L) + "'", long43 == (-61628515200000L));
    }

    @Test
    public void test11769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11769");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(2);
        org.joda.time.DateTime dateTime14 = dateTime12.minusMillis((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime21 = timeOfDay18.toDateTime((org.joda.time.ReadableInstant) instant20);
        org.joda.time.Chronology chronology22 = instant20.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.clockhourOfHalfday();
        org.joda.time.DurationField durationField24 = chronology22.eras();
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType15.getField(chronology22);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime14, chronology22);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        mutableDateTime26.add(readablePeriod27, 2022);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime26.yearOfEra();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime26.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime37 = timeOfDay34.toDateTime((org.joda.time.ReadableInstant) instant36);
        org.joda.time.Chronology chronology38 = instant36.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.clockhourOfHalfday();
        org.joda.time.DurationField durationField40 = chronology38.eras();
        org.joda.time.DurationFieldType durationFieldType41 = durationField40.getType();
        org.joda.time.DurationFieldType durationFieldType42 = durationField40.getType();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime26.add(durationFieldType42, 2224454);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(durationFieldType42);
    }

    @Test
    public void test11770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11770");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        int int3 = localDateTime2.getDayOfWeek();
        int int4 = localDateTime2.getDayOfMonth();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.hours();
        boolean boolean6 = localDateTime2.isSupported(durationFieldType5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime8 = property7.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = property7.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekyear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test11771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11771");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.weekyear();
        org.joda.time.LocalDate localDate3 = localDate0.withWeekyear((-1));
        org.joda.time.LocalDate localDate5 = localDate3.minusYears((int) (byte) -1);
        org.joda.time.LocalDate.Property property6 = localDate5.yearOfEra();
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean13 = localDate11.isSupported(dateTimeFieldType12);
        int int14 = yearMonthDay8.indexOf(dateTimeFieldType12);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone17 = instant16.getZone();
        org.joda.time.DateTime dateTime18 = yearMonthDay8.toDateTimeAtCurrentTime(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate5.toDateTimeAtMidnight(dateTimeZone17);
        org.joda.time.LocalDate localDate21 = localDate5.withYearOfEra(26);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate21);
    }

    @Test
    public void test11772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11772");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay5.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay7.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay9 = property8.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.minusMonths((int) (short) -1);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean20 = interval16.abuts((org.joda.time.ReadableInterval) interval19);
        long long21 = interval19.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Interval interval23 = interval19.withPeriodAfterStart(readablePeriod22);
        org.joda.time.DateTime dateTime24 = interval19.getStart();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean27 = localDate25.isSupported(dateTimeFieldType26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = localDate25.toDateMidnight(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = localDate25.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property31 = localDate25.yearOfEra();
        org.joda.time.LocalDate localDate33 = localDate25.minusMonths((int) '#');
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean40 = interval36.abuts((org.joda.time.ReadableInterval) interval39);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Interval interval42 = interval39.withDurationBeforeEnd(readableDuration41);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean49 = interval45.abuts((org.joda.time.ReadableInterval) interval48);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Interval interval51 = interval48.withDurationBeforeEnd(readableDuration50);
        org.joda.time.Period period52 = interval48.toPeriod();
        org.joda.time.Interval interval53 = interval39.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period52);
        java.util.Locale.Builder builder54 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder57 = builder54.setExtension('x', "zh");
        boolean boolean58 = period52.equals((java.lang.Object) builder54);
        org.joda.time.LocalDate localDate59 = localDate25.plus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.DateTime dateTime60 = dateTime24.minus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay13.plus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay9.plus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay3.withPeriodAdded((org.joda.time.ReadablePeriod) period52, (-1645515253));
        java.lang.String str65 = yearMonthDay3.toString();
        org.joda.time.YearMonthDay.Property property66 = yearMonthDay3.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay68 = property66.addWrapFieldToCopy(2023);
        org.joda.time.YearMonthDay yearMonthDay70 = yearMonthDay68.minusDays(545);
        org.joda.time.DateTime dateTime71 = yearMonthDay68.toDateTimeAtMidnight();
        int int72 = yearMonthDay68.size();
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1970-02-01" + "'", str65, "1970-02-01");
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(yearMonthDay68);
        org.junit.Assert.assertNotNull(yearMonthDay70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 3 + "'", int72 == 3);
    }

    @Test
    public void test11773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11773");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.monthOfYear();
        mutableDateTime4.add((-259199900L));
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes((int) (short) 1);
        int int12 = localTime9.getMillisOfDay();
        org.joda.time.LocalTime localTime14 = localTime9.plusSeconds(100);
        org.joda.time.LocalTime localTime16 = localTime9.plusSeconds(365);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean20 = interval19.isBeforeNow();
        org.joda.time.Period period21 = interval19.toPeriod();
        org.joda.time.LocalTime localTime23 = localTime9.withPeriodAdded((org.joda.time.ReadablePeriod) period21, 26700803);
        mutableDateTime4.add((org.joda.time.ReadablePeriod) period21, 2040);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime4.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone28);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight29.withDurationAdded((long) 2, 100);
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay35.withSecondOfMinute((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight32.withFields((org.joda.time.ReadablePartial) timeOfDay37);
        org.joda.time.MutableDateTime mutableDateTime39 = dateMidnight32.toMutableDateTimeISO();
        org.joda.time.TimeOfDay timeOfDay44 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant46 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime47 = timeOfDay44.toDateTime((org.joda.time.ReadableInstant) instant46);
        org.joda.time.Chronology chronology48 = instant46.getChronology();
        org.joda.time.TimeOfDay timeOfDay51 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant53 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime54 = timeOfDay51.toDateTime((org.joda.time.ReadableInstant) instant53);
        int[] intArray56 = chronology48.get((org.joda.time.ReadablePartial) timeOfDay51, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(0L, chronology48);
        mutableDateTime57.setYear(3);
        org.joda.time.Instant instant61 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone62 = instant61.getZone();
        mutableDateTime57.setZone(dateTimeZone62);
        org.joda.time.DateMidnight dateMidnight64 = new org.joda.time.DateMidnight(dateTimeZone62);
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime(1L, dateTimeZone62);
        org.joda.time.Chronology chronology66 = localTime65.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.minuteOfHour();
        int int68 = dateMidnight32.get(dateTimeField67);
        int int70 = dateTimeField67.get(1209600100L);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = dateTimeField67.getType();
        org.joda.time.TimeOfDay timeOfDay74 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property75 = timeOfDay74.minuteOfHour();
        java.lang.String str76 = property75.getAsShortText();
        org.joda.time.DateTimeField dateTimeField77 = property75.getField();
        org.joda.time.TimeOfDay timeOfDay79 = property75.addNoWrapToCopy(100);
        java.util.Locale locale80 = java.util.Locale.TRADITIONAL_CHINESE;
        int int81 = property75.getMaximumTextLength(locale80);
        org.joda.time.TimeOfDay timeOfDay82 = property75.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay83 = property75.withMaximumValue();
        java.util.Locale locale88 = new java.util.Locale("1", "12", "\u53f0\u7063");
        java.lang.String str89 = dateTimeField67.getAsText((org.joda.time.ReadablePartial) timeOfDay83, 493, locale88);
        java.util.Calendar calendar90 = mutableDateTime4.toCalendar(locale88);
        org.joda.time.MutableDateTime mutableDateTime91 = mutableDateTime4.copy();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 35 + "'", int12 == 35);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1" + "'", str76, "1");
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(timeOfDay79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertNotNull(timeOfDay82);
        org.junit.Assert.assertNotNull(timeOfDay83);
// flaky:         org.junit.Assert.assertEquals(locale88.toString(), "\u53f0\u7063");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "493" + "'", str89, "493");
        org.junit.Assert.assertNotNull(calendar90);
        org.junit.Assert.assertEquals(calendar90.toString(), "java.util.GregorianCalendar[time=-259199898,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=1,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=363,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(mutableDateTime91);
    }

    @Test
    public void test11774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11774");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime17 = timeOfDay14.toDateTime((org.joda.time.ReadableInstant) instant16);
        int[] intArray19 = chronology11.get((org.joda.time.ReadablePartial) timeOfDay14, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(0L, chronology11);
        java.lang.Object obj21 = mutableDateTime20.clone();
        int int22 = mutableDateTime20.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Chronology chronology30 = instant28.getChronology();
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime36 = timeOfDay33.toDateTime((org.joda.time.ReadableInstant) instant35);
        int[] intArray38 = chronology30.get((org.joda.time.ReadablePartial) timeOfDay33, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(0L, chronology30);
        mutableDateTime39.setYear(3);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone44 = instant43.getZone();
        mutableDateTime39.setZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone44);
        mutableDateTime20.setZoneRetainFields(dateTimeZone44);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(604800000L, dateTimeZone44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter2.withZone(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTimeFormatter49.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter49.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter49.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter49.withZoneUTC();
        org.joda.time.Chronology chronology54 = dateTimeFormatter49.getChronology();
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNull(chronology54);
    }

    @Test
    public void test11775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11775");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.year();
        org.joda.time.DateMidnight dateMidnight4 = property3.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight5 = property3.roundHalfEvenCopy();
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.weekyear();
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight5.plusMonths(378);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight8.plusYears(24);
        org.joda.time.DateMidnight.Property property11 = dateMidnight10.dayOfYear();
        java.lang.String str12 = dateMidnight10.toString();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2025-07-01T00:00:00.000Z" + "'", str12, "2025-07-01T00:00:00.000Z");
    }

    @Test
    public void test11776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11776");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Date date2 = calendar1.getTime();
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime9 = timeOfDay6.toDateTime((org.joda.time.ReadableInstant) instant8);
        org.joda.time.Chronology chronology10 = instant8.getChronology();
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime16 = timeOfDay13.toDateTime((org.joda.time.ReadableInstant) instant15);
        int[] intArray18 = chronology10.get((org.joda.time.ReadablePartial) timeOfDay13, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(0L, chronology10);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime32 = timeOfDay29.toDateTime((org.joda.time.ReadableInstant) instant31);
        int[] intArray34 = chronology26.get((org.joda.time.ReadablePartial) timeOfDay29, (long) (short) -1);
        mutableDateTime19.setChronology(chronology26);
        mutableDateTime19.setMinuteOfDay(8);
        org.joda.time.Instant instant39 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone40 = instant39.getZone();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight43.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight43.withWeekyear(2);
        org.joda.time.DateTimeZone dateTimeZone48 = dateMidnight43.getZone();
        long long50 = dateTimeZone40.getMillisKeepLocal(dateTimeZone48, 10L);
        mutableDateTime19.setZoneRetainFields(dateTimeZone40);
        java.util.TimeZone timeZone52 = dateTimeZone40.toTimeZone();
        calendar1.setTimeZone(timeZone52);
        int int54 = calendar1.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone55 = calendar1.getTimeZone();
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-36000000,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(date2);
        org.junit.Assert.assertEquals(date2.toString(), "Thu Jan 01 00:00:00 GMT+10:00 1970");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 10L + "'", long50 == 10L);
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(timeZone55);
        org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test11777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11777");
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime8 = timeOfDay5.toDateTime((org.joda.time.ReadableInstant) instant7);
        org.joda.time.Chronology chronology9 = instant7.getChronology();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime15 = timeOfDay12.toDateTime((org.joda.time.ReadableInstant) instant14);
        int[] intArray17 = chronology9.get((org.joda.time.ReadablePartial) timeOfDay12, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(0L, chronology9);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (-1), chronology9);
        org.joda.time.DateTimeField dateTimeField20 = chronology9.era();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((-61851081600000L), chronology9);
        org.joda.time.DurationField durationField22 = chronology9.weeks();
        org.joda.time.DurationField durationField23 = chronology9.weekyears();
        long long26 = durationField23.getDifferenceAsLong(303L, 100351107060365116L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-3179999L) + "'", long26 == (-3179999L));
    }

    @Test
    public void test11778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11778");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusWeeks((int) (short) 100);
        org.joda.time.DateMidnight.Property property8 = dateMidnight7.weekyear();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight7.minusYears((int) ' ');
        java.lang.Object obj11 = null;
        boolean boolean12 = dateMidnight10.equals(obj11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.minusWeeks(10);
        org.joda.time.DateTime dateTime15 = dateMidnight14.toDateTimeISO();
        org.joda.time.DateMidnight dateMidnight16 = dateTime15.toDateMidnight();
        org.joda.time.DateTime dateTime17 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime19 = dateTime17.withWeekyear(26707024);
        int int20 = dateTime19.getSecondOfDay();
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test11779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11779");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 3);
        java.util.Calendar.Builder builder6 = builder0.setWeekDate((int) 'a', 30, (int) 'x');
        java.util.Calendar.Builder builder10 = builder6.setWeekDate(52, 0, 35);
        java.util.Calendar.Builder builder14 = builder10.setDate(69, 363, 2922730);
        java.util.Calendar.Builder builder18 = builder10.setWeekDate(312, (-1), 12);
        org.joda.time.tz.NameProvider nameProvider19 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property23 = timeOfDay22.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property23.getFieldType();
        org.joda.time.DurationField durationField25 = property23.getDurationField();
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime32 = timeOfDay29.toDateTime((org.joda.time.ReadableInstant) instant31);
        org.joda.time.Chronology chronology33 = instant31.getChronology();
        org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant38 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime39 = timeOfDay36.toDateTime((org.joda.time.ReadableInstant) instant38);
        int[] intArray41 = chronology33.get((org.joda.time.ReadablePartial) timeOfDay36, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(0L, chronology33);
        int int43 = mutableDateTime42.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime42.property(dateTimeFieldType44);
        org.joda.time.TimeOfDay timeOfDay48 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant50 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime51 = timeOfDay48.toDateTime((org.joda.time.ReadableInstant) instant50);
        org.joda.time.Chronology chronology52 = instant50.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.clockhourOfHalfday();
        long long55 = dateTimeField53.roundHalfFloor(0L);
        java.util.Locale locale56 = java.util.Locale.TRADITIONAL_CHINESE;
        int int57 = dateTimeField53.getMaximumShortTextLength(locale56);
        java.util.Locale locale58 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale59 = locale58.stripExtensions();
        java.util.Locale locale60 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale61 = locale60.stripExtensions();
        java.lang.String str62 = locale58.getDisplayName(locale60);
        java.lang.String str63 = locale56.getDisplayLanguage(locale58);
        java.util.Calendar calendar64 = mutableDateTime42.toCalendar(locale58);
        java.lang.String str65 = property23.getAsShortText(locale58);
        java.lang.String str66 = locale58.getDisplayName();
        java.lang.String str69 = nameProvider19.getName(locale58, "0", "\u5341\u4e8c\u6708");
        java.util.Calendar.Builder builder70 = builder10.setLocale(locale58);
        java.util.Calendar.Builder builder74 = builder10.setDate(26773, (-46800000), 26712123);
        java.util.Calendar.Builder builder79 = builder10.setTimeOfDay(1439, 888, 1, 26914584);
        java.util.Calendar.Builder builder81 = builder10.setLenient(false);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(nameProvider19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str62, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\u4e2d\u6587" + "'", str63, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar64);
        org.junit.Assert.assertEquals(calendar64.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1" + "'", str65, "1");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Chinese (Taiwan)" + "'", str66, "Chinese (Taiwan)");
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test11780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11780");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("und");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"und\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11781");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfHalfday();
        org.joda.time.DurationField durationField10 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField11 = dateTimeFieldType1.getField(chronology8);
        org.joda.time.DateTimeField dateTimeField12 = chronology8.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(604800000L, chronology8);
        mutableDateTime13.setYear(26769);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = instant17.getZone();
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime13.toMutableDateTime(dateTimeZone18);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime13.setMonthOfYear(178);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 178 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
    }

    @Test
    public void test11782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11782");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        boolean boolean33 = mutableDateTime16.isEqualNow();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime16.secondOfDay();
        mutableDateTime16.setMillisOfDay((int) (short) 100);
        int int37 = mutableDateTime16.getHourOfDay();
        org.joda.time.TimeOfDay timeOfDay41 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime44 = timeOfDay41.toDateTime((org.joda.time.ReadableInstant) instant43);
        org.joda.time.Chronology chronology45 = instant43.getChronology();
        org.joda.time.TimeOfDay timeOfDay48 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant50 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime51 = timeOfDay48.toDateTime((org.joda.time.ReadableInstant) instant50);
        int[] intArray53 = chronology45.get((org.joda.time.ReadablePartial) timeOfDay48, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(0L, chronology45);
        mutableDateTime54.setYear(3);
        org.joda.time.Instant instant58 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone59 = instant58.getZone();
        mutableDateTime54.setZone(dateTimeZone59);
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(dateTimeZone59);
        java.lang.String str63 = dateTimeZone59.getName((long) 'x');
        mutableDateTime16.setZoneRetainFields(dateTimeZone59);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay68 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant70 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime71 = timeOfDay68.toDateTime((org.joda.time.ReadableInstant) instant70);
        org.joda.time.Chronology chronology72 = instant70.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.clockhourOfHalfday();
        org.joda.time.DurationField durationField74 = chronology72.eras();
        org.joda.time.DateTimeField dateTimeField75 = dateTimeFieldType65.getField(chronology72);
        org.joda.time.DateTimeField dateTimeField76 = chronology72.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime77 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime16, chronology72);
        org.joda.time.DateTimeField dateTimeField78 = chronology72.weekyear();
        long long81 = dateTimeField78.addWrapField((-187719L), 75600035);
        boolean boolean82 = dateTimeField78.isSupported();
        java.lang.String str84 = dateTimeField78.getAsText((long) 'x');
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00" + "'", str63, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 2385706676169412281L + "'", long81 == 2385706676169412281L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "1970" + "'", str84, "1970");
    }

    @Test
    public void test11783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11783");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.property(dateTimeFieldType3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withMillisOfDay((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusMonths((-46800000));
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.yearOfEra();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test11784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11784");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime.Property property7 = dateTime3.yearOfEra();
        java.lang.String str8 = property7.getName();
        int int9 = property7.get();
        org.joda.time.DateTime dateTime10 = property7.roundHalfFloorCopy();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property15 = timeOfDay14.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property15.getFieldType();
        org.joda.time.DurationField durationField17 = property15.getDurationField();
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime24 = timeOfDay21.toDateTime((org.joda.time.ReadableInstant) instant23);
        org.joda.time.Chronology chronology25 = instant23.getChronology();
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime31 = timeOfDay28.toDateTime((org.joda.time.ReadableInstant) instant30);
        int[] intArray33 = chronology25.get((org.joda.time.ReadablePartial) timeOfDay28, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(0L, chronology25);
        int int35 = mutableDateTime34.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime34.property(dateTimeFieldType36);
        org.joda.time.TimeOfDay timeOfDay40 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant42 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime43 = timeOfDay40.toDateTime((org.joda.time.ReadableInstant) instant42);
        org.joda.time.Chronology chronology44 = instant42.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.clockhourOfHalfday();
        long long47 = dateTimeField45.roundHalfFloor(0L);
        java.util.Locale locale48 = java.util.Locale.TRADITIONAL_CHINESE;
        int int49 = dateTimeField45.getMaximumShortTextLength(locale48);
        java.util.Locale locale50 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale51 = locale50.stripExtensions();
        java.util.Locale locale52 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale53 = locale52.stripExtensions();
        java.lang.String str54 = locale50.getDisplayName(locale52);
        java.lang.String str55 = locale48.getDisplayLanguage(locale50);
        java.util.Calendar calendar56 = mutableDateTime34.toCalendar(locale50);
        java.lang.String str57 = property15.getAsShortText(locale50);
        org.joda.time.DurationField durationField58 = property15.getDurationField();
        org.joda.time.DurationField durationField59 = property15.getRangeDurationField();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.TimeOfDay timeOfDay64 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant66 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime67 = timeOfDay64.toDateTime((org.joda.time.ReadableInstant) instant66);
        org.joda.time.Chronology chronology68 = instant66.getChronology();
        org.joda.time.DateTimeField dateTimeField69 = chronology68.clockhourOfHalfday();
        long long71 = dateTimeField69.roundHalfFloor(0L);
        java.util.Locale locale72 = java.util.Locale.TRADITIONAL_CHINESE;
        int int73 = dateTimeField69.getMaximumShortTextLength(locale72);
        java.lang.String str74 = locale72.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology61, locale72);
        java.lang.String str76 = locale72.toLanguageTag();
        int int77 = property15.getMaximumShortTextLength(locale72);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime78 = property7.setCopy("italien", locale72);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"italien\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "yearOfEra" + "'", str8, "yearOfEra");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str54, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u4e2d\u6587" + "'", str55, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar56);
        org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1" + "'", str57, "1");
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "zh" + "'", str74, "zh");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "zh-TW" + "'", str76, "zh-TW");
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2 + "'", int77 == 2);
    }

    @Test
    public void test11785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11785");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfHalfday();
        long long11 = dateTimeField9.roundHalfFloor(0L);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        int int13 = dateTimeField9.getMaximumShortTextLength(locale12);
        java.lang.String str14 = locale12.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology1, locale12);
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        long long19 = dateTimeParserBucket15.computeMillis(true, "");
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        int[] intArray23 = timeOfDay22.getValues();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay26.minusMinutes((int) '4');
        int int32 = timeOfDay22.compareTo((org.joda.time.ReadablePartial) timeOfDay26);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay22.minusMinutes((int) (short) -1);
        int int35 = timeOfDay34.size();
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime39 = localTime37.minusMinutes((int) (short) 1);
        int int40 = localTime37.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight43.withDurationAdded((long) 2, 100);
        org.joda.time.TimeOfDay timeOfDay49 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay51 = timeOfDay49.withSecondOfMinute((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight46.withFields((org.joda.time.ReadablePartial) timeOfDay51);
        boolean boolean53 = localTime37.equals((java.lang.Object) timeOfDay51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        int int55 = localTime37.get(dateTimeFieldType54);
        boolean boolean56 = timeOfDay34.isSupported(dateTimeFieldType54);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.TimeOfDay timeOfDay62 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant64 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime65 = timeOfDay62.toDateTime((org.joda.time.ReadableInstant) instant64);
        org.joda.time.Chronology chronology66 = instant64.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.clockhourOfHalfday();
        long long69 = dateTimeField67.roundHalfFloor(0L);
        java.util.Locale locale70 = java.util.Locale.TRADITIONAL_CHINESE;
        int int71 = dateTimeField67.getMaximumShortTextLength(locale70);
        java.lang.String str72 = locale70.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology59, locale70);
        java.lang.String str74 = locale70.getDisplayVariant();
        java.lang.String str75 = locale70.getDisplayScript();
        org.joda.time.TimeOfDay timeOfDay78 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant80 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime81 = timeOfDay78.toDateTime((org.joda.time.ReadableInstant) instant80);
        org.joda.time.Chronology chronology82 = instant80.getChronology();
        org.joda.time.DateTimeField dateTimeField83 = chronology82.clockhourOfHalfday();
        long long85 = dateTimeField83.roundHalfFloor(0L);
        java.util.Locale locale86 = java.util.Locale.TRADITIONAL_CHINESE;
        int int87 = dateTimeField83.getMaximumShortTextLength(locale86);
        java.lang.String str88 = locale70.getDisplayLanguage(locale86);
        java.lang.String str89 = locale70.getVariant();
        dateTimeParserBucket15.saveField(dateTimeFieldType54, "Tue Apr 30 00:00:00 UTC 1912", locale70);
        java.lang.String str91 = locale70.getDisplayScript();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 35 + "'", int40 == 35);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 2 + "'", int71 == 2);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "zh" + "'", str72, "zh");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "\u4e2d\u6587" + "'", str88, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
    }

    @Test
    public void test11786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11786");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, 0);
        java.lang.String str3 = dateTimeZone2.toString();
        boolean boolean4 = dateTimeZone2.isFixed();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime15 = timeOfDay12.toDateTime((org.joda.time.ReadableInstant) instant14);
        org.joda.time.Chronology chronology16 = instant14.getChronology();
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        int[] intArray24 = chronology16.get((org.joda.time.ReadablePartial) timeOfDay19, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(0L, chronology16);
        java.lang.Object obj26 = mutableDateTime25.clone();
        int int27 = mutableDateTime25.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime34 = timeOfDay31.toDateTime((org.joda.time.ReadableInstant) instant33);
        org.joda.time.Chronology chronology35 = instant33.getChronology();
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime41 = timeOfDay38.toDateTime((org.joda.time.ReadableInstant) instant40);
        int[] intArray43 = chronology35.get((org.joda.time.ReadablePartial) timeOfDay38, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(0L, chronology35);
        mutableDateTime44.setYear(3);
        org.joda.time.Instant instant48 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone49 = instant48.getZone();
        mutableDateTime44.setZone(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone49);
        mutableDateTime25.setZoneRetainFields(dateTimeZone49);
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(604800000L, dateTimeZone49);
        org.joda.time.TimeOfDay timeOfDay54 = new org.joda.time.TimeOfDay(dateTimeZone49);
        java.lang.String str56 = dateTimeZone49.getShortName((long) (-1645515253));
        org.joda.time.DateTime dateTime57 = dateTime7.withZoneRetainFields(dateTimeZone49);
        org.joda.time.TimeOfDay timeOfDay58 = dateTime7.toTimeOfDay();
        int int59 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime7);
        int int61 = dateTimeZone2.getOffset((long) 32772);
        boolean boolean63 = dateTimeZone2.isStandardOffset((-2177366400000L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+10:00" + "'", str3, "+10:00");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00" + "'", str56, "+00:00");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(timeOfDay58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 36000000 + "'", int59 == 36000000);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 36000000 + "'", int61 == 36000000);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test11787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11787");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.plusDays(17);
        org.joda.time.DateTime dateTime4 = yearMonthDay3.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime6 = dateTime4.minusHours(0);
        java.util.GregorianCalendar gregorianCalendar7 = dateTime4.toGregorianCalendar();
        org.joda.time.DateTime dateTime9 = dateTime4.minusWeeks(57);
        org.joda.time.DateTime dateTime10 = dateTime4.toDateTime();
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(gregorianCalendar7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test11788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11788");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.property(dateTimeFieldType3);
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYearOfEra(35);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMillis(26673621);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withCenturyOfEra(35);
        org.joda.time.LocalDateTime.Property property12 = localDateTime7.weekyear();
        org.joda.time.LocalDateTime localDateTime14 = property12.addToCopy((long) 982);
        org.joda.time.LocalDateTime localDateTime15 = property12.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusSeconds(862);
        int int18 = localDateTime17.getDayOfYear();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
    }

    @Test
    public void test11789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11789");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusYears(7359830);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.YearMonthDay yearMonthDay14 = dateTime12.toYearMonthDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay14.withMonthOfYear(26868537);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26868537 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "7361852-02-22T07:42:48.556Z" + "'", str13, "7361852-02-22T07:42:48.556Z");
        org.junit.Assert.assertNotNull(yearMonthDay14);
    }

    @Test
    public void test11790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11790");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.clockhourOfHalfday();
        org.joda.time.DurationField durationField9 = chronology7.eras();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology7.getZone();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.clockhourOfDay();
        long long16 = chronology7.add((long) (-1), (-1L), (int) '4');
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) 9, chronology7);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.secondOfMinute();
        long long19 = property18.remainder();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-53L) + "'", long16 == (-53L));
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 9L + "'", long19 == 9L);
    }

    @Test
    public void test11791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11791");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.property(dateTimeFieldType3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withMillisOfDay((int) '#');
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean13 = interval9.abuts((org.joda.time.ReadableInterval) interval12);
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean21 = interval17.abuts((org.joda.time.ReadableInterval) interval20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Interval interval23 = interval20.withDurationBeforeEnd(readableDuration22);
        org.joda.time.Interval interval24 = interval12.overlap((org.joda.time.ReadableInterval) interval20);
        org.joda.time.Duration duration25 = interval20.toDuration();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime0.withDurationAdded((org.joda.time.ReadableDuration) duration25, 25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime0.minusHours(53);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.yearOfEra();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.minusMillis(13);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.dayOfWeek();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.millisOfDay();
        org.joda.time.LocalDateTime localDateTime36 = property34.addToCopy(0L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withDayOfYear((-1645515573));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1645515573 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNull(interval24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
    }

    @Test
    public void test11792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11792");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.withDurationAdded((long) 2, 100);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean12 = interval8.abuts((org.joda.time.ReadableInterval) interval11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Interval interval14 = interval11.withDurationBeforeEnd(readableDuration13);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean21 = interval17.abuts((org.joda.time.ReadableInterval) interval20);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Interval interval23 = interval20.withDurationBeforeEnd(readableDuration22);
        org.joda.time.Period period24 = interval20.toPeriod();
        org.joda.time.Interval interval25 = interval11.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period24);
        java.util.Locale.Builder builder26 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder29 = builder26.setExtension('x', "zh");
        boolean boolean30 = period24.equals((java.lang.Object) builder26);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight2.withPeriodAdded((org.joda.time.ReadablePeriod) period24, 2022);
        org.joda.time.DateMidnight.Property property33 = dateMidnight2.centuryOfEra();
        int int34 = property33.getLeapAmount();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay39 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime42 = timeOfDay39.toDateTime((org.joda.time.ReadableInstant) instant41);
        org.joda.time.Chronology chronology43 = instant41.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.clockhourOfHalfday();
        org.joda.time.DurationField durationField45 = chronology43.eras();
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType36.getField(chronology43);
        org.joda.time.DateTimeField dateTimeField47 = chronology43.hourOfDay();
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime(chronology43);
        org.joda.time.Chronology chronology49 = chronology43.withUTC();
        org.joda.time.Chronology chronology50 = chronology49.withUTC();
        java.util.Locale locale53 = new java.util.Locale("1970-01-01T00:00:00.002Z", "java.util.GregorianCalendar[time=-1820016000000,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=null,firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1912,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=121,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        java.util.Locale locale54 = locale53.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket((-86700000L), chronology50, locale53, (java.lang.Integer) (-600));
        int int57 = property33.getMaximumShortTextLength(locale53);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertEquals(locale53.toString(), "1970-01-01t00:00:00.002z_JAVA.UTIL.GREGORIANCALENDAR[TIME=-1820016000000,AREFIELDSSET=FALSE,AREALLFIELDSSET=FALSE,LENIENT=TRUE,ZONE=NULL,FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=1,YEAR=1912,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=121,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "1970-01-01t00:00:00.002z_JAVA.UTIL.GREGORIANCALENDAR[TIME=-1820016000000,AREFIELDSSET=FALSE,AREALLFIELDSSET=FALSE,LENIENT=TRUE,ZONE=NULL,FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=1,YEAR=1912,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=121,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 7 + "'", int57 == 7);
    }

    @Test
    public void test11793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11793");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusMonths((int) (short) -1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean6 = localDate4.isSupported(dateTimeFieldType5);
        int int7 = yearMonthDay1.indexOf(dateTimeFieldType5);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        org.joda.time.DateTime dateTime11 = yearMonthDay1.toDateTimeAtCurrentTime(dateTimeZone10);
        java.lang.String str13 = dateTimeZone10.getName((long) 11);
        long long16 = dateTimeZone10.convertLocalToUTC((long) 2, false);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone19 = instant18.getZone();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withHourOfDay(20);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight25.withWeekyear(2);
        org.joda.time.DateMidnight.Property property30 = dateMidnight25.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight25.withYearOfCentury(1);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean36 = interval35.isBeforeNow();
        org.joda.time.Period period37 = interval35.toPeriod();
        java.lang.String str38 = period37.toString();
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight25.withPeriodAdded((org.joda.time.ReadablePeriod) period37, (int) (byte) 0);
        org.joda.time.DateTime dateTime42 = dateTime22.withPeriodAdded((org.joda.time.ReadablePeriod) period37, 26722694);
        int int43 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime22);
        java.lang.String str44 = dateTimeZone10.toString();
        org.joda.time.YearMonthDay yearMonthDay45 = new org.joda.time.YearMonthDay(dateTimeZone10);
        org.joda.time.YearMonthDay.Property property46 = yearMonthDay45.dayOfMonth();
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00" + "'", str13, "+00:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2L + "'", long16 == 2L);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT0S" + "'", str38, "PT0S");
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "UTC" + "'", str44, "UTC");
        org.junit.Assert.assertNotNull(property46);
    }

    @Test
    public void test11794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11794");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay.Property property4 = yearMonthDay3.monthOfYear();
        int int5 = property4.get();
        org.joda.time.YearMonthDay yearMonthDay7 = property4.addWrapFieldToCopy(4);
        org.joda.time.YearMonthDay yearMonthDay9 = property4.addToCopy(12);
        org.joda.time.YearMonthDay yearMonthDay10 = property4.withMaximumValue();
        org.joda.time.Chronology chronology11 = yearMonthDay10.getChronology();
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay10.plusDays(0);
        org.joda.time.DateMidnight dateMidnight14 = yearMonthDay10.toDateMidnight();
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.weekyear();
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test11795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11795");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        int[] intArray16 = chronology8.get((org.joda.time.ReadablePartial) timeOfDay11, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(0L, chronology8);
        mutableDateTime17.setYear(3);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone22 = instant21.getZone();
        mutableDateTime17.setZone(dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight(dateTimeZone22);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(1L, dateTimeZone22);
        org.joda.time.Chronology chronology26 = localTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.centuryOfEra();
        org.joda.time.Chronology chronology29 = chronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
    }

    @Test
    public void test11796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11796");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.property(dateTimeFieldType3);
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusWeeks((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight11.minusWeeks(0);
        long long16 = property4.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.LocalDateTime localDateTime18 = property4.addWrapFieldToCopy(42);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfWeek();
        org.joda.time.LocalDateTime.Property property20 = localDateTime18.yearOfEra();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean27 = interval23.abuts((org.joda.time.ReadableInterval) interval26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Interval interval29 = interval26.withDurationBeforeEnd(readableDuration28);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean36 = interval32.abuts((org.joda.time.ReadableInterval) interval35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Interval interval38 = interval35.withDurationBeforeEnd(readableDuration37);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean45 = interval41.abuts((org.joda.time.ReadableInterval) interval44);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.Interval interval47 = interval44.withDurationBeforeEnd(readableDuration46);
        org.joda.time.Period period48 = interval44.toPeriod();
        org.joda.time.Interval interval49 = interval35.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period48);
        org.joda.time.Interval interval50 = interval26.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period48);
        long long51 = interval26.toDurationMillis();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean58 = interval54.abuts((org.joda.time.ReadableInterval) interval57);
        long long59 = interval57.getStartMillis();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval65 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean66 = interval62.abuts((org.joda.time.ReadableInterval) interval65);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Interval interval68 = interval65.withDurationBeforeEnd(readableDuration67);
        org.joda.time.Interval interval69 = interval57.overlap((org.joda.time.ReadableInterval) interval65);
        org.joda.time.Duration duration70 = interval65.toDuration();
        org.joda.time.Interval interval73 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval76 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean77 = interval73.abuts((org.joda.time.ReadableInterval) interval76);
        long long78 = interval76.getStartMillis();
        org.joda.time.Interval interval81 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval84 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean85 = interval81.abuts((org.joda.time.ReadableInterval) interval84);
        org.joda.time.ReadableDuration readableDuration86 = null;
        org.joda.time.Interval interval87 = interval84.withDurationBeforeEnd(readableDuration86);
        org.joda.time.Interval interval88 = interval76.overlap((org.joda.time.ReadableInterval) interval84);
        org.joda.time.Duration duration89 = interval84.toDuration();
        org.joda.time.Duration duration90 = duration89.toDuration();
        boolean boolean91 = duration70.isEqual((org.joda.time.ReadableDuration) duration90);
        org.joda.time.Interval interval92 = interval26.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration70);
        org.joda.time.Period period93 = duration70.toPeriod();
        org.joda.time.LocalDateTime localDateTime94 = localDateTime18.minus((org.joda.time.ReadablePeriod) period93);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNull(interval69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(interval87);
        org.junit.Assert.assertNull(interval88);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertNotNull(localDateTime94);
    }

    @Test
    public void test11797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11797");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.weekOfWeekyear();
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withDurationAdded(readableDuration10, (int) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime9.minusSeconds((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime9.minus(readableDuration15);
        org.joda.time.DateTime dateTime18 = dateTime9.minusSeconds((int) (byte) 100);
        int int19 = mutableDateTime4.compareTo((org.joda.time.ReadableInstant) dateTime18);
        mutableDateTime4.addMonths(112);
        mutableDateTime4.addHours(1439);
        mutableDateTime4.addYears(26923561);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime4.setHourOfDay(1969);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1969 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test11798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11798");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay.Property property4 = yearMonthDay3.monthOfYear();
        int int5 = property4.get();
        org.joda.time.YearMonthDay yearMonthDay7 = property4.addWrapFieldToCopy(4);
        org.joda.time.YearMonthDay yearMonthDay9 = property4.addToCopy(12);
        org.joda.time.YearMonthDay yearMonthDay10 = property4.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay11 = property4.withMaximumValue();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime20 = timeOfDay17.toDateTime((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Chronology chronology21 = instant19.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.clockhourOfHalfday();
        long long24 = dateTimeField22.roundHalfFloor(0L);
        java.util.Locale locale25 = java.util.Locale.TRADITIONAL_CHINESE;
        int int26 = dateTimeField22.getMaximumShortTextLength(locale25);
        java.lang.String str27 = locale25.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology14, locale25);
        java.util.Locale locale29 = dateTimeParserBucket28.getLocale();
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime35 = timeOfDay32.toDateTime((org.joda.time.ReadableInstant) instant34);
        org.joda.time.Chronology chronology36 = instant34.getChronology();
        org.joda.time.TimeOfDay timeOfDay39 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime42 = timeOfDay39.toDateTime((org.joda.time.ReadableInstant) instant41);
        int[] intArray44 = chronology36.get((org.joda.time.ReadablePartial) timeOfDay39, (long) (short) -1);
        boolean boolean45 = dateTimeParserBucket28.restoreState((java.lang.Object) (short) -1);
        java.util.Locale locale46 = dateTimeParserBucket28.getLocale();
        org.joda.time.TimeOfDay timeOfDay49 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant51 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime52 = timeOfDay49.toDateTime((org.joda.time.ReadableInstant) instant51);
        org.joda.time.Chronology chronology53 = instant51.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.clockhourOfHalfday();
        org.joda.time.DurationField durationField55 = chronology53.eras();
        org.joda.time.DateTimeField dateTimeField56 = chronology53.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone57 = chronology53.getZone();
        dateTimeParserBucket28.setZone(dateTimeZone57);
        org.joda.time.LocalTime localTime61 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime.Property property62 = localTime61.hourOfDay();
        int int63 = property62.getMinimumValue();
        org.joda.time.LocalTime localTime64 = property62.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField65 = property62.getField();
        org.joda.time.DateTimeField dateTimeField66 = property62.getField();
        org.joda.time.TimeOfDay timeOfDay71 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant73 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime74 = timeOfDay71.toDateTime((org.joda.time.ReadableInstant) instant73);
        org.joda.time.Chronology chronology75 = instant73.getChronology();
        org.joda.time.TimeOfDay timeOfDay78 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant80 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime81 = timeOfDay78.toDateTime((org.joda.time.ReadableInstant) instant80);
        int[] intArray83 = chronology75.get((org.joda.time.ReadablePartial) timeOfDay78, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime84 = new org.joda.time.MutableDateTime(0L, chronology75);
        int int85 = mutableDateTime84.getEra();
        org.joda.time.MutableDateTime.Property property86 = mutableDateTime84.yearOfEra();
        org.joda.time.DurationField durationField87 = property86.getRangeDurationField();
        java.util.Locale locale89 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str90 = locale89.getDisplayLanguage();
        org.joda.time.MutableDateTime mutableDateTime91 = property86.set("2022", locale89);
        java.lang.String str92 = dateTimeField66.getAsShortText(847285067453425000L, locale89);
        java.lang.String str93 = dateTimeZone57.getName(259260000L, locale89);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay94 = property4.setCopy("JAVA.UTIL.GREGORIANCALENDAR[TIME=-1820016000000,AREFIELDSSET=FALSE,AREALLFIELDSSET=FALSE,LENIENT=TRUE,ZONE=NULL,FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=1,YEAR=1912,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=121,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", locale89);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"JAVA.UTIL.GREGORIANCALENDAR[TIME=-1820016000000,AREFIELDSSET=FALSE,AREALLFIELDSSET=FALSE,LENIENT=TRUE,ZONE=NULL,FIRSTDAYOFWEEK=1,MINIMALDAYSINFIRSTWEEK=1,ERA=1,YEAR=1912,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=121,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "zh" + "'", str27, "zh");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 1 + "'", int85 == 1);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNull(durationField87);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Chinese" + "'", str90, "Chinese");
        org.junit.Assert.assertNotNull(mutableDateTime91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "13" + "'", str92, "13");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "+00:00" + "'", str93, "+00:00");
    }

    @Test
    public void test11799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11799");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = property3.getFieldType();
        org.joda.time.DurationField durationField5 = property3.getDurationField();
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withDurationAdded(readableDuration10, (int) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime9.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime18 = dateTime16.plusDays(2);
        org.joda.time.DateTime dateTime20 = dateTime16.withHourOfDay(22);
        int int21 = property3.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.TimeOfDay timeOfDay22 = property3.getTimeOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay((java.lang.Object) property3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.TimeOfDay$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(timeOfDay22);
    }

    @Test
    public void test11800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11800");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) (short) -1);
        int int3 = localDate2.getCenturyOfEra();
        org.joda.time.LocalDate.Property property4 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate6 = property4.addToCopy(655);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20 + "'", int3 == 20);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test11801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11801");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime17 = timeOfDay14.toDateTime((org.joda.time.ReadableInstant) instant16);
        int[] intArray19 = chronology11.get((org.joda.time.ReadablePartial) timeOfDay14, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(0L, chronology11);
        java.lang.Object obj21 = mutableDateTime20.clone();
        int int22 = mutableDateTime20.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Chronology chronology30 = instant28.getChronology();
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime36 = timeOfDay33.toDateTime((org.joda.time.ReadableInstant) instant35);
        int[] intArray38 = chronology30.get((org.joda.time.ReadablePartial) timeOfDay33, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(0L, chronology30);
        mutableDateTime39.setYear(3);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone44 = instant43.getZone();
        mutableDateTime39.setZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone44);
        mutableDateTime20.setZoneRetainFields(dateTimeZone44);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(604800000L, dateTimeZone44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter2.withZone(dateTimeZone44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter2.withDefaultYear(0);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter2.withDefaultYear((-1));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter53.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter53.withPivotYear(26832826);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter53.withPivotYear(86399947);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
    }

    @Test
    public void test11802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11802");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        mutableDateTime16.setYear(3);
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone21 = instant20.getZone();
        mutableDateTime16.setZone(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = org.joda.time.DateTime.now(dateTimeZone21);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime23.toMutableDateTime();
        org.joda.time.DateTime.Property property25 = dateTime23.minuteOfHour();
        org.joda.time.DateTime dateTime27 = dateTime23.plusMonths(14);
        org.joda.time.DateTime dateTime29 = dateTime23.plusMinutes(25);
        org.joda.time.DateTime dateTime30 = dateTime23.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test11803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11803");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime.Property property7 = dateTime3.yearOfEra();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        org.joda.time.Chronology chronology14 = instant12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.clockhourOfHalfday();
        long long17 = dateTimeField15.roundHalfFloor(0L);
        java.util.Locale locale18 = java.util.Locale.TRADITIONAL_CHINESE;
        int int19 = dateTimeField15.getMaximumShortTextLength(locale18);
        java.lang.String str20 = locale18.getLanguage();
        java.lang.String str21 = locale18.getISO3Country();
        java.lang.String str22 = locale18.getLanguage();
        java.util.Calendar calendar23 = dateTime3.toCalendar(locale18);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "zh" + "'", str20, "zh");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "TWN" + "'", str21, "TWN");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "zh" + "'", str22, "zh");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645515169872,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=32,SECOND=49,MILLISECOND=872,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test11804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11804");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = dateTime5.toString(dateTimeFormatter6);
        org.joda.time.DateMidnight dateMidnight8 = dateTime5.toDateMidnight();
        org.joda.time.DateTime dateTime10 = dateTime5.plusDays(70);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        org.joda.time.DateTime dateTime12 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime14 = dateTime12.minusYears(26749467);
        org.joda.time.DateTime.Property property15 = dateTime14.hourOfDay();
        int int16 = dateTime14.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1969-12-31T00:01:00.000Z" + "'", str7, "1969-12-31T00:01:00.000Z");
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test11805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11805");
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusMinutes(35);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusMinutes((int) (byte) -1);
        org.joda.time.Chronology chronology9 = localDateTime4.getChronology();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 4, chronology9);
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket(0L, chronology9, locale11, (java.lang.Integer) 1439, (-1645515260));
        java.util.Locale locale15 = dateTimeParserBucket14.getLocale();
        long long16 = dateTimeParserBucket14.computeMillis();
        int int17 = dateTimeParserBucket14.getOffset();
        int int18 = dateTimeParserBucket14.getOffset();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test11806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11806");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(10368000000L);
        org.joda.time.DateMidnight dateMidnight2 = yearMonthDay1.toDateMidnight();
        org.joda.time.DateMidnight.Property property3 = dateMidnight2.monthOfYear();
        org.joda.time.DateMidnight dateMidnight4 = property3.withMinimumValue();
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
    }

    @Test
    public void test11807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11807");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getWeekOfWeekyear();
        org.joda.time.LocalDate.Property property2 = localDate0.dayOfYear();
        org.joda.time.DateTime dateTime3 = localDate0.toDateTimeAtStartOfDay();
        org.joda.time.ReadablePartial readablePartial4 = null;
        org.joda.time.LocalDate localDate5 = localDate0.withFields(readablePartial4);
        int int6 = localDate5.getWeekyear();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 8 + "'", int1 == 8);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
    }

    @Test
    public void test11808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11808");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight2.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusWeeks((int) (short) 100);
        int int8 = dateMidnight5.getCenturyOfEra();
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone10 = dateMidnight9.getZone();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.withWeekyear(53);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean19 = interval15.abuts((org.joda.time.ReadableInterval) interval18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Interval interval21 = interval18.withDurationBeforeEnd(readableDuration20);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean28 = interval24.abuts((org.joda.time.ReadableInterval) interval27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Interval interval30 = interval27.withDurationBeforeEnd(readableDuration29);
        org.joda.time.Period period31 = interval27.toPeriod();
        org.joda.time.Interval interval32 = interval18.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period31);
        java.util.Locale.Builder builder33 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder36 = builder33.setExtension('x', "zh");
        boolean boolean37 = period31.equals((java.lang.Object) builder33);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight12.plus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight5.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.DateMidnight.Property property40 = dateMidnight5.weekyear();
        org.joda.time.DateMidnight dateMidnight42 = property40.addToCopy(27046);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 19 + "'", int8 == 19);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateMidnight42);
    }

    @Test
    public void test11809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11809");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight4.withWeekyear(2);
        org.joda.time.DateMidnight.Property property9 = dateMidnight4.weekOfWeekyear();
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.lang.String str11 = property9.getAsShortText(locale10);
        java.lang.String str12 = dateTimeZone0.getShortName((long) 9, locale10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone0);
        int int14 = dateTime13.getMinuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime13.plusMillis(26702077);
        org.joda.time.DateTime.Property property17 = dateTime13.weekyear();
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.withWeekyear(2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = null;
        java.lang.String str24 = dateMidnight20.toString(dateTimeFormatter23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight20.plusMonths(53);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight20.withDayOfMonth(22);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight20.minus(readableDuration29);
        int int31 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean35 = interval34.isBeforeNow();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean39 = interval38.isBeforeNow();
        org.joda.time.Interval interval42 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean46 = interval42.abuts((org.joda.time.ReadableInterval) interval45);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Interval interval48 = interval45.withDurationBeforeEnd(readableDuration47);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean55 = interval51.abuts((org.joda.time.ReadableInterval) interval54);
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Interval interval57 = interval54.withDurationBeforeEnd(readableDuration56);
        org.joda.time.Period period58 = interval54.toPeriod();
        org.joda.time.Interval interval59 = interval45.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period58);
        java.util.Locale.Builder builder60 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder63 = builder60.setExtension('x', "zh");
        boolean boolean64 = period58.equals((java.lang.Object) builder60);
        org.joda.time.Interval interval65 = interval38.withPeriodAfterStart((org.joda.time.ReadablePeriod) period58);
        org.joda.time.Interval interval66 = interval34.withPeriodAfterStart((org.joda.time.ReadablePeriod) period58);
        org.joda.time.MutablePeriod mutablePeriod67 = period58.toMutablePeriod();
        org.joda.time.DateTime dateTime68 = dateTime13.plus((org.joda.time.ReadablePeriod) mutablePeriod67);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime73 = dateTime68.withTime(868, 57170897, 26817989, 26784);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 868 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 32 + "'", int14 == 32);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str24, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(mutablePeriod67);
        org.junit.Assert.assertNotNull(dateTime68);
    }

    @Test
    public void test11810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11810");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusMinutes((-292275054));
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withWeekOfWeekyear(9);
        int int7 = localDateTime4.getDayOfMonth();
        org.joda.time.Chronology chronology8 = localDateTime4.getChronology();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(chronology8);
    }

    @Test
    public void test11811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11811");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        mutableDateTime16.setMinuteOfDay(8);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone37 = instant36.getZone();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight40.withWeekyear(2);
        org.joda.time.DateTimeZone dateTimeZone45 = dateMidnight40.getZone();
        long long47 = dateTimeZone37.getMillisKeepLocal(dateTimeZone45, 10L);
        mutableDateTime16.setZoneRetainFields(dateTimeZone37);
        java.util.TimeZone timeZone49 = dateTimeZone37.toTimeZone();
        org.joda.time.DateMidnight dateMidnight50 = org.joda.time.DateMidnight.now(dateTimeZone37);
        org.joda.time.LocalTime localTime51 = org.joda.time.LocalTime.now(dateTimeZone37);
        org.joda.time.DateTime dateTime52 = localTime51.toDateTimeToday();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(dateTime52);
    }

    @Test
    public void test11812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11812");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 0);
        org.joda.time.LocalDate localDate3 = localDate1.withCenturyOfEra(363);
        org.joda.time.LocalDate localDate5 = localDate1.minusDays(0);
        org.joda.time.LocalDate localDate7 = localDate5.withWeekyear((int) (short) 10);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime11 = localTime9.minusMinutes((int) (short) 1);
        org.joda.time.LocalTime localTime13 = localTime9.withMillisOfDay((int) (byte) 1);
        org.joda.time.LocalTime.Property property14 = localTime9.secondOfMinute();
        org.joda.time.LocalTime localTime16 = property14.addCopy((int) '4');
        boolean boolean17 = property14.isLeap();
        org.joda.time.LocalTime localTime19 = property14.addNoWrapToCopy(60);
        org.joda.time.LocalTime localTime21 = localTime19.withMillisOfSecond(979);
        // The following exception was thrown during execution in test generation
        try {
            int int22 = localDate5.compareTo((org.joda.time.ReadablePartial) localTime21);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
    }

    @Test
    public void test11813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11813");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate0.plusMonths((-1));
        org.joda.time.LocalDate.Property property7 = localDate6.era();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.LocalDate localDate10 = property7.addWrapFieldToCopy((-1));
        org.joda.time.LocalDate localDate11 = property7.withMinimumValue();
        org.joda.time.LocalDate.Property property12 = localDate11.centuryOfEra();
        org.joda.time.LocalDate.Property property13 = localDate11.yearOfEra();
        org.joda.time.LocalDate.Property property14 = localDate11.dayOfMonth();
        int int15 = localDate11.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
    }

    @Test
    public void test11814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11814");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime17 = timeOfDay14.toDateTime((org.joda.time.ReadableInstant) instant16);
        int[] intArray19 = chronology11.get((org.joda.time.ReadablePartial) timeOfDay14, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(0L, chronology11);
        java.lang.Object obj21 = mutableDateTime20.clone();
        int int22 = mutableDateTime20.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Chronology chronology30 = instant28.getChronology();
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime36 = timeOfDay33.toDateTime((org.joda.time.ReadableInstant) instant35);
        int[] intArray38 = chronology30.get((org.joda.time.ReadablePartial) timeOfDay33, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(0L, chronology30);
        mutableDateTime39.setYear(3);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone44 = instant43.getZone();
        mutableDateTime39.setZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone44);
        mutableDateTime20.setZoneRetainFields(dateTimeZone44);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(604800000L, dateTimeZone44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter2.withZone(dateTimeZone44);
        int int50 = dateTimeFormatter49.getDefaultYear();
        boolean boolean51 = dateTimeFormatter49.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter49.withDefaultYear(26707024);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter53.withDefaultYear(1962);
        java.lang.StringBuffer stringBuffer56 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter53.printTo(stringBuffer56, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2000 + "'", int50 == 2000);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
    }

    @Test
    public void test11815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11815");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        mutableDateTime16.setMinuteOfDay(8);
        mutableDateTime16.setTime((long) 35);
        mutableDateTime16.setSecondOfMinute(30);
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.withEra(1);
        boolean boolean44 = mutableDateTime16.isBefore((org.joda.time.ReadableInstant) dateMidnight43);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime16.era();
        org.joda.time.TimeOfDay timeOfDay49 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant51 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime52 = timeOfDay49.toDateTime((org.joda.time.ReadableInstant) instant51);
        org.joda.time.Chronology chronology53 = instant51.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.year();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.minuteOfHour();
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval61 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean62 = interval58.abuts((org.joda.time.ReadableInterval) interval61);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Interval interval64 = interval61.withDurationBeforeEnd(readableDuration63);
        org.joda.time.Interval interval67 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval70 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean71 = interval67.abuts((org.joda.time.ReadableInterval) interval70);
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.Interval interval73 = interval70.withDurationBeforeEnd(readableDuration72);
        org.joda.time.Interval interval76 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval79 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean80 = interval76.abuts((org.joda.time.ReadableInterval) interval79);
        org.joda.time.ReadableDuration readableDuration81 = null;
        org.joda.time.Interval interval82 = interval79.withDurationBeforeEnd(readableDuration81);
        org.joda.time.Period period83 = interval79.toPeriod();
        org.joda.time.Interval interval84 = interval70.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period83);
        org.joda.time.Interval interval85 = interval61.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period83);
        int[] intArray88 = chronology53.get((org.joda.time.ReadablePeriod) period83, (long) 363, (long) (byte) 100);
        org.joda.time.DurationField durationField89 = chronology53.weekyears();
        org.joda.time.DateTime dateTime90 = new org.joda.time.DateTime((-35998561L), chronology53);
        mutableDateTime16.setDate((org.joda.time.ReadableInstant) dateTime90);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(interval82);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(intArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[0, 0, 0, 0, 0, 0, 0, -263]");
        org.junit.Assert.assertNotNull(durationField89);
    }

    @Test
    public void test11816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11816");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMinutes(35);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusYears((int) (short) 100);
        java.util.Date date7 = localDateTime6.toDate();
        int int8 = localDateTime6.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Feb 22 06:57:50 GMT+10:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 57 + "'", int8 == 57);
    }

    @Test
    public void test11817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11817");
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.withDurationAdded((long) 2, 100);
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay17.withSecondOfMinute((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight14.withFields((org.joda.time.ReadablePartial) timeOfDay19);
        org.joda.time.Chronology chronology21 = dateMidnight14.getChronology();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) 70, 41731200000L, chronology21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(1972, (int) (byte) 1, 514, 2000, 71, 24737363, 26703592, chronology21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(chronology21);
    }

    @Test
    public void test11818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11818");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean6 = interval5.isBeforeNow();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean13 = interval9.abuts((org.joda.time.ReadableInterval) interval12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Interval interval15 = interval12.withDurationBeforeEnd(readableDuration14);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean22 = interval18.abuts((org.joda.time.ReadableInterval) interval21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Interval interval24 = interval21.withDurationBeforeEnd(readableDuration23);
        org.joda.time.Period period25 = interval21.toPeriod();
        org.joda.time.Interval interval26 = interval12.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period25);
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder30 = builder27.setExtension('x', "zh");
        boolean boolean31 = period25.equals((java.lang.Object) builder27);
        org.joda.time.Interval interval32 = interval5.withPeriodAfterStart((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Interval interval33 = interval2.withPeriodAfterStart((org.joda.time.ReadablePeriod) period25);
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime41 = timeOfDay38.toDateTime((org.joda.time.ReadableInstant) instant40);
        org.joda.time.Chronology chronology42 = instant40.getChronology();
        org.joda.time.TimeOfDay timeOfDay45 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant47 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime48 = timeOfDay45.toDateTime((org.joda.time.ReadableInstant) instant47);
        int[] intArray50 = chronology42.get((org.joda.time.ReadablePartial) timeOfDay45, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(0L, chronology42);
        mutableDateTime51.setYear(3);
        org.joda.time.Instant instant55 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone56 = instant55.getZone();
        mutableDateTime51.setZone(dateTimeZone56);
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(dateTimeZone56);
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime(1L, dateTimeZone56);
        boolean boolean60 = interval33.equals((java.lang.Object) localTime59);
        org.joda.time.Interval interval62 = interval33.withEndMillis(15309L);
        org.joda.time.MutableInterval mutableInterval63 = interval33.toMutableInterval();
        org.joda.time.TimeOfDay timeOfDay68 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant70 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime71 = timeOfDay68.toDateTime((org.joda.time.ReadableInstant) instant70);
        org.joda.time.Chronology chronology72 = instant70.getChronology();
        org.joda.time.DurationField durationField73 = chronology72.days();
        org.joda.time.DateTimeField dateTimeField74 = chronology72.monthOfYear();
        org.joda.time.Interval interval75 = new org.joda.time.Interval((long) 26725, 9223246063321975808L, chronology72);
        org.joda.time.Interval interval76 = interval33.withChronology(chronology72);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(mutableInterval63);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(interval76);
    }

    @Test
    public void test11819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11819");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.weekOfWeekyear();
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withDurationAdded(readableDuration10, (int) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime9.minusSeconds((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime9.minus(readableDuration15);
        org.joda.time.DateTime dateTime18 = dateTime9.minusSeconds((int) (byte) 100);
        int int19 = mutableDateTime4.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime4.dayOfMonth();
        mutableDateTime4.setMillisOfDay((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((java.lang.Object) mutableDateTime4);
        org.joda.time.DateTime dateTime24 = localDateTime23.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight27.withWeekyear(2);
        org.joda.time.DateMidnight.Property property32 = dateMidnight27.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight27.withYearOfCentury(1);
        org.joda.time.DateMidnight.Property property35 = dateMidnight34.weekyear();
        org.joda.time.Interval interval36 = dateMidnight34.toInterval();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone38);
        org.joda.time.DateMidnight.Property property40 = dateMidnight39.year();
        org.joda.time.DateMidnight dateMidnight41 = property40.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minusYears(35);
        boolean boolean44 = interval36.contains((org.joda.time.ReadableInstant) dateMidnight41);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean51 = interval47.abuts((org.joda.time.ReadableInterval) interval50);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Interval interval53 = interval50.withDurationBeforeEnd(readableDuration52);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean60 = interval56.abuts((org.joda.time.ReadableInterval) interval59);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Interval interval62 = interval59.withDurationBeforeEnd(readableDuration61);
        org.joda.time.Interval interval65 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval68 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean69 = interval65.abuts((org.joda.time.ReadableInterval) interval68);
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.Interval interval71 = interval68.withDurationBeforeEnd(readableDuration70);
        org.joda.time.Period period72 = interval68.toPeriod();
        org.joda.time.Interval interval73 = interval59.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period72);
        org.joda.time.Interval interval74 = interval50.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period72);
        org.joda.time.PeriodType periodType75 = period72.getPeriodType();
        org.joda.time.Interval interval76 = interval36.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period72);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime23.plus((org.joda.time.ReadablePeriod) period72);
        int int78 = localDateTime23.getEra();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
    }

    @Test
    public void test11820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11820");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.DurationField durationField17 = chronology7.weeks();
        org.joda.time.LocalTime localTime19 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime.Property property20 = localTime19.hourOfDay();
        org.joda.time.LocalTime localTime21 = property20.roundFloorCopy();
        org.joda.time.LocalTime localTime23 = property20.setCopy(0);
        org.joda.time.LocalTime localTime25 = property20.addWrapFieldToCopy(7);
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        int[] intArray29 = timeOfDay28.getValues();
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime35 = timeOfDay32.toDateTime((org.joda.time.ReadableInstant) instant34);
        org.joda.time.TimeOfDay timeOfDay37 = timeOfDay32.minusMinutes((int) '4');
        int int38 = timeOfDay28.compareTo((org.joda.time.ReadablePartial) timeOfDay32);
        org.joda.time.DateTimeField[] dateTimeFieldArray39 = timeOfDay32.getFields();
        int[] intArray40 = timeOfDay32.getValues();
        chronology7.validate((org.joda.time.ReadablePartial) localTime25, intArray40);
        int int42 = localTime25.getMinuteOfHour();
        org.joda.time.DateTime dateTime43 = localTime25.toDateTimeToday();
        org.joda.time.DateTime.Property property44 = dateTime43.millisOfDay();
        org.joda.time.DateTime dateTime45 = property44.getDateTime();
        org.joda.time.DateTime dateTime46 = property44.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime47 = property44.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test11821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11821");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime3.toMutableDateTime();
        org.joda.time.Chronology chronology10 = mutableDateTime9.getChronology();
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean17 = interval13.abuts((org.joda.time.ReadableInterval) interval16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Interval interval19 = interval16.withDurationBeforeEnd(readableDuration18);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean26 = interval22.abuts((org.joda.time.ReadableInterval) interval25);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Interval interval28 = interval25.withDurationBeforeEnd(readableDuration27);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean35 = interval31.abuts((org.joda.time.ReadableInterval) interval34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Interval interval37 = interval34.withDurationBeforeEnd(readableDuration36);
        org.joda.time.Period period38 = interval34.toPeriod();
        org.joda.time.Interval interval39 = interval25.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Interval interval40 = interval16.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period38);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusYears(17);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.minuteOfHour();
        org.joda.time.Interval interval47 = property46.toInterval();
        org.joda.time.Period period48 = interval47.toPeriod();
        org.joda.time.Interval interval49 = interval16.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period48);
        mutableDateTime9.add((org.joda.time.ReadablePeriod) period48, 26747);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(interval47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(interval49);
    }

    @Test
    public void test11822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11822");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMinutes(35);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.millisOfDay();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.LocalDateTime localDateTime8 = property5.addWrapFieldToCopy((-1645515291));
        org.joda.time.Interval interval9 = property5.toInterval();
        org.joda.time.LocalDateTime localDateTime11 = property5.addToCopy(100L);
        org.joda.time.LocalDateTime localDateTime12 = property5.roundHalfEvenCopy();
        org.joda.time.DurationField durationField13 = property5.getRangeDurationField();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test11823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11823");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        boolean boolean33 = mutableDateTime16.isEqualNow();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime16.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight37.withDurationAdded((long) (short) 10, 1);
        mutableDateTime16.setDate((org.joda.time.ReadableInstant) dateMidnight40);
        mutableDateTime16.setMinuteOfHour(0);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime16.era();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime16.weekOfWeekyear();
        mutableDateTime16.setWeekOfWeekyear(30);
        mutableDateTime16.addHours((int) (byte) -1);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime16.hourOfDay();
        java.lang.String str51 = property50.getName();
        org.joda.time.MutableDateTime mutableDateTime53 = property50.set("20");
        mutableDateTime53.setMillisOfDay(291);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "hourOfDay" + "'", str51, "hourOfDay");
        org.junit.Assert.assertNotNull(mutableDateTime53);
    }

    @Test
    public void test11824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11824");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.DurationField durationField17 = chronology7.halfdays();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime32 = timeOfDay29.toDateTime((org.joda.time.ReadableInstant) instant31);
        int[] intArray34 = chronology26.get((org.joda.time.ReadablePartial) timeOfDay29, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(0L, chronology26);
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant40 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime41 = timeOfDay38.toDateTime((org.joda.time.ReadableInstant) instant40);
        org.joda.time.Chronology chronology42 = instant40.getChronology();
        org.joda.time.TimeOfDay timeOfDay45 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant47 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime48 = timeOfDay45.toDateTime((org.joda.time.ReadableInstant) instant47);
        int[] intArray50 = chronology42.get((org.joda.time.ReadablePartial) timeOfDay45, (long) (short) -1);
        mutableDateTime35.setChronology(chronology42);
        boolean boolean52 = mutableDateTime35.isEqualNow();
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime35.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime55 = property53.set(22);
        org.joda.time.MutableDateTime mutableDateTime57 = property53.add((long) 1);
        org.joda.time.DateTimeZone dateTimeZone59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone59);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight60.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight63.minusWeeks((int) (short) 100);
        org.joda.time.DateMidnight.Property property66 = dateMidnight65.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean68 = dateMidnight65.isSupported(dateTimeFieldType67);
        org.joda.time.DurationFieldType durationFieldType69 = dateTimeFieldType67.getDurationType();
        mutableDateTime57.add(durationFieldType69, 293);
        mutableDateTime18.add(durationFieldType69, 28);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(durationFieldType69);
    }

    @Test
    public void test11825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11825");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        java.lang.Object obj17 = mutableDateTime16.clone();
        int int18 = mutableDateTime16.getMinuteOfHour();
        mutableDateTime16.addMinutes((int) (byte) 10);
        mutableDateTime16.setMillis(0L);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime16.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime25 = property23.add((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime26 = property23.roundHalfFloor();
        int int27 = mutableDateTime26.getWeekyear();
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone30 = instant29.getZone();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.DateTime dateTime34 = dateTime31.withDurationAdded(readableDuration32, (int) (byte) 0);
        org.joda.time.DateTime dateTime36 = dateTime31.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime37 = dateTime31.toDateTime();
        org.joda.time.DateTime dateTime39 = dateTime31.minusMinutes(19);
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight42.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.minusWeeks((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.minusMonths(70);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean56 = interval52.abuts((org.joda.time.ReadableInterval) interval55);
        long long57 = interval55.getStartMillis();
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval63 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean64 = interval60.abuts((org.joda.time.ReadableInterval) interval63);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Interval interval66 = interval63.withDurationBeforeEnd(readableDuration65);
        org.joda.time.Interval interval67 = interval55.overlap((org.joda.time.ReadableInterval) interval63);
        org.joda.time.Duration duration68 = interval63.toDuration();
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight49.withDurationAdded((org.joda.time.ReadableDuration) duration68, 0);
        org.joda.time.DateTime dateTime71 = dateTime39.plus((org.joda.time.ReadableDuration) duration68);
        int int72 = mutableDateTime26.compareTo((org.joda.time.ReadableInstant) dateTime71);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNull(interval67);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
    }

    @Test
    public void test11826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11826");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay.Property property4 = yearMonthDay3.monthOfYear();
        int int5 = property4.get();
        org.joda.time.YearMonthDay yearMonthDay7 = property4.addWrapFieldToCopy(4);
        org.joda.time.YearMonthDay yearMonthDay9 = property4.addToCopy(12);
        org.joda.time.YearMonthDay yearMonthDay11 = property4.addToCopy(466);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.withWeekyear(2);
        int int17 = property4.compareTo((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.YearMonthDay yearMonthDay19 = property4.setCopy(9);
        java.util.Locale locale20 = null;
        int int21 = property4.getMaximumTextLength(locale20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay23 = property4.setCopy("DateTimeField[yearOfEra]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"DateTimeField[yearOfEra]\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 9 + "'", int21 == 9);
    }

    @Test
    public void test11827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11827");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.property(dateTimeFieldType3);
        org.joda.time.LocalDateTime localDateTime6 = property4.addToCopy((-292275054));
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusMillis(19);
        int int10 = localDateTime9.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusHours(10080);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        int int14 = localDateTime13.getMinuteOfHour();
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.eras();
        boolean boolean16 = localDateTime13.isSupported(durationFieldType15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusDays(365);
        org.joda.time.LocalDateTime.Property property19 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.withWeekyear(444);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime12.withFields((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusHours((-1635784499));
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 32 + "'", int10 == 32);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 32 + "'", int14 == 32);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test11828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11828");
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone5 = instant4.getZone();
        org.joda.time.MutableDateTime mutableDateTime6 = instant4.toMutableDateTimeISO();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant9 = instant4.withDurationAdded(readableDuration7, 70);
        org.joda.time.Instant instant11 = instant9.plus((long) (short) 0);
        org.joda.time.Chronology chronology12 = instant9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay14 = new org.joda.time.YearMonthDay(112, 27033, (-1645515500), chronology12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27033 for monthOfYear must not be larger than 12");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
    }

    @Test
    public void test11829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11829");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.property(dateTimeFieldType3);
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusWeeks((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight11.minusWeeks(0);
        long long16 = property4.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.DateMidnight.Property property17 = dateMidnight15.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((java.lang.Object) dateMidnight15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight20 = dateMidnight15.withYearOfCentury(511589);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 511589 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test11830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11830");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfHalfday();
        long long11 = dateTimeField9.roundHalfFloor(0L);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        int int13 = dateTimeField9.getMaximumShortTextLength(locale12);
        java.lang.String str14 = locale12.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology1, locale12);
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        long long19 = dateTimeParserBucket15.computeMillis(true, "");
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.year();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfHour();
        dateTimeParserBucket15.saveField(dateTimeField28, 0);
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime36 = timeOfDay33.toDateTime((org.joda.time.ReadableInstant) instant35);
        org.joda.time.Chronology chronology37 = instant35.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.year();
        dateTimeParserBucket15.saveField(dateTimeField38, 8);
        java.lang.Integer int41 = dateTimeParserBucket15.getOffsetInteger();
        org.joda.time.TimeOfDay timeOfDay45 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant47 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime48 = timeOfDay45.toDateTime((org.joda.time.ReadableInstant) instant47);
        org.joda.time.Chronology chronology49 = instant47.getChronology();
        org.joda.time.TimeOfDay timeOfDay52 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant54 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime55 = timeOfDay52.toDateTime((org.joda.time.ReadableInstant) instant54);
        int[] intArray57 = chronology49.get((org.joda.time.ReadablePartial) timeOfDay52, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime(0L, chronology49);
        org.joda.time.TimeOfDay timeOfDay61 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant63 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime64 = timeOfDay61.toDateTime((org.joda.time.ReadableInstant) instant63);
        org.joda.time.Chronology chronology65 = instant63.getChronology();
        org.joda.time.TimeOfDay timeOfDay68 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant70 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime71 = timeOfDay68.toDateTime((org.joda.time.ReadableInstant) instant70);
        int[] intArray73 = chronology65.get((org.joda.time.ReadablePartial) timeOfDay68, (long) (short) -1);
        mutableDateTime58.setChronology(chronology65);
        boolean boolean75 = mutableDateTime58.isEqualNow();
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime58.secondOfDay();
        org.joda.time.DateTime dateTime77 = mutableDateTime58.toDateTimeISO();
        org.joda.time.DateTime dateTime79 = dateTime77.withMillis((long) 1970);
        org.joda.time.DateTime dateTime81 = dateTime77.plusYears(24);
        org.joda.time.DurationFieldType durationFieldType82 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DateTime dateTime84 = dateTime77.withFieldAdded(durationFieldType82, 21);
        org.joda.time.Chronology chronology85 = dateTime77.getChronology();
        boolean boolean86 = dateTimeParserBucket15.restoreState((java.lang.Object) chronology85);
        org.joda.time.DurationField durationField87 = chronology85.eras();
        // The following exception was thrown during execution in test generation
        try {
            int int89 = durationField87.getValue((long) 57);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNull(int41);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(intArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray73), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(durationFieldType82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(durationField87);
    }

    @Test
    public void test11831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11831");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        org.joda.time.Instant instant3 = instant0.plus((-14515199975L));
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minusMinutes((-292275054));
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withMinuteOfHour(2);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean17 = interval13.abuts((org.joda.time.ReadableInterval) interval16);
        long long18 = interval16.getStartMillis();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean25 = interval21.abuts((org.joda.time.ReadableInterval) interval24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Interval interval27 = interval24.withDurationBeforeEnd(readableDuration26);
        org.joda.time.Interval interval28 = interval16.overlap((org.joda.time.ReadableInterval) interval24);
        org.joda.time.Duration duration29 = interval24.toDuration();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime10.withDurationAdded((org.joda.time.ReadableDuration) duration29, 112);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusYears((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property36 = localDateTime32.property(dateTimeFieldType35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime32.withMillisOfDay((int) '#');
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean45 = interval41.abuts((org.joda.time.ReadableInterval) interval44);
        long long46 = interval44.getStartMillis();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean53 = interval49.abuts((org.joda.time.ReadableInterval) interval52);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Interval interval55 = interval52.withDurationBeforeEnd(readableDuration54);
        org.joda.time.Interval interval56 = interval44.overlap((org.joda.time.ReadableInterval) interval52);
        org.joda.time.Duration duration57 = interval52.toDuration();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime32.withDurationAdded((org.joda.time.ReadableDuration) duration57, 25);
        boolean boolean60 = duration29.isLongerThan((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Instant instant61 = instant3.minus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.MutableDateTime mutableDateTime62 = instant3.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime62.era();
        mutableDateTime62.addWeekyears(27035);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNull(interval28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNull(interval56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(property63);
    }

    @Test
    public void test11832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11832");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 23, chronology1);
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime8 = timeOfDay5.toDateTime((org.joda.time.ReadableInstant) instant7);
        org.joda.time.Chronology chronology9 = instant7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.year();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.minuteOfHour();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean18 = interval14.abuts((org.joda.time.ReadableInterval) interval17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Interval interval20 = interval17.withDurationBeforeEnd(readableDuration19);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean27 = interval23.abuts((org.joda.time.ReadableInterval) interval26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Interval interval29 = interval26.withDurationBeforeEnd(readableDuration28);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean36 = interval32.abuts((org.joda.time.ReadableInterval) interval35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Interval interval38 = interval35.withDurationBeforeEnd(readableDuration37);
        org.joda.time.Period period39 = interval35.toPeriod();
        org.joda.time.Interval interval40 = interval26.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Interval interval41 = interval17.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period39);
        int[] intArray44 = chronology9.get((org.joda.time.ReadablePeriod) period39, (long) 363, (long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean52 = interval48.abuts((org.joda.time.ReadableInterval) interval51);
        long long53 = interval51.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.Interval interval55 = interval51.withPeriodAfterStart(readablePeriod54);
        org.joda.time.Period period56 = interval55.toPeriod();
        long long59 = chronology9.add((org.joda.time.ReadablePeriod) period56, (long) 10, (int) (short) 10);
        org.joda.time.Chronology chronology60 = chronology9.withUTC();
        org.joda.time.TimeOfDay timeOfDay61 = timeOfDay2.withChronologyRetainFields(chronology9);
        org.joda.time.TimeOfDay.Property property62 = timeOfDay61.secondOfMinute();
        int int63 = timeOfDay61.size();
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 0, 0, 0, 0, 0, 0, -263]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 10L + "'", long59 == 10L);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(timeOfDay61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
    }

    @Test
    public void test11833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11833");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime(chronology23);
        org.joda.time.DateTimeField dateTimeField34 = chronology23.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField35 = chronology23.dayOfYear();
        org.joda.time.DateTimeField dateTimeField36 = chronology23.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test11834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11834");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(2);
        org.joda.time.DateTime dateTime14 = dateTime10.withHourOfDay(22);
        int int15 = dateTime10.getMonthOfYear();
        org.joda.time.DateTime dateTime17 = dateTime10.withMillisOfDay(51);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test11835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11835");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTime((org.joda.time.ReadableInstant) instant10);
        org.joda.time.Chronology chronology12 = instant10.getChronology();
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime18 = timeOfDay15.toDateTime((org.joda.time.ReadableInstant) instant17);
        int[] intArray20 = chronology12.get((org.joda.time.ReadablePartial) timeOfDay15, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(0L, chronology12);
        java.lang.Object obj22 = mutableDateTime21.clone();
        int int23 = mutableDateTime21.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTime((org.joda.time.ReadableInstant) instant29);
        org.joda.time.Chronology chronology31 = instant29.getChronology();
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime37 = timeOfDay34.toDateTime((org.joda.time.ReadableInstant) instant36);
        int[] intArray39 = chronology31.get((org.joda.time.ReadablePartial) timeOfDay34, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(0L, chronology31);
        mutableDateTime40.setYear(3);
        org.joda.time.Instant instant44 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone45 = instant44.getZone();
        mutableDateTime40.setZone(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone45);
        mutableDateTime21.setZoneRetainFields(dateTimeZone45);
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(604800000L, dateTimeZone45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter3.withZone(dateTimeZone45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter3.withDefaultYear(0);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.TimeOfDay timeOfDay57 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant59 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime60 = timeOfDay57.toDateTime((org.joda.time.ReadableInstant) instant59);
        org.joda.time.Chronology chronology61 = instant59.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.clockhourOfHalfday();
        long long64 = dateTimeField62.roundHalfFloor(0L);
        java.util.Locale locale65 = java.util.Locale.TRADITIONAL_CHINESE;
        int int66 = dateTimeField62.getMaximumShortTextLength(locale65);
        java.lang.String str67 = locale65.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology54, locale65);
        java.util.Locale locale69 = dateTimeParserBucket68.getLocale();
        dateTimeParserBucket68.setOffset((java.lang.Integer) 22);
        java.util.Locale locale72 = dateTimeParserBucket68.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter52.withLocale(locale72);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter75 = dateTimeFormatter52.withPivotYear((java.lang.Integer) 26724);
        boolean boolean76 = dateTimeFormatter75.isPrinter();
        org.joda.time.DateTimeZone dateTimeZone77 = dateTimeFormatter75.getZone();
        org.joda.time.Chronology chronology78 = dateTimeFormatter75.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime79 = org.joda.time.MutableDateTime.parse("year", dateTimeFormatter75);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "zh" + "'", str67, "zh");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertNotNull(dateTimeFormatter75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNull(dateTimeZone77);
        org.junit.Assert.assertNull(chronology78);
    }

    @Test
    public void test11836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11836");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMinutes(35);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra(7);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMinutes(35);
        int int14 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.DateTime dateTime16 = localDateTime8.toDateTime(readableInstant15);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusMinutes(35);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.withYear(17);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusMillis(7327559);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusSeconds(26754);
        boolean boolean28 = localDateTime8.equals((java.lang.Object) 26754);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime35 = timeOfDay32.toDateTime((org.joda.time.ReadableInstant) instant34);
        org.joda.time.Chronology chronology36 = instant34.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.clockhourOfHalfday();
        org.joda.time.DurationField durationField38 = chronology36.eras();
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType29.getField(chronology36);
        org.joda.time.DateTimeField dateTimeField40 = chronology36.hourOfDay();
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime(chronology36);
        org.joda.time.Chronology chronology42 = chronology36.withUTC();
        org.joda.time.DateTimeZone dateTimeZone43 = chronology42.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay44 = new org.joda.time.TimeOfDay((java.lang.Object) 26754, chronology42);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
    }

    @Test
    public void test11837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11837");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime.Property property2 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime3 = property2.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime5 = property2.setCopy(1);
        org.joda.time.LocalTime localTime7 = property2.addCopy((long) 19);
        org.joda.time.LocalTime localTime9 = property2.addCopy(3);
        org.joda.time.LocalTime localTime10 = property2.withMaximumValue();
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        org.joda.time.LocalTime localTime12 = property11.withMinimumValue();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test11838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11838");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        org.joda.time.MutableDateTime mutableDateTime20 = property19.roundHalfEven();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.yearOfEra();
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime28 = timeOfDay25.toDateTime((org.joda.time.ReadableInstant) instant27);
        org.joda.time.Chronology chronology29 = instant27.getChronology();
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime35 = timeOfDay32.toDateTime((org.joda.time.ReadableInstant) instant34);
        int[] intArray37 = chronology29.get((org.joda.time.ReadablePartial) timeOfDay32, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(0L, chronology29);
        mutableDateTime38.setYear(3);
        org.joda.time.Instant instant42 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone43 = instant42.getZone();
        mutableDateTime38.setZone(dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(dateTimeZone43);
        mutableDateTime20.setZone(dateTimeZone43);
        mutableDateTime20.setWeekOfWeekyear(10);
        mutableDateTime20.addSeconds(4194);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.weekyear();
        mutableDateTime20.set(dateTimeFieldType51, 26702386);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
    }

    @Test
    public void test11839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11839");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime3 = localTime1.minusMinutes((int) (short) 1);
        int int4 = localTime1.getMillisOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight7.withDurationAdded((long) 2, 100);
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.withSecondOfMinute((int) (byte) 1);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight10.withFields((org.joda.time.ReadablePartial) timeOfDay15);
        boolean boolean17 = localTime1.equals((java.lang.Object) timeOfDay15);
        org.joda.time.LocalTime localTime19 = localTime1.plusMillis((int) (short) 100);
        org.joda.time.LocalTime.Property property20 = localTime19.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
        org.joda.time.LocalTime localTime22 = property20.roundHalfEvenCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime24 = property20.addNoWrapToCopy((-1645515312));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The addition exceeded the boundaries of LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localTime22);
    }

    @Test
    public void test11840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11840");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean6 = interval2.abuts((org.joda.time.ReadableInterval) interval5);
        long long7 = interval5.getStartMillis();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean14 = interval10.abuts((org.joda.time.ReadableInterval) interval13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Interval interval16 = interval13.withDurationBeforeEnd(readableDuration15);
        org.joda.time.Interval interval17 = interval5.overlap((org.joda.time.ReadableInterval) interval13);
        org.joda.time.Duration duration18 = interval13.toDuration();
        org.joda.time.Duration duration19 = duration18.toDuration();
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone22 = instant21.getZone();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime26 = dateTime23.withDurationAdded(readableDuration24, (int) (byte) 0);
        org.joda.time.DateTime dateTime28 = dateTime23.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime30 = dateTime28.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime32 = dateTime30.plusDays(2);
        org.joda.time.DateTime dateTime34 = dateTime30.withHourOfDay(22);
        org.joda.time.TimeOfDay timeOfDay35 = dateTime30.toTimeOfDay();
        org.joda.time.DateTime dateTime37 = dateTime30.plusHours(312);
        org.joda.time.DateTime dateTime39 = dateTime37.minusMonths(25);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime();
        mutableDateTime41.setWeekOfWeekyear(20);
        mutableDateTime41.setDayOfYear(10);
        mutableDateTime41.addYears(26673621);
        int int48 = mutableDateTime41.getWeekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay51 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property52 = timeOfDay51.minuteOfHour();
        int int53 = property52.get();
        org.joda.time.TimeOfDay timeOfDay55 = property52.addToCopy((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone57);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight58.withDurationAdded((long) 2, 100);
        org.joda.time.Interval interval64 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval67 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean68 = interval64.abuts((org.joda.time.ReadableInterval) interval67);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.Interval interval70 = interval67.withDurationBeforeEnd(readableDuration69);
        org.joda.time.Interval interval73 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval76 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean77 = interval73.abuts((org.joda.time.ReadableInterval) interval76);
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.Interval interval79 = interval76.withDurationBeforeEnd(readableDuration78);
        org.joda.time.Period period80 = interval76.toPeriod();
        org.joda.time.Interval interval81 = interval67.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period80);
        java.util.Locale.Builder builder82 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder85 = builder82.setExtension('x', "zh");
        boolean boolean86 = period80.equals((java.lang.Object) builder82);
        org.joda.time.DateMidnight dateMidnight88 = dateMidnight58.withPeriodAdded((org.joda.time.ReadablePeriod) period80, 2022);
        org.joda.time.TimeOfDay timeOfDay90 = timeOfDay55.withPeriodAdded((org.joda.time.ReadablePeriod) period80, 13);
        mutableDateTime41.add((org.joda.time.ReadablePeriod) period80);
        org.joda.time.PeriodType periodType92 = period80.getPeriodType();
        org.joda.time.Period period93 = interval40.toPeriod(periodType92);
        org.joda.time.Interval interval95 = interval40.withStartMillis(10368000000L);
        boolean boolean96 = interval40.containsNow();
        org.joda.time.Period period97 = interval40.toPeriod();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNull(interval17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(interval70);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateMidnight88);
        org.junit.Assert.assertNotNull(timeOfDay90);
        org.junit.Assert.assertNotNull(periodType92);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertNotNull(interval95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(period97);
    }

    @Test
    public void test11841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11841");
        java.lang.String[] strArray12 = new java.lang.String[] { "java.util.GregorianCalendar[time=-1820016000000,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=null,firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1912,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=30,DAY_OF_YEAR=121,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", "weekOfWeekyear", "PT0S", "hourOfHalfday", "clockhourOfHalfday", "1969-12-31T00:01:00.000Z", "+10:00", "0", "1", "\u4e0a\u5348 12:00:00", "11", "11" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.util.Iterator<java.lang.String> strItor15 = strSet13.iterator();
        java.util.Iterator<java.lang.String> strItor16 = strSet13.iterator();
        boolean boolean18 = strSet13.add("");
        strSet13.clear();
        boolean boolean20 = strSet13.isEmpty();
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone23 = instant22.getZone();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime27 = dateTime24.withDurationAdded(readableDuration25, (int) (byte) 0);
        org.joda.time.DateTime dateTime29 = dateTime24.minusSeconds((int) (short) 1);
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime33 = localTime31.minusMinutes((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.seconds();
        boolean boolean35 = localTime31.isSupported(durationFieldType34);
        org.joda.time.DateTime dateTime37 = dateTime29.withFieldAdded(durationFieldType34, 0);
        org.joda.time.DateTime.Property property38 = dateTime37.monthOfYear();
        org.joda.time.DateTime dateTime40 = dateTime37.plusHours((int) (short) -1);
        org.joda.time.DateTime dateTime42 = dateTime37.minusDays(0);
        java.util.Locale locale47 = new java.util.Locale("\u5341\u4e8c\u6708", "hi!", "10");
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleKeys();
        org.joda.time.TimeOfDay timeOfDay51 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant53 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime54 = timeOfDay51.toDateTime((org.joda.time.ReadableInstant) instant53);
        org.joda.time.Chronology chronology55 = instant53.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.clockhourOfHalfday();
        org.joda.time.DurationField durationField57 = chronology55.eras();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.dayOfYear();
        org.joda.time.TimeOfDay timeOfDay61 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant63 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime64 = timeOfDay61.toDateTime((org.joda.time.ReadableInstant) instant63);
        org.joda.time.Chronology chronology65 = instant63.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.clockhourOfHalfday();
        long long68 = dateTimeField66.roundHalfFloor(0L);
        java.util.Locale locale69 = java.util.Locale.TRADITIONAL_CHINESE;
        int int70 = dateTimeField66.getMaximumShortTextLength(locale69);
        java.lang.String str71 = locale69.getLanguage();
        int int72 = dateTimeField58.getMaximumTextLength(locale69);
        java.lang.String str73 = locale47.getDisplayVariant(locale69);
        java.lang.String str74 = dateTime42.toString("8", locale69);
        boolean boolean75 = strSet13.equals((java.lang.Object) dateTime42);
        org.joda.time.TimeOfDay timeOfDay78 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant80 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime81 = timeOfDay78.toDateTime((org.joda.time.ReadableInstant) instant80);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter82 = null;
        java.lang.String str83 = dateTime81.toString(dateTimeFormatter82);
        org.joda.time.DateTime dateTime85 = dateTime81.minusYears(2022);
        org.joda.time.DateTime.Property property86 = dateTime81.minuteOfHour();
        org.joda.time.DateTime dateTime87 = dateTime81.toDateTime();
        org.joda.time.DateTime dateTime89 = dateTime87.withYear(89);
        java.util.GregorianCalendar gregorianCalendar90 = dateTime87.toGregorianCalendar();
        boolean boolean91 = strSet13.equals((java.lang.Object) gregorianCalendar90);
        gregorianCalendar90.setMinimalDaysInFirstWeek(0);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNotNull(strItor16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertEquals(locale47.toString(), "\u5341\u4e8c\u6708_HI!_10");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2 + "'", int70 == 2);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "zh" + "'", str71, "zh");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 3 + "'", int72 == 3);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "10" + "'", str73, "10");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "8" + "'", str74, "8");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "1969-12-31T00:01:00.000Z" + "'", str83, "1969-12-31T00:01:00.000Z");
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(gregorianCalendar90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test11842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11842");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("11");
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        boolean boolean3 = instant1.isEqualNow();
        org.joda.time.Instant instant4 = instant1.toInstant();
        org.joda.time.Instant instant6 = instant1.minus(982L);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant6);
    }

    @Test
    public void test11843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11843");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime3 = localTime1.minusMinutes((int) (short) 1);
        int int4 = localTime1.getMillisOfDay();
        org.joda.time.LocalTime localTime6 = localTime1.plusSeconds(100);
        org.joda.time.LocalTime localTime8 = localTime6.plusSeconds((-1645515575));
        org.joda.time.LocalTime.Property property9 = localTime6.millisOfSecond();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test11844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11844");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 3);
        java.util.Date date6 = new java.util.Date(0, (int) '4', 0);
        int int7 = date6.getMinutes();
        date6.setYear(12);
        java.util.Calendar.Builder builder10 = builder0.setInstant(date6);
        date6.setSeconds(2922730);
        org.joda.time.YearMonthDay yearMonthDay13 = org.joda.time.YearMonthDay.fromDateFields(date6);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay13.plusDays(26702077);
        org.joda.time.DateTime dateTime16 = yearMonthDay15.toDateTimeAtCurrentTime();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Jun 02 19:52:10 GMT+10:00 1912");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test11845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11845");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) (byte) 100);
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.minusMinutes((-292275054));
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(2);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean16 = interval12.abuts((org.joda.time.ReadableInterval) interval15);
        long long17 = interval15.getStartMillis();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean24 = interval20.abuts((org.joda.time.ReadableInterval) interval23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Interval interval26 = interval23.withDurationBeforeEnd(readableDuration25);
        org.joda.time.Interval interval27 = interval15.overlap((org.joda.time.ReadableInterval) interval23);
        org.joda.time.Duration duration28 = interval23.toDuration();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime9.withDurationAdded((org.joda.time.ReadableDuration) duration28, 112);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusYears((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property35 = localDateTime31.property(dateTimeFieldType34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime31.withMillisOfDay((int) '#');
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean44 = interval40.abuts((org.joda.time.ReadableInterval) interval43);
        long long45 = interval43.getStartMillis();
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean52 = interval48.abuts((org.joda.time.ReadableInterval) interval51);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.Interval interval54 = interval51.withDurationBeforeEnd(readableDuration53);
        org.joda.time.Interval interval55 = interval43.overlap((org.joda.time.ReadableInterval) interval51);
        org.joda.time.Duration duration56 = interval51.toDuration();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime31.withDurationAdded((org.joda.time.ReadableDuration) duration56, 25);
        boolean boolean59 = duration28.isLongerThan((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Instant instant61 = instant2.withDurationAdded((org.joda.time.ReadableDuration) duration56, (-1645515408));
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNull(interval27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNull(interval55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(instant61);
    }

    @Test
    public void test11846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11846");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime7 = property5.add((long) 35);
        mutableDateTime7.setYear(0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
    }

    @Test
    public void test11847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11847");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        java.lang.Object obj17 = mutableDateTime16.clone();
        int int18 = mutableDateTime16.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime32 = timeOfDay29.toDateTime((org.joda.time.ReadableInstant) instant31);
        int[] intArray34 = chronology26.get((org.joda.time.ReadablePartial) timeOfDay29, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(0L, chronology26);
        mutableDateTime35.setYear(3);
        org.joda.time.Instant instant39 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone40 = instant39.getZone();
        mutableDateTime35.setZone(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone40);
        mutableDateTime16.setZoneRetainFields(dateTimeZone40);
        org.joda.time.TimeOfDay timeOfDay47 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant49 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime50 = timeOfDay47.toDateTime((org.joda.time.ReadableInstant) instant49);
        org.joda.time.Chronology chronology51 = instant49.getChronology();
        org.joda.time.TimeOfDay timeOfDay54 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant56 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime57 = timeOfDay54.toDateTime((org.joda.time.ReadableInstant) instant56);
        int[] intArray59 = chronology51.get((org.joda.time.ReadablePartial) timeOfDay54, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime(0L, chronology51);
        int int61 = mutableDateTime60.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime60.property(dateTimeFieldType62);
        org.joda.time.MutableDateTime mutableDateTime64 = property63.roundHalfEven();
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime64.yearOfEra();
        org.joda.time.TimeOfDay timeOfDay69 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant71 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime72 = timeOfDay69.toDateTime((org.joda.time.ReadableInstant) instant71);
        org.joda.time.Chronology chronology73 = instant71.getChronology();
        org.joda.time.TimeOfDay timeOfDay76 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant78 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime79 = timeOfDay76.toDateTime((org.joda.time.ReadableInstant) instant78);
        int[] intArray81 = chronology73.get((org.joda.time.ReadablePartial) timeOfDay76, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime82 = new org.joda.time.MutableDateTime(0L, chronology73);
        mutableDateTime82.setYear(3);
        org.joda.time.Instant instant86 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone87 = instant86.getZone();
        mutableDateTime82.setZone(dateTimeZone87);
        org.joda.time.DateMidnight dateMidnight89 = new org.joda.time.DateMidnight(dateTimeZone87);
        mutableDateTime64.setZone(dateTimeZone87);
        mutableDateTime16.setMillis((org.joda.time.ReadableInstant) mutableDateTime64);
        org.joda.time.DateTimeZone dateTimeZone92 = mutableDateTime16.getZone();
        mutableDateTime16.setDate((long) 1901);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertNotNull(dateTimeZone92);
    }

    @Test
    public void test11848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11848");
        java.io.IOException iOException3 = new java.io.IOException("");
        java.io.IOException iOException5 = new java.io.IOException("");
        iOException3.addSuppressed((java.lang.Throwable) iOException5);
        java.io.IOException iOException8 = new java.io.IOException("");
        java.io.IOException iOException10 = new java.io.IOException("");
        iOException8.addSuppressed((java.lang.Throwable) iOException10);
        java.lang.Throwable[] throwableArray12 = iOException8.getSuppressed();
        iOException5.addSuppressed((java.lang.Throwable) iOException8);
        java.io.IOException iOException14 = new java.io.IOException("69", (java.lang.Throwable) iOException5);
        java.io.IOException iOException15 = new java.io.IOException("T23:09:00.000", (java.lang.Throwable) iOException5);
        java.io.IOException iOException16 = new java.io.IOException((java.lang.Throwable) iOException5);
        org.junit.Assert.assertNotNull(throwableArray12);
    }

    @Test
    public void test11849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11849");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 10);
        int int11 = dateTime10.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTimeISO();
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean19 = interval15.abuts((org.joda.time.ReadableInterval) interval18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Interval interval21 = interval18.withDurationBeforeEnd(readableDuration20);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean28 = interval24.abuts((org.joda.time.ReadableInterval) interval27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Interval interval30 = interval27.withDurationBeforeEnd(readableDuration29);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean37 = interval33.abuts((org.joda.time.ReadableInterval) interval36);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Interval interval39 = interval36.withDurationBeforeEnd(readableDuration38);
        org.joda.time.Period period40 = interval36.toPeriod();
        org.joda.time.Interval interval41 = interval27.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Interval interval42 = interval18.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period40);
        org.joda.time.DateTime dateTime43 = dateTime10.plus((org.joda.time.ReadablePeriod) period40);
        int int44 = dateTime10.getYearOfEra();
        org.joda.time.DateTime dateTime46 = dateTime10.withMillis((long) 26723186);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 8 + "'", int11 == 8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test11850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11850");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.property(dateTimeFieldType3);
        java.util.Locale locale9 = new java.util.Locale("\u5341\u4e8c\u6708", "hi!", "10");
        java.lang.String str10 = localDateTime0.toString("+10:00", locale9);
        int int11 = localDateTime0.getMillisOfDay();
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis((long) (byte) 100);
        org.joda.time.Instant instant15 = instant12.toInstant();
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis((long) (byte) 100);
        org.joda.time.Instant instant19 = instant16.toInstant();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusYears((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property24 = localDateTime20.property(dateTimeFieldType23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.withMillisOfDay((int) '#');
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean33 = interval29.abuts((org.joda.time.ReadableInterval) interval32);
        long long34 = interval32.getStartMillis();
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean41 = interval37.abuts((org.joda.time.ReadableInterval) interval40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Interval interval43 = interval40.withDurationBeforeEnd(readableDuration42);
        org.joda.time.Interval interval44 = interval32.overlap((org.joda.time.ReadableInterval) interval40);
        org.joda.time.Duration duration45 = interval40.toDuration();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime20.withDurationAdded((org.joda.time.ReadableDuration) duration45, 25);
        org.joda.time.Instant instant48 = instant16.plus((org.joda.time.ReadableDuration) duration45);
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.minusMinutes((-292275054));
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withMinuteOfHour(2);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval61 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean62 = interval58.abuts((org.joda.time.ReadableInterval) interval61);
        long long63 = interval61.getStartMillis();
        org.joda.time.Interval interval66 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval69 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean70 = interval66.abuts((org.joda.time.ReadableInterval) interval69);
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.Interval interval72 = interval69.withDurationBeforeEnd(readableDuration71);
        org.joda.time.Interval interval73 = interval61.overlap((org.joda.time.ReadableInterval) interval69);
        org.joda.time.Duration duration74 = interval69.toDuration();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime55.withDurationAdded((org.joda.time.ReadableDuration) duration74, 112);
        boolean boolean77 = duration45.isShorterThan((org.joda.time.ReadableDuration) duration74);
        org.joda.time.Instant instant78 = instant12.plus((org.joda.time.ReadableDuration) duration45);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime0.withDurationAdded((org.joda.time.ReadableDuration) duration45, 86399);
        int int81 = localDateTime80.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime83 = localDateTime80.withYear(1645515504);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1645515504 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals(locale9.toString(), "\u5341\u4e8c\u6708_HI!_10");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+10:00" + "'", str10, "+10:00");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 27171297 + "'", int11 == 27171297);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNull(interval44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNull(interval73);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2022 + "'", int81 == 2022);
    }

    @Test
    public void test11851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11851");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths((int) (short) -1);
        int int3 = localDate2.getCenturyOfEra();
        int int4 = localDate2.size();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean8 = interval7.isBeforeNow();
        org.joda.time.Period period9 = interval7.toPeriod();
        java.lang.String str10 = period9.toString();
        org.joda.time.LocalDate localDate11 = localDate2.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.LocalDate.Property property12 = localDate11.dayOfYear();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant18 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime19 = timeOfDay16.toDateTime((org.joda.time.ReadableInstant) instant18);
        boolean boolean21 = timeOfDay16.equals((java.lang.Object) (byte) -1);
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime28 = timeOfDay25.toDateTime((org.joda.time.ReadableInstant) instant27);
        org.joda.time.Chronology chronology29 = instant27.getChronology();
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant34 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime35 = timeOfDay32.toDateTime((org.joda.time.ReadableInstant) instant34);
        int[] intArray37 = chronology29.get((org.joda.time.ReadablePartial) timeOfDay32, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(0L, chronology29);
        mutableDateTime38.setYear(3);
        org.joda.time.Instant instant42 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone43 = instant42.getZone();
        mutableDateTime38.setZone(dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight(dateTimeZone43);
        java.lang.String str47 = dateTimeZone43.getName((long) 'x');
        org.joda.time.DateTime dateTime48 = timeOfDay16.toDateTimeToday(dateTimeZone43);
        org.joda.time.LocalTime localTime49 = timeOfDay16.toLocalTime();
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone53 = instant52.getZone();
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone53);
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime54.monthOfYear();
        int int56 = property55.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField57 = property55.getField();
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval63 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean64 = interval60.abuts((org.joda.time.ReadableInterval) interval63);
        org.joda.time.ReadableDuration readableDuration65 = null;
        org.joda.time.Interval interval66 = interval63.withDurationBeforeEnd(readableDuration65);
        org.joda.time.Interval interval69 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval72 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean73 = interval69.abuts((org.joda.time.ReadableInterval) interval72);
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.Interval interval75 = interval72.withDurationBeforeEnd(readableDuration74);
        org.joda.time.Period period76 = interval72.toPeriod();
        org.joda.time.Interval interval77 = interval63.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period76);
        java.util.Locale.Builder builder78 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder81 = builder78.setExtension('x', "zh");
        boolean boolean82 = period76.equals((java.lang.Object) builder78);
        java.util.Locale.Builder builder83 = builder78.clear();
        java.util.Locale locale84 = builder83.build();
        int int85 = property55.getMaximumTextLength(locale84);
        boolean boolean86 = localTime49.equals((java.lang.Object) locale84);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate87 = property12.setCopy("447", locale84);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 447 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 20 + "'", int3 == 20);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT0S" + "'", str10, "PT0S");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 12 + "'", int56 == 12);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(interval75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 9 + "'", int85 == 9);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test11852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11852");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("Jul 30, 1904 4:00:00 AM");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"Jul 30, 1904 4:00:00 AM\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test11853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11853");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        boolean boolean33 = mutableDateTime16.isEqualNow();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime16.secondOfDay();
        mutableDateTime16.setMillisOfDay((int) (short) 100);
        int int37 = mutableDateTime16.getHourOfDay();
        org.joda.time.TimeOfDay timeOfDay41 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime44 = timeOfDay41.toDateTime((org.joda.time.ReadableInstant) instant43);
        org.joda.time.Chronology chronology45 = instant43.getChronology();
        org.joda.time.TimeOfDay timeOfDay48 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant50 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime51 = timeOfDay48.toDateTime((org.joda.time.ReadableInstant) instant50);
        int[] intArray53 = chronology45.get((org.joda.time.ReadablePartial) timeOfDay48, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(0L, chronology45);
        mutableDateTime54.setYear(3);
        org.joda.time.Instant instant58 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone59 = instant58.getZone();
        mutableDateTime54.setZone(dateTimeZone59);
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(dateTimeZone59);
        java.lang.String str63 = dateTimeZone59.getName((long) 'x');
        mutableDateTime16.setZoneRetainFields(dateTimeZone59);
        org.joda.time.LocalTime localTime66 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime68 = localTime66.minusMinutes((int) (short) 1);
        org.joda.time.LocalTime localTime70 = localTime66.withMillisOfDay((int) (byte) 1);
        org.joda.time.LocalTime.Property property71 = localTime66.minuteOfHour();
        org.joda.time.LocalTime localTime73 = property71.addWrapFieldToCopy(10);
        boolean boolean74 = dateTimeZone59.equals((java.lang.Object) property71);
        org.joda.time.LocalTime localTime76 = property71.addCopy((long) 4503347);
        org.joda.time.LocalTime.Property property77 = localTime76.millisOfSecond();
        org.joda.time.LocalTime localTime78 = property77.withMaximumValue();
        org.joda.time.LocalTime localTime80 = localTime78.plusMinutes(26993651);
        org.joda.time.LocalTime localTime82 = localTime80.minusMinutes(0);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00" + "'", str63, "+00:00");
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertNotNull(localTime80);
        org.junit.Assert.assertNotNull(localTime82);
    }

    @Test
    public void test11854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11854");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfHalfday();
        long long11 = dateTimeField9.roundHalfFloor(0L);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        int int13 = dateTimeField9.getMaximumShortTextLength(locale12);
        java.lang.String str14 = locale12.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology1, locale12);
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        boolean boolean32 = dateTimeParserBucket15.restoreState((java.lang.Object) (short) -1);
        int int33 = dateTimeParserBucket15.getOffset();
        long long34 = dateTimeParserBucket15.computeMillis();
        dateTimeParserBucket15.setOffset((java.lang.Integer) (-1645515414));
        long long37 = dateTimeParserBucket15.computeMillis();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-1L) + "'", long34 == (-1L));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1645515413L + "'", long37 == 1645515413L);
    }

    @Test
    public void test11855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11855");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.property(dateTimeFieldType3);
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime6 = property4.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.withWeekyear(2);
        org.joda.time.DateMidnight.Property property14 = dateMidnight9.weekOfWeekyear();
        java.lang.String str15 = property14.getAsString();
        java.util.Locale locale16 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale17 = locale16.stripExtensions();
        int int18 = property14.getMaximumTextLength(locale16);
        org.joda.time.DateMidnight dateMidnight19 = property14.roundHalfCeilingCopy();
        int int20 = property14.getMinimumValueOverall();
        org.joda.time.DateMidnight dateMidnight21 = property14.roundHalfEvenCopy();
        boolean boolean22 = localDateTime6.equals((java.lang.Object) dateMidnight21);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval28 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean29 = interval25.abuts((org.joda.time.ReadableInterval) interval28);
        long long30 = interval28.getStartMillis();
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean37 = interval33.abuts((org.joda.time.ReadableInterval) interval36);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.Interval interval39 = interval36.withDurationBeforeEnd(readableDuration38);
        org.joda.time.Interval interval40 = interval28.overlap((org.joda.time.ReadableInterval) interval36);
        org.joda.time.Duration duration41 = interval36.toDuration();
        org.joda.time.Duration duration42 = duration41.toDuration();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean49 = interval45.abuts((org.joda.time.ReadableInterval) interval48);
        long long50 = interval48.getStartMillis();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean57 = interval53.abuts((org.joda.time.ReadableInterval) interval56);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Interval interval59 = interval56.withDurationBeforeEnd(readableDuration58);
        org.joda.time.Interval interval60 = interval48.overlap((org.joda.time.ReadableInterval) interval56);
        org.joda.time.Duration duration61 = interval56.toDuration();
        long long62 = duration61.getMillis();
        int int63 = duration41.compareTo((org.joda.time.ReadableDuration) duration61);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight21.plus((org.joda.time.ReadableDuration) duration61);
        org.joda.time.DateMidnight.Property property65 = dateMidnight64.dayOfMonth();
        boolean boolean66 = dateMidnight64.isAfterNow();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1" + "'", str15, "1");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNull(interval40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNull(interval60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test11856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11856");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate0.plusMonths((-1));
        org.joda.time.LocalDate.Property property7 = localDate6.era();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.LocalDate localDate10 = property7.addWrapFieldToCopy((-1));
        org.joda.time.LocalDate localDate11 = property7.withMinimumValue();
        org.joda.time.LocalDate.Property property12 = localDate11.era();
        long long13 = property12.remainder();
        org.joda.time.LocalDate localDate14 = property12.roundCeilingCopy();
        org.joda.time.LocalDate localDate16 = localDate14.withDayOfYear(229);
        org.joda.time.LocalDate localDate18 = localDate14.plusWeeks(62940278);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 9223246063321975808L + "'", long13 == 9223246063321975808L);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test11857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11857");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(13132800000L);
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.plusWeeks(26997);
        org.junit.Assert.assertNotNull(dateMidnight3);
    }

    @Test
    public void test11858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11858");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime12 = localTime10.minusMinutes((int) (short) 1);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.seconds();
        boolean boolean14 = localTime10.isSupported(durationFieldType13);
        org.joda.time.DateTime dateTime16 = dateTime8.withFieldAdded(durationFieldType13, 0);
        org.joda.time.DateTime.Property property17 = dateTime16.monthOfYear();
        org.joda.time.DateTime dateTime19 = dateTime16.plusHours((int) (short) -1);
        org.joda.time.DateTime dateTime21 = dateTime19.minusDays(20);
        org.joda.time.DateTime.Property property22 = dateTime19.year();
        org.joda.time.DurationField durationField23 = property22.getLeapDurationField();
        org.joda.time.DateTime dateTime25 = property22.addWrapFieldToCopy(27390952);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test11859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11859");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property6 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = localDate0.minusMonths((int) '#');
        int int9 = localDate8.getYearOfCentury();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone11 = dateMidnight10.getZone();
        org.joda.time.DateTime dateTime12 = localDate8.toDateTimeAtStartOfDay(dateTimeZone11);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean15 = localDate13.isSupported(dateTimeFieldType14);
        org.joda.time.LocalDate localDate17 = localDate13.plusMonths(0);
        boolean boolean18 = localDate8.isBefore((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.DateMidnight dateMidnight19 = localDate13.toDateMidnight();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 19 + "'", int9 == 19);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateMidnight19);
    }

    @Test
    public void test11860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11860");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay.Property property4 = yearMonthDay3.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay5 = property4.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay6 = property4.withMaximumValue();
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(yearMonthDay5);
        org.junit.Assert.assertNotNull(yearMonthDay6);
    }

    @Test
    public void test11861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11861");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime3 = localTime1.minusMinutes((int) (short) 1);
        org.joda.time.LocalTime localTime5 = localTime1.withMillisOfDay((int) (byte) 1);
        org.joda.time.LocalTime.Property property6 = localTime1.minuteOfHour();
        org.joda.time.LocalTime localTime8 = property6.setCopy("12");
        org.joda.time.LocalTime localTime9 = property6.roundCeilingCopy();
        org.joda.time.LocalTime localTime10 = property6.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime11 = property6.withMinimumValue();
        org.joda.time.LocalTime localTime12 = property6.roundCeilingCopy();
        org.joda.time.LocalTime localTime14 = localTime12.minusMinutes((-292273032));
        org.joda.time.TimeOfDay timeOfDay16 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 934);
        int int17 = localTime12.compareTo((org.joda.time.ReadablePartial) timeOfDay16);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test11862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11862");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay.Property property4 = yearMonthDay3.monthOfYear();
        int int5 = property4.get();
        org.joda.time.YearMonthDay yearMonthDay7 = property4.addWrapFieldToCopy((-600));
        int int8 = property4.getMaximumValueOverall();
        int int9 = property4.get();
        org.joda.time.DurationField durationField10 = property4.getRangeDurationField();
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 12 + "'", int8 == 12);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test11863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11863");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        boolean boolean33 = mutableDateTime16.isEqualNow();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime16.secondOfDay();
        org.joda.time.DateTime dateTime35 = mutableDateTime16.toDateTimeISO();
        org.joda.time.DateTime dateTime37 = dateTime35.withMillis((long) 1970);
        org.joda.time.DateTime.Property property38 = dateTime37.minuteOfHour();
        org.joda.time.DateTime dateTime39 = property38.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime41 = property38.addWrapFieldToCopy(7333089);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = property38.setCopy(26707024);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26707024 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test11864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11864");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, 0);
        java.lang.String str3 = dateTimeZone2.toString();
        java.util.TimeZone timeZone4 = dateTimeZone2.toTimeZone();
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfHalfday();
        long long14 = dateTimeField12.roundHalfFloor(0L);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        int int16 = dateTimeField12.getMaximumShortTextLength(locale15);
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale20 = locale19.stripExtensions();
        java.lang.String str21 = locale17.getDisplayName(locale19);
        java.lang.String str22 = locale15.getDisplayLanguage(locale17);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone4, locale15);
        java.lang.String str24 = calendar23.toString();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+10:00" + "'", str3, "+10:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str21, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u4e2d\u6587" + "'", str22, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645515171578,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=32,SECOND=51,MILLISECOND=578,ZONE_OFFSET=36000000,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.util.GregorianCalendar[time=1645515171578,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=32,SECOND=51,MILLISECOND=578,ZONE_OFFSET=36000000,DST_OFFSET=0]" + "'", str24, "java.util.GregorianCalendar[time=1645515171578,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=32,SECOND=51,MILLISECOND=578,ZONE_OFFSET=36000000,DST_OFFSET=0]");
    }

    @Test
    public void test11865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11865");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay.Property property4 = yearMonthDay3.monthOfYear();
        int int5 = property4.getMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay7 = property4.addWrapFieldToCopy((int) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((java.lang.Object) yearMonthDay7, chronology8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.YearMonthDay");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay7);
    }

    @Test
    public void test11866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11866");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        boolean boolean33 = mutableDateTime16.isEqualNow();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime16.secondOfDay();
        mutableDateTime16.setMillisOfDay((int) (short) 100);
        int int37 = mutableDateTime16.getHourOfDay();
        org.joda.time.TimeOfDay timeOfDay41 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime44 = timeOfDay41.toDateTime((org.joda.time.ReadableInstant) instant43);
        org.joda.time.Chronology chronology45 = instant43.getChronology();
        org.joda.time.TimeOfDay timeOfDay48 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant50 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime51 = timeOfDay48.toDateTime((org.joda.time.ReadableInstant) instant50);
        int[] intArray53 = chronology45.get((org.joda.time.ReadablePartial) timeOfDay48, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(0L, chronology45);
        mutableDateTime54.setYear(3);
        org.joda.time.Instant instant58 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone59 = instant58.getZone();
        mutableDateTime54.setZone(dateTimeZone59);
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight(dateTimeZone59);
        java.lang.String str63 = dateTimeZone59.getName((long) 'x');
        mutableDateTime16.setZoneRetainFields(dateTimeZone59);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay68 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant70 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime71 = timeOfDay68.toDateTime((org.joda.time.ReadableInstant) instant70);
        org.joda.time.Chronology chronology72 = instant70.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.clockhourOfHalfday();
        org.joda.time.DurationField durationField74 = chronology72.eras();
        org.joda.time.DateTimeField dateTimeField75 = dateTimeFieldType65.getField(chronology72);
        org.joda.time.DateTimeField dateTimeField76 = chronology72.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime77 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime16, chronology72);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateMidnight dateMidnight80 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone79);
        org.joda.time.DateMidnight dateMidnight83 = dateMidnight80.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight85 = dateMidnight83.minusWeeks((int) (short) 100);
        int int86 = dateMidnight85.getMonthOfYear();
        mutableDateTime77.setMillis((org.joda.time.ReadableInstant) dateMidnight85);
        org.joda.time.MutableDateTime.Property property88 = mutableDateTime77.dayOfMonth();
        int int89 = mutableDateTime77.getWeekyear();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00" + "'", str63, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1968 + "'", int89 == 1968);
    }

    @Test
    public void test11867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11867");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime(chronology23);
        org.joda.time.DateTimeField dateTimeField34 = chronology23.weekOfWeekyear();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.TimeOfDay timeOfDay40 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant42 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime43 = timeOfDay40.toDateTime((org.joda.time.ReadableInstant) instant42);
        org.joda.time.Chronology chronology44 = instant42.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.clockhourOfHalfday();
        long long47 = dateTimeField45.roundHalfFloor(0L);
        java.util.Locale locale48 = java.util.Locale.TRADITIONAL_CHINESE;
        int int49 = dateTimeField45.getMaximumShortTextLength(locale48);
        java.lang.String str50 = locale48.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket51 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology37, locale48);
        java.util.Locale locale52 = dateTimeParserBucket51.getLocale();
        org.joda.time.TimeOfDay timeOfDay55 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant57 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime58 = timeOfDay55.toDateTime((org.joda.time.ReadableInstant) instant57);
        org.joda.time.Chronology chronology59 = instant57.getChronology();
        org.joda.time.TimeOfDay timeOfDay62 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant64 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime65 = timeOfDay62.toDateTime((org.joda.time.ReadableInstant) instant64);
        int[] intArray67 = chronology59.get((org.joda.time.ReadablePartial) timeOfDay62, (long) (short) -1);
        boolean boolean68 = dateTimeParserBucket51.restoreState((java.lang.Object) (short) -1);
        java.util.Locale locale69 = dateTimeParserBucket51.getLocale();
        java.lang.String str70 = dateTimeField34.getAsText(11, locale69);
        org.joda.time.DurationField durationField71 = dateTimeField34.getRangeDurationField();
        long long74 = durationField71.getValueAsLong((long) (-1645515698), (long) (-1645515554));
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "zh" + "'", str50, "zh");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "11" + "'", str70, "11");
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
    }

    @Test
    public void test11868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11868");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.plusDays(17);
        org.joda.time.DateTime dateTime4 = yearMonthDay3.toDateTimeAtMidnight();
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay3.withYear((-1));
        org.joda.time.YearMonthDay yearMonthDay8 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay10 = yearMonthDay8.minusMonths((int) (short) -1);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean13 = localDate11.isSupported(dateTimeFieldType12);
        int int14 = yearMonthDay8.indexOf(dateTimeFieldType12);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay8.minusDays((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean19 = dateTimeZone17.equals((java.lang.Object) 604800000L);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight21 = yearMonthDay8.toDateMidnight(dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight22 = yearMonthDay3.toDateMidnight(dateTimeZone17);
        org.joda.time.LocalDate localDate23 = dateMidnight22.toLocalDate();
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(localDate23);
    }

    @Test
    public void test11869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11869");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 121);
        org.joda.time.Instant instant3 = instant1.plus((long) 1);
        org.joda.time.Instant instant5 = instant3.minus(48899232L);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
    }

    @Test
    public void test11870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11870");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.weekOfWeekyear();
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withDurationAdded(readableDuration10, (int) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime9.minusSeconds((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime9.minus(readableDuration15);
        org.joda.time.DateTime dateTime18 = dateTime9.minusSeconds((int) (byte) 100);
        int int19 = mutableDateTime4.compareTo((org.joda.time.ReadableInstant) dateTime18);
        mutableDateTime4.addMonths(112);
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime27 = timeOfDay24.toDateTime((org.joda.time.ReadableInstant) instant26);
        org.joda.time.Chronology chronology28 = instant26.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.clockhourOfHalfday();
        org.joda.time.DurationField durationField30 = chronology28.eras();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = chronology28.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        mutableDateTime4.setZone(dateTimeZone32);
        org.joda.time.TimeOfDay timeOfDay39 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime42 = timeOfDay39.toDateTime((org.joda.time.ReadableInstant) instant41);
        org.joda.time.Chronology chronology43 = instant41.getChronology();
        org.joda.time.TimeOfDay timeOfDay46 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant48 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime49 = timeOfDay46.toDateTime((org.joda.time.ReadableInstant) instant48);
        int[] intArray51 = chronology43.get((org.joda.time.ReadablePartial) timeOfDay46, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(0L, chronology43);
        int int53 = mutableDateTime52.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime52.property(dateTimeFieldType54);
        mutableDateTime52.setMillisOfDay(2);
        org.joda.time.Instant instant59 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone60 = instant59.getZone();
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone60);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.DateTime dateTime64 = dateTime61.withDurationAdded(readableDuration62, (int) (byte) 0);
        org.joda.time.DateTime dateTime66 = dateTime61.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime68 = dateTime66.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime70 = dateTime68.plusDays(2);
        org.joda.time.DateTime dateTime72 = dateTime70.minusMillis((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay76 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant78 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime79 = timeOfDay76.toDateTime((org.joda.time.ReadableInstant) instant78);
        org.joda.time.Chronology chronology80 = instant78.getChronology();
        org.joda.time.DateTimeField dateTimeField81 = chronology80.clockhourOfHalfday();
        org.joda.time.DurationField durationField82 = chronology80.eras();
        org.joda.time.DateTimeField dateTimeField83 = dateTimeFieldType73.getField(chronology80);
        org.joda.time.MutableDateTime mutableDateTime84 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime72, chronology80);
        org.joda.time.MutableDateTime mutableDateTime85 = mutableDateTime52.toMutableDateTime(chronology80);
        org.joda.time.DateTimeField dateTimeField86 = chronology80.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField87 = chronology80.hourOfHalfday();
        org.joda.time.TimeOfDay timeOfDay88 = new org.joda.time.TimeOfDay(1645688116958L, chronology80);
        mutableDateTime4.setChronology(chronology80);
        org.joda.time.DateTimeField dateTimeField90 = chronology80.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField91 = chronology80.secondOfMinute();
        long long93 = dateTimeField91.roundCeiling((-299634884L));
        long long95 = dateTimeField91.roundHalfEven((long) (-1645515409));
        // The following exception was thrown during execution in test generation
        try {
            int int98 = dateTimeField91.getDifference((long) 347, 3483052353051177848L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -3483052353051177");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(mutableDateTime85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + (-299634000L) + "'", long93 == (-299634000L));
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + (-1645515000L) + "'", long95 == (-1645515000L));
    }

    @Test
    public void test11871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11871");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime12 = timeOfDay9.toDateTime((org.joda.time.ReadableInstant) instant11);
        int[] intArray14 = chronology6.get((org.joda.time.ReadablePartial) timeOfDay9, (long) (short) -1);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(chronology6);
        int int16 = localTime15.getMillisOfSecond();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean19 = localDate17.isSupported(dateTimeFieldType18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = localDate17.toDateMidnight(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = localDate17.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property23 = localDate17.yearOfEra();
        org.joda.time.LocalDate localDate25 = localDate17.minusMonths((int) '#');
        int int26 = localDate25.getYearOfCentury();
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone28 = dateMidnight27.getZone();
        org.joda.time.DateTime dateTime29 = localDate25.toDateTimeAtStartOfDay(dateTimeZone28);
        int int30 = localDate25.getEra();
        org.joda.time.LocalDate.Property property31 = localDate25.year();
        org.joda.time.LocalDate localDate33 = localDate25.minusYears(2021);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = localTime15.isEqual((org.joda.time.ReadablePartial) localDate33);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[23, 59, 59, 999]");
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 742 + "'", int16 == 742);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 19 + "'", int26 == 19);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate33);
    }

    @Test
    public void test11872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11872");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight2.weekOfWeekyear();
        java.lang.String str8 = property7.getAsString();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        org.joda.time.Chronology chronology15 = instant13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.clockhourOfHalfday();
        long long18 = dateTimeField16.roundHalfFloor(0L);
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        int int20 = dateTimeField16.getMaximumShortTextLength(locale19);
        int int21 = property7.getMaximumShortTextLength(locale19);
        org.joda.time.DateMidnight dateMidnight23 = property7.addToCopy(22);
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.weekyear();
        org.joda.time.DateMidnight dateMidnight25 = property24.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.plus((-1135814400000L));
        org.joda.time.DateMidnight.Property property28 = dateMidnight25.centuryOfEra();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test11873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11873");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime17 = timeOfDay14.toDateTime((org.joda.time.ReadableInstant) instant16);
        int[] intArray19 = chronology11.get((org.joda.time.ReadablePartial) timeOfDay14, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(0L, chronology11);
        java.lang.Object obj21 = mutableDateTime20.clone();
        int int22 = mutableDateTime20.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Chronology chronology30 = instant28.getChronology();
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime36 = timeOfDay33.toDateTime((org.joda.time.ReadableInstant) instant35);
        int[] intArray38 = chronology30.get((org.joda.time.ReadablePartial) timeOfDay33, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(0L, chronology30);
        mutableDateTime39.setYear(3);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone44 = instant43.getZone();
        mutableDateTime39.setZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone44);
        mutableDateTime20.setZoneRetainFields(dateTimeZone44);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(604800000L, dateTimeZone44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter2.withZone(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTimeFormatter49.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter49.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter51.withZoneUTC();
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone54 = dateMidnight53.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter51.withZone(dateTimeZone54);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter51.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter56.withDefaultYear(428);
        org.joda.time.DateTimeZone dateTimeZone60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone60);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight61.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight64.minusWeeks((int) (short) 100);
        org.joda.time.DateMidnight.Property property67 = dateMidnight66.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean69 = dateMidnight66.isSupported(dateTimeFieldType68);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay74 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant76 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime77 = timeOfDay74.toDateTime((org.joda.time.ReadableInstant) instant76);
        org.joda.time.Chronology chronology78 = instant76.getChronology();
        org.joda.time.DateTimeField dateTimeField79 = chronology78.clockhourOfHalfday();
        org.joda.time.DurationField durationField80 = chronology78.eras();
        org.joda.time.DateTimeField dateTimeField81 = dateTimeFieldType71.getField(chronology78);
        org.joda.time.DateTimeField dateTimeField82 = chronology78.hourOfDay();
        org.joda.time.LocalTime localTime83 = new org.joda.time.LocalTime((long) 22, chronology78);
        org.joda.time.DateTimeField dateTimeField84 = dateTimeFieldType68.getField(chronology78);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter85 = dateTimeFormatter58.withChronology(chronology78);
        boolean boolean86 = dateTimeFormatter85.isParser();
        org.joda.time.DateTimeZone dateTimeZone87 = dateTimeFormatter85.getZone();
        int int89 = dateTimeZone87.getStandardOffset((-1415668503346L));
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeFormatter85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test11874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11874");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate0.minusMonths((int) (short) 10);
        int int7 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate.Property property8 = localDate0.year();
        org.joda.time.LocalDate localDate9 = property8.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = property8.getFieldType();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight13.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusWeeks((int) (short) 100);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.weekyear();
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight18.minusYears((int) ' ');
        java.lang.Object obj22 = null;
        boolean boolean23 = dateMidnight21.equals(obj22);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight21.minusWeeks(10);
        org.joda.time.LocalDate localDate26 = dateMidnight21.toLocalDate();
        org.joda.time.LocalDate localDate28 = localDate26.plusYears(365);
        org.joda.time.LocalDate.Property property29 = localDate28.dayOfWeek();
        boolean boolean30 = property8.equals((java.lang.Object) property29);
        org.joda.time.LocalDate localDate31 = property8.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate32 = property8.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate32);
    }

    @Test
    public void test11875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11875");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        boolean boolean4 = dateTime3.isAfterNow();
        org.joda.time.DateTime dateTime6 = dateTime3.withSecondOfMinute(16);
        org.joda.time.DateTime dateTime8 = dateTime6.withMillisOfDay(26688);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
    }

    @Test
    public void test11876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11876");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate0.minusMonths((int) (short) 10);
        int int7 = localDate0.getWeekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            int int9 = localDate0.get(dateTimeFieldType8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'clockhourOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
    }

    @Test
    public void test11877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11877");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        boolean boolean33 = mutableDateTime16.isEqualNow();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime16.secondOfDay();
        mutableDateTime16.setMillisOfDay((int) (short) 100);
        int int37 = mutableDateTime16.getHourOfDay();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime16.hourOfDay();
        org.joda.time.Instant instant41 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone42 = instant41.getZone();
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone42);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.monthOfYear();
        int int45 = mutableDateTime43.getMillisOfSecond();
        java.lang.String str46 = mutableDateTime43.toString();
        mutableDateTime16.setTime((org.joda.time.ReadableInstant) mutableDateTime43);
        mutableDateTime16.addMinutes(24708459);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1970-01-01T00:00:00.002Z" + "'", str46, "1970-01-01T00:00:00.002Z");
    }

    @Test
    public void test11878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11878");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean6 = interval2.abuts((org.joda.time.ReadableInterval) interval5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Interval interval8 = interval5.withDurationBeforeEnd(readableDuration7);
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean15 = interval11.abuts((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Interval interval17 = interval14.withDurationBeforeEnd(readableDuration16);
        org.joda.time.Period period18 = interval14.toPeriod();
        org.joda.time.Interval interval19 = interval5.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period18);
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder20.setExtension('x', "zh");
        boolean boolean24 = period18.equals((java.lang.Object) builder20);
        java.util.Locale.Builder builder25 = builder20.clear();
        java.util.Locale.Builder builder28 = builder20.setExtension('a', "");
        java.util.Locale.Builder builder30 = builder28.setVariant("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder32 = builder30.removeUnicodeLocaleAttribute("2022-02-22T07:28:58.951Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-22T07:28:58.951Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test11879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11879");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, 0);
        java.lang.String str3 = dateTimeZone2.toString();
        java.util.TimeZone timeZone4 = dateTimeZone2.toTimeZone();
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfHalfday();
        long long14 = dateTimeField12.roundHalfFloor(0L);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        int int16 = dateTimeField12.getMaximumShortTextLength(locale15);
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale20 = locale19.stripExtensions();
        java.lang.String str21 = locale17.getDisplayName(locale19);
        java.lang.String str22 = locale15.getDisplayLanguage(locale17);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone4, locale15);
        java.util.TimeZone.setDefault(timeZone4);
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime31 = timeOfDay28.toDateTime((org.joda.time.ReadableInstant) instant30);
        org.joda.time.Chronology chronology32 = instant30.getChronology();
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant37 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime38 = timeOfDay35.toDateTime((org.joda.time.ReadableInstant) instant37);
        int[] intArray40 = chronology32.get((org.joda.time.ReadablePartial) timeOfDay35, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(0L, chronology32);
        org.joda.time.TimeOfDay timeOfDay44 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant46 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime47 = timeOfDay44.toDateTime((org.joda.time.ReadableInstant) instant46);
        org.joda.time.Chronology chronology48 = instant46.getChronology();
        org.joda.time.TimeOfDay timeOfDay51 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant53 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime54 = timeOfDay51.toDateTime((org.joda.time.ReadableInstant) instant53);
        int[] intArray56 = chronology48.get((org.joda.time.ReadablePartial) timeOfDay51, (long) (short) -1);
        mutableDateTime41.setChronology(chronology48);
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime(chronology48);
        org.joda.time.DateTimeField dateTimeField59 = chronology48.weekOfWeekyear();
        java.util.Locale locale61 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale62 = locale61.stripExtensions();
        java.util.Locale locale63 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale64 = locale63.stripExtensions();
        java.lang.String str65 = locale61.getDisplayName(locale63);
        java.lang.String str66 = dateTimeField59.getAsText(2022, locale61);
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(timeZone4, locale61);
        java.util.TimeZone timeZone68 = calendar67.getTimeZone();
        int int69 = calendar67.getWeekYear();
        calendar67.set(13, 8, 1922, 26708123, 49);
        boolean boolean76 = calendar67.isWeekDateSupported();
        // The following exception was thrown during execution in test generation
        try {
            calendar67.roll(26904357, 18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+10:00" + "'", str3, "+10:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str21, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u4e2d\u6587" + "'", str22, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645515171931,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=32,SECOND=51,MILLISECOND=931,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str65, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2022" + "'", str66, "2022");
        org.junit.Assert.assertNotNull(calendar67);
// flaky:         org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=13,MONTH=8,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=1922,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=26708123,MINUTE=49,SECOND=51,MILLISECOND=931,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone68);
        org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2022 + "'", int69 == 2022);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test11880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11880");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        int[] intArray16 = chronology8.get((org.joda.time.ReadablePartial) timeOfDay11, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(0L, chronology8);
        org.joda.time.TimeOfDay timeOfDay20 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant22 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime23 = timeOfDay20.toDateTime((org.joda.time.ReadableInstant) instant22);
        org.joda.time.Chronology chronology24 = instant22.getChronology();
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTime((org.joda.time.ReadableInstant) instant29);
        int[] intArray32 = chronology24.get((org.joda.time.ReadablePartial) timeOfDay27, (long) (short) -1);
        mutableDateTime17.setChronology(chronology24);
        boolean boolean34 = mutableDateTime17.isEqualNow();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime17.secondOfDay();
        org.joda.time.DateTime dateTime36 = mutableDateTime17.toDateTimeISO();
        org.joda.time.DateTime dateTime38 = dateTime36.withMillis((long) 1970);
        org.joda.time.DateTime dateTime40 = dateTime36.plusYears(24);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.hours();
        org.joda.time.DateTime dateTime43 = dateTime36.withFieldAdded(durationFieldType41, 21);
        org.joda.time.Chronology chronology44 = dateTime36.getChronology();
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.fromMillisOfDay((-124329599951L), chronology44);
        org.joda.time.LocalTime localTime47 = localTime45.withMillisOfSecond(456);
        java.lang.String str48 = localTime45.toString();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "00:00:00.049" + "'", str48, "00:00:00.049");
    }

    @Test
    public void test11881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11881");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.minuteOfHour();
        java.lang.String str4 = property3.getAsShortText();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.TimeOfDay timeOfDay7 = property3.addNoWrapToCopy(100);
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        org.joda.time.Chronology chronology15 = instant13.getChronology();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime21 = timeOfDay18.toDateTime((org.joda.time.ReadableInstant) instant20);
        int[] intArray23 = chronology15.get((org.joda.time.ReadablePartial) timeOfDay18, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(0L, chronology15);
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTime((org.joda.time.ReadableInstant) instant29);
        org.joda.time.Chronology chronology31 = instant29.getChronology();
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime37 = timeOfDay34.toDateTime((org.joda.time.ReadableInstant) instant36);
        int[] intArray39 = chronology31.get((org.joda.time.ReadablePartial) timeOfDay34, (long) (short) -1);
        mutableDateTime24.setChronology(chronology31);
        boolean boolean41 = mutableDateTime24.isEqualNow();
        org.joda.time.ReadableDuration readableDuration42 = null;
        mutableDateTime24.add(readableDuration42);
        int int44 = mutableDateTime24.getWeekyear();
        int int45 = property3.compareTo((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.TimeOfDay timeOfDay48 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant50 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime51 = timeOfDay48.toDateTime((org.joda.time.ReadableInstant) instant50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = dateTime51.toString(dateTimeFormatter52);
        org.joda.time.DateTime dateTime55 = dateTime51.minusYears(2022);
        int int56 = property3.compareTo((org.joda.time.ReadableInstant) dateTime51);
        java.util.Locale locale58 = java.util.Locale.forLanguageTag("minutes");
        java.util.Calendar calendar59 = dateTime51.toCalendar(locale58);
        java.util.Date date60 = calendar59.getTime();
        calendar59.setMinimalDaysInFirstWeek(26784);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1970 + "'", int44 == 1970);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1969-12-31T00:01:00.000Z" + "'", str53, "1969-12-31T00:01:00.000Z");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "minutes");
        org.junit.Assert.assertNotNull(calendar59);
        org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=-86340000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=26784,ERA=1,YEAR=1969,MONTH=11,WEEK_OF_YEAR=52,WEEK_OF_MONTH=4,DAY_OF_MONTH=31,DAY_OF_YEAR=365,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date60);
        org.junit.Assert.assertEquals(date60.toString(), "Wed Dec 31 10:01:00 GMT+10:00 1969");
    }

    @Test
    public void test11882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11882");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight2.weekOfWeekyear();
        java.lang.String str8 = property7.getAsString();
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        org.joda.time.Chronology chronology15 = instant13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.clockhourOfHalfday();
        long long18 = dateTimeField16.roundHalfFloor(0L);
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        int int20 = dateTimeField16.getMaximumShortTextLength(locale19);
        int int21 = property7.getMaximumShortTextLength(locale19);
        org.joda.time.DateMidnight dateMidnight23 = property7.addToCopy(22);
        org.joda.time.DateMidnight.Property property24 = dateMidnight23.weekyear();
        org.joda.time.DateMidnight dateMidnight25 = property24.roundHalfCeilingCopy();
        org.joda.time.DateMidnight.Property property26 = dateMidnight25.dayOfYear();
        java.lang.String str27 = property26.getAsText();
        org.joda.time.DateMidnight dateMidnight28 = property26.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "363" + "'", str27, "363");
        org.junit.Assert.assertNotNull(dateMidnight28);
    }

    @Test
    public void test11883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11883");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("1970-01-01T00:00:00.002Z");
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTime((org.joda.time.ReadableInstant) instant10);
        org.joda.time.Chronology chronology12 = instant10.getChronology();
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime18 = timeOfDay15.toDateTime((org.joda.time.ReadableInstant) instant17);
        int[] intArray20 = chronology12.get((org.joda.time.ReadablePartial) timeOfDay15, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(0L, chronology12);
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime27 = timeOfDay24.toDateTime((org.joda.time.ReadableInstant) instant26);
        org.joda.time.Chronology chronology28 = instant26.getChronology();
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime34 = timeOfDay31.toDateTime((org.joda.time.ReadableInstant) instant33);
        int[] intArray36 = chronology28.get((org.joda.time.ReadablePartial) timeOfDay31, (long) (short) -1);
        mutableDateTime21.setChronology(chronology28);
        boolean boolean38 = mutableDateTime21.isEqualNow();
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime21.secondOfDay();
        org.joda.time.DateTime dateTime40 = mutableDateTime21.toDateTimeISO();
        org.joda.time.DateTime dateTime42 = dateTime40.withMillis((long) 1970);
        org.joda.time.DateTime dateTime43 = dateTime40.withLaterOffsetAtOverlap();
        boolean boolean44 = dateTime43.isAfterNow();
        org.joda.time.DateTime dateTime46 = dateTime43.withMonthOfYear((int) (byte) 10);
        org.joda.time.TimeOfDay timeOfDay50 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime53 = timeOfDay50.toDateTime((org.joda.time.ReadableInstant) instant52);
        org.joda.time.Chronology chronology54 = instant52.getChronology();
        org.joda.time.TimeOfDay timeOfDay57 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant59 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime60 = timeOfDay57.toDateTime((org.joda.time.ReadableInstant) instant59);
        int[] intArray62 = chronology54.get((org.joda.time.ReadablePartial) timeOfDay57, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime(0L, chronology54);
        mutableDateTime63.setYear(3);
        org.joda.time.Instant instant67 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone68 = instant67.getZone();
        mutableDateTime63.setZone(dateTimeZone68);
        java.util.Locale locale71 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale72 = locale71.stripExtensions();
        java.util.Locale locale73 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale74 = locale73.stripExtensions();
        java.lang.String str75 = locale71.getDisplayName(locale73);
        java.lang.String str76 = dateTimeZone68.getName(100L, locale73);
        org.joda.time.DateTime dateTime77 = dateTime43.withZoneRetainFields(dateTimeZone68);
        org.joda.time.LocalTime localTime78 = new org.joda.time.LocalTime((java.lang.Object) dateTime77);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forOffsetMillis(303);
        org.joda.time.DateTime dateTime81 = dateTime77.withZoneRetainFields(dateTimeZone80);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean82 = strSet4.contains((java.lang.Object) dateTimeZone80);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: org.joda.time.tz.FixedDateTimeZone cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str75, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00" + "'", str76, "+00:00");
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(dateTime81);
    }

    @Test
    public void test11884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11884");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((-2100000L));
        org.joda.time.DateTime dateTime2 = dateTime1.withEarlierOffsetAtOverlap();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean5 = localDate3.isSupported(dateTimeFieldType4);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateMidnight dateMidnight7 = localDate3.toDateMidnight(dateTimeZone6);
        org.joda.time.DateTime dateTime8 = localDate3.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate10 = localDate3.plusMonths((int) (short) 100);
        org.joda.time.LocalDate localDate12 = localDate10.withWeekyear((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfCentury();
        int int14 = localDate10.get(dateTimeFieldType13);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight17.withDurationAdded((long) 2, 100);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean27 = interval23.abuts((org.joda.time.ReadableInterval) interval26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.Interval interval29 = interval26.withDurationBeforeEnd(readableDuration28);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean36 = interval32.abuts((org.joda.time.ReadableInterval) interval35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Interval interval38 = interval35.withDurationBeforeEnd(readableDuration37);
        org.joda.time.Period period39 = interval35.toPeriod();
        org.joda.time.Interval interval40 = interval26.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period39);
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder44 = builder41.setExtension('x', "zh");
        boolean boolean45 = period39.equals((java.lang.Object) builder41);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight17.withPeriodAdded((org.joda.time.ReadablePeriod) period39, 2022);
        org.joda.time.LocalDate localDate48 = localDate10.minus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.DateTime dateTime50 = dateTime1.withPeriodAdded((org.joda.time.ReadablePeriod) period39, 84);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 30 + "'", int14 == 30);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test11885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11885");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.DateTime dateTime7 = instant4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.plusWeeks(2022);
        org.joda.time.DateTime dateTime11 = dateTime9.plus(2L);
        org.joda.time.DateTime dateTime13 = dateTime11.minusHours(0);
        org.joda.time.DateTime dateTime15 = dateTime11.withYearOfCentury((int) (short) 10);
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime11.toMutableDateTimeISO();
        int int17 = dateTime11.getDayOfWeek();
        org.joda.time.DateTime dateTime18 = dateTime11.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test11886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11886");
        org.joda.time.DateMidnight dateMidnight2 = org.joda.time.DateMidnight.parse("1970-01-18T00:00:00.000Z");
        java.util.GregorianCalendar gregorianCalendar3 = dateMidnight2.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, 0);
        java.lang.String str7 = dateTimeZone6.toString();
        long long11 = dateTimeZone6.convertLocalToUTC((long) 10, false, (long) 0);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight2.withZoneRetainFields(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight(dateTimeZone6);
        org.joda.time.DateMidnight dateMidnight14 = org.joda.time.DateMidnight.now(dateTimeZone6);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(0L, dateTimeZone6);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+10:00" + "'", str7, "+10:00");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-35999990L) + "'", long11 == (-35999990L));
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
    }

    @Test
    public void test11887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11887");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime12 = timeOfDay9.toDateTime((org.joda.time.ReadableInstant) instant11);
        int[] intArray14 = chronology6.get((org.joda.time.ReadablePartial) timeOfDay9, (long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay9.plusMinutes((-1645515280));
        org.joda.time.DateTime dateTime17 = timeOfDay16.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime32 = timeOfDay29.toDateTime((org.joda.time.ReadableInstant) instant31);
        int[] intArray34 = chronology26.get((org.joda.time.ReadablePartial) timeOfDay29, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(0L, chronology26);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (-1), chronology26);
        org.joda.time.DateTimeField dateTimeField37 = chronology26.era();
        org.joda.time.DateTimeField dateTimeField38 = chronology26.monthOfYear();
        org.joda.time.DateTimeField dateTimeField39 = chronology26.dayOfYear();
        org.joda.time.DateTimeField dateTimeField40 = chronology26.monthOfYear();
        org.joda.time.DateTimeField dateTimeField41 = chronology26.hourOfDay();
        org.joda.time.DateTimeField dateTimeField42 = chronology26.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay43 = timeOfDay16.withChronologyRetainFields(chronology26);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(timeOfDay43);
    }

    @Test
    public void test11888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11888");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate0.minusMonths((int) (short) 10);
        int int7 = localDate0.getDayOfYear();
        org.joda.time.LocalDate.Property property8 = localDate0.monthOfYear();
        org.joda.time.LocalDate localDate10 = localDate0.withYearOfCentury((int) (byte) 0);
        int int11 = localDate10.getDayOfYear();
        org.joda.time.LocalDate.Property property12 = localDate10.year();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test11889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11889");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        mutableDateTime16.setMinuteOfDay(8);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone37 = instant36.getZone();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight40.withWeekyear(2);
        org.joda.time.DateTimeZone dateTimeZone45 = dateMidnight40.getZone();
        long long47 = dateTimeZone37.getMillisKeepLocal(dateTimeZone45, 10L);
        mutableDateTime16.setZoneRetainFields(dateTimeZone37);
        java.util.TimeZone timeZone49 = dateTimeZone37.toTimeZone();
        timeZone49.setID("java.io.IOException: ");
        // The following exception was thrown during execution in test generation
        try {
            int int58 = timeZone49.getOffset((int) (byte) 100, 26971, 35, (int) (short) -1, 0, (-1645515695));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test11890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11890");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        org.joda.time.MutableDateTime mutableDateTime20 = property19.roundHalfEven();
        mutableDateTime20.addWeekyears(70);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime20.millisOfSecond();
        org.joda.time.DurationField durationField24 = property23.getDurationField();
        org.joda.time.MutableDateTime mutableDateTime25 = property23.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime26 = property23.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime28 = property23.add((-53L));
        mutableDateTime28.setWeekyear((-292273032));
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
    }

    @Test
    public void test11891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11891");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime17 = timeOfDay14.toDateTime((org.joda.time.ReadableInstant) instant16);
        int[] intArray19 = chronology11.get((org.joda.time.ReadablePartial) timeOfDay14, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(0L, chronology11);
        java.lang.Object obj21 = mutableDateTime20.clone();
        int int22 = mutableDateTime20.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Chronology chronology30 = instant28.getChronology();
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime36 = timeOfDay33.toDateTime((org.joda.time.ReadableInstant) instant35);
        int[] intArray38 = chronology30.get((org.joda.time.ReadablePartial) timeOfDay33, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(0L, chronology30);
        mutableDateTime39.setYear(3);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone44 = instant43.getZone();
        mutableDateTime39.setZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone44);
        mutableDateTime20.setZoneRetainFields(dateTimeZone44);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(604800000L, dateTimeZone44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter2.withZone(dateTimeZone44);
        org.joda.time.TimeOfDay timeOfDay52 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property53 = timeOfDay52.minuteOfHour();
        java.lang.String str54 = property53.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay57 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant59 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime60 = timeOfDay57.toDateTime((org.joda.time.ReadableInstant) instant59);
        org.joda.time.ReadablePeriod readablePeriod61 = null;
        org.joda.time.DateTime dateTime63 = dateTime60.withPeriodAdded(readablePeriod61, (int) (short) 0);
        int int64 = property53.compareTo((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime.Property property65 = dateTime60.yearOfEra();
        org.joda.time.DateTime dateTime67 = dateTime60.plusHours(2021);
        boolean boolean68 = dateTime60.isEqualNow();
        org.joda.time.Chronology chronology69 = dateTime60.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = dateTimeFormatter2.withChronology(chronology69);
        org.joda.time.Chronology chronology71 = dateTimeFormatter70.getChronology();
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1" + "'", str54, "1");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeFormatter70);
        org.junit.Assert.assertNotNull(chronology71);
    }

    @Test
    public void test11892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11892");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.DurationField durationField17 = chronology7.halfdays();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology7);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test11893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11893");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay.Property property4 = yearMonthDay3.monthOfYear();
        int int5 = property4.get();
        org.joda.time.YearMonthDay yearMonthDay7 = property4.addWrapFieldToCopy(4);
        org.joda.time.YearMonthDay yearMonthDay9 = property4.addToCopy((int) (short) 10);
        org.joda.time.YearMonthDay yearMonthDay10 = property4.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.plusDays(400);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = yearMonthDay12.toString("22 Feb 2022 07:28:42 GMT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: F");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
    }

    @Test
    public void test11894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11894");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTime((org.joda.time.ReadableInstant) instant10);
        org.joda.time.Chronology chronology12 = instant10.getChronology();
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime18 = timeOfDay15.toDateTime((org.joda.time.ReadableInstant) instant17);
        int[] intArray20 = chronology12.get((org.joda.time.ReadablePartial) timeOfDay15, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(0L, chronology12);
        java.lang.Object obj22 = mutableDateTime21.clone();
        int int23 = mutableDateTime21.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTime((org.joda.time.ReadableInstant) instant29);
        org.joda.time.Chronology chronology31 = instant29.getChronology();
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime37 = timeOfDay34.toDateTime((org.joda.time.ReadableInstant) instant36);
        int[] intArray39 = chronology31.get((org.joda.time.ReadablePartial) timeOfDay34, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(0L, chronology31);
        mutableDateTime40.setYear(3);
        org.joda.time.Instant instant44 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone45 = instant44.getZone();
        mutableDateTime40.setZone(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone45);
        mutableDateTime21.setZoneRetainFields(dateTimeZone45);
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(604800000L, dateTimeZone45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter3.withZone(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone51 = dateTimeFormatter50.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter50.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter52.withZoneUTC();
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone55 = dateMidnight54.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter52.withZone(dateTimeZone55);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate57 = org.joda.time.LocalDate.parse("\u82f1\u6587", dateTimeFormatter56);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
    }

    @Test
    public void test11895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11895");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime3 = localTime1.minusMinutes((int) (short) 1);
        org.joda.time.LocalTime localTime5 = localTime1.withMillisOfDay((int) (byte) 1);
        org.joda.time.LocalTime.Property property6 = localTime1.minuteOfHour();
        org.joda.time.LocalTime localTime8 = property6.addCopy(0);
        org.joda.time.LocalTime localTime9 = property6.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime11 = property6.addNoWrapToCopy(378);
        org.joda.time.LocalTime localTime13 = property6.setCopy(57);
        org.joda.time.LocalTime localTime14 = property6.roundHalfCeilingCopy();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime21 = timeOfDay18.toDateTime((org.joda.time.ReadableInstant) instant20);
        org.joda.time.Chronology chronology22 = instant20.getChronology();
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime28 = timeOfDay25.toDateTime((org.joda.time.ReadableInstant) instant27);
        int[] intArray30 = chronology22.get((org.joda.time.ReadablePartial) timeOfDay25, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(0L, chronology22);
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime37 = timeOfDay34.toDateTime((org.joda.time.ReadableInstant) instant36);
        org.joda.time.Chronology chronology38 = instant36.getChronology();
        org.joda.time.TimeOfDay timeOfDay41 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime44 = timeOfDay41.toDateTime((org.joda.time.ReadableInstant) instant43);
        int[] intArray46 = chronology38.get((org.joda.time.ReadablePartial) timeOfDay41, (long) (short) -1);
        mutableDateTime31.setChronology(chronology38);
        boolean boolean48 = mutableDateTime31.isEqualNow();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime31.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight52.withDurationAdded((long) (short) 10, 1);
        mutableDateTime31.setDate((org.joda.time.ReadableInstant) dateMidnight55);
        mutableDateTime31.setMinuteOfHour(0);
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime31.era();
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime31.weekOfWeekyear();
        mutableDateTime31.setWeekOfWeekyear(30);
        mutableDateTime31.setMillisOfDay(24);
        org.joda.time.Interval interval67 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean68 = interval67.isBeforeNow();
        org.joda.time.Period period69 = interval67.toPeriod();
        java.lang.String str70 = period69.toString();
        org.joda.time.MutablePeriod mutablePeriod71 = period69.toMutablePeriod();
        mutableDateTime31.add((org.joda.time.ReadablePeriod) mutablePeriod71);
        org.joda.time.LocalTime localTime73 = localTime14.plus((org.joda.time.ReadablePeriod) mutablePeriod71);
        int int74 = mutablePeriod71.size();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "PT0S" + "'", str70, "PT0S");
        org.junit.Assert.assertNotNull(mutablePeriod71);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 8 + "'", int74 == 8);
    }

    @Test
    public void test11896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11896");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate0.plusMonths((-1));
        org.joda.time.LocalDate.Property property7 = localDate6.era();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.LocalDate localDate10 = property7.addWrapFieldToCopy((-1));
        org.joda.time.LocalDate localDate11 = property7.withMinimumValue();
        org.joda.time.LocalDate.Property property12 = localDate11.centuryOfEra();
        org.joda.time.LocalDate localDate14 = localDate11.withDayOfMonth((int) (byte) 10);
        int int15 = localDate14.getWeekOfWeekyear();
        org.joda.time.LocalTime localTime16 = null;
        org.joda.time.DateTime dateTime17 = localDate14.toDateTime(localTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2 + "'", int15 == 2);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test11897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11897");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.weekOfWeekyear();
        org.joda.time.Instant instant7 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone8 = instant7.getZone();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.withDurationAdded(readableDuration10, (int) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime9.minusSeconds((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime9.minus(readableDuration15);
        org.joda.time.DateTime dateTime18 = dateTime9.minusSeconds((int) (byte) 100);
        int int19 = mutableDateTime4.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime4.dayOfMonth();
        mutableDateTime4.setMinuteOfDay(1);
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay((java.lang.Object) mutableDateTime4);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime4.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.addWrapField(86399);
        org.joda.time.MutableDateTime mutableDateTime28 = property24.addWrapField(283);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime28.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test11898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11898");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMinutes(35);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusMinutes(22);
        int int9 = localDateTime6.size();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.minusMillis(26693441);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.era();
        org.joda.time.LocalDateTime localDateTime13 = property12.withMaximumValue();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfWeek();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.dayOfYear();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.plusYears(176);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test11899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11899");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) 240, 1222905599999L);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.Interval interval4 = interval2.withChronology(chronology3);
        long long5 = interval2.toDurationMillis();
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1222905599759L + "'", long5 == 1222905599759L);
    }

    @Test
    public void test11900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11900");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 26708123);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.plusMinutes(0);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.hourOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime12 = timeOfDay9.toDateTime((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Chronology chronology13 = instant11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.clockhourOfHalfday();
        long long16 = dateTimeField14.roundHalfFloor(0L);
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        int int18 = dateTimeField14.getMaximumShortTextLength(locale17);
        java.lang.String str19 = locale17.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology6, locale17);
        java.lang.String str21 = locale17.getScript();
        java.lang.String str22 = locale17.toLanguageTag();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Chronology chronology30 = instant28.getChronology();
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime36 = timeOfDay33.toDateTime((org.joda.time.ReadableInstant) instant35);
        int[] intArray38 = chronology30.get((org.joda.time.ReadablePartial) timeOfDay33, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(0L, chronology30);
        int int40 = mutableDateTime39.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime39.property(dateTimeFieldType41);
        org.joda.time.TimeOfDay timeOfDay45 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant47 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime48 = timeOfDay45.toDateTime((org.joda.time.ReadableInstant) instant47);
        org.joda.time.Chronology chronology49 = instant47.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.clockhourOfHalfday();
        long long52 = dateTimeField50.roundHalfFloor(0L);
        java.util.Locale locale53 = java.util.Locale.TRADITIONAL_CHINESE;
        int int54 = dateTimeField50.getMaximumShortTextLength(locale53);
        java.util.Locale locale55 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale56 = locale55.stripExtensions();
        java.util.Locale locale57 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale58 = locale57.stripExtensions();
        java.lang.String str59 = locale55.getDisplayName(locale57);
        java.lang.String str60 = locale53.getDisplayLanguage(locale55);
        java.util.Calendar calendar61 = mutableDateTime39.toCalendar(locale55);
        java.lang.String str62 = locale55.getISO3Language();
        java.util.Locale locale63 = locale55.stripExtensions();
        java.lang.String str64 = locale17.getDisplayLanguage(locale55);
        int int65 = property4.getMaximumShortTextLength(locale55);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zh" + "'", str19, "zh");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "zh-TW" + "'", str22, "zh-TW");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str59, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u4e2d\u6587" + "'", str60, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar61);
        org.junit.Assert.assertEquals(calendar61.toString(), "java.util.GregorianCalendar[time=0,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "zho" + "'", str62, "zho");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\u4e2d\u6587" + "'", str64, "\u4e2d\u6587");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
    }

    @Test
    public void test11901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11901");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        int int3 = localDateTime2.getDayOfWeek();
        int int4 = localDateTime2.getDayOfMonth();
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.hours();
        boolean boolean6 = localDateTime2.isSupported(durationFieldType5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.centuryOfEra();
        int int8 = localDateTime2.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property9 = localDateTime2.yearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 53 + "'", int8 == 53);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test11902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11902");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.monthOfYear();
        int int4 = localDateTime2.getHourOfDay();
        int int5 = localDateTime2.getHourOfDay();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.minuteOfHour();
        int int7 = localDateTime2.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property8 = localDateTime2.monthOfYear();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 7 + "'", int4 == 7);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 7 + "'", int5 == 7);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test11903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11903");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate7 = localDate0.plusMonths((int) (short) 100);
        org.joda.time.LocalDate.Property property8 = localDate7.weekOfWeekyear();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths(70);
        org.joda.time.LocalDate localDate13 = localDate11.withWeekyear(5);
        org.joda.time.LocalDate localDate14 = localDate7.withFields((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.LocalDate localDate16 = localDate7.withYearOfEra(7359830);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean19 = localDate17.isSupported(dateTimeFieldType18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = localDate17.toDateMidnight(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = localDate17.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property23 = localDate17.yearOfEra();
        org.joda.time.LocalDate localDate25 = localDate17.minusMonths((int) '#');
        int int26 = localDate25.getYearOfCentury();
        int int27 = localDate7.compareTo((org.joda.time.ReadablePartial) localDate25);
        org.joda.time.LocalDate.Property property28 = localDate25.dayOfMonth();
        org.joda.time.LocalDate localDate29 = property28.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 19 + "'", int26 == 19);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
    }

    @Test
    public void test11904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11904");
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        org.joda.time.Chronology chronology14 = instant12.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.clockhourOfHalfday();
        org.joda.time.DurationField durationField16 = chronology14.eras();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology14.getZone();
        org.joda.time.DateTimeField dateTimeField19 = chronology14.clockhourOfDay();
        long long23 = chronology14.add((long) (-1), (-1L), (int) '4');
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) 9, chronology14);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean31 = interval27.abuts((org.joda.time.ReadableInterval) interval30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.Interval interval33 = interval30.withDurationBeforeEnd(readableDuration32);
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean40 = interval36.abuts((org.joda.time.ReadableInterval) interval39);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Interval interval42 = interval39.withDurationBeforeEnd(readableDuration41);
        org.joda.time.Period period43 = interval39.toPeriod();
        org.joda.time.Interval interval44 = interval30.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period43);
        int[] intArray46 = chronology14.get((org.joda.time.ReadablePeriod) period43, (long) 748);
        org.joda.time.TimeOfDay timeOfDay47 = new org.joda.time.TimeOfDay(chronology14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(26942, 62911, 365, 142, (-1645515437), 0, 35999947, chronology14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 142 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-53L) + "'", long23 == (-53L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, 0, 0, 0, 0, 0, 0, 748]");
    }

    @Test
    public void test11905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11905");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime3 = localTime1.minusMinutes((int) (short) 1);
        int int4 = localTime1.getMillisOfDay();
        org.joda.time.LocalTime localTime6 = localTime1.plusSeconds(100);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        org.joda.time.Chronology chronology15 = instant13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.clockhourOfHalfday();
        long long18 = dateTimeField16.roundHalfFloor(0L);
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        int int20 = dateTimeField16.getMaximumShortTextLength(locale19);
        java.lang.String str21 = locale19.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology8, locale19);
        java.util.Locale locale23 = dateTimeParserBucket22.getLocale();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.util.Locale locale26 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale27 = locale26.stripExtensions();
        dateTimeParserBucket22.saveField(dateTimeFieldType24, "zh", locale26);
        org.joda.time.LocalTime.Property property29 = localTime1.property(dateTimeFieldType24);
        org.joda.time.LocalTime localTime31 = property29.addCopy(26688);
        org.joda.time.DateTimeField dateTimeField32 = property29.getField();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 35 + "'", int4 == 35);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "zh" + "'", str21, "zh");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test11906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11906");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime8.plusWeeks((int) (byte) -1);
        org.joda.time.DateTime.Property property13 = dateTime8.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime20 = timeOfDay17.toDateTime((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Chronology chronology21 = instant19.getChronology();
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime27 = timeOfDay24.toDateTime((org.joda.time.ReadableInstant) instant26);
        int[] intArray29 = chronology21.get((org.joda.time.ReadablePartial) timeOfDay24, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(0L, chronology21);
        org.joda.time.DurationField durationField31 = chronology21.weeks();
        org.joda.time.DateTimeField dateTimeField32 = chronology21.weekOfWeekyear();
        org.joda.time.DateTime dateTime33 = dateTime8.toDateTime(chronology21);
        org.joda.time.DateTime.Property property34 = dateTime8.dayOfWeek();
        org.joda.time.DateTime dateTime36 = property34.addToCopy((long) 70);
        java.util.Locale locale39 = new java.util.Locale("Chinese", "10");
        java.lang.String str40 = property34.getAsShortText(locale39);
        org.joda.time.DateTime dateTime41 = property34.withMaximumValue();
        org.joda.time.DateTime dateTime43 = dateTime41.plusHours((int) (short) 10);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertEquals(locale39.toString(), "chinese_10");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Tue" + "'", str40, "Tue");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test11907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11907");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("19");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime3 = property2.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.roundFloor();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
    }

    @Test
    public void test11908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11908");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight2.weekOfWeekyear();
        java.lang.String str8 = property7.getAsString();
        java.util.Locale locale9 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale10 = locale9.stripExtensions();
        int int11 = property7.getMaximumTextLength(locale9);
        org.joda.time.DateMidnight dateMidnight12 = property7.roundHalfCeilingCopy();
        int int13 = property7.getMinimumValueOverall();
        org.joda.time.DateMidnight dateMidnight14 = property7.withMinimumValue();
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone17 = instant16.getZone();
        org.joda.time.MutableDateTime mutableDateTime18 = instant16.toMutableDateTimeISO();
        int int19 = mutableDateTime18.getYear();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime18.era();
        int int21 = dateMidnight14.compareTo((org.joda.time.ReadableInstant) mutableDateTime18);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime18.setDateTime(13, 4871, 0, 0, 448, (-1645515553), (-1645515480));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 448 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1969 + "'", int19 == 1969);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test11909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11909");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        boolean boolean33 = mutableDateTime16.isEqualNow();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime16.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime36 = property34.set(22);
        mutableDateTime36.addYears(7361852);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime36.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property39);
    }

    @Test
    public void test11910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11910");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight2.weekOfWeekyear();
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.lang.String str9 = property7.getAsShortText(locale8);
        org.joda.time.DateMidnight dateMidnight10 = property7.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight11 = property7.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1" + "'", str9, "1");
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight11);
    }

    @Test
    public void test11911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11911");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, 0);
        java.lang.String str3 = dateTimeZone2.toString();
        java.util.TimeZone timeZone4 = dateTimeZone2.toTimeZone();
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfHalfday();
        long long14 = dateTimeField12.roundHalfFloor(0L);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        int int16 = dateTimeField12.getMaximumShortTextLength(locale15);
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale20 = locale19.stripExtensions();
        java.lang.String str21 = locale17.getDisplayName(locale19);
        java.lang.String str22 = locale15.getDisplayLanguage(locale17);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone4, locale15);
        java.util.TimeZone.setDefault(timeZone4);
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTime((org.joda.time.ReadableInstant) instant29);
        org.joda.time.Chronology chronology31 = instant29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.clockhourOfHalfday();
        long long34 = dateTimeField32.roundHalfFloor(0L);
        java.util.Locale locale35 = java.util.Locale.TRADITIONAL_CHINESE;
        int int36 = dateTimeField32.getMaximumShortTextLength(locale35);
        java.util.Locale locale37 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale38 = locale37.stripExtensions();
        java.util.Locale locale39 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale40 = locale39.stripExtensions();
        java.lang.String str41 = locale37.getDisplayName(locale39);
        java.lang.String str42 = locale35.getDisplayLanguage(locale37);
        java.lang.String str43 = locale35.toLanguageTag();
        java.util.Calendar calendar44 = java.util.Calendar.getInstance(timeZone4, locale35);
        java.time.ZoneId zoneId45 = timeZone4.toZoneId();
        java.util.TimeZone timeZone46 = java.util.TimeZone.getTimeZone(zoneId45);
        java.util.Calendar calendar47 = java.util.Calendar.getInstance(timeZone46);
        java.util.Calendar.Builder builder48 = new java.util.Calendar.Builder();
        java.util.Calendar calendar49 = builder48.build();
        java.util.TimeZone timeZone50 = calendar49.getTimeZone();
        timeZone50.setID("java.util.GregorianCalendar[time=-1820052000000,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=null,firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1912,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=120,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        boolean boolean53 = timeZone46.hasSameRules(timeZone50);
        int int54 = timeZone50.getDSTSavings();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+10:00" + "'", str3, "+10:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str21, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u4e2d\u6587" + "'", str22, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645515173659,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=32,SECOND=53,MILLISECOND=659,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str41, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u4e2d\u6587" + "'", str42, "\u4e2d\u6587");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "zh-TW" + "'", str43, "zh-TW");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=1645515173659,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=32,SECOND=53,MILLISECOND=659,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(zoneId45);
        org.junit.Assert.assertNotNull(timeZone46);
        org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(calendar47);
// flaky:         org.junit.Assert.assertEquals(calendar47.toString(), "java.util.GregorianCalendar[time=1645515173659,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=32,SECOND=53,MILLISECOND=659,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"java.util.GregorianCalendar[time=-1820052000000,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=null,firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1912,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=120,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=5,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
    }

    @Test
    public void test11912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11912");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.DateTime dateTime11 = dateTime8.plusMillis((int) (byte) 0);
        org.joda.time.DateTime.Property property12 = dateTime11.weekOfWeekyear();
        org.joda.time.DateTime dateTime14 = dateTime11.withYear(7359830);
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime21 = timeOfDay18.toDateTime((org.joda.time.ReadableInstant) instant20);
        org.joda.time.Chronology chronology22 = instant20.getChronology();
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime28 = timeOfDay25.toDateTime((org.joda.time.ReadableInstant) instant27);
        int[] intArray30 = chronology22.get((org.joda.time.ReadablePartial) timeOfDay25, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(0L, chronology22);
        mutableDateTime31.setYear(3);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone36 = instant35.getZone();
        mutableDateTime31.setZone(dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(dateTimeZone36);
        org.joda.time.TimeOfDay timeOfDay42 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant44 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime45 = timeOfDay42.toDateTime((org.joda.time.ReadableInstant) instant44);
        org.joda.time.Chronology chronology46 = instant44.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.clockhourOfHalfday();
        org.joda.time.DurationField durationField48 = chronology46.eras();
        org.joda.time.DateTimeField dateTimeField49 = chronology46.dayOfYear();
        org.joda.time.DateTimeField dateTimeField50 = chronology46.dayOfMonth();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.TimeOfDay timeOfDay55 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant57 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime58 = timeOfDay55.toDateTime((org.joda.time.ReadableInstant) instant57);
        org.joda.time.Chronology chronology59 = instant57.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.clockhourOfHalfday();
        long long62 = dateTimeField60.roundHalfFloor(0L);
        java.util.Locale locale63 = java.util.Locale.TRADITIONAL_CHINESE;
        int int64 = dateTimeField60.getMaximumShortTextLength(locale63);
        java.lang.String str65 = locale63.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology52, locale63);
        java.util.Locale locale67 = dateTimeParserBucket66.getLocale();
        org.joda.time.TimeOfDay timeOfDay70 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant72 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime73 = timeOfDay70.toDateTime((org.joda.time.ReadableInstant) instant72);
        org.joda.time.Chronology chronology74 = instant72.getChronology();
        org.joda.time.TimeOfDay timeOfDay77 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant79 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime80 = timeOfDay77.toDateTime((org.joda.time.ReadableInstant) instant79);
        int[] intArray82 = chronology74.get((org.joda.time.ReadablePartial) timeOfDay77, (long) (short) -1);
        boolean boolean83 = dateTimeParserBucket66.restoreState((java.lang.Object) (short) -1);
        java.util.Locale locale84 = dateTimeParserBucket66.getLocale();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket87 = new org.joda.time.format.DateTimeParserBucket(9L, chronology46, locale84, (java.lang.Integer) 11, 365);
        java.util.Locale locale88 = dateTimeParserBucket87.getLocale();
        org.joda.time.DateTimeZone dateTimeZone89 = dateTimeParserBucket87.getZone();
        org.joda.time.DateMidnight dateMidnight90 = dateMidnight38.withZoneRetainFields(dateTimeZone89);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone89);
        int int93 = dateTimeZone89.getOffset((-125975037600000L));
        org.joda.time.DateMidnight dateMidnight94 = new org.joda.time.DateMidnight((java.lang.Object) dateTime11, dateTimeZone89);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "zh" + "'", str65, "zh");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTimeZone89);
        org.junit.Assert.assertNotNull(dateMidnight90);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test11913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11913");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        boolean boolean33 = mutableDateTime16.isEqualNow();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime16.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime36 = property34.set(22);
        org.joda.time.MutableDateTime mutableDateTime38 = property34.add((long) 1);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean45 = interval41.abuts((org.joda.time.ReadableInterval) interval44);
        long long46 = interval44.getStartMillis();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean53 = interval49.abuts((org.joda.time.ReadableInterval) interval52);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Interval interval55 = interval52.withDurationBeforeEnd(readableDuration54);
        org.joda.time.Interval interval56 = interval44.overlap((org.joda.time.ReadableInterval) interval52);
        org.joda.time.Duration duration57 = interval52.toDuration();
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval63 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean64 = interval60.abuts((org.joda.time.ReadableInterval) interval63);
        long long65 = interval63.getStartMillis();
        org.joda.time.Interval interval68 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval71 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean72 = interval68.abuts((org.joda.time.ReadableInterval) interval71);
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Interval interval74 = interval71.withDurationBeforeEnd(readableDuration73);
        org.joda.time.Interval interval75 = interval63.overlap((org.joda.time.ReadableInterval) interval71);
        org.joda.time.Duration duration76 = interval71.toDuration();
        org.joda.time.Duration duration77 = duration76.toDuration();
        boolean boolean78 = duration57.isEqual((org.joda.time.ReadableDuration) duration77);
        org.joda.time.Duration duration79 = duration77.toDuration();
        mutableDateTime38.add((org.joda.time.ReadableDuration) duration77);
        mutableDateTime38.addWeeks((-1645515350));
        mutableDateTime38.addDays(26775814);
        mutableDateTime38.setDate((long) 39);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNull(interval56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNull(interval75);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(duration79);
    }

    @Test
    public void test11914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11914");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate0.minusMonths((int) (short) 10);
        int int7 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate.Property property8 = localDate0.year();
        org.joda.time.LocalDate localDate9 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate11 = localDate9.plusDays((int) (short) 0);
        org.joda.time.DateTime dateTime12 = localDate11.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(26754);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test11915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11915");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.minuteOfHour();
        java.lang.String str4 = property3.getAsShortText();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.TimeOfDay timeOfDay7 = property3.addNoWrapToCopy(100);
        java.util.Locale locale8 = java.util.Locale.TRADITIONAL_CHINESE;
        int int9 = property3.getMaximumTextLength(locale8);
        org.joda.time.TimeOfDay timeOfDay10 = property3.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.minusMillis(1969);
        int int13 = timeOfDay10.getHourOfDay();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime21 = timeOfDay18.toDateTime((org.joda.time.ReadableInstant) instant20);
        org.joda.time.Chronology chronology22 = instant20.getChronology();
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant27 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime28 = timeOfDay25.toDateTime((org.joda.time.ReadableInstant) instant27);
        int[] intArray30 = chronology22.get((org.joda.time.ReadablePartial) timeOfDay25, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(0L, chronology22);
        mutableDateTime31.setYear(3);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone36 = instant35.getZone();
        mutableDateTime31.setZone(dateTimeZone36);
        java.util.Locale locale39 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale40 = locale39.stripExtensions();
        java.util.Locale locale41 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale42 = locale41.stripExtensions();
        java.lang.String str43 = locale39.getDisplayName(locale41);
        java.lang.String str44 = dateTimeZone36.getName(100L, locale41);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(0L, dateTimeZone36);
        org.joda.time.LocalTime localTime46 = dateTime45.toLocalTime();
        java.util.Calendar.Builder builder47 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder49 = builder47.setInstant((long) 3);
        java.util.Calendar.Builder builder51 = builder49.setLenient(false);
        java.util.Locale locale52 = java.util.Locale.ROOT;
        java.util.Calendar.Builder builder53 = builder49.setLocale(locale52);
        java.util.Calendar calendar54 = builder53.build();
        org.joda.time.TimeOfDay timeOfDay55 = org.joda.time.TimeOfDay.fromCalendarFields(calendar54);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = timeOfDay55.getFieldType(0);
        int int58 = dateTime45.get(dateTimeFieldType57);
        org.joda.time.DurationFieldType durationFieldType59 = dateTimeFieldType57.getDurationType();
        boolean boolean60 = timeOfDay10.isSupported(dateTimeFieldType57);
        org.joda.time.LocalTime localTime62 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime.Property property63 = localTime62.hourOfDay();
        int int64 = property63.getMinimumValue();
        org.joda.time.LocalTime localTime65 = property63.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime67 = property63.addCopy((long) (-1645515260));
        org.joda.time.LocalTime localTime69 = localTime67.minusSeconds(26699276);
        int int70 = localTime67.size();
        org.joda.time.Instant instant71 = new org.joda.time.Instant();
        org.joda.time.Instant instant73 = instant71.withMillis((long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime74 = instant71.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime75 = instant71.toMutableDateTime();
        mutableDateTime75.setMillis(0L);
        org.joda.time.Interval interval80 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval83 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean84 = interval80.abuts((org.joda.time.ReadableInterval) interval83);
        long long85 = interval83.getStartMillis();
        org.joda.time.Interval interval88 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean89 = interval88.isBeforeNow();
        org.joda.time.Period period90 = interval88.toPeriod();
        java.lang.String str91 = period90.toString();
        org.joda.time.MutablePeriod mutablePeriod92 = period90.toMutablePeriod();
        org.joda.time.Interval interval93 = interval83.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod92);
        mutableDateTime75.add((org.joda.time.ReadablePeriod) mutablePeriod92);
        org.joda.time.LocalTime localTime95 = localTime67.minus((org.joda.time.ReadablePeriod) mutablePeriod92);
        org.joda.time.TimeOfDay timeOfDay96 = timeOfDay10.minus((org.joda.time.ReadablePeriod) mutablePeriod92);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1" + "'", str4, "1");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str43, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(calendar54);
        org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=3,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=0,SECOND=0,MILLISECOND=3,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 4 + "'", int70 == 4);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "PT0S" + "'", str91, "PT0S");
        org.junit.Assert.assertNotNull(mutablePeriod92);
        org.junit.Assert.assertNotNull(interval93);
        org.junit.Assert.assertNotNull(localTime95);
        org.junit.Assert.assertNotNull(timeOfDay96);
    }

    @Test
    public void test11916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11916");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone dateTimeZone2 = provider0.getZone("1970-01-01T00:00:00.002Z");
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        boolean boolean5 = strSet3.add("26731222");
        java.util.Spliterator<java.lang.String> strSpliterator6 = strSet3.spliterator();
        strSet3.clear();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean14 = interval10.abuts((org.joda.time.ReadableInterval) interval13);
        long long15 = interval13.getStartMillis();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean22 = interval18.abuts((org.joda.time.ReadableInterval) interval21);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Interval interval24 = interval21.withDurationBeforeEnd(readableDuration23);
        org.joda.time.Interval interval25 = interval13.overlap((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Duration duration26 = interval21.toDuration();
        org.joda.time.Duration duration27 = duration26.toDuration();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean34 = interval30.abuts((org.joda.time.ReadableInterval) interval33);
        long long35 = interval33.getStartMillis();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean42 = interval38.abuts((org.joda.time.ReadableInterval) interval41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Interval interval44 = interval41.withDurationBeforeEnd(readableDuration43);
        org.joda.time.Interval interval45 = interval33.overlap((org.joda.time.ReadableInterval) interval41);
        org.joda.time.Duration duration46 = interval41.toDuration();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean53 = interval49.abuts((org.joda.time.ReadableInterval) interval52);
        long long54 = interval52.getStartMillis();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean61 = interval57.abuts((org.joda.time.ReadableInterval) interval60);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Interval interval63 = interval60.withDurationBeforeEnd(readableDuration62);
        org.joda.time.Interval interval64 = interval52.overlap((org.joda.time.ReadableInterval) interval60);
        org.joda.time.Duration duration65 = interval60.toDuration();
        org.joda.time.Duration duration66 = duration65.toDuration();
        boolean boolean67 = duration46.isEqual((org.joda.time.ReadableDuration) duration66);
        boolean boolean68 = duration27.isShorterThan((org.joda.time.ReadableDuration) duration66);
        org.joda.time.Period period69 = duration66.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod70 = period69.toMutablePeriod();
        java.lang.String str71 = mutablePeriod70.toString();
        org.joda.time.MutablePeriod[] mutablePeriodArray72 = new org.joda.time.MutablePeriod[] { mutablePeriod70 };
        org.joda.time.MutablePeriod[] mutablePeriodArray73 = strSet3.toArray(mutablePeriodArray72);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strSpliterator6);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNull(interval25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNull(interval45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNull(interval64);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(mutablePeriod70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "PT0S" + "'", str71, "PT0S");
        org.junit.Assert.assertNotNull(mutablePeriodArray72);
        org.junit.Assert.assertNotNull(mutablePeriodArray73);
    }

    @Test
    public void test11917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11917");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.property(dateTimeFieldType3);
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusWeeks((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight11.minusWeeks(0);
        long long16 = property4.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.DateMidnight.Property property17 = dateMidnight15.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((java.lang.Object) dateMidnight15);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMonths(3);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.minusMillis((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.withCenturyOfEra(1979);
        org.joda.time.LocalDateTime.Property property26 = localDateTime20.era();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
    }

    @Test
    public void test11918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11918");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.dayOfYear();
        int int6 = dateMidnight4.getDayOfYear();
        int int7 = dateMidnight4.getEra();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.minusYears((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone10 = dateMidnight9.getZone();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate(dateTimeZone10);
        int int12 = localDate11.getYearOfEra();
        java.util.Date date13 = localDate11.toDate();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(date13);
        org.junit.Assert.assertEquals(date13.toString(), "Tue Feb 22 00:00:00 GMT+10:00 2022");
    }

    @Test
    public void test11919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11919");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime3 = localTime1.minusMinutes((int) (short) 1);
        org.joda.time.LocalTime localTime5 = localTime1.withMillisOfDay((int) (byte) 1);
        org.joda.time.LocalTime.Property property6 = localTime1.minuteOfHour();
        org.joda.time.LocalTime localTime8 = property6.addCopy(0);
        org.joda.time.LocalTime localTime9 = property6.roundFloorCopy();
        org.joda.time.LocalTime localTime11 = property6.addCopy((-48));
        org.joda.time.LocalTime localTime12 = property6.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime14 = localTime12.plusSeconds(176);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test11920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11920");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight2.weekOfWeekyear();
        java.lang.String str8 = property7.getAsString();
        org.joda.time.DateMidnight dateMidnight9 = property7.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight11 = property7.addToCopy((-1645515439));
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
    }

    @Test
    public void test11921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11921");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 3);
        java.util.Calendar.Builder builder4 = builder2.setLenient(false);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, 0);
        java.lang.String str8 = dateTimeZone7.toString();
        java.util.TimeZone timeZone9 = dateTimeZone7.toTimeZone();
        java.util.Calendar.Builder builder10 = builder2.setTimeZone(timeZone9);
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime17 = timeOfDay14.toDateTime((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Chronology chronology18 = instant16.getChronology();
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant23 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime24 = timeOfDay21.toDateTime((org.joda.time.ReadableInstant) instant23);
        int[] intArray26 = chronology18.get((org.joda.time.ReadablePartial) timeOfDay21, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(0L, chronology18);
        int int28 = mutableDateTime27.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime27.property(dateTimeFieldType29);
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime36 = timeOfDay33.toDateTime((org.joda.time.ReadableInstant) instant35);
        org.joda.time.Chronology chronology37 = instant35.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.clockhourOfHalfday();
        long long40 = dateTimeField38.roundHalfFloor(0L);
        java.util.Locale locale41 = java.util.Locale.TRADITIONAL_CHINESE;
        int int42 = dateTimeField38.getMaximumShortTextLength(locale41);
        java.util.Locale locale43 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale44 = locale43.stripExtensions();
        java.util.Locale locale45 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale46 = locale45.stripExtensions();
        java.lang.String str47 = locale43.getDisplayName(locale45);
        java.lang.String str48 = locale41.getDisplayLanguage(locale43);
        java.util.Calendar calendar49 = mutableDateTime27.toCalendar(locale43);
        int int50 = calendar49.getWeekYear();
        calendar49.set((int) (byte) -1, (int) (byte) 100, 0, 8, (int) (short) 100);
        int int58 = calendar49.getGreatestMinimum(10);
        calendar49.set(312, (int) (short) 1, 6, (-1645515289), 1);
        java.util.TimeZone timeZone65 = calendar49.getTimeZone();
        java.util.Date date66 = calendar49.getTime();
        java.util.Calendar.Builder builder67 = builder2.setInstant(date66);
        java.util.Calendar calendar68 = builder67.build();
        java.lang.String str69 = calendar68.getCalendarType();
        int int70 = calendar68.getFirstDayOfWeek();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+10:00" + "'", str8, "+10:00");
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str47, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "\u4e2d\u6587" + "'", str48, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar49);
        org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=-5976173350740000,areFieldsSet=true,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=187405,MONTH=5,WEEK_OF_YEAR=25,WEEK_OF_MONTH=3,DAY_OF_MONTH=16,DAY_OF_YEAR=168,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=1,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1970 + "'", int50 == 1970);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(timeZone65);
        org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Thu Jun 17 09:01:00 GMT+10:00 187405");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(calendar68);
        org.junit.Assert.assertEquals(calendar68.toString(), "java.util.GregorianCalendar[time=-5976173350740000,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=187405,MONTH=5,WEEK_OF_YEAR=25,WEEK_OF_MONTH=3,DAY_OF_MONTH=17,DAY_OF_YEAR=169,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=1,SECOND=0,MILLISECOND=0,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "gregory" + "'", str69, "gregory");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test11922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11922");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.DateTime dateTime11 = dateTime8.plusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime13 = dateTime8.withMillis((long) (-46800000));
        org.joda.time.LocalDateTime localDateTime14 = dateTime13.toLocalDateTime();
        org.joda.time.DateTime.Property property15 = dateTime13.weekyear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test11923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11923");
        org.joda.time.DateMidnight dateMidnight0 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone1 = dateMidnight0.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DateMidnight.Property property3 = dateMidnight0.property(dateTimeFieldType2);
        org.joda.time.DateMidnight dateMidnight4 = property3.withMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight4);
    }

    @Test
    public void test11924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11924");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfHalfday();
        long long11 = dateTimeField9.roundHalfFloor(0L);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        int int13 = dateTimeField9.getMaximumShortTextLength(locale12);
        java.lang.String str14 = locale12.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology1, locale12);
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        boolean boolean32 = dateTimeParserBucket15.restoreState((java.lang.Object) (short) -1);
        java.util.Locale locale33 = dateTimeParserBucket15.getLocale();
        org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant38 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime39 = timeOfDay36.toDateTime((org.joda.time.ReadableInstant) instant38);
        org.joda.time.Chronology chronology40 = instant38.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.clockhourOfHalfday();
        org.joda.time.DurationField durationField42 = chronology40.eras();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone44 = chronology40.getZone();
        dateTimeParserBucket15.setZone(dateTimeZone44);
        dateTimeParserBucket15.setOffset((java.lang.Integer) 1969);
        org.joda.time.Chronology chronology48 = dateTimeParserBucket15.getChronology();
        long long51 = dateTimeParserBucket15.computeMillis(false, "19");
        java.util.Locale locale52 = dateTimeParserBucket15.getLocale();
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1970L) + "'", long51 == (-1970L));
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
    }

    @Test
    public void test11925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11925");
        org.joda.time.Instant instant2 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone3 = instant2.getZone();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone3);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.monthOfYear();
        int int6 = mutableDateTime4.getMillisOfSecond();
        mutableDateTime4.addYears(3);
        mutableDateTime4.addMonths(60000);
        mutableDateTime4.addYears(26702386);
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant19 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime20 = timeOfDay17.toDateTime((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Chronology chronology21 = instant19.getChronology();
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime27 = timeOfDay24.toDateTime((org.joda.time.ReadableInstant) instant26);
        int[] intArray29 = chronology21.get((org.joda.time.ReadablePartial) timeOfDay24, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(0L, chronology21);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (-1), chronology21);
        org.joda.time.DateTime dateTime32 = dateTime31.toDateTime();
        org.joda.time.DateTime dateTime34 = dateTime32.withWeekyear((-1));
        boolean boolean35 = mutableDateTime4.isEqual((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime36 = dateTime34.toDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test11926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11926");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime16.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime19 = property18.roundHalfEven();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime21 = property18.set("07:30:35.775");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"07:30:35.775\" for yearOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
    }

    @Test
    public void test11927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11927");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusMonths((int) (short) -1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean6 = localDate4.isSupported(dateTimeFieldType5);
        int int7 = yearMonthDay1.indexOf(dateTimeFieldType5);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay1.minusYears(1970);
        int int10 = yearMonthDay9.getYear();
        int int11 = yearMonthDay9.getYear();
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test11928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11928");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        java.lang.Object obj17 = mutableDateTime16.clone();
        int int18 = mutableDateTime16.getMinuteOfHour();
        mutableDateTime16.addMinutes((int) (byte) 10);
        mutableDateTime16.setMillis(0L);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime16.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime25 = property23.add((int) 'a');
        org.joda.time.MutableDateTime mutableDateTime26 = property23.roundHalfFloor();
        int int27 = mutableDateTime26.getWeekyear();
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant32 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime33 = timeOfDay30.toDateTime((org.joda.time.ReadableInstant) instant32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime36 = dateTime33.withDurationAdded(readableDuration34, (int) (short) 1);
        org.joda.time.TimeOfDay timeOfDay37 = dateTime36.toTimeOfDay();
        org.joda.time.DateTime.Property property38 = dateTime36.centuryOfEra();
        org.joda.time.DateTime dateTime39 = property38.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay43 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant45 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime46 = timeOfDay43.toDateTime((org.joda.time.ReadableInstant) instant45);
        org.joda.time.Chronology chronology47 = instant45.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.clockhourOfHalfday();
        org.joda.time.DurationField durationField49 = chronology47.eras();
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType40.getField(chronology47);
        org.joda.time.DateTimeField dateTimeField51 = chronology47.hourOfDay();
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime(chronology47);
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone54);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight55.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.minusWeeks((int) (short) 100);
        org.joda.time.DateMidnight.Property property61 = dateMidnight60.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean63 = dateMidnight60.isSupported(dateTimeFieldType62);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay68 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant70 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime71 = timeOfDay68.toDateTime((org.joda.time.ReadableInstant) instant70);
        org.joda.time.Chronology chronology72 = instant70.getChronology();
        org.joda.time.DateTimeField dateTimeField73 = chronology72.clockhourOfHalfday();
        org.joda.time.DurationField durationField74 = chronology72.eras();
        org.joda.time.DateTimeField dateTimeField75 = dateTimeFieldType65.getField(chronology72);
        org.joda.time.DateTimeField dateTimeField76 = chronology72.hourOfDay();
        org.joda.time.LocalTime localTime77 = new org.joda.time.LocalTime((long) 22, chronology72);
        org.joda.time.DateTimeField dateTimeField78 = dateTimeFieldType62.getField(chronology72);
        int int79 = localTime52.indexOf(dateTimeFieldType62);
        org.joda.time.DateTime dateTime81 = dateTime39.withField(dateTimeFieldType62, (int) 'a');
        org.joda.time.DateTime dateTime84 = dateTime81.withDurationAdded((long) 9, 466);
        mutableDateTime26.setMillis((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.DateTime.Property property86 = dateTime84.minuteOfHour();
        org.joda.time.LocalTime localTime88 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime90 = localTime88.minusMinutes((int) (short) 1);
        org.joda.time.LocalTime localTime92 = localTime88.withMillisOfDay((int) (byte) 1);
        org.joda.time.LocalTime.Property property93 = localTime88.minuteOfHour();
        org.joda.time.LocalTime localTime95 = property93.addCopy(0);
        org.joda.time.LocalTime localTime96 = property93.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime97 = property93.roundFloorCopy();
        org.joda.time.LocalTime localTime98 = property93.roundHalfEvenCopy();
        boolean boolean99 = property86.equals((java.lang.Object) property93);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1970 + "'", int27 == 1970);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-1) + "'", int79 == (-1));
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(localTime88);
        org.junit.Assert.assertNotNull(localTime90);
        org.junit.Assert.assertNotNull(localTime92);
        org.junit.Assert.assertNotNull(property93);
        org.junit.Assert.assertNotNull(localTime95);
        org.junit.Assert.assertNotNull(localTime96);
        org.junit.Assert.assertNotNull(localTime97);
        org.junit.Assert.assertNotNull(localTime98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test11929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11929");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 3);
        java.util.Calendar.Builder builder4 = builder2.setLenient(false);
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.util.Calendar.Builder builder6 = builder2.setLocale(locale5);
        java.util.Calendar calendar7 = builder6.build();
        java.util.Date date8 = new java.util.Date();
        int int9 = date8.getTimezoneOffset();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromDateFields(date8);
        int int11 = date8.getDay();
        int int12 = date8.getHours();
        java.util.Calendar.Builder builder13 = builder6.setInstant(date8);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder18 = builder6.setTimeOfDay(17, (-1645515420), 75, 26703592);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: instant has been set");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(calendar7);
        org.junit.Assert.assertEquals(calendar7.toString(), "java.util.GregorianCalendar[time=3,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=0,SECOND=0,MILLISECOND=3,ZONE_OFFSET=36000000,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Tue Feb 22 17:32:54 GMT+10:00 2022");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-600) + "'", int9 == (-600));
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 17 + "'", int12 == 17);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test11930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11930");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(10, 0);
        java.lang.String str3 = dateTimeZone2.toString();
        java.util.TimeZone timeZone4 = dateTimeZone2.toTimeZone();
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfHalfday();
        long long14 = dateTimeField12.roundHalfFloor(0L);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        int int16 = dateTimeField12.getMaximumShortTextLength(locale15);
        java.util.Locale locale17 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.util.Locale locale19 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale20 = locale19.stripExtensions();
        java.lang.String str21 = locale17.getDisplayName(locale19);
        java.lang.String str22 = locale15.getDisplayLanguage(locale17);
        java.util.Calendar calendar23 = java.util.Calendar.getInstance(timeZone4, locale15);
        java.util.TimeZone.setDefault(timeZone4);
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime31 = timeOfDay28.toDateTime((org.joda.time.ReadableInstant) instant30);
        org.joda.time.Chronology chronology32 = instant30.getChronology();
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant37 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime38 = timeOfDay35.toDateTime((org.joda.time.ReadableInstant) instant37);
        int[] intArray40 = chronology32.get((org.joda.time.ReadablePartial) timeOfDay35, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(0L, chronology32);
        org.joda.time.TimeOfDay timeOfDay44 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant46 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime47 = timeOfDay44.toDateTime((org.joda.time.ReadableInstant) instant46);
        org.joda.time.Chronology chronology48 = instant46.getChronology();
        org.joda.time.TimeOfDay timeOfDay51 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant53 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime54 = timeOfDay51.toDateTime((org.joda.time.ReadableInstant) instant53);
        int[] intArray56 = chronology48.get((org.joda.time.ReadablePartial) timeOfDay51, (long) (short) -1);
        mutableDateTime41.setChronology(chronology48);
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime(chronology48);
        org.joda.time.DateTimeField dateTimeField59 = chronology48.weekOfWeekyear();
        java.util.Locale locale61 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale62 = locale61.stripExtensions();
        java.util.Locale locale63 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale64 = locale63.stripExtensions();
        java.lang.String str65 = locale61.getDisplayName(locale63);
        java.lang.String str66 = dateTimeField59.getAsText(2022, locale61);
        java.util.Calendar calendar67 = java.util.Calendar.getInstance(timeZone4, locale61);
        java.util.TimeZone timeZone68 = calendar67.getTimeZone();
        long long69 = calendar67.getTimeInMillis();
        // The following exception was thrown during execution in test generation
        try {
            int int71 = calendar67.getMinimum((-1645515312));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1645515312");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+10:00" + "'", str3, "+10:00");
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+10:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str21, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\u4e2d\u6587" + "'", str22, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645515174092,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=32,SECOND=54,MILLISECOND=92,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str65, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2022" + "'", str66, "2022");
        org.junit.Assert.assertNotNull(calendar67);
// flaky:         org.junit.Assert.assertEquals(calendar67.toString(), "java.util.GregorianCalendar[time=1645515174092,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+10:00\",offset=36000000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=32,SECOND=54,MILLISECOND=92,ZONE_OFFSET=36000000,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone68);
        org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "GMT+10:00");
// flaky:         org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1645515174092L + "'", long69 == 1645515174092L);
    }

    @Test
    public void test11931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11931");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime3.minus(readableDuration9);
        org.joda.time.DateTime dateTime12 = dateTime3.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime13 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime3.minus(readableDuration14);
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean22 = interval18.abuts((org.joda.time.ReadableInterval) interval21);
        long long23 = interval21.getStartMillis();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean30 = interval26.abuts((org.joda.time.ReadableInterval) interval29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Interval interval32 = interval29.withDurationBeforeEnd(readableDuration31);
        org.joda.time.Interval interval33 = interval21.overlap((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Duration duration34 = interval29.toDuration();
        org.joda.time.Duration duration35 = duration34.toDuration();
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean42 = interval38.abuts((org.joda.time.ReadableInterval) interval41);
        long long43 = interval41.getStartMillis();
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean50 = interval46.abuts((org.joda.time.ReadableInterval) interval49);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Interval interval52 = interval49.withDurationBeforeEnd(readableDuration51);
        org.joda.time.Interval interval53 = interval41.overlap((org.joda.time.ReadableInterval) interval49);
        org.joda.time.Duration duration54 = interval49.toDuration();
        org.joda.time.Interval interval57 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean61 = interval57.abuts((org.joda.time.ReadableInterval) interval60);
        long long62 = interval60.getStartMillis();
        org.joda.time.Interval interval65 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval68 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean69 = interval65.abuts((org.joda.time.ReadableInterval) interval68);
        org.joda.time.ReadableDuration readableDuration70 = null;
        org.joda.time.Interval interval71 = interval68.withDurationBeforeEnd(readableDuration70);
        org.joda.time.Interval interval72 = interval60.overlap((org.joda.time.ReadableInterval) interval68);
        org.joda.time.Duration duration73 = interval68.toDuration();
        org.joda.time.Duration duration74 = duration73.toDuration();
        boolean boolean75 = duration54.isEqual((org.joda.time.ReadableDuration) duration74);
        boolean boolean76 = duration35.isShorterThan((org.joda.time.ReadableDuration) duration74);
        org.joda.time.Period period77 = duration35.toPeriod();
        org.joda.time.DateTime dateTime78 = dateTime3.plus((org.joda.time.ReadableDuration) duration35);
        org.joda.time.YearMonthDay yearMonthDay80 = new org.joda.time.YearMonthDay(0L);
        java.lang.String str81 = yearMonthDay80.toString();
        org.joda.time.DateTime dateTime82 = yearMonthDay80.toDateTimeAtMidnight();
        org.joda.time.DateMidnight dateMidnight83 = yearMonthDay80.toDateMidnight();
        org.joda.time.MutableDateTime mutableDateTime84 = dateMidnight83.toMutableDateTime();
        org.joda.time.Interval interval85 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration35, (org.joda.time.ReadableInstant) mutableDateTime84);
        java.lang.String str86 = duration35.toString();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNull(interval33);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNull(interval53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(interval71);
        org.junit.Assert.assertNull(interval72);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "1970-01-01" + "'", str81, "1970-01-01");
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertNotNull(mutableDateTime84);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "PT0S" + "'", str86, "PT0S");
    }

    @Test
    public void test11932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11932");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = null;
        java.lang.String str7 = dateTime5.toString(dateTimeFormatter6);
        org.joda.time.DateTime dateTime9 = dateTime5.minusYears(2022);
        org.joda.time.DateTime.Property property10 = dateTime5.minuteOfHour();
        org.joda.time.DateTime dateTime12 = property10.addToCopy(5);
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone14 = dateMidnight13.getZone();
        int int16 = dateTimeZone14.getStandardOffset((-6048000000L));
        org.joda.time.DateTime dateTime17 = dateTime12.withZone(dateTimeZone14);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getTimeZone("0493-02-01");
        java.util.Locale locale21 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Calendar calendar22 = java.util.Calendar.getInstance(timeZone20, locale21);
        java.lang.String str23 = locale21.getLanguage();
        java.lang.String str24 = locale21.getDisplayVariant();
        java.lang.String str25 = dateTimeZone14.getName((long) 38, locale21);
        java.lang.String str26 = locale21.getLanguage();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1969-12-31T00:01:00.000Z" + "'", str7, "1969-12-31T00:01:00.000Z");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1645515174133,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=32,SECOND=54,MILLISECOND=133,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zh" + "'", str23, "zh");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "zh" + "'", str26, "zh");
    }

    @Test
    public void test11933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11933");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.clockhourOfHalfday();
        org.joda.time.DurationField durationField9 = chronology7.eras();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = chronology7.getZone();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.clockhourOfDay();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(3098892765600052L, chronology7);
        boolean boolean14 = dateTime13.isBeforeNow();
        org.joda.time.DateTime dateTime16 = dateTime13.minusYears(87);
        int int17 = dateTime13.getMonthOfYear();
        org.joda.time.DateTime dateTime19 = dateTime13.plusMonths((-1645515280));
        org.joda.time.DateTime.Property property20 = dateTime19.secondOfDay();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test11934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11934");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight2.weekOfWeekyear();
        java.lang.String str8 = property7.getAsString();
        java.util.Locale locale9 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str10 = property7.getAsShortText(locale9);
        org.joda.time.DateMidnight dateMidnight11 = property7.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight13 = property7.addToCopy(2L);
        org.joda.time.DateTimeField dateTimeField14 = property7.getField();
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime.Property property17 = localTime16.hourOfDay();
        org.joda.time.LocalTime localTime18 = property17.roundFloorCopy();
        org.joda.time.LocalTime localTime19 = property17.roundHalfCeilingCopy();
        int[] intArray20 = localTime19.getValues();
        org.joda.time.LocalTime.Property property21 = localTime19.minuteOfHour();
        java.util.Locale locale25 = new java.util.Locale("\u4e0a\u5348 12:00:00", "monthOfYear");
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property29 = timeOfDay28.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property29.getFieldType();
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime37 = timeOfDay34.toDateTime((org.joda.time.ReadableInstant) instant36);
        org.joda.time.Chronology chronology38 = instant36.getChronology();
        org.joda.time.TimeOfDay timeOfDay41 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime44 = timeOfDay41.toDateTime((org.joda.time.ReadableInstant) instant43);
        int[] intArray46 = chronology38.get((org.joda.time.ReadablePartial) timeOfDay41, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(0L, chronology38);
        org.joda.time.TimeOfDay timeOfDay50 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime53 = timeOfDay50.toDateTime((org.joda.time.ReadableInstant) instant52);
        org.joda.time.Chronology chronology54 = instant52.getChronology();
        org.joda.time.TimeOfDay timeOfDay57 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant59 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime60 = timeOfDay57.toDateTime((org.joda.time.ReadableInstant) instant59);
        int[] intArray62 = chronology54.get((org.joda.time.ReadablePartial) timeOfDay57, (long) (short) -1);
        mutableDateTime47.setChronology(chronology54);
        boolean boolean64 = mutableDateTime47.isEqualNow();
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime47.secondOfDay();
        mutableDateTime47.setMillisOfDay((int) (short) 100);
        boolean boolean68 = property29.equals((java.lang.Object) mutableDateTime47);
        org.joda.time.TimeOfDay timeOfDay70 = property29.addNoWrapToCopy(5);
        org.joda.time.TimeOfDay timeOfDay73 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant75 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime76 = timeOfDay73.toDateTime((org.joda.time.ReadableInstant) instant75);
        org.joda.time.Chronology chronology77 = instant75.getChronology();
        org.joda.time.DateTimeField dateTimeField78 = chronology77.clockhourOfHalfday();
        long long80 = dateTimeField78.roundHalfFloor(0L);
        java.util.Locale locale81 = java.util.Locale.TRADITIONAL_CHINESE;
        int int82 = dateTimeField78.getMaximumShortTextLength(locale81);
        int int83 = property29.getMaximumTextLength(locale81);
        java.lang.String str84 = locale25.getDisplayLanguage(locale81);
        java.lang.String str85 = dateTimeField14.getAsText((org.joda.time.ReadablePartial) localTime19, 199, locale81);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals(locale25.toString(), "\u4e0a\u5348 12:00:00_MONTHOFYEAR");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(timeOfDay70);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\u4e0a\u5348 12:00:00" + "'", str84, "\u4e0a\u5348 12:00:00");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "199" + "'", str85, "199");
    }

    @Test
    public void test11935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11935");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.property(dateTimeFieldType3);
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight8.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.minusWeeks((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight11.minusWeeks(0);
        long long16 = property4.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.LocalDateTime localDateTime17 = property4.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime18 = property4.withMaximumValue();
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime20 = property19.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay22.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay.Property property25 = yearMonthDay24.monthOfYear();
        int int26 = property25.get();
        org.joda.time.YearMonthDay yearMonthDay28 = property25.addWrapFieldToCopy(4);
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.withYear(24);
        org.joda.time.Interval interval31 = yearMonthDay28.toInterval();
        org.joda.time.Chronology chronology32 = interval31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.minuteOfDay();
        org.joda.time.Chronology chronology34 = chronology32.withUTC();
        org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.now(chronology34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval36 = new org.joda.time.Interval((java.lang.Object) property19, chronology34);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.LocalDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 52L + "'", long16 == 52L);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(localDate35);
    }

    @Test
    public void test11936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11936");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight2.weekOfWeekyear();
        java.lang.String str8 = property7.getAsString();
        java.util.Locale locale9 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str10 = property7.getAsShortText(locale9);
        org.joda.time.DateMidnight dateMidnight11 = property7.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight13 = property7.addToCopy(2L);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean20 = interval16.abuts((org.joda.time.ReadableInterval) interval19);
        long long21 = interval19.getStartMillis();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean28 = interval24.abuts((org.joda.time.ReadableInterval) interval27);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.Interval interval30 = interval27.withDurationBeforeEnd(readableDuration29);
        org.joda.time.Interval interval31 = interval19.overlap((org.joda.time.ReadableInterval) interval27);
        org.joda.time.Duration duration32 = interval27.toDuration();
        org.joda.time.Duration duration33 = duration32.toDuration();
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean40 = interval36.abuts((org.joda.time.ReadableInterval) interval39);
        long long41 = interval39.getStartMillis();
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean48 = interval44.abuts((org.joda.time.ReadableInterval) interval47);
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.Interval interval50 = interval47.withDurationBeforeEnd(readableDuration49);
        org.joda.time.Interval interval51 = interval39.overlap((org.joda.time.ReadableInterval) interval47);
        org.joda.time.Duration duration52 = interval47.toDuration();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean59 = interval55.abuts((org.joda.time.ReadableInterval) interval58);
        long long60 = interval58.getStartMillis();
        org.joda.time.Interval interval63 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval66 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean67 = interval63.abuts((org.joda.time.ReadableInterval) interval66);
        org.joda.time.ReadableDuration readableDuration68 = null;
        org.joda.time.Interval interval69 = interval66.withDurationBeforeEnd(readableDuration68);
        org.joda.time.Interval interval70 = interval58.overlap((org.joda.time.ReadableInterval) interval66);
        org.joda.time.Duration duration71 = interval66.toDuration();
        org.joda.time.Duration duration72 = duration71.toDuration();
        boolean boolean73 = duration52.isEqual((org.joda.time.ReadableDuration) duration72);
        boolean boolean74 = duration33.isShorterThan((org.joda.time.ReadableDuration) duration72);
        org.joda.time.Period period75 = duration72.toPeriod();
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight13.minus((org.joda.time.ReadablePeriod) period75);
        org.joda.time.DateTimeZone dateTimeZone78 = null;
        org.joda.time.DateMidnight dateMidnight79 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone78);
        int int80 = dateMidnight79.getYearOfCentury();
        org.joda.time.DateMidnight dateMidnight82 = dateMidnight79.minusDays((-1645515262));
        org.joda.time.Interval interval83 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period75, (org.joda.time.ReadableInstant) dateMidnight82);
        org.joda.time.MutableInterval mutableInterval84 = interval83.toMutableInterval();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNull(interval31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNull(interval51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(interval69);
        org.junit.Assert.assertNull(interval70);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 70 + "'", int80 == 70);
        org.junit.Assert.assertNotNull(dateMidnight82);
        org.junit.Assert.assertNotNull(mutableInterval84);
    }

    @Test
    public void test11937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11937");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusMonths((int) (short) -1);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean6 = localDate4.isSupported(dateTimeFieldType5);
        int int7 = yearMonthDay1.indexOf(dateTimeFieldType5);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone10 = instant9.getZone();
        org.joda.time.DateTime dateTime11 = yearMonthDay1.toDateTimeAtCurrentTime(dateTimeZone10);
        int int12 = yearMonthDay1.getMonthOfYear();
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay1.minusDays(70);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay1.minusMonths(122);
        int int17 = yearMonthDay1.size();
        org.joda.time.DateTime dateTime18 = yearMonthDay1.toDateTimeAtCurrentTime();
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay1.withYear(121);
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
    }

    @Test
    public void test11938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11938");
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTime((org.joda.time.ReadableInstant) instant10);
        org.joda.time.Chronology chronology12 = instant10.getChronology();
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime18 = timeOfDay15.toDateTime((org.joda.time.ReadableInstant) instant17);
        int[] intArray20 = chronology12.get((org.joda.time.ReadablePartial) timeOfDay15, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(0L, chronology12);
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant26 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime27 = timeOfDay24.toDateTime((org.joda.time.ReadableInstant) instant26);
        org.joda.time.Chronology chronology28 = instant26.getChronology();
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant33 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime34 = timeOfDay31.toDateTime((org.joda.time.ReadableInstant) instant33);
        int[] intArray36 = chronology28.get((org.joda.time.ReadablePartial) timeOfDay31, (long) (short) -1);
        mutableDateTime21.setChronology(chronology28);
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime(chronology28);
        org.joda.time.DurationField durationField39 = chronology28.weeks();
        org.joda.time.DateTimeField dateTimeField40 = chronology28.clockhourOfDay();
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = java.util.Locale.TAIWAN;
        java.lang.String str44 = locale43.getDisplayName();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket((-1725357600000L), chronology42, locale43);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket(11842658784000010L, chronology28, locale43, (java.lang.Integer) (-1645515450));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay48 = new org.joda.time.TimeOfDay((-1645515634), 781, 26904357, 2030, chronology28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1645515634 for hourOfDay must not be smaller than 0");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Chinese (Taiwan)" + "'", str44, "Chinese (Taiwan)");
    }

    @Test
    public void test11939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11939");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight2.weekOfWeekyear();
        java.lang.String str8 = property7.getAsString();
        java.util.Locale locale9 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str10 = property7.getAsShortText(locale9);
        long long11 = property7.remainder();
        org.joda.time.DateMidnight dateMidnight12 = property7.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight13 = property7.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight14 = property7.withMaximumValue();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 259200000L + "'", long11 == 259200000L);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight14);
    }

    @Test
    public void test11940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11940");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.year();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.minuteOfHour();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean16 = interval12.abuts((org.joda.time.ReadableInterval) interval15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Interval interval18 = interval15.withDurationBeforeEnd(readableDuration17);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean25 = interval21.abuts((org.joda.time.ReadableInterval) interval24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Interval interval27 = interval24.withDurationBeforeEnd(readableDuration26);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean34 = interval30.abuts((org.joda.time.ReadableInterval) interval33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Interval interval36 = interval33.withDurationBeforeEnd(readableDuration35);
        org.joda.time.Period period37 = interval33.toPeriod();
        org.joda.time.Interval interval38 = interval24.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Interval interval39 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period37);
        int[] intArray42 = chronology7.get((org.joda.time.ReadablePeriod) period37, (long) 363, (long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField44 = chronology7.dayOfMonth();
        org.joda.time.TimeOfDay timeOfDay45 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 26723186, chronology7);
        org.joda.time.DateTimeField dateTimeField46 = chronology7.dayOfYear();
        org.joda.time.DurationField durationField47 = chronology7.hours();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, 0, 0, -263]");
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(durationField47);
    }

    @Test
    public void test11941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11941");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder2 = builder0.setInstant((long) 3);
        java.util.Date date6 = new java.util.Date(0, (int) '4', 0);
        int int7 = date6.getMinutes();
        date6.setYear(12);
        java.util.Calendar.Builder builder10 = builder0.setInstant(date6);
        long long11 = date6.getTime();
        java.lang.String str12 = date6.toLocaleString();
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone15 = instant14.getZone();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime19 = dateTime16.withDurationAdded(readableDuration17, (int) (byte) 0);
        org.joda.time.DateTime dateTime21 = dateTime16.minusSeconds((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime16.minus(readableDuration22);
        org.joda.time.DateTime dateTime25 = dateTime16.minusMinutes((-1645515300));
        org.joda.time.DateTime dateTime27 = dateTime16.withCenturyOfEra(888);
        boolean boolean28 = date6.equals((java.lang.Object) dateTime27);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertEquals(date6.toString(), "Tue Apr 30 00:00:00 GMT+10:00 1912");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1820052000000L) + "'", long11 == (-1820052000000L));
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Apr 30, 1912 12:00:00 AM" + "'", str12, "Apr 30, 1912 12:00:00 AM");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test11942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11942");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean6 = interval2.abuts((org.joda.time.ReadableInterval) interval5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Interval interval8 = interval5.withDurationBeforeEnd(readableDuration7);
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean15 = interval11.abuts((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Interval interval17 = interval14.withDurationBeforeEnd(readableDuration16);
        org.joda.time.Period period18 = interval14.toPeriod();
        org.joda.time.Interval interval19 = interval5.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period18);
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder20.setExtension('x', "zh");
        boolean boolean24 = period18.equals((java.lang.Object) builder20);
        java.util.Locale.Builder builder25 = builder20.clear();
        java.util.Locale locale26 = builder25.build();
        java.util.Locale.Builder builder27 = builder25.clearExtensions();
        java.util.Locale.Builder builder28 = builder27.clear();
        java.util.Locale.Builder builder29 = builder28.clear();
        java.util.Locale.Builder builder30 = builder28.clearExtensions();
        java.util.Locale.Builder builder31 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder34 = builder31.setExtension('x', "zh");
        java.util.Locale.Builder builder35 = builder31.clearExtensions();
        java.util.Locale.Builder builder37 = builder31.addUnicodeLocaleAttribute("UTC");
        java.util.Locale.Builder builder38 = builder37.clearExtensions();
        java.util.Locale locale39 = builder37.build();
        java.util.Calendar.Builder builder40 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder42 = builder40.setInstant((long) 3);
        java.util.Calendar.Builder builder46 = builder40.setWeekDate((int) 'a', 30, (int) 'x');
        java.util.Calendar.Builder builder50 = builder40.setDate(312, 12, 2);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.TimeOfDay timeOfDay55 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant57 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime58 = timeOfDay55.toDateTime((org.joda.time.ReadableInstant) instant57);
        org.joda.time.Chronology chronology59 = instant57.getChronology();
        org.joda.time.DateTimeField dateTimeField60 = chronology59.clockhourOfHalfday();
        long long62 = dateTimeField60.roundHalfFloor(0L);
        java.util.Locale locale63 = java.util.Locale.TRADITIONAL_CHINESE;
        int int64 = dateTimeField60.getMaximumShortTextLength(locale63);
        java.lang.String str65 = locale63.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology52, locale63);
        java.lang.String str67 = locale63.getDisplayVariant();
        java.util.Calendar.Builder builder68 = builder50.setLocale(locale63);
        java.lang.String str69 = locale63.getDisplayVariant();
        java.lang.String str70 = locale39.getDisplayVariant(locale63);
        java.util.Locale.Builder builder71 = builder28.setLocale(locale63);
        java.util.Locale.Builder builder72 = builder28.clearExtensions();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "zh" + "'", str65, "zh");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test11943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11943");
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusMinutes(35);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusMinutes((int) (byte) -1);
        org.joda.time.Chronology chronology9 = localDateTime4.getChronology();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 4, chronology9);
        java.util.Locale locale11 = java.util.Locale.ENGLISH;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket(0L, chronology9, locale11, (java.lang.Integer) 1439, (-1645515260));
        java.util.Locale locale15 = dateTimeParserBucket14.getLocale();
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone18 = instant17.getZone();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight21.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight21.withWeekyear(2);
        org.joda.time.DateTimeZone dateTimeZone26 = dateMidnight21.getZone();
        long long28 = dateTimeZone18.getMillisKeepLocal(dateTimeZone26, 10L);
        long long30 = dateTimeZone18.previousTransition((long) 2);
        org.joda.time.DateMidnight dateMidnight31 = org.joda.time.DateMidnight.now(dateTimeZone18);
        dateTimeParserBucket14.setZone(dateTimeZone18);
        long long35 = dateTimeParserBucket14.computeMillis(true, "CAN");
        dateTimeParserBucket14.setOffset(4194);
        org.joda.time.Chronology chronology38 = dateTimeParserBucket14.getChronology();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en");
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 10L + "'", long28 == 10L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 2L + "'", long30 == 2L);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(chronology38);
    }

    @Test
    public void test11944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11944");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight2.weekOfWeekyear();
        java.lang.String str8 = property7.getAsString();
        java.util.Locale locale9 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str10 = property7.getAsShortText(locale9);
        java.lang.String str11 = property7.getName();
        int int12 = property7.get();
        org.joda.time.DateMidnight dateMidnight14 = property7.addToCopy(7L);
        java.util.Locale locale18 = new java.util.Locale("Chinese", "10");
        java.lang.String str19 = locale18.getDisplayScript();
        java.lang.String str20 = locale18.getDisplayName();
        org.joda.time.DateMidnight dateMidnight21 = property7.setCopy("10", locale18);
        org.joda.time.DateMidnight dateMidnight22 = property7.roundCeilingCopy();
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant30 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime31 = timeOfDay28.toDateTime((org.joda.time.ReadableInstant) instant30);
        org.joda.time.Chronology chronology32 = instant30.getChronology();
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant37 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime38 = timeOfDay35.toDateTime((org.joda.time.ReadableInstant) instant37);
        int[] intArray40 = chronology32.get((org.joda.time.ReadablePartial) timeOfDay35, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(0L, chronology32);
        mutableDateTime41.setYear(3);
        org.joda.time.Instant instant45 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone46 = instant45.getZone();
        mutableDateTime41.setZone(dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight(dateTimeZone46);
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime(1L, dateTimeZone46);
        org.joda.time.Chronology chronology50 = localTime49.getChronology();
        org.joda.time.DateTimeField dateTimeField51 = chronology50.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.clockhourOfDay();
        org.joda.time.TimeOfDay timeOfDay53 = new org.joda.time.TimeOfDay(60000L, chronology50);
        org.joda.time.DateTimeField dateTimeField54 = chronology50.yearOfEra();
        org.joda.time.DateTimeField dateTimeField55 = chronology50.year();
        int int56 = dateTimeField55.getMaximumValue();
        long long59 = dateTimeField55.getDifferenceAsLong(1439L, 155524492800000L);
        org.joda.time.DurationField durationField60 = dateTimeField55.getDurationField();
        int int61 = dateMidnight22.get(dateTimeField55);
        int int62 = dateTimeField55.getMinimumValue();
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekOfWeekyear" + "'", str11, "weekOfWeekyear");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertEquals(locale18.toString(), "chinese_10");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "chinese (10)" + "'", str20, "chinese (10)");
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 292278993 + "'", int56 == 292278993);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + (-4928L) + "'", long59 == (-4928L));
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1970 + "'", int61 == 1970);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-292275054) + "'", int62 == (-292275054));
    }

    @Test
    public void test11945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11945");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        boolean boolean33 = mutableDateTime16.isEqualNow();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime16.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight37.withDurationAdded((long) (short) 10, 1);
        mutableDateTime16.setDate((org.joda.time.ReadableInstant) dateMidnight40);
        mutableDateTime16.setMinuteOfHour(0);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime16.era();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean51 = interval47.abuts((org.joda.time.ReadableInterval) interval50);
        long long52 = interval50.getStartMillis();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean59 = interval55.abuts((org.joda.time.ReadableInterval) interval58);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Interval interval61 = interval58.withDurationBeforeEnd(readableDuration60);
        org.joda.time.Interval interval62 = interval50.overlap((org.joda.time.ReadableInterval) interval58);
        org.joda.time.Duration duration63 = interval58.toDuration();
        mutableDateTime16.add((org.joda.time.ReadableDuration) duration63, 1970);
        mutableDateTime16.addMillis(26700803);
        mutableDateTime16.addYears(8);
        org.joda.time.Instant instant71 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone72 = instant71.getZone();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone74);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight75.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight75.withWeekyear(2);
        org.joda.time.DateTimeZone dateTimeZone80 = dateMidnight75.getZone();
        long long82 = dateTimeZone72.getMillisKeepLocal(dateTimeZone80, 10L);
        long long84 = dateTimeZone72.previousTransition((long) 2);
        java.lang.String str86 = dateTimeZone72.getShortName(0L);
        mutableDateTime16.setZoneRetainFields(dateTimeZone72);
        org.joda.time.Chronology chronology88 = mutableDateTime16.getChronology();
        org.joda.time.Chronology chronology89 = chronology88.withUTC();
        org.joda.time.DateTime dateTime90 = org.joda.time.DateTime.now(chronology88);
        org.joda.time.DateTime dateTime92 = dateTime90.plusHours(27115259);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNull(interval62);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateMidnight77);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 10L + "'", long82 == 10L);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 2L + "'", long84 == 2L);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+00:00" + "'", str86, "+00:00");
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime92);
    }

    @Test
    public void test11946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11946");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("18");
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean8 = interval4.abuts((org.joda.time.ReadableInterval) interval7);
        long long9 = interval7.getStartMillis();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean16 = interval12.abuts((org.joda.time.ReadableInterval) interval15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Interval interval18 = interval15.withDurationBeforeEnd(readableDuration17);
        org.joda.time.Interval interval19 = interval7.overlap((org.joda.time.ReadableInterval) interval15);
        org.joda.time.Duration duration20 = interval15.toDuration();
        org.joda.time.Duration duration21 = duration20.toDuration();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval27 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean28 = interval24.abuts((org.joda.time.ReadableInterval) interval27);
        long long29 = interval27.getStartMillis();
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean36 = interval32.abuts((org.joda.time.ReadableInterval) interval35);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.Interval interval38 = interval35.withDurationBeforeEnd(readableDuration37);
        org.joda.time.Interval interval39 = interval27.overlap((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Duration duration40 = interval35.toDuration();
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval46 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean47 = interval43.abuts((org.joda.time.ReadableInterval) interval46);
        long long48 = interval46.getStartMillis();
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval54 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean55 = interval51.abuts((org.joda.time.ReadableInterval) interval54);
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.Interval interval57 = interval54.withDurationBeforeEnd(readableDuration56);
        org.joda.time.Interval interval58 = interval46.overlap((org.joda.time.ReadableInterval) interval54);
        org.joda.time.Duration duration59 = interval54.toDuration();
        org.joda.time.Duration duration60 = duration59.toDuration();
        boolean boolean61 = duration40.isEqual((org.joda.time.ReadableDuration) duration60);
        boolean boolean62 = duration21.isShorterThan((org.joda.time.ReadableDuration) duration60);
        org.joda.time.Interval interval65 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval68 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean69 = interval65.abuts((org.joda.time.ReadableInterval) interval68);
        long long70 = interval68.getStartMillis();
        org.joda.time.Interval interval73 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval76 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean77 = interval73.abuts((org.joda.time.ReadableInterval) interval76);
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.Interval interval79 = interval76.withDurationBeforeEnd(readableDuration78);
        org.joda.time.Interval interval80 = interval68.overlap((org.joda.time.ReadableInterval) interval76);
        org.joda.time.Duration duration81 = interval76.toDuration();
        boolean boolean82 = duration21.isLongerThan((org.joda.time.ReadableDuration) duration81);
        org.joda.time.Period period83 = duration81.toPeriod();
        java.lang.Object obj84 = null;
        boolean boolean85 = period83.equals(obj84);
        org.joda.time.DateTime dateTime87 = dateTime1.withPeriodAdded((org.joda.time.ReadablePeriod) period83, 794);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNull(interval19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNull(interval39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNull(interval58);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNull(interval80);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(dateTime87);
    }

    @Test
    public void test11947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11947");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.year();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfHour();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean15 = interval11.abuts((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Interval interval17 = interval14.withDurationBeforeEnd(readableDuration16);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean24 = interval20.abuts((org.joda.time.ReadableInterval) interval23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Interval interval26 = interval23.withDurationBeforeEnd(readableDuration25);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean33 = interval29.abuts((org.joda.time.ReadableInterval) interval32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Interval interval35 = interval32.withDurationBeforeEnd(readableDuration34);
        org.joda.time.Period period36 = interval32.toPeriod();
        org.joda.time.Interval interval37 = interval23.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Interval interval38 = interval14.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period36);
        int[] intArray41 = chronology6.get((org.joda.time.ReadablePeriod) period36, (long) 363, (long) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.withEra(1);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period36, (org.joda.time.ReadableInstant) dateMidnight44);
        // The following exception was thrown during execution in test generation
        try {
            int int49 = period36.getValue(52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, 0, 0, 0, 0, 0, -263]");
        org.junit.Assert.assertNotNull(dateMidnight46);
    }

    @Test
    public void test11948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11948");
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime9 = timeOfDay6.toDateTime((org.joda.time.ReadableInstant) instant8);
        org.joda.time.Chronology chronology10 = instant8.getChronology();
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant15 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime16 = timeOfDay13.toDateTime((org.joda.time.ReadableInstant) instant15);
        int[] intArray18 = chronology10.get((org.joda.time.ReadablePartial) timeOfDay13, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(0L, chronology10);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime32 = timeOfDay29.toDateTime((org.joda.time.ReadableInstant) instant31);
        int[] intArray34 = chronology26.get((org.joda.time.ReadablePartial) timeOfDay29, (long) (short) -1);
        mutableDateTime19.setChronology(chronology26);
        boolean boolean36 = mutableDateTime19.isEqualNow();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime19.secondOfDay();
        boolean boolean38 = mutableDateTime19.isAfterNow();
        mutableDateTime19.setMillisOfSecond((int) (byte) 0);
        int int41 = mutableDateTime19.getHourOfDay();
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone44 = instant43.getZone();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(dateTimeZone44);
        org.joda.time.ReadableDuration readableDuration46 = null;
        org.joda.time.DateTime dateTime48 = dateTime45.withDurationAdded(readableDuration46, (int) (byte) 0);
        org.joda.time.DateTime dateTime50 = dateTime45.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime52 = dateTime50.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime54 = dateTime50.plusWeeks((int) (byte) -1);
        org.joda.time.DateTime.Property property55 = dateTime50.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay59 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant61 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime62 = timeOfDay59.toDateTime((org.joda.time.ReadableInstant) instant61);
        org.joda.time.Chronology chronology63 = instant61.getChronology();
        org.joda.time.TimeOfDay timeOfDay66 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant68 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime69 = timeOfDay66.toDateTime((org.joda.time.ReadableInstant) instant68);
        int[] intArray71 = chronology63.get((org.joda.time.ReadablePartial) timeOfDay66, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime(0L, chronology63);
        org.joda.time.DurationField durationField73 = chronology63.weeks();
        org.joda.time.DateTimeField dateTimeField74 = chronology63.weekOfWeekyear();
        org.joda.time.DateTime dateTime75 = dateTime50.toDateTime(chronology63);
        org.joda.time.DateTimeField dateTimeField76 = chronology63.hourOfDay();
        mutableDateTime19.setChronology(chronology63);
        org.joda.time.DateMidnight dateMidnight78 = new org.joda.time.DateMidnight(chronology63);
        org.joda.time.LocalTime localTime79 = new org.joda.time.LocalTime(chronology63);
        org.joda.time.MutableDateTime mutableDateTime80 = org.joda.time.MutableDateTime.now(chronology63);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay81 = new org.joda.time.YearMonthDay(4503347, 6, 36000000, chronology63);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36000000 for dayOfMonth must not be larger than 31");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(mutableDateTime80);
    }

    @Test
    public void test11949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11949");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime.Property property9 = dateTime8.centuryOfEra();
        org.joda.time.DateTime dateTime10 = property9.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime11 = property9.roundCeilingCopy();
        org.joda.time.DateTime dateTime13 = dateTime11.plusSeconds((-259));
        org.joda.time.DateTime dateTime14 = dateTime11.toDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test11950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11950");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property6 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = localDate0.minusMonths((int) '#');
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean15 = interval11.abuts((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Interval interval17 = interval14.withDurationBeforeEnd(readableDuration16);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean24 = interval20.abuts((org.joda.time.ReadableInterval) interval23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Interval interval26 = interval23.withDurationBeforeEnd(readableDuration25);
        org.joda.time.Period period27 = interval23.toPeriod();
        org.joda.time.Interval interval28 = interval14.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period27);
        java.util.Locale.Builder builder29 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder32 = builder29.setExtension('x', "zh");
        boolean boolean33 = period27.equals((java.lang.Object) builder29);
        org.joda.time.LocalDate localDate34 = localDate0.plus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone37 = instant36.getZone();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight40.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight40.withWeekyear(2);
        org.joda.time.DateTimeZone dateTimeZone45 = dateMidnight40.getZone();
        long long47 = dateTimeZone37.getMillisKeepLocal(dateTimeZone45, 10L);
        org.joda.time.DateTime dateTime48 = localDate34.toDateTimeAtCurrentTime(dateTimeZone45);
        java.util.Locale.LanguageRange[] languageRangeArray49 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList50 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList50, languageRangeArray49);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap52 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList53 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, strMap52);
        java.lang.String[] strArray61 = new java.lang.String[] { "hi!", "\u4e2d\u6587\u53f0\u7063)", "zh", "hi!", "\u4e2d\u6587", "1970-01-01T00:00:00.000Z", "zh" };
        java.util.ArrayList<java.lang.String> strList62 = new java.util.ArrayList<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList62, strArray61);
        java.lang.String str64 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.lang.String>) strList62);
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight((java.lang.Object) str64);
        boolean boolean66 = dateTime48.isBefore((org.joda.time.ReadableInstant) dateMidnight65);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight65.plusWeeks(343);
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean71 = localDate69.isSupported(dateTimeFieldType70);
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateMidnight dateMidnight73 = localDate69.toDateMidnight(dateTimeZone72);
        org.joda.time.LocalDate localDate75 = localDate69.minusMonths((int) (short) 10);
        int int76 = localDate69.getDayOfYear();
        org.joda.time.LocalDate.Property property77 = localDate69.monthOfYear();
        org.joda.time.LocalDate localDate78 = property77.roundFloorCopy();
        org.joda.time.LocalDate localDate80 = localDate78.minusYears((int) 'x');
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateTime dateTime82 = localDate78.toDateTimeAtMidnight(dateTimeZone81);
        org.joda.time.DateMidnight dateMidnight83 = dateMidnight65.withFields((org.joda.time.ReadablePartial) localDate78);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean85 = localDate78.isSupported(dateTimeFieldType84);
        java.util.Date date86 = localDate78.toDate();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 10L + "'", long47 == 10L);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(languageRangeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(languageRangeList53);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 53 + "'", int76 == 53);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertNotNull(dateTimeFieldType84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(date86);
        org.junit.Assert.assertEquals(date86.toString(), "Tue Feb 01 00:00:00 GMT+10:00 2022");
    }

    @Test
    public void test11951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11951");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTime((org.joda.time.ReadableInstant) instant10);
        org.joda.time.Chronology chronology12 = instant10.getChronology();
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant17 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime18 = timeOfDay15.toDateTime((org.joda.time.ReadableInstant) instant17);
        int[] intArray20 = chronology12.get((org.joda.time.ReadablePartial) timeOfDay15, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(0L, chronology12);
        java.lang.Object obj22 = mutableDateTime21.clone();
        int int23 = mutableDateTime21.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant29 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTime((org.joda.time.ReadableInstant) instant29);
        org.joda.time.Chronology chronology31 = instant29.getChronology();
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant36 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime37 = timeOfDay34.toDateTime((org.joda.time.ReadableInstant) instant36);
        int[] intArray39 = chronology31.get((org.joda.time.ReadablePartial) timeOfDay34, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(0L, chronology31);
        mutableDateTime40.setYear(3);
        org.joda.time.Instant instant44 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone45 = instant44.getZone();
        mutableDateTime40.setZone(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone45);
        mutableDateTime21.setZoneRetainFields(dateTimeZone45);
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(604800000L, dateTimeZone45);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter3.withZone(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone51 = dateTimeFormatter50.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter50.withZoneUTC();
        int int53 = dateTimeFormatter52.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = dateTimeFormatter52.withOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser55 = dateTimeFormatter52.getParser();
        boolean boolean56 = dateTimeFormatter52.isPrinter();
        org.joda.time.Chronology chronology57 = dateTimeFormatter52.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight58 = org.joda.time.DateMidnight.parse("65100", dateTimeFormatter52);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2000 + "'", int53 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertNull(dateTimeParser55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNull(chronology57);
    }

    @Test
    public void test11952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11952");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 19);
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime5 = localTime3.minusMinutes((int) (short) 1);
        int int6 = localTime3.getMillisOfDay();
        org.joda.time.LocalTime.Property property7 = localTime3.millisOfSecond();
        org.joda.time.LocalTime localTime9 = localTime3.minusMillis((int) (byte) 10);
        org.joda.time.DateTimeField[] dateTimeFieldArray10 = localTime9.getFields();
        org.joda.time.DateTime dateTime11 = dateTime1.withFields((org.joda.time.ReadablePartial) localTime9);
        long long12 = dateTime1.getMillis();
        int int13 = dateTime1.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 35 + "'", int6 == 35);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldArray10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 19L + "'", long12 == 19L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test11953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11953");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.DateTimeField dateTimeField17 = chronology7.clockhourOfHalfday();
        org.joda.time.DurationField durationField18 = dateTimeField17.getLeapDurationField();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNull(durationField18);
    }

    @Test
    public void test11954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11954");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime17 = timeOfDay14.toDateTime((org.joda.time.ReadableInstant) instant16);
        int[] intArray19 = chronology11.get((org.joda.time.ReadablePartial) timeOfDay14, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(0L, chronology11);
        java.lang.Object obj21 = mutableDateTime20.clone();
        int int22 = mutableDateTime20.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Chronology chronology30 = instant28.getChronology();
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime36 = timeOfDay33.toDateTime((org.joda.time.ReadableInstant) instant35);
        int[] intArray38 = chronology30.get((org.joda.time.ReadablePartial) timeOfDay33, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(0L, chronology30);
        mutableDateTime39.setYear(3);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone44 = instant43.getZone();
        mutableDateTime39.setZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone44);
        mutableDateTime20.setZoneRetainFields(dateTimeZone44);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(604800000L, dateTimeZone44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter2.withZone(dateTimeZone44);
        org.joda.time.LocalTime localTime51 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime53 = localTime51.minusMinutes((int) (short) 1);
        org.joda.time.LocalTime localTime55 = localTime51.withMillisOfDay((int) (byte) 1);
        org.joda.time.LocalTime.Property property56 = localTime51.minuteOfHour();
        org.joda.time.Chronology chronology57 = localTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField58 = chronology57.dayOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter2.withChronology(chronology57);
        java.util.Locale locale60 = java.util.Locale.US;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter2.withLocale(locale60);
        org.joda.time.DateTimeZone dateTimeZone62 = dateTimeFormatter61.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter61.withPivotYear((java.lang.Integer) 7359830);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter64.withChronology(chronology65);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = dateTimeFormatter64.withPivotYear((java.lang.Integer) 30);
        java.util.TimeZone timeZone70 = java.util.TimeZone.getTimeZone("clockhourOfHalfday");
        java.util.Locale locale71 = java.util.Locale.CHINESE;
        java.util.Calendar calendar72 = java.util.Calendar.getInstance(timeZone70, locale71);
        java.lang.String str73 = locale71.getCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter64.withLocale(locale71);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter64.withPivotYear(292278994);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_US");
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertNotNull(dateTimeFormatter68);
        org.junit.Assert.assertNotNull(timeZone70);
        org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar72);
// flaky:         org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=1645515174655,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=32,SECOND=54,MILLISECOND=655,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNotNull(dateTimeFormatter76);
    }

    @Test
    public void test11955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11955");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate0.minusMonths((int) (short) 10);
        int int7 = localDate0.getDayOfYear();
        org.joda.time.LocalDate.Property property8 = localDate0.monthOfYear();
        org.joda.time.LocalDate localDate10 = localDate0.withYearOfEra(178);
        org.joda.time.LocalDate localDate12 = localDate10.plusMonths((-1645515253));
        int int13 = localDate10.getWeekyear();
        org.joda.time.LocalDate.Property property14 = localDate10.centuryOfEra();
        boolean boolean15 = property14.isLeap();
        org.joda.time.LocalDate localDate16 = property14.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 178 + "'", int13 == 178);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test11956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11956");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 36);
        int int2 = timeOfDay1.size();
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay1.withSecondOfMinute(49);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minusMinutes(27048337);
        int int7 = timeOfDay6.getHourOfDay();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 4 + "'", int2 == 4);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 10 + "'", int7 == 10);
    }

    @Test
    public void test11957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11957");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime12 = timeOfDay9.toDateTime((org.joda.time.ReadableInstant) instant11);
        int[] intArray14 = chronology6.get((org.joda.time.ReadablePartial) timeOfDay9, (long) (short) -1);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(chronology6);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime17 = localTime15.withMillisOfDay((-1645515404));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1645515404 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[23, 59, 59, 999]");
    }

    @Test
    public void test11958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11958");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        int[] intArray31 = chronology23.get((org.joda.time.ReadablePartial) timeOfDay26, (long) (short) -1);
        mutableDateTime16.setChronology(chronology23);
        boolean boolean33 = mutableDateTime16.isEqualNow();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime16.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight37.withDurationAdded((long) (short) 10, 1);
        mutableDateTime16.setDate((org.joda.time.ReadableInstant) dateMidnight40);
        mutableDateTime16.setMinuteOfHour(0);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime16.era();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean51 = interval47.abuts((org.joda.time.ReadableInterval) interval50);
        long long52 = interval50.getStartMillis();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean59 = interval55.abuts((org.joda.time.ReadableInterval) interval58);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.Interval interval61 = interval58.withDurationBeforeEnd(readableDuration60);
        org.joda.time.Interval interval62 = interval50.overlap((org.joda.time.ReadableInterval) interval58);
        org.joda.time.Duration duration63 = interval58.toDuration();
        mutableDateTime16.add((org.joda.time.ReadableDuration) duration63, 1970);
        mutableDateTime16.addMillis(26700803);
        mutableDateTime16.addDays(60);
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime16.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime16.setMonthOfYear(766);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 766 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNull(interval62);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(property70);
    }

    @Test
    public void test11959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11959");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property3 = timeOfDay2.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = property3.getFieldType();
        org.joda.time.DurationField durationField5 = property3.getDurationField();
        org.joda.time.DateTimeField dateTimeField6 = property3.getField();
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone11 = instant10.getZone();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone11);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.minuteOfDay();
        java.util.Locale locale14 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str15 = property13.getAsShortText(locale14);
        java.lang.String str16 = dateTimeField6.getAsText(259200000L, locale14);
        long long19 = dateTimeField6.set((-62135596799948L), 50);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("clockhourOfHalfday");
        java.util.Locale locale23 = java.util.Locale.CHINESE;
        java.util.Calendar calendar24 = java.util.Calendar.getInstance(timeZone22, locale23);
        java.lang.String str25 = locale23.getCountry();
        java.lang.String str26 = dateTimeField6.getAsShortText((long) (-1635784499), locale23);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.plusDays(17);
        org.joda.time.DateTime dateTime31 = yearMonthDay30.toDateTimeAtMidnight();
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay30.withYear((-1));
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay35.minusMonths((int) (short) -1);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean40 = localDate38.isSupported(dateTimeFieldType39);
        int int41 = yearMonthDay35.indexOf(dateTimeFieldType39);
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay35.minusDays((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        boolean boolean46 = dateTimeZone44.equals((java.lang.Object) 604800000L);
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.now(dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight48 = yearMonthDay35.toDateMidnight(dateTimeZone44);
        org.joda.time.DateMidnight dateMidnight49 = yearMonthDay30.toDateMidnight(dateTimeZone44);
        java.util.Locale locale52 = new java.util.Locale("01:00:00.035", "hourOfHalfday");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str53 = dateTimeField6.getAsShortText((org.joda.time.ReadablePartial) yearMonthDay30, locale52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfHour' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0" + "'", str16, "0");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-62135593799948L) + "'", long19 == (-62135593799948L));
        org.junit.Assert.assertNotNull(timeZone22);
        org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh");
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1645515174739,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=32,SECOND=54,MILLISECOND=739,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "36" + "'", str26, "36");
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertEquals(locale52.toString(), "01:00:00.035_HOUROFHALFDAY");
    }

    @Test
    public void test11960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11960");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant9 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTime((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant16 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime17 = timeOfDay14.toDateTime((org.joda.time.ReadableInstant) instant16);
        int[] intArray19 = chronology11.get((org.joda.time.ReadablePartial) timeOfDay14, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(0L, chronology11);
        java.lang.Object obj21 = mutableDateTime20.clone();
        int int22 = mutableDateTime20.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime29 = timeOfDay26.toDateTime((org.joda.time.ReadableInstant) instant28);
        org.joda.time.Chronology chronology30 = instant28.getChronology();
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime36 = timeOfDay33.toDateTime((org.joda.time.ReadableInstant) instant35);
        int[] intArray38 = chronology30.get((org.joda.time.ReadablePartial) timeOfDay33, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(0L, chronology30);
        mutableDateTime39.setYear(3);
        org.joda.time.Instant instant43 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone44 = instant43.getZone();
        mutableDateTime39.setZone(dateTimeZone44);
        org.joda.time.DateTime dateTime46 = org.joda.time.DateTime.now(dateTimeZone44);
        mutableDateTime20.setZoneRetainFields(dateTimeZone44);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(604800000L, dateTimeZone44);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter2.withZone(dateTimeZone44);
        org.joda.time.DateTimeZone dateTimeZone50 = dateTimeFormatter49.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter49.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter51.withPivotYear((-1645515262));
        boolean boolean54 = dateTimeFormatter51.isPrinter();
        boolean boolean55 = dateTimeFormatter51.isParser();
        boolean boolean56 = dateTimeFormatter51.isPrinter();
        java.io.Writer writer57 = null;
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean60 = localDate58.isSupported(dateTimeFieldType59);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.DateMidnight dateMidnight62 = localDate58.toDateMidnight(dateTimeZone61);
        org.joda.time.DateTime dateTime63 = localDate58.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property64 = localDate58.yearOfEra();
        org.joda.time.LocalDate localDate66 = localDate58.minusMonths((int) '#');
        int int67 = localDate66.getYearOfCentury();
        org.joda.time.DateMidnight dateMidnight68 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone69 = dateMidnight68.getZone();
        org.joda.time.DateTime dateTime70 = localDate66.toDateTimeAtStartOfDay(dateTimeZone69);
        org.joda.time.DateTime dateTime71 = dateTime70.withTimeAtStartOfDay();
        org.joda.time.DateTime.Property property72 = dateTime70.weekyear();
        org.joda.time.DateTime.Property property73 = dateTime70.minuteOfHour();
        org.joda.time.DateTime dateTime74 = property73.getDateTime();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter51.printTo(writer57, (org.joda.time.ReadableInstant) dateTime74);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 19 + "'", int67 == 19);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime74);
    }

    @Test
    public void test11961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11961");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate7 = localDate0.plusMonths((int) (short) 100);
        org.joda.time.LocalDate.Property property8 = localDate7.weekOfWeekyear();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths(70);
        org.joda.time.LocalDate localDate13 = localDate11.withWeekyear(5);
        org.joda.time.LocalDate localDate14 = localDate7.withFields((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.LocalDate localDate16 = localDate7.withYearOfEra(7359830);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean19 = localDate17.isSupported(dateTimeFieldType18);
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateMidnight dateMidnight21 = localDate17.toDateMidnight(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = localDate17.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property23 = localDate17.yearOfEra();
        org.joda.time.LocalDate localDate25 = localDate17.minusMonths((int) '#');
        int int26 = localDate25.getYearOfCentury();
        int int27 = localDate7.compareTo((org.joda.time.ReadablePartial) localDate25);
        int int28 = localDate25.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 19 + "'", int26 == 19);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 12 + "'", int28 == 12);
    }

    @Test
    public void test11962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11962");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(10, 11, 11, 20);
        org.joda.time.LocalTime localTime6 = localTime4.withMillisOfSecond((int) (byte) 100);
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone9 = instant8.getZone();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime13 = dateTime10.withDurationAdded(readableDuration11, (int) (byte) 0);
        org.joda.time.DateTime dateTime15 = dateTime10.minusSeconds((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.DateTime dateTime17 = dateTime10.minus(readableDuration16);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.plus(readableDuration18);
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean23 = interval22.isBeforeNow();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean30 = interval26.abuts((org.joda.time.ReadableInterval) interval29);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Interval interval32 = interval29.withDurationBeforeEnd(readableDuration31);
        org.joda.time.Interval interval35 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean39 = interval35.abuts((org.joda.time.ReadableInterval) interval38);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Interval interval41 = interval38.withDurationBeforeEnd(readableDuration40);
        org.joda.time.Period period42 = interval38.toPeriod();
        org.joda.time.Interval interval43 = interval29.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period42);
        java.util.Locale.Builder builder44 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder47 = builder44.setExtension('x', "zh");
        boolean boolean48 = period42.equals((java.lang.Object) builder44);
        org.joda.time.Interval interval49 = interval22.withPeriodAfterStart((org.joda.time.ReadablePeriod) period42);
        org.joda.time.DateTime dateTime50 = dateTime19.plus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.LocalTime localTime52 = localTime4.withPeriodAdded((org.joda.time.ReadablePeriod) period42, 19);
        java.lang.String str53 = localTime52.toString();
        // The following exception was thrown during execution in test generation
        try {
            int int55 = localTime52.getValue((-457));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -457");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "10:11:11.020" + "'", str53, "10:11:11.020");
    }

    @Test
    public void test11963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11963");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate0.minusMonths((int) (short) 10);
        int int7 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate.Property property8 = localDate0.year();
        org.joda.time.LocalDate localDate9 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate11 = localDate9.plusDays((int) (short) 0);
        int int12 = localDate11.getWeekyear();
        org.joda.time.LocalDate localDate14 = localDate11.withYear(0);
        org.joda.time.LocalDate.Property property15 = localDate14.era();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2021 + "'", int12 == 2021);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test11964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11964");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate0.minusMonths((int) (short) 10);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDate localDate8 = localDate6.plus(readablePeriod7);
        org.joda.time.LocalDate localDate10 = localDate6.plusDays((int) (short) 0);
        org.joda.time.LocalDate localDate12 = localDate10.withWeekyear(26725);
        org.joda.time.LocalDate localDate14 = localDate12.plusMonths(26680936);
        org.joda.time.LocalDate localDate16 = localDate12.minusYears(15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate18 = localDate16.withMonthOfYear(112);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 112 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test11965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11965");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime3 = localTime1.minusMinutes((int) (short) 1);
        org.joda.time.LocalTime localTime5 = localTime1.withMillisOfDay((int) (byte) 1);
        org.joda.time.LocalTime.Property property6 = localTime1.minuteOfHour();
        org.joda.time.Chronology chronology7 = localTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfYear();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant14 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime15 = timeOfDay12.toDateTime((org.joda.time.ReadableInstant) instant14);
        org.joda.time.Chronology chronology16 = instant14.getChronology();
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTime((org.joda.time.ReadableInstant) instant21);
        int[] intArray24 = chronology16.get((org.joda.time.ReadablePartial) timeOfDay19, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(0L, chronology16);
        java.lang.Object obj26 = mutableDateTime25.clone();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime25.minuteOfHour();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime25.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime36 = timeOfDay33.toDateTime((org.joda.time.ReadableInstant) instant35);
        org.joda.time.Chronology chronology37 = instant35.getChronology();
        org.joda.time.TimeOfDay timeOfDay40 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant42 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime43 = timeOfDay40.toDateTime((org.joda.time.ReadableInstant) instant42);
        int[] intArray45 = chronology37.get((org.joda.time.ReadablePartial) timeOfDay40, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(0L, chronology37);
        java.lang.Object obj47 = mutableDateTime46.clone();
        int int48 = mutableDateTime46.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay52 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant54 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime55 = timeOfDay52.toDateTime((org.joda.time.ReadableInstant) instant54);
        org.joda.time.Chronology chronology56 = instant54.getChronology();
        org.joda.time.TimeOfDay timeOfDay59 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant61 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime62 = timeOfDay59.toDateTime((org.joda.time.ReadableInstant) instant61);
        int[] intArray64 = chronology56.get((org.joda.time.ReadablePartial) timeOfDay59, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime(0L, chronology56);
        mutableDateTime65.setYear(3);
        org.joda.time.Instant instant69 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone70 = instant69.getZone();
        mutableDateTime65.setZone(dateTimeZone70);
        org.joda.time.DateTime dateTime72 = org.joda.time.DateTime.now(dateTimeZone70);
        mutableDateTime46.setZoneRetainFields(dateTimeZone70);
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime(604800000L, dateTimeZone70);
        mutableDateTime25.setZoneRetainFields(dateTimeZone70);
        org.joda.time.Interval interval78 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean79 = interval78.isBeforeNow();
        org.joda.time.Period period80 = interval78.toPeriod();
        java.lang.String str81 = period80.toString();
        org.joda.time.MutablePeriod mutablePeriod82 = period80.toMutablePeriod();
        mutableDateTime25.add((org.joda.time.ReadablePeriod) period80);
        org.joda.time.MutablePeriod mutablePeriod84 = period80.toMutablePeriod();
        int[] intArray87 = chronology7.get((org.joda.time.ReadablePeriod) period80, (long) 378, (long) 70);
        org.joda.time.DurationField durationField88 = chronology7.months();
        org.joda.time.DurationField durationField89 = chronology7.millis();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(obj26);
        org.junit.Assert.assertEquals(obj26.toString(), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(obj47);
        org.junit.Assert.assertEquals(obj47.toString(), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "PT0S" + "'", str81, "PT0S");
        org.junit.Assert.assertNotNull(mutablePeriod82);
        org.junit.Assert.assertNotNull(mutablePeriod84);
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0, 0, 0, 0, 0, 0, 0, -308]");
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertNotNull(durationField89);
    }

    @Test
    public void test11966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11966");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight2.weekOfWeekyear();
        java.lang.String str8 = property7.getAsString();
        java.util.Locale locale9 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale10 = locale9.stripExtensions();
        int int11 = property7.getMaximumTextLength(locale9);
        org.joda.time.DateMidnight dateMidnight12 = property7.roundHalfCeilingCopy();
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.yearOfCentury();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean16 = localDate14.isSupported(dateTimeFieldType15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = localDate14.toDateMidnight(dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.plus((long) 100);
        org.joda.time.Chronology chronology21 = dateMidnight18.getChronology();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight12.withChronology(chronology21);
        org.joda.time.Interval interval23 = dateMidnight12.toInterval();
        org.joda.time.YearMonthDay yearMonthDay25 = new org.joda.time.YearMonthDay((long) (-292275054));
        org.joda.time.YearMonthDay yearMonthDay27 = yearMonthDay25.plusYears((-292275054));
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay25.minusDays(2);
        org.joda.time.Instant instant31 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone32 = instant31.getZone();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(dateTimeZone32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.DateTime dateTime36 = dateTime33.withDurationAdded(readableDuration34, (int) (byte) 0);
        org.joda.time.DateTime dateTime38 = dateTime33.minusSeconds((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime40 = dateTime33.minus(readableDuration39);
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay42.minusMonths((int) (short) -1);
        org.joda.time.Interval interval47 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval50 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean51 = interval47.abuts((org.joda.time.ReadableInterval) interval50);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Interval interval53 = interval50.withDurationBeforeEnd(readableDuration52);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval59 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean60 = interval56.abuts((org.joda.time.ReadableInterval) interval59);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.Interval interval62 = interval59.withDurationBeforeEnd(readableDuration61);
        org.joda.time.Period period63 = interval59.toPeriod();
        org.joda.time.Interval interval64 = interval50.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period63);
        org.joda.time.YearMonthDay yearMonthDay65 = yearMonthDay44.plus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.DateTime dateTime66 = dateTime40.plus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.Instant instant68 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone69 = instant68.getZone();
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(dateTimeZone69);
        org.joda.time.DateTime.Property property71 = dateTime70.monthOfYear();
        boolean boolean72 = period63.equals((java.lang.Object) property71);
        org.joda.time.PeriodType periodType73 = period63.getPeriodType();
        org.joda.time.Period period74 = period63.toPeriod();
        org.joda.time.YearMonthDay yearMonthDay75 = yearMonthDay29.plus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight12.minus((org.joda.time.ReadablePeriod) period63);
        org.joda.time.DateMidnight dateMidnight78 = dateMidnight12.plusMonths(0);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(yearMonthDay27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(yearMonthDay65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(yearMonthDay75);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertNotNull(dateMidnight78);
    }

    @Test
    public void test11967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11967");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.plus((long) 2);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime4 = dateTime3.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime4.setMillisOfSecond(7321627);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 7321627 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
    }

    @Test
    public void test11968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11968");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime8.plusWeeks((int) (byte) -1);
        org.joda.time.DateTime.Property property13 = dateTime8.hourOfDay();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean16 = localDate14.isSupported(dateTimeFieldType15);
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateMidnight dateMidnight18 = localDate14.toDateMidnight(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate14.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property20 = localDate14.yearOfEra();
        org.joda.time.LocalDate localDate22 = localDate14.minusMonths((int) '#');
        int int23 = localDate22.getYearOfCentury();
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight();
        org.joda.time.DateTimeZone dateTimeZone25 = dateMidnight24.getZone();
        org.joda.time.DateTime dateTime26 = localDate22.toDateTimeAtStartOfDay(dateTimeZone25);
        boolean boolean27 = dateTime8.isEqual((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime29 = dateTime26.plus(readableDuration28);
        org.joda.time.DateTime dateTime31 = dateTime26.plusHours((-1));
        int int32 = dateTime31.getWeekyear();
        int int33 = dateTime31.getEra();
        int int34 = dateTime31.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 19 + "'", int23 == 19);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2019 + "'", int32 == 2019);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test11969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11969");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = instant0.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime4 = instant0.toMutableDateTime();
        mutableDateTime4.setMillis(0L);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean13 = interval9.abuts((org.joda.time.ReadableInterval) interval12);
        long long14 = interval12.getStartMillis();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean18 = interval17.isBeforeNow();
        org.joda.time.Period period19 = interval17.toPeriod();
        java.lang.String str20 = period19.toString();
        org.joda.time.MutablePeriod mutablePeriod21 = period19.toMutablePeriod();
        org.joda.time.Interval interval22 = interval12.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) mutablePeriod21);
        mutableDateTime4.add((org.joda.time.ReadablePeriod) mutablePeriod21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType25 = mutablePeriod21.getFieldType(26767);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26767");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT0S" + "'", str20, "PT0S");
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertNotNull(interval22);
    }

    @Test
    public void test11970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11970");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone3);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight4.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight8 = dateMidnight4.withWeekyear(2);
        org.joda.time.DateMidnight.Property property9 = dateMidnight4.weekOfWeekyear();
        java.util.Locale locale10 = java.util.Locale.CHINESE;
        java.lang.String str11 = property9.getAsShortText(locale10);
        java.lang.String str12 = dateTimeZone0.getShortName((long) 9, locale10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone0);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.Chronology chronology15 = mutableDateTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.months();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        long long20 = chronology15.add(readablePeriod17, (long) 2577, 619);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1" + "'", str11, "1");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2577L + "'", long20 == 2577L);
    }

    @Test
    public void test11971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11971");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes((int) (byte) 10);
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(2);
        org.joda.time.DateTime dateTime14 = dateTime10.withHourOfDay(22);
        org.joda.time.TimeOfDay timeOfDay15 = dateTime10.toTimeOfDay();
        org.joda.time.DateTime dateTime17 = dateTime10.plusHours(312);
        int int18 = dateTime10.getDayOfYear();
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone21 = instant20.getZone();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.DateTime.Property property23 = dateTime22.monthOfYear();
        boolean boolean24 = dateTime10.isAfter((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTime.Property property25 = dateTime10.weekyear();
        org.joda.time.DateTime dateTime27 = dateTime10.minusWeeks(0);
        org.joda.time.DateTime.Property property28 = dateTime27.year();
        org.joda.time.DateTime dateTime30 = dateTime27.plusMillis((-1645515642));
        org.joda.time.DateTime dateTime32 = dateTime27.withMillisOfDay(692);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test11972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11972");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone2 = instant1.getZone();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.DateTime dateTime6 = dateTime3.withDurationAdded(readableDuration4, (int) (byte) 0);
        org.joda.time.DateTime dateTime8 = dateTime3.minusSeconds((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime3.minus(readableDuration9);
        org.joda.time.DateTime dateTime12 = dateTime3.minusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime13 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime3.minus(readableDuration14);
        org.joda.time.DateTime dateTime17 = dateTime3.minusHours(5);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime17.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime18.setHourOfDay((-1645515433));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1645515433 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
    }

    @Test
    public void test11973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11973");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTime((org.joda.time.ReadableInstant) instant6);
        org.joda.time.Chronology chronology8 = instant6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.clockhourOfHalfday();
        long long11 = dateTimeField9.roundHalfFloor(0L);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        int int13 = dateTimeField9.getMaximumShortTextLength(locale12);
        java.lang.String str14 = locale12.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket15 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology1, locale12);
        java.util.Locale locale16 = dateTimeParserBucket15.getLocale();
        long long19 = dateTimeParserBucket15.computeMillis(true, "");
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.year();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.minuteOfHour();
        dateTimeParserBucket15.saveField(dateTimeField28, 0);
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant35 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime36 = timeOfDay33.toDateTime((org.joda.time.ReadableInstant) instant35);
        org.joda.time.Chronology chronology37 = instant35.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.year();
        dateTimeParserBucket15.saveField(dateTimeField38, 8);
        java.util.Locale locale41 = dateTimeParserBucket15.getLocale();
        int int42 = dateTimeParserBucket15.getOffset();
        org.joda.time.DateTimeZone dateTimeZone43 = dateTimeParserBucket15.getZone();
        long long46 = dateTimeZone43.adjustOffset((long) (-1645515704), true);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "zh" + "'", str14, "zh");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1645515704L) + "'", long46 == (-1645515704L));
    }

    @Test
    public void test11974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11974");
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.parse("0");
        org.joda.time.LocalDate localDate8 = localDate6.plusWeeks((-1645515377));
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone12 = instant11.getZone();
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight15.withWeekyear(2);
        org.joda.time.DateTimeZone dateTimeZone20 = dateMidnight15.getZone();
        long long22 = dateTimeZone12.getMillisKeepLocal(dateTimeZone20, 10L);
        long long24 = dateTimeZone12.previousTransition((long) 2);
        java.lang.String str26 = dateTimeZone12.getShortName(0L);
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((long) 945, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight28 = localDate8.toDateMidnight(dateTimeZone12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(644, 7378498, 86399, 276, 27168357, dateTimeZone12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 276 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2L + "'", long24 == 2L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(dateMidnight28);
    }

    @Test
    public void test11975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11975");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        org.joda.time.DurationField durationField17 = chronology7.weeks();
        long long20 = durationField17.subtract((long) (byte) -1, (long) 5);
        boolean boolean21 = durationField17.isPrecise();
        long long24 = durationField17.getMillis(14, (long) (-1645515253));
        long long27 = durationField17.add((long) 26826839, (-1));
        long long30 = durationField17.getMillis((long) 224, (long) 27085284);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-3024000001L) + "'", long20 == (-3024000001L));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 8467200000L + "'", long24 == 8467200000L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-577973161L) + "'", long27 == (-577973161L));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 135475200000L + "'", long30 == 135475200000L);
    }

    @Test
    public void test11976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11976");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.year();
        org.joda.time.DateTimeField dateTimeField8 = chronology6.minuteOfHour();
        org.joda.time.Interval interval11 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean15 = interval11.abuts((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Interval interval17 = interval14.withDurationBeforeEnd(readableDuration16);
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean24 = interval20.abuts((org.joda.time.ReadableInterval) interval23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Interval interval26 = interval23.withDurationBeforeEnd(readableDuration25);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean33 = interval29.abuts((org.joda.time.ReadableInterval) interval32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Interval interval35 = interval32.withDurationBeforeEnd(readableDuration34);
        org.joda.time.Period period36 = interval32.toPeriod();
        org.joda.time.Interval interval37 = interval23.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Interval interval38 = interval14.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period36);
        int[] intArray41 = chronology6.get((org.joda.time.ReadablePeriod) period36, (long) 363, (long) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean49 = interval45.abuts((org.joda.time.ReadableInterval) interval48);
        long long50 = interval48.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        org.joda.time.Interval interval52 = interval48.withPeriodAfterStart(readablePeriod51);
        org.joda.time.Period period53 = interval52.toPeriod();
        long long56 = chronology6.add((org.joda.time.ReadablePeriod) period53, (long) 10, (int) (short) 10);
        org.joda.time.Chronology chronology57 = chronology6.withUTC();
        org.joda.time.TimeOfDay timeOfDay58 = new org.joda.time.TimeOfDay(chronology57);
        org.joda.time.DateTimeZone dateTimeZone59 = chronology57.getZone();
        org.joda.time.DateMidnight dateMidnight60 = org.joda.time.DateMidnight.now(chronology57);
        org.joda.time.DateMidnight.Property property61 = dateMidnight60.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight62 = property61.roundFloorCopy();
        org.joda.time.DateMidnight.Property property63 = dateMidnight62.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0, 0, 0, 0, 0, 0, -263]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 10L + "'", long56 == 10L);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(property63);
    }

    @Test
    public void test11977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11977");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.property(dateTimeFieldType3);
        java.util.Locale locale9 = new java.util.Locale("\u5341\u4e8c\u6708", "hi!", "10");
        java.lang.String str10 = localDateTime0.toString("+10:00", locale9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime0.withYearOfEra(6);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime0.minusHours(229);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight17.year();
        org.joda.time.DateMidnight dateMidnight19 = property18.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight20 = property18.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight20.withDurationAdded((long) 1439, 21);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.DateMidnight.Property property25 = dateMidnight23.property(dateTimeFieldType24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime14.property(dateTimeFieldType24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime14.minusMonths((-1645515711));
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals(locale9.toString(), "\u5341\u4e8c\u6708_HI!_10");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+10:00" + "'", str10, "+10:00");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
    }

    @Test
    public void test11978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11978");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean6 = interval2.abuts((org.joda.time.ReadableInterval) interval5);
        long long7 = interval5.getStartMillis();
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval13 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean14 = interval10.abuts((org.joda.time.ReadableInterval) interval13);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Interval interval16 = interval13.withDurationBeforeEnd(readableDuration15);
        org.joda.time.Interval interval17 = interval5.overlap((org.joda.time.ReadableInterval) interval13);
        org.joda.time.Duration duration18 = interval13.toDuration();
        org.joda.time.Duration duration19 = duration18.toDuration();
        org.joda.time.Interval interval22 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval25 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean26 = interval22.abuts((org.joda.time.ReadableInterval) interval25);
        long long27 = interval25.getStartMillis();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval33 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean34 = interval30.abuts((org.joda.time.ReadableInterval) interval33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Interval interval36 = interval33.withDurationBeforeEnd(readableDuration35);
        org.joda.time.Interval interval37 = interval25.overlap((org.joda.time.ReadableInterval) interval33);
        org.joda.time.Duration duration38 = interval33.toDuration();
        org.joda.time.Interval interval41 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval44 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean45 = interval41.abuts((org.joda.time.ReadableInterval) interval44);
        long long46 = interval44.getStartMillis();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval52 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean53 = interval49.abuts((org.joda.time.ReadableInterval) interval52);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Interval interval55 = interval52.withDurationBeforeEnd(readableDuration54);
        org.joda.time.Interval interval56 = interval44.overlap((org.joda.time.ReadableInterval) interval52);
        org.joda.time.Duration duration57 = interval52.toDuration();
        org.joda.time.Duration duration58 = duration57.toDuration();
        boolean boolean59 = duration38.isEqual((org.joda.time.ReadableDuration) duration58);
        boolean boolean60 = duration19.isShorterThan((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Interval interval63 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval66 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean67 = interval63.abuts((org.joda.time.ReadableInterval) interval66);
        long long68 = interval66.getStartMillis();
        org.joda.time.Interval interval71 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval74 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean75 = interval71.abuts((org.joda.time.ReadableInterval) interval74);
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Interval interval77 = interval74.withDurationBeforeEnd(readableDuration76);
        org.joda.time.Interval interval78 = interval66.overlap((org.joda.time.ReadableInterval) interval74);
        org.joda.time.Duration duration79 = interval74.toDuration();
        boolean boolean80 = duration19.isLongerThan((org.joda.time.ReadableDuration) duration79);
        org.joda.time.Period period81 = duration19.toPeriod();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNull(interval17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNull(interval37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNull(interval56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNull(interval78);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(period81);
    }

    @Test
    public void test11979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11979");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateMidnight.Property property5 = dateMidnight4.dayOfYear();
        int int6 = dateMidnight4.getDayOfYear();
        int int7 = dateMidnight4.getEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight9 = dateMidnight4.withDayOfWeek(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test11980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11980");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime.Property property2 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime3 = property2.roundFloorCopy();
        org.joda.time.LocalTime localTime5 = property2.setCopy(0);
        org.joda.time.LocalTime localTime7 = property2.addWrapFieldToCopy(7);
        int int8 = localTime7.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone10);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight11.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.withEra((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minus(readableDuration18);
        int int20 = dateMidnight17.getCenturyOfEra();
        org.joda.time.DateTime dateTime21 = localTime7.toDateTime((org.joda.time.ReadableInstant) dateMidnight17);
        org.joda.time.Instant instant22 = new org.joda.time.Instant((java.lang.Object) dateMidnight17);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 7 + "'", int8 == 7);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test11981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11981");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate0.minusMonths((int) (short) 10);
        int int7 = localDate0.getDayOfMonth();
        org.joda.time.LocalDate.Property property8 = localDate0.year();
        org.joda.time.LocalDate localDate9 = property8.roundHalfEvenCopy();
        org.joda.time.DurationField durationField10 = property8.getRangeDurationField();
        org.joda.time.LocalDate localDate11 = property8.roundHalfCeilingCopy();
        org.joda.time.tz.NameProvider nameProvider12 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale13 = java.util.Locale.KOREA;
        java.lang.String str16 = nameProvider12.getName(locale13, "11", "12");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider12);
        java.util.Locale locale20 = new java.util.Locale("halfdays", "2022");
        java.lang.String str23 = nameProvider12.getName(locale20, "", "01:00:00.035");
        java.lang.String str24 = locale20.getVariant();
        java.lang.String str25 = property8.getAsText(locale20);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(nameProvider12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals(locale20.toString(), "halfdays_2022");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022" + "'", str25, "2022");
    }

    @Test
    public void test11982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11982");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight2.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight2.withYearOfCentury(1);
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.weekyear();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight9.withYearOfCentury((int) (byte) 10);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight9.plusDays(86399999);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight9.withDayOfMonth(21);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.minusYears(75);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight16.plusWeeks(26700803);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateMidnight20);
    }

    @Test
    public void test11983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11983");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property6 = localDate0.yearOfEra();
        org.joda.time.LocalDate localDate8 = localDate0.minusMonths((int) '#');
        org.joda.time.Instant instant10 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone11 = instant10.getZone();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateMidnight dateMidnight14 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight14.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight14.withWeekyear(2);
        org.joda.time.DateTimeZone dateTimeZone19 = dateMidnight14.getZone();
        long long21 = dateTimeZone11.getMillisKeepLocal(dateTimeZone19, 10L);
        org.joda.time.Interval interval22 = localDate8.toInterval(dateTimeZone11);
        org.joda.time.LocalDate.Property property23 = localDate8.centuryOfEra();
        org.joda.time.LocalDate.Property property24 = localDate8.yearOfEra();
        org.joda.time.LocalDate localDate25 = property24.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime localTime29 = localTime27.minusMinutes((int) (short) 1);
        org.joda.time.LocalTime localTime31 = localTime27.withMillisOfDay((int) (byte) 1);
        org.joda.time.LocalTime.Property property32 = localTime27.minuteOfHour();
        org.joda.time.LocalTime localTime34 = property32.addCopy(0);
        org.joda.time.LocalTime localTime35 = property32.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime36 = property32.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField37 = property32.getField();
        org.joda.time.LocalTime localTime39 = property32.addWrapFieldToCopy(220);
        org.joda.time.LocalTime localTime41 = property32.addCopy(975);
        // The following exception was thrown during execution in test generation
        try {
            int int42 = localDate25.compareTo((org.joda.time.ReadablePartial) localTime41);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 10L + "'", long21 == 10L);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime41);
    }

    @Test
    public void test11984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11984");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate0.plusMonths((-1));
        org.joda.time.LocalDate.Property property7 = localDate6.era();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.LocalDate localDate10 = property7.addWrapFieldToCopy((-1));
        org.joda.time.LocalDate localDate11 = property7.withMinimumValue();
        org.joda.time.LocalDate.Property property12 = localDate11.centuryOfEra();
        org.joda.time.LocalDate localDate13 = property12.getLocalDate();
        org.joda.time.LocalDate localDate14 = property12.withMinimumValue();
        org.joda.time.LocalDate.Property property15 = localDate14.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate17 = property15.setCopy(32);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test11985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11985");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((long) '#');
        org.joda.time.LocalTime.Property property2 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime3 = property2.roundFloorCopy();
        org.joda.time.LocalTime localTime4 = property2.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime5 = property2.withMaximumValue();
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean9 = interval8.isBeforeNow();
        org.joda.time.Interval interval12 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval15 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean16 = interval12.abuts((org.joda.time.ReadableInterval) interval15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Interval interval18 = interval15.withDurationBeforeEnd(readableDuration17);
        org.joda.time.Interval interval21 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval24 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean25 = interval21.abuts((org.joda.time.ReadableInterval) interval24);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Interval interval27 = interval24.withDurationBeforeEnd(readableDuration26);
        org.joda.time.Period period28 = interval24.toPeriod();
        org.joda.time.Interval interval29 = interval15.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period28);
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder33 = builder30.setExtension('x', "zh");
        boolean boolean34 = period28.equals((java.lang.Object) builder30);
        org.joda.time.Interval interval35 = interval8.withPeriodAfterStart((org.joda.time.ReadablePeriod) period28);
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime(10, 11, 11, 20);
        org.joda.time.LocalTime localTime42 = localTime40.withMillisOfSecond((int) (byte) 100);
        org.joda.time.Instant instant44 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone45 = instant44.getZone();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone45);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime49 = dateTime46.withDurationAdded(readableDuration47, (int) (byte) 0);
        org.joda.time.DateTime dateTime51 = dateTime46.minusSeconds((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.DateTime dateTime53 = dateTime46.minus(readableDuration52);
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.DateTime dateTime55 = dateTime53.plus(readableDuration54);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean59 = interval58.isBeforeNow();
        org.joda.time.Interval interval62 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval65 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean66 = interval62.abuts((org.joda.time.ReadableInterval) interval65);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.Interval interval68 = interval65.withDurationBeforeEnd(readableDuration67);
        org.joda.time.Interval interval71 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval74 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean75 = interval71.abuts((org.joda.time.ReadableInterval) interval74);
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.Interval interval77 = interval74.withDurationBeforeEnd(readableDuration76);
        org.joda.time.Period period78 = interval74.toPeriod();
        org.joda.time.Interval interval79 = interval65.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period78);
        java.util.Locale.Builder builder80 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder83 = builder80.setExtension('x', "zh");
        boolean boolean84 = period78.equals((java.lang.Object) builder80);
        org.joda.time.Interval interval85 = interval58.withPeriodAfterStart((org.joda.time.ReadablePeriod) period78);
        org.joda.time.DateTime dateTime86 = dateTime55.plus((org.joda.time.ReadablePeriod) period78);
        org.joda.time.LocalTime localTime88 = localTime40.withPeriodAdded((org.joda.time.ReadablePeriod) period78, 19);
        org.joda.time.MutablePeriod mutablePeriod89 = period78.toMutablePeriod();
        org.joda.time.Interval interval90 = interval8.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period78);
        org.joda.time.LocalTime localTime91 = localTime5.plus((org.joda.time.ReadablePeriod) period78);
        org.joda.time.LocalTime.Property property92 = localTime91.minuteOfHour();
        org.joda.time.LocalTime localTime93 = property92.withMaximumValue();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(interval77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(interval79);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(interval85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(localTime88);
        org.junit.Assert.assertNotNull(mutablePeriod89);
        org.junit.Assert.assertNotNull(interval90);
        org.junit.Assert.assertNotNull(localTime91);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(localTime93);
    }

    @Test
    public void test11986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11986");
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant13 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTime((org.joda.time.ReadableInstant) instant13);
        org.joda.time.Chronology chronology15 = instant13.getChronology();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant20 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime21 = timeOfDay18.toDateTime((org.joda.time.ReadableInstant) instant20);
        int[] intArray23 = chronology15.get((org.joda.time.ReadablePartial) timeOfDay18, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(0L, chronology15);
        mutableDateTime24.setYear(3);
        org.joda.time.Instant instant28 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone29 = instant28.getZone();
        mutableDateTime24.setZone(dateTimeZone29);
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight(dateTimeZone29);
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime(1L, dateTimeZone29);
        org.joda.time.Chronology chronology33 = localTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.weekOfWeekyear();
        long long38 = chronology33.add(0L, (long) 2022, 9);
        org.joda.time.DateTimeField dateTimeField39 = chronology33.hourOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology33.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime(26928278, 347, 275, (-1645515409), 7327559, 115, 576, chronology33);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1645515409 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 18198L + "'", long38 == 18198L);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test11987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11987");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMinutes(35);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusMinutes(22);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime10 = property9.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusHours((-1645515346));
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusYears(766);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test11988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11988");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("11");
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime dateTime4 = dateTime2.withYear(173);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis(26993651);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test11989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11989");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.property(dateTimeFieldType3);
        org.joda.time.LocalDateTime localDateTime5 = property4.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withYear((int) '4');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withDayOfYear((int) (byte) 1);
        int int10 = localDateTime9.getYearOfCentury();
        int int11 = localDateTime9.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 99 + "'", int10 == 99);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
    }

    @Test
    public void test11990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11990");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.DateMidnight dateMidnight4 = localDate0.toDateMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property6 = localDate0.yearOfEra();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.millis();
        boolean boolean8 = localDate0.isSupported(durationFieldType7);
        org.joda.time.LocalDate.Property property9 = localDate0.year();
        org.joda.time.LocalDate localDate10 = property9.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField11 = property9.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = dateTimeField11.getType();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
    }

    @Test
    public void test11991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11991");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMinutes(35);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusMinutes(22);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.yearOfCentury();
        org.joda.time.LocalDateTime.Property property10 = localDateTime6.yearOfEra();
        org.joda.time.LocalDateTime localDateTime11 = property10.roundHalfCeilingCopy();
        java.util.Locale locale16 = new java.util.Locale("Sat Jul 30 00:00:00 GMT+10:00 1904", "1970-01-01T01:57:00.002Z", "T00:59:00.000");
        java.lang.String str17 = locale16.getDisplayScript();
        java.util.Locale.setDefault(locale16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = localDateTime11.toString("1970-01-01T15:00:00.000Z", locale16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertEquals(locale16.toString(), "sat jul 30 00:00:00 gmt+10:00 1904_1970-01-01T01:57:00.002Z_T00:59:00.000");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test11992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11992");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.property(dateTimeFieldType18);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant24 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime25 = timeOfDay22.toDateTime((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.clockhourOfHalfday();
        long long29 = dateTimeField27.roundHalfFloor(0L);
        java.util.Locale locale30 = java.util.Locale.TRADITIONAL_CHINESE;
        int int31 = dateTimeField27.getMaximumShortTextLength(locale30);
        java.util.Locale locale32 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.util.Locale locale34 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale32.getDisplayName(locale34);
        java.lang.String str37 = locale30.getDisplayLanguage(locale32);
        java.util.Calendar calendar38 = mutableDateTime16.toCalendar(locale32);
        int int39 = calendar38.getWeekYear();
        calendar38.set((int) (byte) -1, (int) (byte) 100, 0, 8, (int) (short) 100);
        calendar38.set((int) (byte) 0, 35, 100, (int) 'a', 2000);
        org.joda.time.TimeOfDay timeOfDay52 = org.joda.time.TimeOfDay.fromCalendarFields(calendar38);
        calendar38.clear();
        int int54 = calendar38.getMinimalDaysInFirstWeek();
        calendar38.setTimeInMillis((long) 21);
        int int57 = calendar38.getFirstDayOfWeek();
        int int58 = calendar38.getFirstDayOfWeek();
        int int59 = calendar38.getMinimalDaysInFirstWeek();
        java.util.TimeZone timeZone61 = java.util.TimeZone.getTimeZone("69");
        calendar38.setTimeZone(timeZone61);
        int int63 = calendar38.getWeekYear();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str36, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u4e2d\u6587" + "'", str37, "\u4e2d\u6587");
        org.junit.Assert.assertNotNull(calendar38);
        org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=21,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=21,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1970 + "'", int39 == 1970);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1970 + "'", int63 == 1970);
    }

    @Test
    public void test11993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11993");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay7 = yearMonthDay5.minusMonths((int) (short) -1);
        org.joda.time.YearMonthDay.Property property8 = yearMonthDay7.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay9 = property8.withMinimumValue();
        org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay(0L);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.minusMonths((int) (short) -1);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval19 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean20 = interval16.abuts((org.joda.time.ReadableInterval) interval19);
        long long21 = interval19.getStartMillis();
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.Interval interval23 = interval19.withPeriodAfterStart(readablePeriod22);
        org.joda.time.DateTime dateTime24 = interval19.getStart();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfDay();
        boolean boolean27 = localDate25.isSupported(dateTimeFieldType26);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.DateMidnight dateMidnight29 = localDate25.toDateMidnight(dateTimeZone28);
        org.joda.time.DateTime dateTime30 = localDate25.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property31 = localDate25.yearOfEra();
        org.joda.time.LocalDate localDate33 = localDate25.minusMonths((int) '#');
        org.joda.time.Interval interval36 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean40 = interval36.abuts((org.joda.time.ReadableInterval) interval39);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Interval interval42 = interval39.withDurationBeforeEnd(readableDuration41);
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean49 = interval45.abuts((org.joda.time.ReadableInterval) interval48);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.Interval interval51 = interval48.withDurationBeforeEnd(readableDuration50);
        org.joda.time.Period period52 = interval48.toPeriod();
        org.joda.time.Interval interval53 = interval39.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period52);
        java.util.Locale.Builder builder54 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder57 = builder54.setExtension('x', "zh");
        boolean boolean58 = period52.equals((java.lang.Object) builder54);
        org.joda.time.LocalDate localDate59 = localDate25.plus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.DateTime dateTime60 = dateTime24.minus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.YearMonthDay yearMonthDay61 = yearMonthDay13.plus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.YearMonthDay yearMonthDay62 = yearMonthDay9.plus((org.joda.time.ReadablePeriod) period52);
        org.joda.time.YearMonthDay yearMonthDay64 = yearMonthDay3.withPeriodAdded((org.joda.time.ReadablePeriod) period52, (-1645515253));
        org.joda.time.LocalDate localDate65 = yearMonthDay64.toLocalDate();
        org.junit.Assert.assertNotNull(yearMonthDay3);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(yearMonthDay61);
        org.junit.Assert.assertNotNull(yearMonthDay62);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(localDate65);
    }

    @Test
    public void test11994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11994");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        int[] intArray3 = timeOfDay2.getValues();
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant8 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime9 = timeOfDay6.toDateTime((org.joda.time.ReadableInstant) instant8);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay6.minusMinutes((int) '4');
        int int12 = timeOfDay2.compareTo((org.joda.time.ReadablePartial) timeOfDay6);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay2.minusMinutes((int) (short) -1);
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay((java.lang.Object) timeOfDay2);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay2.plusMinutes(4522);
        org.joda.time.TimeOfDay.Property property18 = timeOfDay17.secondOfMinute();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant25 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime26 = timeOfDay23.toDateTime((org.joda.time.ReadableInstant) instant25);
        org.joda.time.Chronology chronology27 = instant25.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.clockhourOfHalfday();
        long long30 = dateTimeField28.roundHalfFloor(0L);
        java.util.Locale locale31 = java.util.Locale.TRADITIONAL_CHINESE;
        int int32 = dateTimeField28.getMaximumShortTextLength(locale31);
        java.lang.String str33 = locale31.getLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket((-1L), chronology20, locale31);
        java.util.Locale locale35 = dateTimeParserBucket34.getLocale();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.util.Locale locale38 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale39 = locale38.stripExtensions();
        dateTimeParserBucket34.saveField(dateTimeFieldType36, "zh", locale38);
        org.joda.time.DateTimeZone dateTimeZone42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone42);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight43.withDurationAdded((long) 2, 100);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight46.minusWeeks((int) (short) 100);
        org.joda.time.DateMidnight.Property property49 = dateMidnight48.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean51 = dateMidnight48.isSupported(dateTimeFieldType50);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay56 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant58 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime59 = timeOfDay56.toDateTime((org.joda.time.ReadableInstant) instant58);
        org.joda.time.Chronology chronology60 = instant58.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.clockhourOfHalfday();
        org.joda.time.DurationField durationField62 = chronology60.eras();
        org.joda.time.DateTimeField dateTimeField63 = dateTimeFieldType53.getField(chronology60);
        org.joda.time.DateTimeField dateTimeField64 = chronology60.hourOfDay();
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime((long) 22, chronology60);
        org.joda.time.DateTimeField dateTimeField66 = dateTimeFieldType50.getField(chronology60);
        org.joda.time.DateMidnight dateMidnight67 = org.joda.time.DateMidnight.now(chronology60);
        org.joda.time.Chronology chronology68 = chronology60.withUTC();
        org.joda.time.LocalTime localTime69 = org.joda.time.LocalTime.now(chronology60);
        org.joda.time.DateTimeField dateTimeField70 = dateTimeFieldType36.getField(chronology60);
        org.joda.time.TimeOfDay timeOfDay71 = timeOfDay17.withChronologyRetainFields(chronology60);
        org.joda.time.TimeOfDay timeOfDay74 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property75 = timeOfDay74.minuteOfHour();
        java.lang.String str76 = property75.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay79 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant81 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime82 = timeOfDay79.toDateTime((org.joda.time.ReadableInstant) instant81);
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        org.joda.time.DateTime dateTime85 = dateTime82.withPeriodAdded(readablePeriod83, (int) (short) 0);
        int int86 = property75.compareTo((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTime.Property property87 = dateTime82.yearOfEra();
        org.joda.time.DateTime dateTime89 = dateTime82.plusHours(2021);
        boolean boolean90 = dateTime82.isEqualNow();
        org.joda.time.DateTime dateTime92 = dateTime82.withMonthOfYear((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone93 = dateTime92.getZone();
        org.joda.time.DateTime dateTime94 = timeOfDay71.toDateTimeToday(dateTimeZone93);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[0, 1, 0, 0]");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "zh" + "'", str33, "zh");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(timeOfDay71);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1" + "'", str76, "1");
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(dateTime92);
        org.junit.Assert.assertNotNull(dateTimeZone93);
        org.junit.Assert.assertNotNull(dateTime94);
    }

    @Test
    public void test11995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11995");
        org.joda.time.TimeOfDay timeOfDay2 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant4 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime5 = timeOfDay2.toDateTime((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology6 = instant4.getChronology();
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant11 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime12 = timeOfDay9.toDateTime((org.joda.time.ReadableInstant) instant11);
        int[] intArray14 = chronology6.get((org.joda.time.ReadablePartial) timeOfDay9, (long) (short) -1);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(chronology6);
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.TimeOfDay.Property property19 = timeOfDay18.minuteOfHour();
        java.lang.String str20 = property19.getAsShortText();
        org.joda.time.DateTimeField dateTimeField21 = property19.getField();
        org.joda.time.TimeOfDay timeOfDay23 = property19.addNoWrapToCopy(100);
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        int int25 = property19.getMaximumTextLength(locale24);
        org.joda.time.DurationField durationField26 = property19.getDurationField();
        boolean boolean27 = localTime15.equals((java.lang.Object) property19);
        org.joda.time.LocalTime localTime29 = localTime15.plusHours(26700803);
        org.joda.time.LocalTime localTime31 = localTime15.plusSeconds(7361852);
        org.joda.time.LocalTime localTime33 = localTime15.plusMinutes(993);
        int int34 = localTime33.getMillisOfSecond();
        org.joda.time.LocalTime localTime36 = localTime33.minusHours((-1645515440));
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.parse("06:00:00.035");
        org.joda.time.LocalTime localTime39 = localTime33.withFields((org.joda.time.ReadablePartial) localTime38);
        org.joda.time.LocalTime.Property property40 = localTime38.millisOfDay();
        org.joda.time.LocalTime localTime42 = property40.setCopy("447");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1" + "'", str20, "1");
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 378 + "'", int34 == 378);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localTime42);
    }

    @Test
    public void test11996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11996");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) (byte) 100);
        org.joda.time.Instant instant3 = instant0.toInstant();
        org.joda.time.Interval interval6 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean10 = interval6.abuts((org.joda.time.ReadableInterval) interval9);
        long long11 = interval9.getStartMillis();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval17 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean18 = interval14.abuts((org.joda.time.ReadableInterval) interval17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Interval interval20 = interval17.withDurationBeforeEnd(readableDuration19);
        org.joda.time.Interval interval21 = interval9.overlap((org.joda.time.ReadableInterval) interval17);
        org.joda.time.Duration duration22 = interval17.toDuration();
        org.joda.time.Duration duration23 = duration22.toDuration();
        org.joda.time.Interval interval26 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval29 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean30 = interval26.abuts((org.joda.time.ReadableInterval) interval29);
        long long31 = interval29.getStartMillis();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean38 = interval34.abuts((org.joda.time.ReadableInterval) interval37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Interval interval40 = interval37.withDurationBeforeEnd(readableDuration39);
        org.joda.time.Interval interval41 = interval29.overlap((org.joda.time.ReadableInterval) interval37);
        org.joda.time.Duration duration42 = interval37.toDuration();
        org.joda.time.Interval interval45 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean49 = interval45.abuts((org.joda.time.ReadableInterval) interval48);
        long long50 = interval48.getStartMillis();
        org.joda.time.Interval interval53 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval56 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean57 = interval53.abuts((org.joda.time.ReadableInterval) interval56);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Interval interval59 = interval56.withDurationBeforeEnd(readableDuration58);
        org.joda.time.Interval interval60 = interval48.overlap((org.joda.time.ReadableInterval) interval56);
        org.joda.time.Duration duration61 = interval56.toDuration();
        org.joda.time.Duration duration62 = duration61.toDuration();
        boolean boolean63 = duration42.isEqual((org.joda.time.ReadableDuration) duration62);
        boolean boolean64 = duration23.isShorterThan((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Interval interval67 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval70 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean71 = interval67.abuts((org.joda.time.ReadableInterval) interval70);
        long long72 = interval70.getStartMillis();
        org.joda.time.Interval interval75 = new org.joda.time.Interval((long) (short) 0, 0L);
        org.joda.time.Interval interval78 = new org.joda.time.Interval((long) (short) 0, 0L);
        boolean boolean79 = interval75.abuts((org.joda.time.ReadableInterval) interval78);
        org.joda.time.ReadableDuration readableDuration80 = null;
        org.joda.time.Interval interval81 = interval78.withDurationBeforeEnd(readableDuration80);
        org.joda.time.Interval interval82 = interval70.overlap((org.joda.time.ReadableInterval) interval78);
        org.joda.time.Duration duration83 = interval78.toDuration();
        boolean boolean84 = duration23.isLongerThan((org.joda.time.ReadableDuration) duration83);
        org.joda.time.Instant instant85 = instant3.plus((org.joda.time.ReadableDuration) duration83);
        org.joda.time.ReadableDuration readableDuration86 = null;
        org.joda.time.Instant instant88 = instant3.withDurationAdded(readableDuration86, 26830);
        org.joda.time.Instant instant90 = instant88.plus((-35999990L));
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNull(interval21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNull(interval41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertNull(interval60);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(interval81);
        org.junit.Assert.assertNull(interval82);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(instant85);
        org.junit.Assert.assertNotNull(instant88);
        org.junit.Assert.assertNotNull(instant90);
    }

    @Test
    public void test11997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11997");
        java.util.Date date3 = new java.util.Date(7, 100, 1);
        int int4 = date3.getHours();
        org.joda.time.LocalDate localDate5 = org.joda.time.LocalDate.fromDateFields(date3);
        date3.setMonth((int) (byte) 100);
        java.lang.String str8 = date3.toLocaleString();
        date3.setHours((-1645515573));
        org.junit.Assert.assertEquals(date3.toString(), "Thu Aug 29 03:00:00 GMT+10:00 185794");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "May 1, 1923 12:00:00 AM" + "'", str8, "May 1, 1923 12:00:00 AM");
    }

    @Test
    public void test11998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11998");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.Chronology chronology2 = localDateTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.weeks();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.secondOfMinute();
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) 69, chronology2);
        long long9 = chronology2.add((long) 378, (long) 'a', 428);
        org.joda.time.DurationField durationField10 = chronology2.millis();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 41894L + "'", long9 == 41894L);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test11999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test11999");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.DateMidnight dateMidnight2 = new org.joda.time.DateMidnight((long) (short) 100, dateTimeZone1);
        org.joda.time.DateMidnight dateMidnight4 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight2.withWeekyear(2);
        org.joda.time.DateMidnight.Property property7 = dateMidnight2.weekOfWeekyear();
        java.lang.String str8 = property7.getAsString();
        java.util.Locale locale9 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str10 = property7.getAsShortText(locale9);
        java.lang.String str11 = property7.getName();
        int int12 = property7.get();
        org.joda.time.DateMidnight dateMidnight14 = property7.addToCopy(7L);
        java.util.Locale locale18 = new java.util.Locale("Chinese", "10");
        java.lang.String str19 = locale18.getDisplayScript();
        java.lang.String str20 = locale18.getDisplayName();
        org.joda.time.DateMidnight dateMidnight21 = property7.setCopy("10", locale18);
        org.joda.time.DateMidnight dateMidnight22 = property7.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight24 = property7.addToCopy(7336605);
        org.junit.Assert.assertNotNull(dateMidnight4);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekOfWeekyear" + "'", str11, "weekOfWeekyear");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertEquals(locale18.toString(), "chinese_10");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "chinese (10)" + "'", str20, "chinese (10)");
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight24);
    }

    @Test
    public void test12000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest23.test12000");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant5 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime6 = timeOfDay3.toDateTime((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Chronology chronology7 = instant5.getChronology();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay(0, (int) (byte) 1);
        org.joda.time.Instant instant12 = new org.joda.time.Instant((long) (short) -1);
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTime((org.joda.time.ReadableInstant) instant12);
        int[] intArray15 = chronology7.get((org.joda.time.ReadablePartial) timeOfDay10, (long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology7);
        java.lang.Object obj17 = mutableDateTime16.clone();
        int int18 = mutableDateTime16.getMinuteOfHour();
        mutableDateTime16.addMinutes((int) (byte) 10);
        mutableDateTime16.setMillis(0L);
        int int23 = mutableDateTime16.getRoundingMode();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime16.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime26 = property24.set(26844);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26844 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[23, 59, 59, 999]");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(property24);
    }
}

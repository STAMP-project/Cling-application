import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest24 {

    public static boolean debug = false;

    @Test
    public void test12001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12001");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = timeOfDay8.toDateTimeToday(dateTimeZone9);
        mutableDateTime3.setZoneRetainFields(dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime3, readableDuration12);
        mutableDateTime3.setTime(10, 2, 0, 55);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime3.weekOfWeekyear();
        int int20 = property19.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime21 = property19.roundHalfFloor();
        mutableDateTime21.setMillis((long) 1898);
        mutableDateTime21.setDate((long) (short) 0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime21);
    }

    @Test
    public void test12002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12002");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 0);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime3.dayOfWeek();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime3.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundFloor();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.millisOfDay();
        int int11 = mutableDateTime9.getYearOfEra();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime14 = property12.getMutableDateTime();
        org.joda.time.Chronology chronology15 = null;
        mutableDateTime14.setChronology(chronology15);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime14.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime19 = property17.set(26559699);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26559699 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test12003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12003");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(chronology4);
        org.joda.time.Period period6 = new org.joda.time.Period((long) 11, (-2234643900000L), chronology4);
        org.joda.time.DurationField durationField7 = chronology4.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.halfdayOfDay();
        org.joda.time.DurationField durationField9 = chronology4.months();
        org.joda.time.DurationField durationField10 = chronology4.days();
        int int13 = durationField10.getDifference((long) 6, (long) 293);
        java.lang.String str14 = durationField10.getName();
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "days" + "'", str14, "days");
    }

    @Test
    public void test12004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12004");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime5 = dateTime3.plusSeconds(17);
        int int6 = dateTime3.getHourOfDay();
        org.joda.time.DateTime dateTime8 = dateTime3.minus((long) 9);
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period12 = org.joda.time.Period.minutes(1);
        java.lang.String str13 = period12.toString();
        org.joda.time.Period period14 = period10.withFields((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period16 = period14.plusMillis(100);
        org.joda.time.Period period17 = period14.negated();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType18.getDurationType();
        boolean boolean20 = period14.isSupported(durationFieldType19);
        org.joda.time.Weeks weeks21 = period14.toStandardWeeks();
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology25 = localTime24.getChronology();
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) 5, chronology25);
        org.joda.time.Period period27 = new org.joda.time.Period((java.lang.Object) period14, chronology25);
        org.joda.time.DateTime dateTime28 = dateTime8.plus((org.joda.time.ReadablePeriod) period14);
        int int29 = dateTime8.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 7 + "'", int6 == 7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT1M" + "'", str13, "PT1M");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(weeks21);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
    }

    @Test
    public void test12005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12005");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        org.joda.time.MutablePeriod mutablePeriod1 = mutablePeriod0.copy();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.millis();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(chronology9);
        org.joda.time.Period period11 = new org.joda.time.Period((long) 25, (long) (-1), periodType6, chronology9);
        org.joda.time.PeriodType periodType12 = periodType6.withWeeksRemoved();
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology17 = localTime16.getChronology();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((-1L), (long) 17, chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.secondOfDay();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.yearOfCentury();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology17);
        org.joda.time.Period period22 = new org.joda.time.Period(345600000L, (long) '#', periodType6, chronology17);
        org.joda.time.Period period24 = period22.withMillis(12);
        mutablePeriod0.add((org.joda.time.ReadablePeriod) period24);
        int int26 = mutablePeriod0.getSeconds();
        org.junit.Assert.assertNotNull(mutablePeriod1);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test12006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12006");
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = timeOfDay7.toDateTimeToday(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withCenturyOfEra(10);
        boolean boolean12 = dateTime11.isEqualNow();
        org.joda.time.Chronology chronology13 = dateTime11.getChronology();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(15, 5, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.clockhourOfDay();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(1L, chronology13);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(chronology13);
        org.joda.time.LocalTime.Property property18 = localTime17.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        org.joda.time.LocalTime localTime21 = property18.setCopy(0);
        java.lang.String str22 = property18.getAsShortText();
        org.joda.time.LocalTime localTime24 = property18.addCopy(256);
        org.joda.time.LocalTime localTime26 = localTime24.minusMinutes(26163694);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localTime21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "474" + "'", str22, "474");
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
    }

    @Test
    public void test12007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12007");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime10 = dateTime6.plusDays((int) (byte) -1);
        java.util.Date date11 = dateTime10.toDate();
        org.joda.time.DateTime.Property property12 = dateTime10.dayOfMonth();
        org.joda.time.DateTime dateTime13 = property12.withMinimumValue();
        org.joda.time.DateTime dateTime14 = property12.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test12008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12008");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay(0, (int) '4', chronology3);
        org.joda.time.TimeOfDay.Property property5 = timeOfDay4.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay6 = property5.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minusMinutes(3172001);
        boolean boolean9 = localTime0.isBefore((org.joda.time.ReadablePartial) timeOfDay8);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay8.minusHours(0);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology14 = localTime13.getChronology();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 10, chronology17);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Chronology chronology20 = null;
        mutablePeriod18.setPeriod(readableDuration19, chronology20);
        mutablePeriod18.setSeconds(0);
        int[] intArray25 = chronology14.get((org.joda.time.ReadablePeriod) mutablePeriod18, (long) (short) -1);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = timeOfDay31.toDateTimeToday(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.minus((long) (short) 0);
        org.joda.time.Period period37 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period39 = org.joda.time.Period.minutes(1);
        java.lang.String str40 = period39.toString();
        org.joda.time.Period period41 = period37.withFields((org.joda.time.ReadablePeriod) period39);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period43 = period37.normalizedStandard(periodType42);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(readableDuration26, (org.joda.time.ReadableInstant) dateTime35, periodType42);
        int int45 = mutablePeriod44.getMonths();
        mutablePeriod18.add((org.joda.time.ReadablePeriod) mutablePeriod44);
        org.joda.time.TimeOfDay timeOfDay47 = timeOfDay8.plus((org.joda.time.ReadablePeriod) mutablePeriod44);
        // The following exception was thrown during execution in test generation
        try {
            int int49 = timeOfDay8.getValue(441);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 441");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT1M" + "'", str40, "PT1M");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(timeOfDay47);
    }

    @Test
    public void test12009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12009");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) '4', chronology2);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusMinutes(1899);
        org.joda.time.TimeOfDay.Property property6 = timeOfDay3.millisOfSecond();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay3.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay3.minusMinutes(26190505);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay3.plusMinutes(436);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
    }

    @Test
    public void test12010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12010");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = localDate6.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.withYear(1899);
        org.joda.time.Interval interval15 = yearMonthDay12.toInterval();
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay12.withDayOfMonth(12);
        org.joda.time.DateMidnight dateMidnight18 = yearMonthDay17.toDateMidnight();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType20 = yearMonthDay17.getFieldType(26550673);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26550673");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1899 + "'", int7 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(dateMidnight18);
    }

    @Test
    public void test12011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12011");
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod();
        mutablePeriod3.addWeeks((int) (byte) 100);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = timeOfDay14.getFields();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = timeOfDay14.toDateTimeToday(dateTimeZone16);
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period23 = period19.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period25 = period19.normalizedStandard(periodType24);
        org.joda.time.Period period26 = new org.joda.time.Period(readableDuration9, (org.joda.time.ReadableInstant) dateTime17, periodType24);
        org.joda.time.PeriodType periodType27 = periodType24.withMillisRemoved();
        org.joda.time.Period period28 = interval8.toPeriod(periodType27);
        org.joda.time.TimeOfDay timeOfDay33 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray34 = timeOfDay33.getFields();
        org.joda.time.DateTimeZone dateTimeZone35 = null;
        org.joda.time.DateTime dateTime36 = timeOfDay33.toDateTimeToday(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime36.withYearOfCentury(16);
        org.joda.time.DateTime dateTime40 = dateTime36.plusYears((-1));
        boolean boolean41 = interval8.contains((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(chronology43);
        org.joda.time.DateTime.Property property45 = dateTime44.secondOfMinute();
        org.joda.time.Interval interval46 = new org.joda.time.Interval(readableDuration42, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Interval interval47 = interval8.overlap((org.joda.time.ReadableInterval) interval46);
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval46);
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology53 = localTime52.getChronology();
        org.joda.time.Interval interval54 = new org.joda.time.Interval((-1L), (long) 17, chronology53);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.millis();
        org.joda.time.Period period56 = interval54.toPeriod(periodType55);
        org.joda.time.Period period57 = interval46.toPeriod(periodType55);
        org.joda.time.PeriodType periodType58 = periodType55.withMillisRemoved();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        int int61 = dateTimeZone59.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(dateTimeZone59);
        boolean boolean64 = dateTimeZone59.isStandardOffset((long) 10);
        long long68 = dateTimeZone59.convertLocalToUTC((long) 38, true, 1645514205352L);
        org.joda.time.TimeOfDay timeOfDay73 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray74 = timeOfDay73.getFields();
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTime dateTime76 = timeOfDay73.toDateTimeToday(dateTimeZone75);
        org.joda.time.DateTime dateTime78 = dateTime76.plus((long) '4');
        org.joda.time.DateTime dateTime80 = dateTime78.plusSeconds(3172001);
        boolean boolean81 = dateTimeZone59.equals((java.lang.Object) dateTime78);
        org.joda.time.Chronology chronology82 = dateTime78.getChronology();
        org.joda.time.LocalTime localTime83 = org.joda.time.LocalTime.now(chronology82);
        org.joda.time.DateTimeField dateTimeField84 = chronology82.dayOfYear();
        org.joda.time.Period period85 = new org.joda.time.Period(1645514358996L, 1645514409757L, periodType55, chronology82);
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((long) 26550, periodType55);
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1M" + "'", str22, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(dateTimeFieldArray34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNull(interval47);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 38L + "'", long68 == 38L);
        org.junit.Assert.assertNotNull(dateTimeFieldArray74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(localTime83);
        org.junit.Assert.assertNotNull(dateTimeField84);
    }

    @Test
    public void test12012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12012");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        boolean boolean2 = dateTimeFormatter1.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter1.withDefaultYear(3);
        java.util.Date date10 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.fromDateFields(date10);
        int int12 = localDate11.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        int int15 = dateTimeZone13.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime16 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.YearMonthDay yearMonthDay17 = new org.joda.time.YearMonthDay(dateTimeZone13);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTime dateTime20 = dateTime19.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str23 = dateTimeZone22.getID();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str28 = locale25.getDisplayVariant(locale27);
        java.lang.String str29 = dateTimeZone22.getName((long) 5, locale25);
        org.joda.time.DateTime dateTime30 = dateTime20.withZoneRetainFields(dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight31 = yearMonthDay17.toDateMidnight(dateTimeZone22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter4.withZone(dateTimeZone22);
        java.util.Locale locale33 = dateTimeFormatter4.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.parse("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd.000", dateTimeFormatter4);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"1899W105T??????.000\" is malformed at \"W105T??????.000\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1899 + "'", int12 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.016" + "'", str23, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.016" + "'", str29, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNull(locale33);
    }

    @Test
    public void test12013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12013");
        org.joda.time.LocalDate localDate0 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate2 = localDate0.minusWeeks(26165226);
        org.joda.time.LocalDate.Property property3 = localDate2.yearOfCentury();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 10, chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withMinuteOfHour(0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 10, chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withWeekyear((int) (short) 0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 10, chronology18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod19, 15);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType22.getDurationType();
        int int24 = localDateTime21.get(dateTimeFieldType22);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.plusSeconds(12);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withDayOfYear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusYears((-1));
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusMinutes(5603523);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.millisOfDay();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.era();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.plusMinutes(26570163);
        org.joda.time.LocalDateTime.Property property37 = localDateTime32.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean38 = localDate2.isBefore((org.joda.time.ReadablePartial) localDateTime32);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test12014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12014");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int2 = calendar0.getMaximum((int) (short) 0);
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.LocalTime.Property property7 = localTime3.property(dateTimeFieldType5);
        org.joda.time.LocalTime localTime9 = property7.addNoWrapToCopy(81);
        org.joda.time.LocalTime localTime10 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime11 = property7.withMinimumValue();
        org.joda.time.LocalTime.Property property12 = localTime11.hourOfDay();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645514659608,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=19,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=19,MILLISECOND=624,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test12015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12015");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.plus((long) '4');
        org.joda.time.DateTime.Property property10 = dateTime7.yearOfCentury();
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test12016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12016");
        java.util.Date date8 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date8);
        int int10 = localDate9.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime14 = localDate9.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.withCenturyOfEra((int) (short) 1);
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period23 = period19.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period23.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.months();
        int int27 = period25.get(durationFieldType26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight15.withPeriodAdded((org.joda.time.ReadablePeriod) period25, 0);
        org.joda.time.DateMidnight.Property property30 = dateMidnight15.monthOfYear();
        org.joda.time.DateMidnight dateMidnight31 = property30.roundHalfFloorCopy();
        boolean boolean32 = property30.isLeap();
        org.joda.time.DateTimeField dateTimeField33 = property30.getField();
        long long35 = dateTimeField33.roundFloor((-1641567228L));
        long long37 = dateTimeField33.remainder(2177280000000000L);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1899 + "'", int10 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1M" + "'", str22, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-2678400000L) + "'", long35 == (-2678400000L));
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 259200000L + "'", long37 == 259200000L);
    }

    @Test
    public void test12017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12017");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.monthOfYear();
        java.lang.String str9 = property8.getAsText();
        java.lang.String str10 = property8.toString();
        org.joda.time.DateTime dateTime11 = property8.roundHalfCeilingCopy();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime18 = timeOfDay16.toDateTimeToday(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.withCenturyOfEra(10);
        boolean boolean21 = dateTime20.isEqualNow();
        org.joda.time.Chronology chronology22 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.secondOfMinute();
        int int25 = dateTimeField23.getMinimumValue((long) 99);
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray31 = timeOfDay30.getFields();
        org.joda.time.Period period33 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period35 = org.joda.time.Period.minutes(1);
        java.lang.String str36 = period35.toString();
        org.joda.time.Period period37 = period33.withFields((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Period period39 = period37.plusMillis(100);
        org.joda.time.Period period40 = period37.negated();
        org.joda.time.Period period42 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period44 = org.joda.time.Period.minutes(1);
        java.lang.String str45 = period44.toString();
        org.joda.time.Period period46 = period42.withFields((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period48 = period46.plusMillis(100);
        boolean boolean49 = period40.equals((java.lang.Object) period48);
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period51 = period40.withFields((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay30.plus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.TimeOfDay.Property property53 = timeOfDay30.secondOfMinute();
        int int54 = property53.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay55 = property53.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay57 = property53.addWrapFieldToCopy(7);
        org.joda.time.TimeOfDay timeOfDay58 = property53.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay60 = timeOfDay58.withMinuteOfHour((int) (byte) 10);
        java.util.Locale locale62 = java.util.Locale.CHINESE;
        java.lang.String str63 = dateTimeField23.getAsText((org.joda.time.ReadablePartial) timeOfDay60, 12, locale62);
        java.lang.String str64 = locale62.getDisplayName();
        java.lang.String str65 = property8.getAsShortText(locale62);
        org.joda.time.DateTime dateTime66 = property8.roundCeilingCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "February" + "'", str9, "February");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[monthOfYear]" + "'", str10, "Property[monthOfYear]");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PT1M" + "'", str36, "PT1M");
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PT1M" + "'", str45, "PT1M");
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(timeOfDay52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertNotNull(timeOfDay57);
        org.junit.Assert.assertNotNull(timeOfDay58);
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "12" + "'", str63, "12");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Chinese" + "'", str64, "Chinese");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\u4e8c\u6708" + "'", str65, "\u4e8c\u6708");
        org.junit.Assert.assertNotNull(dateTime66);
    }

    @Test
    public void test12018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12018");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHourMinute();
        org.joda.time.DateTimeZone dateTimeZone1 = dateTimeFormatter0.getZone();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = timeOfDay10.toDateTimeToday(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withCenturyOfEra(10);
        boolean boolean15 = dateTime14.isEqualNow();
        org.joda.time.Chronology chronology16 = dateTime14.getChronology();
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay(15, 5, chronology16);
        org.joda.time.DurationField durationField18 = chronology16.years();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 25, (-11L), chronology16);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(chronology16);
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.now(chronology16);
        org.joda.time.DateTimeField dateTimeField22 = chronology16.secondOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter0.withChronology(chronology16);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
    }

    @Test
    public void test12019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12019");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        java.lang.String str9 = property7.toString();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Property[weekOfWeekyear]" + "'", str9, "Property[weekOfWeekyear]");
    }

    @Test
    public void test12020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12020");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMaximumValue();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 10, chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMinuteOfHour(0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 10, chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = property18.addToCopy((long) 12);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime20);
        int int22 = localDateTime20.getMonthOfYear();
        java.util.Calendar calendar24 = java.util.Calendar.getInstance();
        calendar24.setLenient(false);
        long long27 = calendar24.getTimeInMillis();
        java.util.Locale locale30 = new java.util.Locale("Feb", "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.017Z");
        boolean boolean31 = calendar24.after((java.lang.Object) locale30);
        java.lang.String str32 = localDateTime20.toString("114813Z", locale30);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(calendar24);
// flaky:         org.junit.Assert.assertEquals(calendar24.toString(), "java.util.GregorianCalendar[time=1645514659693,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=19,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=19,MILLISECOND=709,ZONE_OFFSET=16,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645514659693L + "'", long27 == 1645514659693L);
        org.junit.Assert.assertEquals(locale30.toString(), "feb_1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.017Z");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "114813" + "'", str32, "114813");
    }

    @Test
    public void test12021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12021");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = timeOfDay8.toDateTimeToday(dateTimeZone9);
        mutableDateTime3.setZoneRetainFields(dateTimeZone9);
        org.joda.time.Chronology chronology12 = null;
        mutableDateTime3.setChronology(chronology12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime3.centuryOfEra();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime3.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundHalfEven();
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType19 = periodType18.withDaysRemoved();
        org.joda.time.Period period20 = new org.joda.time.Period((long) 26219841, periodType18);
        org.joda.time.Period period22 = period20.withMonths(26295197);
        mutableDateTime16.add((org.joda.time.ReadablePeriod) period22);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period22);
    }

    @Test
    public void test12022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12022");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfCentury(16);
        org.joda.time.DateTime dateTime11 = dateTime7.plusYears((-1));
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime11.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime12.property(dateTimeFieldType14);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((-2));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) property16, dateTimeZone18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.MutableDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
    }

    @Test
    public void test12023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12023");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period12 = org.joda.time.Period.minutes(1);
        java.lang.String str13 = period12.toString();
        org.joda.time.Period period14 = period10.withFields((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period16 = period14.plusMillis(100);
        org.joda.time.Period period17 = period14.negated();
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period23 = period19.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period23.plusMillis(100);
        boolean boolean26 = period17.equals((java.lang.Object) period25);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period28 = period17.withFields((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.LocalDate localDate29 = localDate8.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.Period period31 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period33 = org.joda.time.Period.minutes(1);
        java.lang.String str34 = period33.toString();
        org.joda.time.Period period35 = period31.withFields((org.joda.time.ReadablePeriod) period33);
        int int36 = period31.getMinutes();
        org.joda.time.Period period37 = period31.toPeriod();
        org.joda.time.LocalDate localDate38 = localDate29.plus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.LocalDate.Property property39 = localDate38.monthOfYear();
        org.joda.time.LocalDate.Property property40 = localDate38.yearOfEra();
        org.joda.time.LocalDate localDate41 = property40.withMinimumValue();
        int int42 = localDate41.getEra();
        int int43 = localDate41.getDayOfMonth();
        int int44 = localDate41.getWeekyear();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT1M" + "'", str13, "PT1M");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1M" + "'", str22, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT1M" + "'", str34, "PT1M");
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 10 + "'", int43 == 10);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test12024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12024");
        java.util.Date date6 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromDateFields(date6);
        org.joda.time.LocalDate.Property property8 = localDate7.dayOfWeek();
        org.joda.time.Chronology chronology9 = localDate7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.year();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 26321253, chronology9);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test12025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12025");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((-9000L), (long) 4);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str5 = dateTimeZone4.getID();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(dateTimeZone4);
        org.joda.time.DateTime dateTime8 = dateTime6.plusSeconds(17);
        boolean boolean9 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime8);
        java.util.Date date15 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.fromDateFields(date15);
        int int17 = localDate16.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        int int20 = dateTimeZone18.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime21 = localDate16.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay(dateTimeZone18);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay22.withYear(1899);
        org.joda.time.Interval interval25 = yearMonthDay22.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray26 = yearMonthDay22.getFieldTypes();
        org.joda.time.YearMonthDay.Property property27 = yearMonthDay22.year();
        org.joda.time.YearMonthDay yearMonthDay28 = property27.getYearMonthDay();
        org.joda.time.LocalDate localDate29 = yearMonthDay28.toLocalDate();
        int int30 = localDate29.size();
        org.joda.time.LocalDate localDate32 = localDate29.minusMonths(18);
        java.util.Date date38 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.fromDateFields(date38);
        org.joda.time.LocalDate.Property property40 = localDate39.weekOfWeekyear();
        org.joda.time.LocalDate localDate41 = property40.getLocalDate();
        org.joda.time.Period period43 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period45 = org.joda.time.Period.minutes(1);
        java.lang.String str46 = period45.toString();
        org.joda.time.Period period47 = period43.withFields((org.joda.time.ReadablePeriod) period45);
        org.joda.time.Period period49 = period47.plusMillis(100);
        org.joda.time.Period period50 = period47.negated();
        org.joda.time.Period period52 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period54 = org.joda.time.Period.minutes(1);
        java.lang.String str55 = period54.toString();
        org.joda.time.Period period56 = period52.withFields((org.joda.time.ReadablePeriod) period54);
        org.joda.time.Period period58 = period56.plusMillis(100);
        boolean boolean59 = period50.equals((java.lang.Object) period58);
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period61 = period50.withFields((org.joda.time.ReadablePeriod) mutablePeriod60);
        org.joda.time.LocalDate localDate62 = localDate41.plus((org.joda.time.ReadablePeriod) mutablePeriod60);
        int int63 = mutablePeriod60.getWeeks();
        mutablePeriod60.addMonths(55);
        mutablePeriod60.addHours(3172000);
        mutablePeriod60.addWeeks(19);
        java.lang.String str70 = mutablePeriod60.toString();
        org.joda.time.LocalDate localDate71 = localDate29.plus((org.joda.time.ReadablePeriod) mutablePeriod60);
        org.joda.time.Interval interval72 = interval2.withPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod60);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.016" + "'", str5, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1899 + "'", int17 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNotNull(localDate32);
// flaky:         org.junit.Assert.assertEquals(date38.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT1M" + "'", str46, "PT1M");
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "PT1M" + "'", str55, "PT1M");
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "P55M19WT3172000H" + "'", str70, "P55M19WT3172000H");
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(interval72);
    }

    @Test
    public void test12026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12026");
        java.util.Date date8 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date8);
        int int10 = localDate9.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime14 = localDate9.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone11);
        org.joda.time.Interval interval16 = dateMidnight15.toInterval();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        org.joda.time.DateTime dateTime19 = dateTime18.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str22 = dateTimeZone21.getID();
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str27 = locale24.getDisplayVariant(locale26);
        java.lang.String str28 = dateTimeZone21.getName((long) 5, locale24);
        org.joda.time.DateTime dateTime29 = dateTime19.withZoneRetainFields(dateTimeZone21);
        boolean boolean30 = dateMidnight15.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime32 = dateTime19.withMillis((long) 2);
        org.joda.time.DateMidnight dateMidnight33 = dateTime32.toDateMidnight();
        org.joda.time.DateTime.Property property34 = dateTime32.monthOfYear();
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1899 + "'", int10 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.016" + "'", str22, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.016" + "'", str28, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test12027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12027");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period12 = org.joda.time.Period.minutes(1);
        java.lang.String str13 = period12.toString();
        org.joda.time.Period period14 = period10.withFields((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period16 = period14.plusMillis(100);
        org.joda.time.Period period17 = period14.negated();
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period23 = period19.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period23.plusMillis(100);
        boolean boolean26 = period17.equals((java.lang.Object) period25);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period28 = period17.withFields((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.LocalDate localDate29 = localDate8.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.LocalDate localDate31 = localDate29.withYear((int) (byte) 10);
        org.joda.time.LocalDate localDate33 = localDate29.minusWeeks(0);
        org.joda.time.Interval interval34 = localDate33.toInterval();
        org.joda.time.Chronology chronology35 = interval34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.days();
        org.joda.time.DurationField durationField37 = chronology35.eras();
        // The following exception was thrown during execution in test generation
        try {
            int int40 = durationField37.getDifference((long) 26613, 1645514431529L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT1M" + "'", str13, "PT1M");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1M" + "'", str22, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
    }

    @Test
    public void test12028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12028");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfWeek();
        org.joda.time.Chronology chronology8 = localDate6.getChronology();
        org.joda.time.LocalDate localDate10 = localDate6.withYearOfCentury(41);
        org.joda.time.LocalDate.Property property11 = localDate6.dayOfMonth();
        org.joda.time.LocalDate localDate13 = localDate6.plusMonths((-880));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period14 = new org.joda.time.Period((java.lang.Object) (-880));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test12029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12029");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        int int6 = dateTimeZone4.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 16, dateTimeZone4);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 10, chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withMinuteOfHour(0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 10, chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.withDurationAdded(readableDuration20, (int) (byte) 10);
        boolean boolean23 = dateTimeZone4.isLocalDateTimeGap(localDateTime13);
        boolean boolean24 = dateTimeZone1.isLocalDateTimeGap(localDateTime13);
        long long26 = dateTimeZone1.previousTransition((long) (byte) 100);
        long long29 = dateTimeZone1.adjustOffset(1645514225776L, true);
        java.util.Locale locale31 = null;
        java.lang.String str32 = dateTimeZone1.getName((long) 3600000, locale31);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1645514225776L + "'", long29 == 1645514225776L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.016" + "'", str32, "+00:00:00.016");
    }

    @Test
    public void test12030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12030");
        java.util.Date date8 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date8);
        int int10 = localDate9.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime14 = localDate9.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.withCenturyOfEra((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight15.plus(readableDuration18);
        org.joda.time.DateMidnight.Property property20 = dateMidnight15.year();
        org.joda.time.DateMidnight.Property property21 = dateMidnight15.weekOfWeekyear();
        int int22 = property21.getMinimumValueOverall();
        org.joda.time.DateMidnight dateMidnight23 = property21.withMinimumValue();
        org.joda.time.DateTime dateTime24 = dateMidnight23.toDateTime();
        org.joda.time.DateTime dateTime26 = dateTime24.plusDays(436);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1899 + "'", int10 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test12031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12031");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = localDate6.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str18 = dateTimeZone17.getID();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str23 = locale20.getDisplayVariant(locale22);
        java.lang.String str24 = dateTimeZone17.getName((long) 5, locale20);
        org.joda.time.DateTime dateTime25 = dateTime15.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight26 = yearMonthDay12.toDateMidnight(dateTimeZone17);
        org.joda.time.YearMonthDay.Property property27 = yearMonthDay12.year();
        org.joda.time.YearMonthDay yearMonthDay28 = property27.withMaximumValue();
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.withYear(26292230);
        org.joda.time.YearMonthDay.Property property31 = yearMonthDay28.year();
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay28.minusDays(64773);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1899 + "'", int7 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.016" + "'", str18, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.016" + "'", str24, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(yearMonthDay33);
    }

    @Test
    public void test12032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12032");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearDay();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(periodType3);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.millis();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology14 = localTime13.getChronology();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(chronology14);
        org.joda.time.Period period16 = new org.joda.time.Period((long) 25, (long) (-1), periodType11, chronology14);
        org.joda.time.PeriodType periodType17 = periodType11.withWeeksRemoved();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology22 = localTime21.getChronology();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((-1L), (long) 17, chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.secondOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology22.yearOfCentury();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology22);
        org.joda.time.Period period27 = new org.joda.time.Period(345600000L, (long) '#', periodType11, chronology22);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now(chronology32);
        org.joda.time.Period period34 = new org.joda.time.Period((long) 11, (-2234643900000L), chronology32);
        org.joda.time.DurationField durationField35 = chronology32.halfdays();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.halfdayOfDay();
        org.joda.time.Period period37 = new org.joda.time.Period(0L, (long) 55, periodType11, chronology32);
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 7, 1645514261022L, periodType3, chronology32);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(3600000L, periodType3);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod39.setSeconds(26318644);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'seconds'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test12033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12033");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((-1L), (long) 17, chronology4);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.millis();
        org.joda.time.Period period7 = interval5.toPeriod(periodType6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTime.Property property10 = dateTime9.secondOfMinute();
        java.lang.String str11 = property10.getAsString();
        java.lang.String str12 = property10.getAsShortText();
        org.joda.time.DateTime dateTime13 = property10.roundFloorCopy();
        java.lang.String str14 = property10.getAsString();
        org.joda.time.Interval interval15 = property10.toInterval();
        boolean boolean16 = interval5.isAfter((org.joda.time.ReadableInterval) interval15);
        long long17 = interval15.getEndMillis();
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "19" + "'", str11, "19");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "19" + "'", str12, "19");
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "19" + "'", str14, "19");
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645514660000L + "'", long17 == 1645514660000L);
    }

    @Test
    public void test12034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12034");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(1645491600000L);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray11 = timeOfDay10.getFields();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTimeToday(dateTimeZone12);
        org.joda.time.Period period15 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period17 = org.joda.time.Period.minutes(1);
        java.lang.String str18 = period17.toString();
        org.joda.time.Period period19 = period15.withFields((org.joda.time.ReadablePeriod) period17);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period21 = period15.normalizedStandard(periodType20);
        org.joda.time.Period period22 = new org.joda.time.Period(readableDuration5, (org.joda.time.ReadableInstant) dateTime13, periodType20);
        boolean boolean24 = periodType20.equals((java.lang.Object) 100L);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology27 = localTime26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.hours();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 26163694, (long) 2022, periodType20, chronology27);
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight(21168000036L, chronology27);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.minusMonths(42446);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        int int37 = dateTimeZone35.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(dateTimeZone35);
        org.joda.time.ReadableDuration readableDuration39 = null;
        mutableDateTime38.add(readableDuration39, 0);
        org.joda.time.Period period43 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period45 = org.joda.time.Period.minutes(1);
        java.lang.String str46 = period45.toString();
        org.joda.time.Period period47 = period43.withFields((org.joda.time.ReadablePeriod) period45);
        org.joda.time.Period period49 = period47.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.months();
        int int51 = period49.get(durationFieldType50);
        mutableDateTime38.add(durationFieldType50, 7);
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight32.withFieldAdded(durationFieldType50, (int) (short) 10);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight1.withFieldAdded(durationFieldType50, (-29));
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight1.minusYears((int) (byte) 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT1M" + "'", str18, "PT1M");
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT1M" + "'", str46, "PT1M");
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(dateMidnight59);
    }

    @Test
    public void test12035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12035");
        java.util.Date date8 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date8);
        int int10 = localDate9.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime14 = localDate9.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.withCenturyOfEra((int) (short) 1);
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period23 = period19.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period23.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.months();
        int int27 = period25.get(durationFieldType26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight15.withPeriodAdded((org.joda.time.ReadablePeriod) period25, 0);
        org.joda.time.DateMidnight.Property property30 = dateMidnight15.monthOfYear();
        org.joda.time.DateMidnight dateMidnight32 = property30.addToCopy(15);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withYearOfCentury(55);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minus((long) 4);
        org.joda.time.DurationFieldType durationFieldType37 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight34.withFieldAdded(durationFieldType37, 26188548);
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology43 = localTime42.getChronology();
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime((long) 5, chronology43);
        org.joda.time.Chronology chronology45 = chronology43.withUTC();
        org.joda.time.DateTimeZone dateTimeZone46 = chronology45.getZone();
        java.util.TimeZone timeZone47 = dateTimeZone46.toTimeZone();
        long long50 = dateTimeZone46.convertLocalToUTC((-1641567228L), true);
        java.util.Locale locale54 = new java.util.Locale("1970W014", "PT0.018S");
        java.lang.String str55 = dateTimeZone46.getName(26160000L, locale54);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime((java.lang.Object) 26188548, dateTimeZone46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1899 + "'", int10 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1M" + "'", str22, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + (-1641567228L) + "'", long50 == (-1641567228L));
        org.junit.Assert.assertEquals(locale54.toString(), "1970w014_PT0.018S");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
    }

    @Test
    public void test12036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12036");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.addWeeks((int) (byte) 100);
        org.joda.time.Interval interval5 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.TimeOfDay timeOfDay11 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = timeOfDay11.getFields();
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = timeOfDay11.toDateTimeToday(dateTimeZone13);
        org.joda.time.Period period16 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period18 = org.joda.time.Period.minutes(1);
        java.lang.String str19 = period18.toString();
        org.joda.time.Period period20 = period16.withFields((org.joda.time.ReadablePeriod) period18);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period22 = period16.normalizedStandard(periodType21);
        org.joda.time.Period period23 = new org.joda.time.Period(readableDuration6, (org.joda.time.ReadableInstant) dateTime14, periodType21);
        org.joda.time.PeriodType periodType24 = periodType21.withMillisRemoved();
        org.joda.time.Period period25 = interval5.toPeriod(periodType24);
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray31 = timeOfDay30.getFields();
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = timeOfDay30.toDateTimeToday(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.withYearOfCentury(16);
        org.joda.time.DateTime dateTime37 = dateTime33.plusYears((-1));
        boolean boolean38 = interval5.contains((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(chronology40);
        org.joda.time.DateTime.Property property42 = dateTime41.secondOfMinute();
        org.joda.time.Interval interval43 = new org.joda.time.Interval(readableDuration39, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Interval interval44 = interval5.overlap((org.joda.time.ReadableInterval) interval43);
        mutablePeriod0.setPeriod((org.joda.time.ReadableInterval) interval43);
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology50 = localTime49.getChronology();
        org.joda.time.Interval interval51 = new org.joda.time.Interval((-1L), (long) 17, chronology50);
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.millis();
        org.joda.time.Period period53 = interval51.toPeriod(periodType52);
        org.joda.time.Period period54 = interval43.toPeriod(periodType52);
        org.joda.time.Interval interval57 = new org.joda.time.Interval((-11056028000L), 10L);
        org.joda.time.Interval interval58 = interval43.gap((org.joda.time.ReadableInterval) interval57);
        org.joda.time.Interval interval60 = interval43.withStartMillis((long) 14);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(0L);
        boolean boolean63 = interval43.contains((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTime.Property property64 = dateTime62.dayOfWeek();
        org.joda.time.DateTime dateTime65 = property64.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        int int68 = dateTimeZone66.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime(dateTimeZone66);
        org.joda.time.ReadableDuration readableDuration70 = null;
        mutableDateTime69.add(readableDuration70, 0);
        mutableDateTime69.setYear((int) ' ');
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod();
        mutablePeriod75.addWeeks((int) (byte) 100);
        org.joda.time.Chronology chronology79 = null;
        mutablePeriod75.setPeriod((long) 15, chronology79);
        mutablePeriod75.setMinutes(1970);
        org.joda.time.LocalTime localTime87 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology88 = localTime87.getChronology();
        org.joda.time.MutableDateTime mutableDateTime89 = new org.joda.time.MutableDateTime((long) 5, chronology88);
        org.joda.time.Chronology chronology90 = chronology88.withUTC();
        mutablePeriod75.setPeriod((long) 0, (long) 1, chronology90);
        mutableDateTime69.setChronology(chronology90);
        org.joda.time.DateTimeField dateTimeField93 = chronology90.monthOfYear();
        org.joda.time.DateMidnight dateMidnight94 = org.joda.time.DateMidnight.now(chronology90);
        org.joda.time.MutableDateTime mutableDateTime95 = dateTime65.toMutableDateTime(chronology90);
        org.joda.time.DateTime dateTime97 = dateTime65.minusDays(0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT1M" + "'", str19, "PT1M");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(dateTimeFieldArray31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNull(interval44);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(dateMidnight94);
        org.junit.Assert.assertNotNull(mutableDateTime95);
        org.junit.Assert.assertNotNull(dateTime97);
    }

    @Test
    public void test12037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12037");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = org.joda.time.format.ISODateTimeFormat.tTimeNoMillis();
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = null;
        int int7 = dateTimeParser3.parseInto(dateTimeParserBucket4, "+00:00:00.016", 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = dateTimeFormatter9.withZoneUTC();
        boolean boolean11 = dateTimeFormatter10.isPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser12 = dateTimeFormatter10.getParser();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = null;
        int int16 = dateTimeParser12.parseInto(dateTimeParserBucket13, "2022-02-22T07:18:11.816+00:00:00.016", 68040000);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeParser3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-11) + "'", int7 == (-11));
        org.junit.Assert.assertNotNull(dateTimeFormatter10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeParser12);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-68040001) + "'", int16 == (-68040001));
    }

    @Test
    public void test12038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12038");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 10, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMinuteOfHour(0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 10, chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withWeekyear((int) (short) 0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 10, chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod17, 15);
        org.joda.time.LocalDateTime.Property property20 = localDateTime12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str24 = dateTimeZone23.getID();
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str29 = locale26.getDisplayVariant(locale28);
        java.lang.String str30 = dateTimeZone23.getName((long) 5, locale26);
        org.joda.time.LocalDateTime localDateTime31 = property20.setCopy("18", locale26);
        java.util.Set<java.lang.Character> charSet32 = locale26.getExtensionKeys();
        java.util.Locale.Builder builder33 = builder0.setLocale(locale26);
        java.util.Locale locale34 = java.util.Locale.TAIWAN;
        java.lang.String str36 = locale34.getExtension('u');
        java.util.Locale.Builder builder37 = builder0.setLocale(locale34);
        java.util.Locale locale38 = builder0.build();
        java.util.Locale locale39 = builder0.build();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.016" + "'", str24, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.016" + "'", str30, "+00:00:00.016");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(charSet32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_TW");
    }

    @Test
    public void test12039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12039");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = localDate6.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str18 = dateTimeZone17.getID();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str23 = locale20.getDisplayVariant(locale22);
        java.lang.String str24 = dateTimeZone17.getName((long) 5, locale20);
        org.joda.time.DateTime dateTime25 = dateTime15.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight26 = yearMonthDay12.toDateMidnight(dateTimeZone17);
        org.joda.time.YearMonthDay.Property property27 = yearMonthDay12.year();
        org.joda.time.YearMonthDay yearMonthDay29 = yearMonthDay12.minusMonths((-1));
        org.joda.time.YearMonthDay.Property property30 = yearMonthDay12.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay12.plusMonths((-439));
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1899 + "'", int7 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.016" + "'", str18, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.016" + "'", str24, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(yearMonthDay29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(yearMonthDay32);
    }

    @Test
    public void test12040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12040");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 0);
        org.joda.time.Period period8 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        java.lang.String str11 = period10.toString();
        org.joda.time.Period period12 = period8.withFields((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period14 = period12.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.months();
        int int16 = period14.get(durationFieldType15);
        mutableDateTime3.add(durationFieldType15, 7);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime3.dayOfYear();
        boolean boolean20 = mutableDateTime3.isEqualNow();
        mutableDateTime3.setYear((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = mutableDateTime3.toString("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=17,SECOND=3,MILLISECOND=806,ZONE_OFFSET=16,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: j");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT1M" + "'", str11, "PT1M");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test12041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12041");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        int int5 = dateTimeZone3.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone3);
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7, 0);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime12 = property11.roundHalfEven();
        boolean boolean13 = interval2.isBefore((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = timeOfDay18.getFields();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = timeOfDay18.toDateTimeToday(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withYearOfCentury(16);
        boolean boolean24 = interval2.isAfter((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime25 = interval2.getStart();
        org.joda.time.DateTime dateTime27 = dateTime25.plusHours(42482300);
        int int28 = dateTime25.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 19 + "'", int28 == 19);
    }

    @Test
    public void test12042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12042");
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = timeOfDay7.getFields();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTimeToday(dateTimeZone9);
        org.joda.time.Period period12 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period14 = org.joda.time.Period.minutes(1);
        java.lang.String str15 = period14.toString();
        org.joda.time.Period period16 = period12.withFields((org.joda.time.ReadablePeriod) period14);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period18 = period12.normalizedStandard(periodType17);
        org.joda.time.Period period19 = new org.joda.time.Period(readableDuration2, (org.joda.time.ReadableInstant) dateTime10, periodType17);
        boolean boolean21 = periodType17.equals((java.lang.Object) 100L);
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology26 = localTime25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.hours();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.era();
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight(chronology26);
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay(18, 13, chronology26);
        org.joda.time.DateTimeField dateTimeField31 = chronology26.weekyearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 2022, 1817572000L, periodType17, chronology26);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod32.addMonths(26410);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT1M" + "'", str15, "PT1M");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test12043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12043");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime4.add(readableDuration5, 0);
        mutableDateTime4.setYear((int) ' ');
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime4.secondOfMinute();
        java.util.Date date11 = mutableDateTime4.toDate();
        java.util.Date date17 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.fromDateFields(date17);
        org.joda.time.LocalDate.Property property19 = localDate18.weekOfWeekyear();
        org.joda.time.LocalDate localDate20 = property19.getLocalDate();
        org.joda.time.Period period22 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period24 = org.joda.time.Period.minutes(1);
        java.lang.String str25 = period24.toString();
        org.joda.time.Period period26 = period22.withFields((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Period period28 = period26.plusMillis(100);
        org.joda.time.Period period29 = period26.negated();
        org.joda.time.Period period31 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period33 = org.joda.time.Period.minutes(1);
        java.lang.String str34 = period33.toString();
        org.joda.time.Period period35 = period31.withFields((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Period period37 = period35.plusMillis(100);
        boolean boolean38 = period29.equals((java.lang.Object) period37);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period40 = period29.withFields((org.joda.time.ReadablePeriod) mutablePeriod39);
        org.joda.time.LocalDate localDate41 = localDate20.plus((org.joda.time.ReadablePeriod) mutablePeriod39);
        org.joda.time.LocalDate.Property property42 = localDate41.weekOfWeekyear();
        java.lang.String str43 = localDate41.toString();
        int int44 = localDate41.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        int int47 = dateTimeZone45.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone45);
        org.joda.time.DateTime dateTime49 = localDate41.toDateTimeAtCurrentTime(dateTimeZone45);
        mutableDateTime4.setZoneRetainFields(dateTimeZone45);
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(26284324L, dateTimeZone45);
        long long54 = dateTimeZone45.adjustOffset(0L, true);
        boolean boolean56 = dateTimeZone45.isStandardOffset(0L);
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Sun Feb 24 07:24:20 GMT+00:00 32");
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT1M" + "'", str25, "PT1M");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT1M" + "'", str34, "PT1M");
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1899-03-10" + "'", str43, "1899-03-10");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 10 + "'", int44 == 10);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
    }

    @Test
    public void test12044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12044");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecondFraction();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = dateTimeFormatter0.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = org.joda.time.format.ISODateTimeFormat.tTimeNoMillis();
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = null;
        int int7 = dateTimeParser3.parseInto(dateTimeParserBucket4, "+00:00:00.016", (int) (short) -1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser3);
        java.lang.StringBuffer stringBuffer9 = null;
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearMonthDayTime();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(30844800000L, (long) 11, periodType16);
        java.util.Date date23 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.fromDateFields(date23);
        int int25 = localDate24.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        int int28 = dateTimeZone26.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime29 = localDate24.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.YearMonthDay yearMonthDay30 = new org.joda.time.YearMonthDay(dateTimeZone26);
        org.joda.time.YearMonthDay yearMonthDay32 = yearMonthDay30.withYear(1899);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay30.plusDays(55);
        org.joda.time.DateMidnight dateMidnight35 = yearMonthDay34.toDateMidnight();
        org.joda.time.Chronology chronology36 = yearMonthDay34.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.months();
        org.joda.time.Period period38 = new org.joda.time.Period((long) (-8), (-259200000L), periodType16, chronology36);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate(1645514260022L, chronology36);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        long long43 = dateTimeZone41.previousTransition((long) 8);
        org.joda.time.Chronology chronology44 = chronology36.withZone(dateTimeZone41);
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology49 = localTime48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.hours();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.secondOfDay();
        org.joda.time.DurationField durationField52 = chronology49.months();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) 10, chronology54);
        org.joda.time.Period period57 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period59 = org.joda.time.Period.minutes(1);
        java.lang.String str60 = period59.toString();
        org.joda.time.Period period61 = period57.withFields((org.joda.time.ReadablePeriod) period59);
        int int62 = period57.getMinutes();
        org.joda.time.Period period63 = period57.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod64 = period63.toMutablePeriod();
        org.joda.time.PeriodType periodType65 = period63.getPeriodType();
        mutablePeriod55.setPeriod((org.joda.time.ReadablePeriod) period63);
        long long69 = chronology49.add((org.joda.time.ReadablePeriod) mutablePeriod55, (long) 38, 0);
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight(0L, chronology49);
        org.joda.time.DateTimeZone dateTimeZone71 = chronology49.getZone();
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology74 = localTime73.getChronology();
        org.joda.time.DurationField durationField75 = chronology74.hours();
        org.joda.time.DateTimeField dateTimeField76 = chronology74.year();
        org.joda.time.DateTimeField dateTimeField77 = chronology74.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = org.joda.time.format.ISODateTimeFormat.hour();
        java.util.Locale locale79 = java.util.Locale.KOREAN;
        java.util.Locale locale80 = java.util.Locale.KOREAN;
        java.lang.String str81 = locale79.getDisplayVariant(locale80);
        java.util.Set<java.lang.String> strSet82 = locale79.getUnicodeLocaleKeys();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter83 = dateTimeFormatter78.withLocale(locale79);
        int int84 = dateTimeField77.getMaximumTextLength(locale79);
        java.lang.String str85 = locale79.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            dateTimePrinter1.printTo(stringBuffer9, 1191456000000L, chronology36, 42446, dateTimeZone71, locale79);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimePrinter1);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeParser3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(periodType16);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1899 + "'", int25 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(yearMonthDay32);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 8L + "'", long43 == 8L);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "PT1M" + "'", str60, "PT1M");
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(mutablePeriod64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 38L + "'", long69 == 38L);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeFormatter78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ko");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertNotNull(dateTimeFormatter83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 2 + "'", int84 == 2);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
    }

    @Test
    public void test12045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12045");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = timeOfDay8.getFields();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTimeToday(dateTimeZone10);
        org.joda.time.Period period13 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period15 = org.joda.time.Period.minutes(1);
        java.lang.String str16 = period15.toString();
        org.joda.time.Period period17 = period13.withFields((org.joda.time.ReadablePeriod) period15);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period19 = period13.normalizedStandard(periodType18);
        org.joda.time.Period period20 = new org.joda.time.Period(readableDuration3, (org.joda.time.ReadableInstant) dateTime11, periodType18);
        org.joda.time.PeriodType periodType21 = periodType18.withMillisRemoved();
        org.joda.time.Period period22 = interval2.toPeriod(periodType21);
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = timeOfDay27.toDateTimeToday(dateTimeZone28);
        boolean boolean30 = interval2.contains((org.joda.time.ReadableInstant) dateTime29);
        long long31 = interval2.getStartMillis();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod();
        mutablePeriod32.addWeeks((int) (byte) 100);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.TimeOfDay timeOfDay43 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray44 = timeOfDay43.getFields();
        org.joda.time.DateTimeZone dateTimeZone45 = null;
        org.joda.time.DateTime dateTime46 = timeOfDay43.toDateTimeToday(dateTimeZone45);
        org.joda.time.Period period48 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period50 = org.joda.time.Period.minutes(1);
        java.lang.String str51 = period50.toString();
        org.joda.time.Period period52 = period48.withFields((org.joda.time.ReadablePeriod) period50);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period54 = period48.normalizedStandard(periodType53);
        org.joda.time.Period period55 = new org.joda.time.Period(readableDuration38, (org.joda.time.ReadableInstant) dateTime46, periodType53);
        org.joda.time.PeriodType periodType56 = periodType53.withMillisRemoved();
        org.joda.time.Period period57 = interval37.toPeriod(periodType56);
        org.joda.time.TimeOfDay timeOfDay62 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray63 = timeOfDay62.getFields();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = timeOfDay62.toDateTimeToday(dateTimeZone64);
        org.joda.time.DateTime dateTime67 = dateTime65.withYearOfCentury(16);
        org.joda.time.DateTime dateTime69 = dateTime65.plusYears((-1));
        boolean boolean70 = interval37.contains((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(chronology72);
        org.joda.time.DateTime.Property property74 = dateTime73.secondOfMinute();
        org.joda.time.Interval interval75 = new org.joda.time.Interval(readableDuration71, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Interval interval76 = interval37.overlap((org.joda.time.ReadableInterval) interval75);
        mutablePeriod32.setPeriod((org.joda.time.ReadableInterval) interval75);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.getDefault();
        int int80 = dateTimeZone78.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime81 = new org.joda.time.MutableDateTime(dateTimeZone78);
        org.joda.time.ReadableDuration readableDuration82 = null;
        mutableDateTime81.add(readableDuration82, 0);
        org.joda.time.MutableDateTime.Property property85 = mutableDateTime81.dayOfWeek();
        org.joda.time.MutableDateTime.Property property86 = mutableDateTime81.minuteOfDay();
        boolean boolean87 = interval75.isAfter((org.joda.time.ReadableInstant) mutableDateTime81);
        mutableDateTime81.add((long) 99);
        boolean boolean90 = interval2.contains((org.joda.time.ReadableInstant) mutableDateTime81);
        boolean boolean91 = interval2.isAfterNow();
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT1M" + "'", str16, "PT1M");
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeFieldArray44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "PT1M" + "'", str51, "PT1M");
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(dateTimeFieldArray63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNull(interval76);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test12046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12046");
        java.util.Date date8 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date8);
        int int10 = localDate9.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime14 = localDate9.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.withCenturyOfEra((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        int int20 = dateTimeZone18.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight15.withZoneRetainFields(dateTimeZone18);
        org.joda.time.Chronology chronology23 = dateMidnight15.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekyearOfCentury();
        long long26 = dateTimeField24.remainder((-52L));
        long long29 = dateTimeField24.getDifferenceAsLong(31557600000L, (long) 26470863);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        int int32 = dateTimeZone30.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(dateTimeZone30);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(dateTimeZone30);
        int int35 = localDate34.getEra();
        org.joda.time.LocalDate localDate37 = localDate34.withYearOfEra((int) (byte) 1);
        org.joda.time.LocalDate localDate39 = localDate34.plusYears((int) '#');
        int int40 = localDate34.getYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = org.joda.time.format.ISODateTimeFormat.basicDate();
        org.joda.time.TimeOfDay timeOfDay44 = new org.joda.time.TimeOfDay((long) 1899);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = timeOfDay44.getFieldType(1);
        java.lang.String str47 = dateTimeFormatter42.print((org.joda.time.ReadablePartial) timeOfDay44);
        int[] intArray48 = timeOfDay44.getValues();
        java.util.Locale locale53 = new java.util.Locale("2022-02-22T07:17:23.582Z", "2022-02-22T07:17:50.555Z", "2022-02-22T07:16:11.187Z");
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray54 = dateTimeField24.set((org.joda.time.ReadablePartial) localDate34, 26542532, intArray48, "20220222T071910.664+0000", locale53);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"20220222T071910.664+0000\" for weekyearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1899 + "'", int10 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 31535999948L + "'", long26 == 31535999948L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd" + "'", str47, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, 1, 899]");
        org.junit.Assert.assertEquals(locale53.toString(), "2022-02-22t07:17:23.582z_2022-02-22T07:17:50.555Z_2022-02-22T07:16:11.187Z");
    }

    @Test
    public void test12047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12047");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = timeOfDay8.toDateTimeToday(dateTimeZone9);
        mutableDateTime3.setZoneRetainFields(dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime3, readableDuration12);
        mutableDateTime3.setTime(10, 2, 0, 55);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime3.weekOfWeekyear();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Period period23 = org.joda.time.Period.minutes(1);
        java.lang.String str24 = period23.toString();
        org.joda.time.LocalTime localTime25 = localTime21.plus((org.joda.time.ReadablePeriod) period23);
        boolean boolean26 = mutableDateTime3.equals((java.lang.Object) localTime25);
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = timeOfDay31.toDateTimeToday(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime37 = dateTime33.plusDays((int) (byte) -1);
        java.util.Date date38 = dateTime37.toDate();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime37, readableDuration39);
        int int41 = dateTime37.getMillisOfDay();
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime3, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime3.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT1M" + "'", str24, "PT1M");
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(date38);
// flaky:         org.junit.Assert.assertEquals(date38.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3172000 + "'", int41 == 3172000);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test12048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12048");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMaximumValue();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 10, chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMinuteOfHour(0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 10, chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = property18.addToCopy((long) 12);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime6.plusDays((-8));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime6.withDayOfYear(984);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 984 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test12049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12049");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(0L, dateTimeZone2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField6 = localDate4.getField(168);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 168");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test12050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12050");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 0);
        org.joda.time.Period period8 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        java.lang.String str11 = period10.toString();
        org.joda.time.Period period12 = period8.withFields((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period14 = period12.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.months();
        int int16 = period14.get(durationFieldType15);
        mutableDateTime3.add(durationFieldType15, 7);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime3.dayOfYear();
        java.util.Date date25 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.fromDateFields(date25);
        int int27 = localDate26.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        int int30 = dateTimeZone28.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime31 = localDate26.toDateTimeAtCurrentTime(dateTimeZone28);
        org.joda.time.YearMonthDay yearMonthDay32 = new org.joda.time.YearMonthDay(dateTimeZone28);
        org.joda.time.YearMonthDay yearMonthDay34 = yearMonthDay32.withYear(1899);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 10, chronology36);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay34.plus((org.joda.time.ReadablePeriod) mutablePeriod37);
        java.util.Date date44 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate45 = org.joda.time.LocalDate.fromDateFields(date44);
        int int46 = localDate45.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        int int49 = dateTimeZone47.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime50 = localDate45.toDateTimeAtCurrentTime(dateTimeZone47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = org.joda.time.format.ISODateTimeFormat.weekyearWeekDay();
        boolean boolean52 = dateTimeFormatter51.isParser();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone56 = dateTimeZone55.toTimeZone();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) (-1), dateTimeZone55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter51.withZone(dateTimeZone55);
        long long60 = dateTimeZone47.getMillisKeepLocal(dateTimeZone55, 0L);
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(dateTimeZone55);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone55);
        org.joda.time.DateTime dateTime63 = yearMonthDay38.toDateTimeAtCurrentTime(dateTimeZone55);
        long long65 = dateTimeZone55.nextTransition(26163678L);
        long long69 = dateTimeZone55.convertLocalToUTC((long) 3172001, false, 65453642244041L);
        mutableDateTime3.setZone(dateTimeZone55);
        org.joda.time.YearMonthDay yearMonthDay71 = new org.joda.time.YearMonthDay(dateTimeZone55);
        org.joda.time.Interval interval72 = yearMonthDay71.toInterval();
        org.joda.time.DateTime dateTime73 = yearMonthDay71.toDateTimeAtCurrentTime();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT1M" + "'", str11, "PT1M");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1899 + "'", int27 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(yearMonthDay34);
        org.junit.Assert.assertNotNull(yearMonthDay38);
// flaky:         org.junit.Assert.assertEquals(date44.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1899 + "'", int46 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-16L) + "'", long60 == (-16L));
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 26163678L + "'", long65 == 26163678L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 3171985L + "'", long69 == 3171985L);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime73);
    }

    @Test
    public void test12051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12051");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfWeek();
        org.joda.time.Chronology chronology8 = localDate6.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.year();
        org.joda.time.DurationField durationField10 = chronology8.hours();
        org.joda.time.DurationFieldType durationFieldType11 = durationField10.getType();
        boolean boolean12 = durationField10.isPrecise();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test12052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12052");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology5 = localTime4.getChronology();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 5, chronology5);
        org.joda.time.TimeOfDay timeOfDay7 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 3172001, chronology5);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.minusHours(4);
        org.joda.time.Chronology chronology10 = timeOfDay9.getChronology();
        org.joda.time.Period period11 = new org.joda.time.Period(1645491171991L, chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = chronology10.getZone();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime(chronology10);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
    }

    @Test
    public void test12053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12053");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        int int5 = dateTimeZone3.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone3);
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7, 0);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime12 = property11.roundHalfEven();
        boolean boolean13 = interval2.isBefore((org.joda.time.ReadableInstant) mutableDateTime12);
        int int14 = mutableDateTime12.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime12.toMutableDateTime();
        org.joda.time.DateTimeField dateTimeField16 = mutableDateTime15.getRoundingField();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime15.centuryOfEra();
        mutableDateTime15.add((-2240524800000L));
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNull(dateTimeField16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test12054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12054");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((int) (short) 0);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 10, chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod15, 15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime10.plusMonths(12);
        org.joda.time.LocalDateTime.Property property20 = localDateTime10.era();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime10.plusMillis((-11));
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfWeek();
        int int24 = localDateTime22.getEra();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str27 = dateTimeZone26.getID();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime30 = dateTime28.plusSeconds(17);
        org.joda.time.DateTime dateTime32 = dateTime28.withDayOfMonth(2);
        org.joda.time.DateTime dateTime34 = dateTime32.withMillisOfSecond(29);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = null;
        boolean boolean36 = dateTime32.isSupported(dateTimeFieldType35);
        int int37 = dateTime32.getCenturyOfEra();
        boolean boolean38 = localDateTime22.equals((java.lang.Object) int37);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.016" + "'", str27, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 20 + "'", int37 == 20);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test12055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12055");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMaximumValue();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime.Property property9 = dateTime8.secondOfMinute();
        org.joda.time.DateTime dateTime10 = property9.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime12 = property9.setCopy("2");
        int int13 = property5.compareTo((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime12.toMutableDateTimeISO();
        java.util.Date date21 = new java.util.Date((-8), 2025, 3172000, (-1), 8, 0);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.fromDateFields(date21);
        int int23 = localDateTime22.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.weekyear();
        org.joda.time.DateTime dateTime25 = localDateTime22.toDateTime();
        mutableDateTime14.setTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime29 = dateTime25.withDurationAdded((long) 292278993, 2200294);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime14);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Tue May 22 23:08:00 GMT+00:00 10745");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test12056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12056");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(16);
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.now(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localTime2);
    }

    @Test
    public void test12057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12057");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.secondOfMinute();
        java.lang.String str3 = property2.getAsString();
        java.lang.String str4 = property2.getAsShortText();
        org.joda.time.DateTimeField dateTimeField5 = property2.getField();
        org.joda.time.DateTime dateTime6 = property2.roundHalfEvenCopy();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        int int12 = dateTimeZone10.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime13.add(readableDuration14, 0);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime13.dayOfWeek();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime13.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime19 = property18.roundHalfEven();
        boolean boolean20 = interval9.isBefore((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = timeOfDay25.getFields();
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = timeOfDay25.toDateTimeToday(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime28.withYearOfCentury(16);
        boolean boolean31 = interval9.isAfter((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = timeOfDay36.toDateTimeToday(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime38.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime42 = dateTime38.plusDays((int) (byte) -1);
        java.util.Date date43 = dateTime42.toDate();
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Interval interval45 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime42, readableDuration44);
        org.joda.time.Interval interval48 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        int int51 = dateTimeZone49.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(dateTimeZone49);
        org.joda.time.ReadableDuration readableDuration53 = null;
        mutableDateTime52.add(readableDuration53, 0);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime52.dayOfWeek();
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime52.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime58 = property57.roundHalfEven();
        boolean boolean59 = interval48.isBefore((org.joda.time.ReadableInstant) mutableDateTime58);
        org.joda.time.TimeOfDay timeOfDay64 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray65 = timeOfDay64.getFields();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = timeOfDay64.toDateTimeToday(dateTimeZone66);
        org.joda.time.DateTime dateTime69 = dateTime67.withYearOfCentury(16);
        boolean boolean70 = interval48.isAfter((org.joda.time.ReadableInstant) dateTime69);
        boolean boolean71 = interval45.abuts((org.joda.time.ReadableInterval) interval48);
        org.joda.time.Interval interval72 = interval9.overlap((org.joda.time.ReadableInterval) interval45);
        org.joda.time.Duration duration73 = interval9.toDuration();
        org.joda.time.TimeOfDay timeOfDay78 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime80 = timeOfDay78.toDateTimeToday(dateTimeZone79);
        org.joda.time.DateTime dateTime82 = dateTime80.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime84 = dateTime82.plusSeconds((int) (short) 100);
        org.joda.time.Interval interval85 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration73, (org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.Period period86 = duration73.toPeriod();
        org.joda.time.DateTime dateTime87 = dateTime6.plus((org.joda.time.ReadableDuration) duration73);
        org.joda.time.DateTimeZone dateTimeZone88 = dateTime6.getZone();
        int int89 = dateTime6.getMonthOfYear();
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "20" + "'", str3, "20");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "20" + "'", str4, "20");
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 16 + "'", int12 == 16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(date43);
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 16 + "'", int51 == 16);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNull(interval72);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 2 + "'", int89 == 2);
    }

    @Test
    public void test12058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12058");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = localDate6.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.withYear(1899);
        org.joda.time.Interval interval15 = yearMonthDay12.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = yearMonthDay12.getFieldTypes();
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay12.year();
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period23 = period19.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period23.plusMillis(100);
        org.joda.time.Period period26 = period23.negated();
        org.joda.time.Period period28 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period30 = org.joda.time.Period.minutes(1);
        java.lang.String str31 = period30.toString();
        org.joda.time.Period period32 = period28.withFields((org.joda.time.ReadablePeriod) period30);
        org.joda.time.Period period34 = period32.plusMillis(100);
        boolean boolean35 = period26.equals((java.lang.Object) period34);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period37 = period26.withFields((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.Period period39 = period26.withYears(16);
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay12.plus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.YearMonthDay yearMonthDay42 = yearMonthDay40.plusYears(2025);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay42.minusDays(26410);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        int int49 = dateTimeZone47.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 1899, dateTimeZone47);
        long long52 = dateTimeZone47.nextTransition((long) 0);
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(10L, dateTimeZone47);
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay(dateTimeZone47);
        org.joda.time.DateTime dateTime55 = yearMonthDay44.toDateTimeAtCurrentTime(dateTimeZone47);
        int int56 = dateTime55.getMinuteOfHour();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1899 + "'", int7 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1M" + "'", str22, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT1M" + "'", str31, "PT1M");
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(yearMonthDay42);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 16 + "'", int49 == 16);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(dateTime55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 24 + "'", int56 == 24);
    }

    @Test
    public void test12059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12059");
        java.util.Date date8 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date8);
        int int10 = localDate9.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime14 = localDate9.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.withCenturyOfEra((int) (short) 1);
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period23 = period19.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period23.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.months();
        int int27 = period25.get(durationFieldType26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight15.withPeriodAdded((org.joda.time.ReadablePeriod) period25, 0);
        org.joda.time.DateMidnight.Property property30 = dateMidnight15.monthOfYear();
        org.joda.time.DateMidnight dateMidnight32 = property30.addToCopy(15);
        org.joda.time.DateMidnight dateMidnight33 = property30.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight35 = property30.addWrapFieldToCopy(59);
        org.joda.time.Interval interval36 = property30.toInterval();
        org.joda.time.DateMidnight dateMidnight38 = property30.addWrapFieldToCopy(26538981);
        org.joda.time.DateMidnight dateMidnight40 = property30.addToCopy(462);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1899 + "'", int10 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1M" + "'", str22, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight40);
    }

    @Test
    public void test12060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12060");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        boolean boolean6 = timeZone2.hasSameRules(timeZone5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone5, locale7);
        int int9 = timeZone5.getRawOffset();
        int int10 = timeZone5.getRawOffset();
        boolean boolean11 = timeZone5.observesDaylightTime();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Period period14 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period16 = org.joda.time.Period.minutes(1);
        java.lang.String str17 = period16.toString();
        org.joda.time.Period period18 = period14.withFields((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period20 = period18.plusMillis(100);
        org.joda.time.LocalTime localTime21 = localTime12.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.LocalTime.Property property22 = localTime12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField23 = property22.getField();
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Period period26 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period28 = org.joda.time.Period.minutes(1);
        java.lang.String str29 = period28.toString();
        org.joda.time.Period period30 = period26.withFields((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Period period32 = period30.plusMillis(100);
        org.joda.time.LocalTime localTime33 = localTime24.minus((org.joda.time.ReadablePeriod) period30);
        org.joda.time.LocalTime localTime35 = localTime24.minusHours((-1));
        java.util.Locale locale37 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str38 = dateTimeField23.getAsText((org.joda.time.ReadablePartial) localTime24, locale37);
        java.lang.String str39 = locale37.getDisplayCountry();
        java.util.Calendar calendar40 = java.util.Calendar.getInstance(timeZone5, locale37);
        java.util.Calendar calendar41 = java.util.Calendar.getInstance();
        boolean boolean42 = calendar41.isWeekDateSupported();
        calendar41.setTimeInMillis((long) 52);
        java.util.Date date50 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        int int51 = date50.getSeconds();
        date50.setHours((int) (byte) 1);
        date50.setYear(32772);
        org.joda.time.TimeOfDay timeOfDay56 = org.joda.time.TimeOfDay.fromDateFields(date50);
        calendar41.setTime(date50);
        int int58 = calendar41.getWeeksInWeekYear();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone61 = dateTimeZone60.toTimeZone();
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology65 = localTime64.getChronology();
        org.joda.time.DurationField durationField66 = chronology65.hours();
        org.joda.time.DateTimeField dateTimeField67 = chronology65.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField68 = chronology65.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime69 = org.joda.time.MutableDateTime.now(chronology65);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(0L, chronology65);
        int int71 = dateTimeZone60.getOffset((org.joda.time.ReadableInstant) dateTime70);
        java.util.TimeZone timeZone72 = dateTimeZone60.toTimeZone();
        java.util.Calendar calendar73 = java.util.Calendar.getInstance(timeZone72);
        boolean boolean74 = calendar41.before((java.lang.Object) timeZone72);
        int int75 = timeZone72.getRawOffset();
        boolean boolean76 = timeZone5.hasSameRules(timeZone72);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514660480,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=20,MILLISECOND=496,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 16 + "'", int9 == 16);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT1M" + "'", str17, "PT1M");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT1M" + "'", str29, "PT1M");
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0" + "'", str38, "0");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=1645514660480,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=20,MILLISECOND=496,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1031981391299984,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=19,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=34672,MONTH=2,WEEK_OF_YEAR=11,WEEK_OF_MONTH=3,DAY_OF_MONTH=10,DAY_OF_YEAR=70,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=35,SECOND=0,MILLISECOND=0,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
// flaky:         org.junit.Assert.assertEquals(date50.toString(), "Sun Mar 10 01:35:00 GMT+00:00 34672");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 52 + "'", int58 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(timeZone61);
        org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 16 + "'", int71 == 16);
        org.junit.Assert.assertNotNull(timeZone72);
        org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar73);
// flaky:         org.junit.Assert.assertEquals(calendar73.toString(), "java.util.GregorianCalendar[time=1645514660480,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=20,MILLISECOND=496,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 16 + "'", int75 == 16);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test12061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12061");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.plus((long) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType10.getDurationType();
        org.joda.time.DateTime dateTime13 = dateTime9.withField(dateTimeFieldType10, 16);
        org.joda.time.DateTime dateTime15 = dateTime9.plusDays(3172017);
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test12062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12062");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minusSeconds(3);
        org.joda.time.Period period8 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        java.lang.String str11 = period10.toString();
        org.joda.time.Period period12 = period8.withFields((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period14 = period12.plusMillis(100);
        org.joda.time.Period period15 = period12.negated();
        int int16 = period12.getDays();
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay6.minus((org.joda.time.ReadablePeriod) period12);
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay6.withMillisOfSecond(52);
        org.joda.time.LocalTime localTime20 = org.joda.time.LocalTime.now();
        org.joda.time.Period period22 = org.joda.time.Period.minutes(1);
        org.joda.time.LocalTime localTime24 = localTime20.withPeriodAdded((org.joda.time.ReadablePeriod) period22, (int) ' ');
        org.joda.time.Period period26 = period22.minusSeconds(2000);
        org.joda.time.Period period28 = period26.minusMonths(5);
        org.joda.time.TimeOfDay timeOfDay29 = timeOfDay6.minus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.TimeOfDay timeOfDay31 = timeOfDay29.plusSeconds(25);
        int[] intArray32 = timeOfDay31.getValues();
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay31.plusMillis(55);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT1M" + "'", str11, "PT1M");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 25, 34, 0]");
        org.junit.Assert.assertNotNull(timeOfDay34);
    }

    @Test
    public void test12063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12063");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = localDate6.getFields();
        org.joda.time.LocalDate localDate11 = localDate6.minusDays(32772);
        org.joda.time.DateTime dateTime12 = localDate11.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        int int15 = dateTimeZone13.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime16.add(readableDuration17, 0);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime16.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime16.yearOfEra();
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((java.lang.Object) mutableDateTime16);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay22.plusMonths(7);
        int[] intArray25 = yearMonthDay22.getValues();
        org.joda.time.YearMonthDay.Property property26 = yearMonthDay22.dayOfMonth();
        java.util.Date date33 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate34 = org.joda.time.LocalDate.fromDateFields(date33);
        int int35 = localDate34.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        int int38 = dateTimeZone36.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime39 = localDate34.toDateTimeAtCurrentTime(dateTimeZone36);
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay(dateTimeZone36);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(chronology41);
        org.joda.time.DateTime dateTime43 = dateTime42.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str46 = dateTimeZone45.getID();
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Locale locale50 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str51 = locale48.getDisplayVariant(locale50);
        java.lang.String str52 = dateTimeZone45.getName((long) 5, locale48);
        org.joda.time.DateTime dateTime53 = dateTime43.withZoneRetainFields(dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight54 = yearMonthDay40.toDateMidnight(dateTimeZone45);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) (short) 100, dateTimeZone45);
        org.joda.time.DateTime dateTime56 = yearMonthDay22.toDateTimeAtMidnight(dateTimeZone45);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((java.lang.Object) localDate11, dateTimeZone45);
        org.joda.time.LocalDate.Property property58 = localDate57.era();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 16 + "'", int15 == 16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(property26);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1899 + "'", int35 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 16 + "'", int38 == 16);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.016" + "'", str46, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00:00.016" + "'", str52, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property58);
    }

    @Test
    public void test12064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12064");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period12 = org.joda.time.Period.minutes(1);
        java.lang.String str13 = period12.toString();
        org.joda.time.Period period14 = period10.withFields((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period16 = period14.plusMillis(100);
        org.joda.time.Period period17 = period14.negated();
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period23 = period19.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period23.plusMillis(100);
        boolean boolean26 = period17.equals((java.lang.Object) period25);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period28 = period17.withFields((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.LocalDate localDate29 = localDate8.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.LocalDate localDate31 = localDate29.withDayOfMonth(5);
        java.lang.String str32 = localDate29.toString();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT1M" + "'", str13, "PT1M");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1M" + "'", str22, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1899-03-10" + "'", str32, "1899-03-10");
    }

    @Test
    public void test12065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12065");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime14 = property13.withMaximumValue();
        org.joda.time.DateTime dateTime15 = localDateTime14.toDateTime();
        java.lang.String str17 = localDateTime14.toString("802719");
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "802719" + "'", str17, "802719");
    }

    @Test
    public void test12066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12066");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((-1L), (long) 17, chronology4);
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = timeOfDay10.toDateTimeToday(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime16 = dateTime12.plusDays((int) (byte) -1);
        java.util.Date date17 = dateTime16.toDate();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, readableDuration18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = timeOfDay25.toDateTimeToday(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime31 = dateTime27.plusDays((int) (byte) -1);
        java.util.Date date32 = dateTime31.toDate();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime31, readableDuration33);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        int int40 = dateTimeZone38.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(dateTimeZone38);
        org.joda.time.ReadableDuration readableDuration42 = null;
        mutableDateTime41.add(readableDuration42, 0);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime41.dayOfWeek();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime41.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime47 = property46.roundHalfEven();
        boolean boolean48 = interval37.isBefore((org.joda.time.ReadableInstant) mutableDateTime47);
        org.joda.time.TimeOfDay timeOfDay53 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray54 = timeOfDay53.getFields();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = timeOfDay53.toDateTimeToday(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.withYearOfCentury(16);
        boolean boolean59 = interval37.isAfter((org.joda.time.ReadableInstant) dateTime58);
        boolean boolean60 = interval34.abuts((org.joda.time.ReadableInterval) interval37);
        org.joda.time.Duration duration61 = interval37.toDuration();
        org.joda.time.Interval interval62 = interval19.withDurationAfterStart((org.joda.time.ReadableDuration) duration61);
        org.joda.time.Interval interval63 = interval5.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration61);
        long long64 = interval5.getEndMillis();
        org.joda.time.Interval interval66 = interval5.withStartMillis((-1698474537000L));
        org.joda.time.Interval interval68 = interval5.withStartMillis(16L);
        org.joda.time.Duration duration69 = interval68.toDuration();
        boolean boolean70 = interval68.containsNow();
        org.joda.time.Interval interval73 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.ReadableDuration readableDuration74 = null;
        org.joda.time.TimeOfDay timeOfDay79 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray80 = timeOfDay79.getFields();
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateTime dateTime82 = timeOfDay79.toDateTimeToday(dateTimeZone81);
        org.joda.time.Period period84 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period86 = org.joda.time.Period.minutes(1);
        java.lang.String str87 = period86.toString();
        org.joda.time.Period period88 = period84.withFields((org.joda.time.ReadablePeriod) period86);
        org.joda.time.PeriodType periodType89 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period90 = period84.normalizedStandard(periodType89);
        org.joda.time.Period period91 = new org.joda.time.Period(readableDuration74, (org.joda.time.ReadableInstant) dateTime82, periodType89);
        org.joda.time.PeriodType periodType92 = periodType89.withMillisRemoved();
        org.joda.time.Period period93 = interval73.toPeriod(periodType92);
        boolean boolean94 = interval73.isAfterNow();
        org.joda.time.MutableInterval mutableInterval95 = interval73.toMutableInterval();
        long long96 = interval73.getStartMillis();
        boolean boolean97 = interval68.isAfter((org.joda.time.ReadableInterval) interval73);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 16 + "'", int40 == 16);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 17L + "'", long64 == 17L);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "PT1M" + "'", str87, "PT1M");
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(periodType89);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(periodType92);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(mutableInterval95);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + (-1L) + "'", long96 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test12067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12067");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((int) (short) 0);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 10, chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod15, 15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime10.plusMonths(12);
        int int20 = localDateTime10.getMillisOfDay();
        org.joda.time.Period period22 = org.joda.time.Period.years(59);
        org.joda.time.Period period24 = period22.withWeeks((int) (byte) 100);
        org.joda.time.Period period26 = period24.withWeeks(19);
        boolean boolean27 = localDateTime10.equals((java.lang.Object) period24);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime10.withCenturyOfEra(53);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 10, chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.plusMillis((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withYearOfCentury(1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.plusSeconds(0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime36.minusSeconds(99);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime36);
        java.lang.String str44 = localDateTime43.toString();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 26 + "'", int20 == 26);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01-01T00:00:00.026" + "'", str44, "1970-01-01T00:00:00.026");
    }

    @Test
    public void test12068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12068");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withHourOfDay(3);
        int int4 = dateTime3.getSecondOfMinute();
        int int5 = dateTime3.getMinuteOfHour();
        org.joda.time.DateTime.Property property6 = dateTime3.centuryOfEra();
        java.util.Date date15 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.fromDateFields(date15);
        int int17 = localDate16.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        int int20 = dateTimeZone18.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime21 = localDate16.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone18);
        org.joda.time.Period period24 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period26 = org.joda.time.Period.minutes(1);
        java.lang.String str27 = period26.toString();
        org.joda.time.Period period28 = period24.withFields((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period30 = period28.plusMillis(100);
        org.joda.time.Period period31 = period28.negated();
        org.joda.time.Period period33 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period35 = org.joda.time.Period.minutes(1);
        java.lang.String str36 = period35.toString();
        org.joda.time.Period period37 = period33.withFields((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Period period39 = period37.plusMillis(100);
        boolean boolean40 = period31.equals((java.lang.Object) period39);
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period42 = period31.withFields((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Chronology chronology44 = null;
        mutablePeriod41.setPeriod(readableDuration43, chronology44);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight22.minus((org.joda.time.ReadablePeriod) mutablePeriod41);
        org.joda.time.Period period48 = org.joda.time.Period.minutes(1);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight46.withPeriodAdded((org.joda.time.ReadablePeriod) period48, (int) (short) 1);
        int int51 = period48.getYears();
        org.joda.time.DateTime dateTime52 = dateTime3.plus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.DateTime dateTime53 = dateTime52.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime55 = dateTime52.plusHours(56035);
        org.joda.time.DateTime dateTime57 = dateTime55.minus(1051226067359968L);
        org.junit.Assert.assertNotNull(dateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 24 + "'", int5 == 24);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertEquals(date15.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1899 + "'", int17 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT1M" + "'", str27, "PT1M");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PT1M" + "'", str36, "PT1M");
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
    }

    @Test
    public void test12069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12069");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int2 = calendar0.getMaximum((int) (short) 0);
        java.util.Date date8 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        date8.setMinutes(54);
        calendar0.setTime(date8);
        int int13 = calendar0.getGreatestMinimum(0);
        boolean boolean14 = calendar0.isWeekDateSupported();
        calendar0.setMinimalDaysInFirstWeek(4);
        calendar0.setFirstDayOfWeek(98);
        boolean boolean19 = calendar0.isWeekDateSupported();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-2234642760016,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=19,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=98,minimalDaysInFirstWeek=4,ERA=1,YEAR=1899,MONTH=2,WEEK_OF_YEAR=10,WEEK_OF_MONTH=1,DAY_OF_MONTH=10,DAY_OF_YEAR=69,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=54,SECOND=0,MILLISECOND=0,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Fri Mar 10 01:54:00 GMT+00:00 1899");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test12070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12070");
        java.util.Date date8 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date8);
        int int10 = localDate9.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime14 = localDate9.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate18 = dateMidnight15.toLocalDate();
        org.joda.time.DateMidnight.Property property19 = dateMidnight15.era();
        int int20 = property19.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField21 = property19.getField();
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1899 + "'", int10 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test12071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12071");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.millis();
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology6 = localTime5.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(chronology6);
        org.joda.time.Period period8 = new org.joda.time.Period((long) 25, (long) (-1), periodType3, chronology6);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.millisOfDay();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromMillisOfDay((-2234643900016L), chronology6);
        org.joda.time.LocalTime.Property property11 = localTime10.millisOfSecond();
        org.joda.time.LocalTime.Property property12 = localTime10.secondOfMinute();
        org.joda.time.LocalTime localTime14 = property12.addCopy(1645514554393L);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test12072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12072");
        java.lang.Object obj1 = null;
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = timeOfDay7.getFields();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTimeToday(dateTimeZone9);
        org.joda.time.Period period12 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period14 = org.joda.time.Period.minutes(1);
        java.lang.String str15 = period14.toString();
        org.joda.time.Period period16 = period12.withFields((org.joda.time.ReadablePeriod) period14);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period18 = period12.normalizedStandard(periodType17);
        org.joda.time.Period period19 = new org.joda.time.Period(readableDuration2, (org.joda.time.ReadableInstant) dateTime10, periodType17);
        org.joda.time.PeriodType periodType20 = periodType17.withMillisRemoved();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType21.getDurationType();
        boolean boolean23 = periodType20.isSupported(durationFieldType22);
        org.joda.time.Period period24 = new org.joda.time.Period(obj1, periodType20);
        org.joda.time.Period period25 = new org.joda.time.Period(1300L, periodType20);
        int int26 = period25.size();
        org.joda.time.Period period27 = period25.negated();
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT1M" + "'", str15, "PT1M");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(period27);
    }

    @Test
    public void test12073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12073");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusMillis(1971);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours(26254691);
        org.joda.time.DateTime dateTime12 = dateTime11.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime14 = dateTime12.minusDays(174);
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test12074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12074");
        org.joda.time.TimeOfDay timeOfDay0 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusSeconds(26164018);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        int int5 = dateTimeZone3.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone3);
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7, 0);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.yearOfEra();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) 5, chronology15);
        org.joda.time.Chronology chronology17 = chronology15.withUTC();
        mutableDateTime6.setChronology(chronology15);
        org.joda.time.DateTimeField dateTimeField19 = chronology15.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay0.withChronologyRetainFields(chronology15);
        java.lang.String str21 = chronology15.toString();
        org.joda.time.DateTimeField dateTimeField22 = chronology15.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField23 = chronology15.minuteOfDay();
        org.joda.time.DurationField durationField24 = dateTimeField23.getDurationField();
        org.junit.Assert.assertNotNull(timeOfDay0);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[UTC]" + "'", str21, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
    }

    @Test
    public void test12075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12075");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "1970-01-01T00:00:00.010", "Property[monthOfYear]" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        java.util.Locale.FilteringMode filteringMode9 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList10 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList7, filteringMode9);
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale11.getDisplayVariant(locale12);
        java.util.Set<java.lang.String> strSet14 = locale11.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale[] localeArray18 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.List<java.util.Locale> localeList21 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList19);
        boolean boolean22 = strSet14.removeAll((java.util.Collection<java.util.Locale>) localeList21);
        strSet14.clear();
        java.util.Spliterator<java.lang.String> strSpliterator24 = strSet14.spliterator();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        java.util.Set<java.lang.String> strSet28 = locale25.getUnicodeLocaleKeys();
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray35 = timeOfDay34.getFields();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = timeOfDay34.toDateTimeToday(dateTimeZone36);
        org.joda.time.Period period39 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period41 = org.joda.time.Period.minutes(1);
        java.lang.String str42 = period41.toString();
        org.joda.time.Period period43 = period39.withFields((org.joda.time.ReadablePeriod) period41);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period45 = period39.normalizedStandard(periodType44);
        org.joda.time.Period period46 = new org.joda.time.Period(readableDuration29, (org.joda.time.ReadableInstant) dateTime37, periodType44);
        org.joda.time.PeriodType periodType47 = periodType44.withMillisRemoved();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType49 = dateTimeFieldType48.getDurationType();
        boolean boolean50 = periodType47.isSupported(durationFieldType49);
        boolean boolean51 = strSet28.remove((java.lang.Object) boolean50);
        java.lang.Object[] objArray52 = strSet28.toArray();
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.lang.String str55 = locale53.getDisplayVariant(locale54);
        java.util.Set<java.lang.String> strSet56 = locale53.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray57 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList58 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList58, languageRangeArray57);
        java.util.Locale[] localeArray60 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList61 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList61, localeArray60);
        java.util.List<java.util.Locale> localeList63 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList58, (java.util.Collection<java.util.Locale>) localeList61);
        boolean boolean64 = strSet56.removeAll((java.util.Collection<java.util.Locale>) localeList63);
        boolean boolean65 = strSet28.retainAll((java.util.Collection<java.util.Locale>) localeList63);
        boolean boolean66 = strSet14.containsAll((java.util.Collection<java.util.Locale>) localeList63);
        java.util.Locale locale67 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList63);
        java.util.Collection<java.lang.String> strCollection68 = null;
        java.lang.String str69 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection68);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap70 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList71 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap70);
        java.util.Locale locale72 = java.util.Locale.KOREAN;
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.lang.String str74 = locale72.getDisplayVariant(locale73);
        java.util.Set<java.lang.String> strSet75 = locale72.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray76 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList77 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList77, languageRangeArray76);
        java.util.Locale[] localeArray79 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList80 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList80, localeArray79);
        java.util.List<java.util.Locale> localeList82 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList77, (java.util.Collection<java.util.Locale>) localeList80);
        boolean boolean83 = strSet75.removeAll((java.util.Collection<java.util.Locale>) localeList82);
        java.util.Iterator<java.util.Locale> localeItor84 = localeList82.iterator();
        java.util.Iterator<java.util.Locale> localeItor85 = localeList82.iterator();
        java.util.Iterator<java.util.Locale> localeItor86 = localeList82.iterator();
        localeList82.clear();
        java.util.stream.Stream<java.util.Locale> localeStream88 = localeList82.stream();
        java.util.Iterator<java.util.Locale> localeItor89 = localeList82.iterator();
        java.util.Locale locale90 = java.util.Locale.lookup(languageRangeList71, (java.util.Collection<java.util.Locale>) localeList82);
        java.lang.Object obj91 = null;
        boolean boolean92 = localeList82.equals(obj91);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + filteringMode9 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode9.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localeList21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strSpliterator24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(dateTimeFieldArray35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT1M" + "'", str42, "PT1M");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(strSet56);
        org.junit.Assert.assertNotNull(languageRangeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(localeList63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNull(locale67);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(languageRangeList71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ko");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(strSet75);
        org.junit.Assert.assertNotNull(languageRangeArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(localeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(localeList82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(localeItor84);
        org.junit.Assert.assertNotNull(localeItor85);
        org.junit.Assert.assertNotNull(localeItor86);
        org.junit.Assert.assertNotNull(localeStream88);
        org.junit.Assert.assertNotNull(localeItor89);
        org.junit.Assert.assertNull(locale90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test12076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12076");
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray11 = timeOfDay10.getFields();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTimeToday(dateTimeZone12);
        org.joda.time.Period period15 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period17 = org.joda.time.Period.minutes(1);
        java.lang.String str18 = period17.toString();
        org.joda.time.Period period19 = period15.withFields((org.joda.time.ReadablePeriod) period17);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period21 = period15.normalizedStandard(periodType20);
        org.joda.time.Period period22 = new org.joda.time.Period(readableDuration5, (org.joda.time.ReadableInstant) dateTime13, periodType20);
        org.joda.time.PeriodType periodType23 = periodType20.withMillisRemoved();
        org.joda.time.Period period24 = interval4.toPeriod(periodType23);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology27 = localTime26.getChronology();
        org.joda.time.Period period28 = new org.joda.time.Period((long) '#', (long) 2, periodType23, chronology27);
        org.joda.time.Period period29 = period28.toPeriod();
        org.joda.time.format.PeriodFormatter periodFormatter30 = null;
        java.lang.String str31 = period28.toString(periodFormatter30);
        int int32 = period28.getWeeks();
        int int33 = period28.getYears();
        org.junit.Assert.assertNotNull(dateTimeFieldArray11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT1M" + "'", str18, "PT1M");
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "P0D" + "'", str31, "P0D");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test12077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12077");
        java.util.Date date6 = new java.util.Date((-8), 2025, 3172000, (-1), 8, 0);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.fromDateFields(date6);
        int int8 = localDateTime7.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withYearOfEra(26402);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis(1162);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Tue May 22 23:08:00 GMT+00:00 10745");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2 + "'", int8 == 2);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test12078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12078");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        long long7 = date5.getTime();
        date5.setHours(99);
        int int10 = date5.getMonth();
        date5.setMinutes(26377);
        date5.setTime((long) 26482860);
        long long15 = date5.getTime();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Thu Jan 01 07:21:22 GMT+00:00 1970");
        org.junit.Assert.assertNotNull(localDate6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-2234643900016L) + "'", long7 == (-2234643900016L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 26482860L + "'", long15 == 26482860L);
    }

    @Test
    public void test12079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12079");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        boolean boolean4 = strSet3.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale[] localeArray8 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList9 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList9, localeArray8);
        java.util.List<java.util.Locale> localeList11 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList9);
        java.util.stream.Stream<java.util.Locale> localeStream12 = localeList11.stream();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str16 = locale13.getDisplayVariant(locale15);
        java.util.Locale locale17 = locale15.stripExtensions();
        boolean boolean18 = localeList11.add(locale17);
        java.util.Date date24 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.fromDateFields(date24);
        org.joda.time.LocalDate.Property property26 = localDate25.weekOfWeekyear();
        org.joda.time.LocalDate localDate27 = property26.getLocalDate();
        org.joda.time.Period period29 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period31 = org.joda.time.Period.minutes(1);
        java.lang.String str32 = period31.toString();
        org.joda.time.Period period33 = period29.withFields((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Period period35 = period33.plusMillis(100);
        org.joda.time.Period period36 = period33.negated();
        org.joda.time.Period period38 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period40 = org.joda.time.Period.minutes(1);
        java.lang.String str41 = period40.toString();
        org.joda.time.Period period42 = period38.withFields((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Period period44 = period42.plusMillis(100);
        boolean boolean45 = period36.equals((java.lang.Object) period44);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period47 = period36.withFields((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.LocalDate localDate48 = localDate27.plus((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.Period period50 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period52 = org.joda.time.Period.minutes(1);
        java.lang.String str53 = period52.toString();
        org.joda.time.Period period54 = period50.withFields((org.joda.time.ReadablePeriod) period52);
        int int55 = period50.getMinutes();
        org.joda.time.Period period56 = period50.toPeriod();
        org.joda.time.LocalDate localDate57 = localDate48.plus((org.joda.time.ReadablePeriod) period50);
        org.joda.time.LocalDate.Property property58 = localDate57.monthOfYear();
        org.joda.time.LocalDate.Property property59 = localDate57.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str62 = dateTimeZone61.getID();
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Locale locale66 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str67 = locale64.getDisplayVariant(locale66);
        java.lang.String str68 = dateTimeZone61.getName((long) 5, locale64);
        org.joda.time.DateTime dateTime69 = localDate57.toDateTimeAtMidnight(dateTimeZone61);
        org.joda.time.DateTime.Property property70 = dateTime69.dayOfWeek();
        boolean boolean71 = localeList11.equals((java.lang.Object) dateTime69);
        java.util.stream.Stream<java.util.Locale> localeStream72 = localeList11.stream();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean73 = strSet3.removeAll((java.util.Collection<java.util.Locale>) localeList11);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Locale cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localeList11);
        org.junit.Assert.assertNotNull(localeStream12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT1M" + "'", str32, "PT1M");
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT1M" + "'", str41, "PT1M");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "PT1M" + "'", str53, "PT1M");
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00:00.016" + "'", str62, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00:00.016" + "'", str68, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localeStream72);
    }

    @Test
    public void test12080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12080");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setLenient(false);
        long long3 = calendar0.getTimeInMillis();
        java.util.Date date10 = new java.util.Date(8, 53, (int) (byte) 0, 8, 256, 29);
        date10.setHours(436);
        calendar0.setTime(date10);
        boolean boolean14 = calendar0.isWeekDateSupported();
        java.lang.String str15 = calendar0.getCalendarType();
        long long16 = calendar0.getTimeInMillis();
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.TimeOfDay timeOfDay18 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-1815767011016,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=19,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1912,MONTH=5,WEEK_OF_YEAR=25,WEEK_OF_MONTH=4,DAY_OF_MONTH=18,DAY_OF_YEAR=170,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=16,SECOND=29,MILLISECOND=0,ZONE_OFFSET=16,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645514661065L + "'", long3 == 1645514661065L);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Tue Jun 18 04:16:29 GMT+00:00 1912");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "gregory" + "'", str15, "gregory");
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1815767011016L) + "'", long16 == (-1815767011016L));
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(timeOfDay18);
    }

    @Test
    public void test12081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12081");
        java.util.Date date8 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date8);
        int int10 = localDate9.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime14 = localDate9.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone11);
        org.joda.time.Period period17 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        java.lang.String str20 = period19.toString();
        org.joda.time.Period period21 = period17.withFields((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period23 = period21.plusMillis(100);
        org.joda.time.Period period24 = period21.negated();
        org.joda.time.Period period26 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period28 = org.joda.time.Period.minutes(1);
        java.lang.String str29 = period28.toString();
        org.joda.time.Period period30 = period26.withFields((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Period period32 = period30.plusMillis(100);
        boolean boolean33 = period24.equals((java.lang.Object) period32);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period35 = period24.withFields((org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Chronology chronology37 = null;
        mutablePeriod34.setPeriod(readableDuration36, chronology37);
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight15.minus((org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.Chronology chronology40 = dateMidnight15.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.DateMidnight.Property property42 = dateMidnight15.property(dateTimeFieldType41);
        org.joda.time.DateTimeField dateTimeField43 = property42.getField();
        org.joda.time.DateMidnight dateMidnight44 = property42.withMaximumValue();
        java.util.Date date50 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate51 = org.joda.time.LocalDate.fromDateFields(date50);
        org.joda.time.LocalDate.Property property52 = localDate51.weekOfWeekyear();
        org.joda.time.LocalDate localDate53 = property52.getLocalDate();
        org.joda.time.Period period55 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period57 = org.joda.time.Period.minutes(1);
        java.lang.String str58 = period57.toString();
        org.joda.time.Period period59 = period55.withFields((org.joda.time.ReadablePeriod) period57);
        org.joda.time.Period period61 = period59.plusMillis(100);
        org.joda.time.Period period62 = period59.negated();
        org.joda.time.Period period64 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period66 = org.joda.time.Period.minutes(1);
        java.lang.String str67 = period66.toString();
        org.joda.time.Period period68 = period64.withFields((org.joda.time.ReadablePeriod) period66);
        org.joda.time.Period period70 = period68.plusMillis(100);
        boolean boolean71 = period62.equals((java.lang.Object) period70);
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period73 = period62.withFields((org.joda.time.ReadablePeriod) mutablePeriod72);
        org.joda.time.LocalDate localDate74 = localDate53.plus((org.joda.time.ReadablePeriod) mutablePeriod72);
        org.joda.time.Period period76 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period78 = org.joda.time.Period.minutes(1);
        java.lang.String str79 = period78.toString();
        org.joda.time.Period period80 = period76.withFields((org.joda.time.ReadablePeriod) period78);
        int int81 = period76.getMinutes();
        org.joda.time.Period period82 = period76.toPeriod();
        org.joda.time.LocalDate localDate83 = localDate74.plus((org.joda.time.ReadablePeriod) period76);
        org.joda.time.LocalDate.Property property84 = localDate83.monthOfYear();
        org.joda.time.DateMidnight dateMidnight85 = dateMidnight44.withFields((org.joda.time.ReadablePartial) localDate83);
        org.joda.time.DateMidnight dateMidnight87 = dateMidnight44.minus((long) 32);
        org.joda.time.DateMidnight.Property property88 = dateMidnight44.centuryOfEra();
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1899 + "'", int10 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT1M" + "'", str20, "PT1M");
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT1M" + "'", str29, "PT1M");
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateMidnight44);
// flaky:         org.junit.Assert.assertEquals(date50.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "PT1M" + "'", str58, "PT1M");
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "PT1M" + "'", str67, "PT1M");
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "PT1M" + "'", str79, "PT1M");
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(localDate83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(dateMidnight85);
        org.junit.Assert.assertNotNull(dateMidnight87);
        org.junit.Assert.assertNotNull(property88);
    }

    @Test
    public void test12082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12082");
        org.joda.time.Period period1 = org.joda.time.Period.years(108);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test12083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12083");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((-2234642760016L), (long) 28239);
        org.joda.time.PeriodType periodType3 = mutablePeriod2.getPeriodType();
        mutablePeriod2.clear();
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray11 = timeOfDay10.getFields();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTimeToday(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYearOfCentury(16);
        org.joda.time.DateTime dateTime17 = dateTime13.plusYears((-1));
        int int18 = dateTime13.getYearOfEra();
        org.joda.time.Chronology chronology19 = dateTime13.getChronology();
        mutablePeriod2.add(1645514515430L, chronology19);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test12084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12084");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(4, (int) ' ', (int) '#');
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.minusHours((-292275054));
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.minusHours(16);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.minusMinutes(116);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = timeOfDay9.toString("T00:52:52.001");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
    }

    @Test
    public void test12085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12085");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.hour();
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayVariant(locale2);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleKeys();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withLocale(locale1);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        int int8 = dateTimeZone6.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        mutableDateTime9.add(readableDuration10, 0);
        org.joda.time.Period period14 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period16 = org.joda.time.Period.minutes(1);
        java.lang.String str17 = period16.toString();
        org.joda.time.Period period18 = period14.withFields((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period20 = period18.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.months();
        int int22 = period20.get(durationFieldType21);
        mutableDateTime9.add(durationFieldType21, 7);
        mutableDateTime9.setMillis((long) 100);
        mutableDateTime9.setSecondOfMinute((int) (byte) 10);
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = timeOfDay35.toDateTimeToday(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withCenturyOfEra(10);
        boolean boolean40 = dateTime39.isEqualNow();
        org.joda.time.Chronology chronology41 = dateTime39.getChronology();
        org.joda.time.TimeOfDay timeOfDay42 = new org.joda.time.TimeOfDay(15, 5, chronology41);
        org.joda.time.DurationField durationField43 = chronology41.weeks();
        mutableDateTime9.setChronology(chronology41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter0.withChronology(chronology41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime47 = dateTimeFormatter0.parseLocalDateTime("\uc601\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"?????\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT1M" + "'", str17, "PT1M");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
    }

    @Test
    public void test12086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12086");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str3 = dateTimeZone2.getID();
        java.lang.String str5 = dateTimeZone2.getShortName((long) (short) 100);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) (short) 1, dateTimeZone2);
        org.joda.time.DateTime dateTime8 = dateTime6.plusMonths(0);
        org.joda.time.DateTime dateTime9 = dateTime8.toDateTime();
        org.joda.time.Period period11 = org.joda.time.Period.months(15);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime17 = dateTime15.plusSeconds(17);
        org.joda.time.DateTime dateTime19 = dateTime15.withDayOfMonth(2);
        org.joda.time.Duration duration20 = period11.toDurationTo((org.joda.time.ReadableInstant) dateTime19);
        java.lang.String str21 = duration20.toString();
        org.joda.time.Duration duration22 = duration20.toDuration();
        org.joda.time.DateTime dateTime23 = dateTime9.plus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray29 = timeOfDay28.getFields();
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = timeOfDay28.toDateTimeToday(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.withYearOfCentury(16);
        org.joda.time.DateTime dateTime35 = dateTime31.plusYears((-1));
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime35.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType39 = dateTimeFieldType38.getDurationType();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime36.property(dateTimeFieldType38);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime36.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean43 = mutableDateTime36.isSupported(dateTimeFieldType42);
        org.joda.time.DateTime.Property property44 = dateTime23.property(dateTimeFieldType42);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = dateTime23.toString("2022-02-22T00:52:52.000Z/2022-02-22T07:21:24.381Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:00.016" + "'", str3, "+00:00:00.016");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.016" + "'", str5, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.016" + "'", str14, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT39484800S" + "'", str21, "PT39484800S");
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldArray29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(property44);
    }

    @Test
    public void test12087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12087");
        java.util.Date date6 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromDateFields(date6);
        org.joda.time.LocalDate.Property property8 = localDate7.weekOfWeekyear();
        org.joda.time.LocalDate localDate9 = property8.getLocalDate();
        org.joda.time.Period period11 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period13 = org.joda.time.Period.minutes(1);
        java.lang.String str14 = period13.toString();
        org.joda.time.Period period15 = period11.withFields((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period17 = period15.plusMillis(100);
        org.joda.time.Period period18 = period15.negated();
        org.joda.time.Period period20 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period22 = org.joda.time.Period.minutes(1);
        java.lang.String str23 = period22.toString();
        org.joda.time.Period period24 = period20.withFields((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Period period26 = period24.plusMillis(100);
        boolean boolean27 = period18.equals((java.lang.Object) period26);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period29 = period18.withFields((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.LocalDate localDate30 = localDate9.plus((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.Chronology chronology31 = localDate30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = chronology31.weekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 26610697, chronology31);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT1M" + "'", str14, "PT1M");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT1M" + "'", str23, "PT1M");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
    }

    @Test
    public void test12088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12088");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        calendar0.setTimeInMillis((long) 52);
        org.joda.time.TimeOfDay timeOfDay4 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        org.joda.time.LocalTime localTime5 = timeOfDay4.toLocalTime();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = timeOfDay15.getFields();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = timeOfDay15.toDateTimeToday(dateTimeZone17);
        org.joda.time.Period period20 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period22 = org.joda.time.Period.minutes(1);
        java.lang.String str23 = period22.toString();
        org.joda.time.Period period24 = period20.withFields((org.joda.time.ReadablePeriod) period22);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period26 = period20.normalizedStandard(periodType25);
        org.joda.time.Period period27 = new org.joda.time.Period(readableDuration10, (org.joda.time.ReadableInstant) dateTime18, periodType25);
        org.joda.time.PeriodType periodType28 = periodType25.withMillisRemoved();
        org.joda.time.Period period29 = interval9.toPeriod(periodType28);
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray35 = timeOfDay34.getFields();
        org.joda.time.DateTimeZone dateTimeZone36 = null;
        org.joda.time.DateTime dateTime37 = timeOfDay34.toDateTimeToday(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withYearOfCentury(16);
        org.joda.time.DateTime dateTime41 = dateTime37.plusYears((-1));
        boolean boolean42 = interval9.contains((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTimeZone dateTimeZone43 = dateTime37.getZone();
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime((long) 31, dateTimeZone43);
        org.joda.time.TimeOfDay timeOfDay49 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray50 = timeOfDay49.getFields();
        org.joda.time.DateTimeZone dateTimeZone51 = null;
        org.joda.time.DateTime dateTime52 = timeOfDay49.toDateTimeToday(dateTimeZone51);
        org.joda.time.DateTime dateTime54 = dateTime52.plus((long) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType56 = dateTimeFieldType55.getDurationType();
        org.joda.time.DateTime dateTime58 = dateTime54.withField(dateTimeFieldType55, 16);
        org.joda.time.LocalTime.Property property59 = localTime44.property(dateTimeFieldType55);
        org.joda.time.DurationFieldType durationFieldType60 = dateTimeFieldType55.getDurationType();
        boolean boolean61 = localTime5.isSupported(dateTimeFieldType55);
        int[] intArray62 = localTime5.getValues();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime64 = localTime5.withHourOfDay(34);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=52,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=19,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=68,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT1M" + "'", str23, "PT1M");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(dateTimeFieldArray35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTimeFieldArray50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(intArray62);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0, 0, 0, 68]");
    }

    @Test
    public void test12089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12089");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.LocalTime.Property property1 = localTime0.hourOfDay();
        org.joda.time.LocalTime localTime2 = property1.getLocalTime();
        org.joda.time.LocalTime localTime3 = property1.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime4 = property1.getLocalTime();
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray10 = timeOfDay9.getFields();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = timeOfDay9.toDateTimeToday(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.plus((long) '4');
        org.joda.time.DateTime.Property property15 = dateTime12.yearOfCentury();
        org.joda.time.DateTime dateTime16 = property15.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        int int19 = dateTimeZone17.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21, 0);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.dayOfWeek();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime20.minuteOfDay();
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = timeOfDay30.toDateTimeToday(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime36 = dateTime32.plusDays((int) (byte) -1);
        java.util.Date date37 = dateTime36.toDate();
        org.joda.time.DateTime.Property property38 = dateTime36.dayOfMonth();
        mutableDateTime20.setMillis((org.joda.time.ReadableInstant) dateTime36);
        int int40 = dateTime16.compareTo((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.Period period42 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period44 = org.joda.time.Period.minutes(1);
        java.lang.String str45 = period44.toString();
        org.joda.time.Period period46 = period42.withFields((org.joda.time.ReadablePeriod) period44);
        int int47 = period42.getMinutes();
        org.joda.time.Period period48 = period42.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod49 = period48.toMutablePeriod();
        mutablePeriod49.add((long) (byte) -1);
        mutableDateTime20.add((org.joda.time.ReadablePeriod) mutablePeriod49, 9);
        mutablePeriod49.setHours(26196);
        org.joda.time.LocalTime localTime57 = localTime4.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod49, 26380612);
        org.joda.time.LocalTime.Property property58 = localTime57.millisOfDay();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 16 + "'", int19 == 16);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(date37);
// flaky:         org.junit.Assert.assertEquals(date37.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PT1M" + "'", str45, "PT1M");
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(mutablePeriod49);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(property58);
    }

    @Test
    public void test12090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12090");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        org.joda.time.LocalDate localDate10 = property7.withMaximumValue();
        int int11 = localDate10.size();
        java.util.Date date17 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.fromDateFields(date17);
        int int19 = localDate18.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        int int22 = dateTimeZone20.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime23 = localDate18.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(dateTimeZone20);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay24.withYear(1899);
        org.joda.time.Interval interval27 = yearMonthDay24.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = yearMonthDay24.getFieldTypes();
        org.joda.time.YearMonthDay.Property property29 = yearMonthDay24.year();
        org.joda.time.YearMonthDay yearMonthDay30 = property29.withMaximumValue();
        java.util.Date date36 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate37 = org.joda.time.LocalDate.fromDateFields(date36);
        int int38 = localDate37.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        int int41 = dateTimeZone39.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime42 = localDate37.toDateTimeAtCurrentTime(dateTimeZone39);
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay(dateTimeZone39);
        org.joda.time.Interval interval44 = yearMonthDay30.toInterval(dateTimeZone39);
        org.joda.time.DateTime dateTime45 = localDate10.toDateTimeAtMidnight(dateTimeZone39);
        org.joda.time.Chronology chronology46 = dateTime45.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.minuteOfHour();
        long long50 = dateTimeField47.add(0L, 23);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1899 + "'", int19 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 16 + "'", int22 == 16);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(yearMonthDay30);
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1899 + "'", int38 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 16 + "'", int41 == 16);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1380000L + "'", long50 == 1380000L);
    }

    @Test
    public void test12091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12091");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(chronology4);
        org.joda.time.Period period6 = new org.joda.time.Period((long) 11, (-2234643900000L), chronology4);
        org.joda.time.Period period8 = period6.minusHours(53);
        org.joda.time.Period period9 = period6.negated();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod();
        mutablePeriod10.addWeeks((int) (byte) 100);
        int int13 = mutablePeriod10.size();
        org.joda.time.Period period14 = period6.plus((org.joda.time.ReadablePeriod) mutablePeriod10);
        org.joda.time.Period period16 = period6.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        int int19 = dateTimeZone17.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21, 0);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.dayOfWeek();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime20.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime26 = property25.roundFloor();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime26.millisOfDay();
        org.joda.time.DurationField durationField28 = property27.getRangeDurationField();
        int int31 = durationField28.getDifference(16L, (long) 2000);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        int int34 = dateTimeZone32.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(dateTimeZone32);
        org.joda.time.TimeOfDay timeOfDay40 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = timeOfDay40.toDateTimeToday(dateTimeZone41);
        mutableDateTime35.setZoneRetainFields(dateTimeZone41);
        mutableDateTime35.setSecondOfMinute((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        int int48 = dateTimeZone46.getStandardOffset((long) 100);
        mutableDateTime35.setZone(dateTimeZone46);
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology54 = localTime53.getChronology();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((-1L), (long) 17, chronology54);
        mutableDateTime35.setChronology(chronology54);
        java.lang.String str57 = chronology54.toString();
        org.joda.time.DurationField durationField58 = chronology54.centuries();
        org.joda.time.DurationField durationField59 = chronology54.weeks();
        int int60 = durationField28.compareTo(durationField59);
        long long63 = durationField28.add((-6652799968L), (long) 12);
        org.joda.time.DurationFieldType durationFieldType64 = durationField28.getType();
        boolean boolean65 = period16.isSupported(durationFieldType64);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 16 + "'", int19 == 16);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 16 + "'", int34 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 16 + "'", int48 == 16);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ISOChronology[UTC]" + "'", str57, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-5615999968L) + "'", long63 == (-5615999968L));
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test12092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12092");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        org.joda.time.LocalDate.Property property5 = localDate4.centuryOfEra();
        org.joda.time.DateTime dateTime6 = localDate4.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime();
        int int8 = localDate4.getMonthOfYear();
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.millis();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Period period13 = org.joda.time.Period.minutes(1);
        java.lang.String str14 = period13.toString();
        org.joda.time.LocalTime localTime15 = localTime11.plus((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 10, chronology17);
        org.joda.time.Chronology chronology20 = null;
        mutablePeriod18.setPeriod((long) 0, chronology20);
        org.joda.time.LocalTime localTime23 = localTime15.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod18, 55);
        org.joda.time.Period period25 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period27 = org.joda.time.Period.minutes(1);
        java.lang.String str28 = period27.toString();
        org.joda.time.Period period29 = period25.withFields((org.joda.time.ReadablePeriod) period27);
        int int30 = period25.getMinutes();
        int int31 = period25.size();
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.TimeOfDay timeOfDay37 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray38 = timeOfDay37.getFields();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = timeOfDay37.toDateTimeToday(dateTimeZone39);
        org.joda.time.Period period42 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period44 = org.joda.time.Period.minutes(1);
        java.lang.String str45 = period44.toString();
        org.joda.time.Period period46 = period42.withFields((org.joda.time.ReadablePeriod) period44);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period48 = period42.normalizedStandard(periodType47);
        org.joda.time.Period period49 = new org.joda.time.Period(readableDuration32, (org.joda.time.ReadableInstant) dateTime40, periodType47);
        org.joda.time.PeriodType periodType50 = periodType47.withMillisRemoved();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType52 = dateTimeFieldType51.getDurationType();
        boolean boolean53 = periodType50.isSupported(durationFieldType52);
        int int54 = period25.get(durationFieldType52);
        org.joda.time.LocalTime localTime56 = localTime23.withFieldAdded(durationFieldType52, 2000);
        boolean boolean57 = periodType9.isSupported(durationFieldType52);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(chronology59);
        org.joda.time.DateTime.Property property61 = dateTime60.secondOfMinute();
        org.joda.time.Interval interval62 = new org.joda.time.Interval(readableDuration58, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Chronology chronology63 = dateTime60.getChronology();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(chronology63);
        org.joda.time.DurationField durationField65 = durationFieldType52.getField(chronology63);
        org.joda.time.DateTimeField dateTimeField66 = chronology63.yearOfCentury();
        org.joda.time.DurationField durationField67 = chronology63.seconds();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval68 = new org.joda.time.Interval((java.lang.Object) localDate4, chronology63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.LocalDate");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT1M" + "'", str14, "PT1M");
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PT1M" + "'", str28, "PT1M");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 8 + "'", int31 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PT1M" + "'", str45, "PT1M");
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(durationField67);
    }

    @Test
    public void test12093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12093");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfSecond();
        org.joda.time.DateTime dateTime3 = property2.withMinimumValue();
        org.joda.time.DateTime dateTime4 = property2.withMaximumValue();
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis(33);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime.Property property8 = dateTime7.millisOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test12094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12094");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int2 = calendar0.getMaximum((int) (short) 0);
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        calendar0.set(10, (int) (byte) 0, (int) '#', (int) (byte) -1, (int) ' ');
        org.joda.time.TimeOfDay timeOfDay10 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.plusMinutes((int) (byte) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = org.joda.time.format.ISODateTimeFormat.basicTimeNoMillis();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter13.withPivotYear(7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter15.withPivotYear(58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter15.withOffsetParsed();
        java.lang.String str19 = timeOfDay12.toString(dateTimeFormatter15);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTime.Property property22 = dateTime21.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        boolean boolean30 = timeZone26.hasSameRules(timeZone29);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(timeZone29, locale31);
        org.joda.time.DateTime dateTime33 = property22.setCopy("6", locale31);
        org.joda.time.DateTime dateTime34 = property22.roundFloorCopy();
        org.joda.time.DateTime dateTime35 = property22.withMinimumValue();
        org.joda.time.DateTime dateTime37 = dateTime35.plusMillis((int) (short) 10);
        org.joda.time.DateTime dateTime39 = dateTime37.withMillisOfSecond(10);
        java.lang.String str40 = dateTimeFormatter15.print((org.joda.time.ReadableInstant) dateTime39);
        int int41 = dateTime39.getHourOfDay();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-61848836858616,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=19,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=10,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=3,DAY_OF_YEAR=34,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=32,SECOND=21,MILLISECOND=400,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "234221" + "'", str19, "234221");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar32);
// flaky:         org.junit.Assert.assertEquals(calendar32.toString(), "java.util.GregorianCalendar[time=1645514661384,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=21,MILLISECOND=400,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "072400+0000" + "'", str40, "072400+0000");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 7 + "'", int41 == 7);
    }

    @Test
    public void test12095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12095");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = timeOfDay8.toDateTimeToday(dateTimeZone9);
        mutableDateTime3.setZoneRetainFields(dateTimeZone9);
        org.joda.time.Chronology chronology12 = null;
        mutableDateTime3.setChronology(chronology12);
        int int14 = mutableDateTime3.getHourOfDay();
        mutableDateTime3.addWeeks(6);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime3.setMillisOfSecond(26257730);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26257730 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 7 + "'", int14 == 7);
    }

    @Test
    public void test12096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12096");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = timeOfDay8.toDateTimeToday(dateTimeZone9);
        mutableDateTime3.setZoneRetainFields(dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime3, readableDuration12);
        int int14 = mutableDateTime3.getYear();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime3.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.set(216);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
    }

    @Test
    public void test12097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12097");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = timeOfDay8.getFields();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTimeToday(dateTimeZone10);
        org.joda.time.Period period13 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period15 = org.joda.time.Period.minutes(1);
        java.lang.String str16 = period15.toString();
        org.joda.time.Period period17 = period13.withFields((org.joda.time.ReadablePeriod) period15);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period19 = period13.normalizedStandard(periodType18);
        org.joda.time.Period period20 = new org.joda.time.Period(readableDuration3, (org.joda.time.ReadableInstant) dateTime11, periodType18);
        org.joda.time.PeriodType periodType21 = periodType18.withMillisRemoved();
        org.joda.time.Period period22 = interval2.toPeriod(periodType21);
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray28 = timeOfDay27.getFields();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTimeToday(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfCentury(16);
        org.joda.time.DateTime dateTime34 = dateTime30.plusYears((-1));
        boolean boolean35 = interval2.contains((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        int int41 = dateTimeZone39.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(dateTimeZone39);
        org.joda.time.ReadableDuration readableDuration43 = null;
        mutableDateTime42.add(readableDuration43, 0);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime42.dayOfWeek();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime42.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime48 = property47.roundHalfEven();
        boolean boolean49 = interval38.isBefore((org.joda.time.ReadableInstant) mutableDateTime48);
        boolean boolean50 = interval2.overlaps((org.joda.time.ReadableInterval) interval38);
        org.joda.time.TimeOfDay timeOfDay55 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = timeOfDay55.toDateTimeToday(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.withCenturyOfEra(10);
        boolean boolean60 = interval38.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.TimeOfDay timeOfDay65 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime67 = timeOfDay65.toDateTimeToday(dateTimeZone66);
        org.joda.time.DateTime dateTime69 = dateTime67.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime71 = dateTime67.plusDays((int) (byte) -1);
        java.util.Date date72 = dateTime71.toDate();
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Interval interval74 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime71, readableDuration73);
        org.joda.time.Period period75 = interval74.toPeriod();
        boolean boolean76 = interval38.isAfter((org.joda.time.ReadableInterval) interval74);
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(chronology78);
        org.joda.time.DateTime.Property property80 = dateTime79.secondOfMinute();
        org.joda.time.Interval interval81 = new org.joda.time.Interval(readableDuration77, (org.joda.time.ReadableInstant) dateTime79);
        boolean boolean82 = interval38.contains((org.joda.time.ReadableInterval) interval81);
        org.joda.time.DateTime dateTime83 = interval81.getEnd();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime85 = dateTime83.withMonthOfYear(26276193);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26276193 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT1M" + "'", str16, "PT1M");
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTimeFieldArray28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 16 + "'", int41 == 16);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(date72);
// flaky:         org.junit.Assert.assertEquals(date72.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(dateTime83);
    }

    @Test
    public void test12098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12098");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.Period period7 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period9 = org.joda.time.Period.minutes(1);
        java.lang.String str10 = period9.toString();
        org.joda.time.Period period11 = period7.withFields((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period13 = period11.plusMillis(100);
        org.joda.time.Period period14 = period11.negated();
        org.joda.time.Period period16 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period18 = org.joda.time.Period.minutes(1);
        java.lang.String str19 = period18.toString();
        org.joda.time.Period period20 = period16.withFields((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period22 = period20.plusMillis(100);
        boolean boolean23 = period14.equals((java.lang.Object) period22);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period25 = period14.withFields((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay4.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.TimeOfDay.Property property27 = timeOfDay4.secondOfMinute();
        int int28 = property27.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay29 = property27.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay31 = property27.addWrapFieldToCopy(7);
        org.joda.time.TimeOfDay timeOfDay33 = property27.addNoWrapToCopy(19);
        java.lang.String str34 = timeOfDay33.toString();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology39 = localTime38.getChronology();
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(chronology39);
        org.joda.time.Period period41 = new org.joda.time.Period((long) 11, (-2234643900000L), chronology39);
        org.joda.time.Period period43 = period41.minusHours(53);
        org.joda.time.Period period44 = period41.negated();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod();
        mutablePeriod45.addWeeks((int) (byte) 100);
        int int48 = mutablePeriod45.size();
        org.joda.time.Period period49 = period41.plus((org.joda.time.ReadablePeriod) mutablePeriod45);
        org.joda.time.Period period51 = period41.plusHours(0);
        org.joda.time.TimeOfDay timeOfDay52 = timeOfDay33.minus((org.joda.time.ReadablePeriod) period51);
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT1M" + "'", str10, "PT1M");
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT1M" + "'", str19, "PT1M");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "T00:53:11.000" + "'", str34, "T00:53:11.000");
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 8 + "'", int48 == 8);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(timeOfDay52);
    }

    @Test
    public void test12099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12099");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int2 = calendar0.getMaximum((int) (short) 0);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) 10, chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMinuteOfHour(0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 10, chronology9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withWeekyear((int) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 10, chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod18, 15);
        org.joda.time.LocalDateTime.Property property21 = localDateTime13.dayOfYear();
        org.joda.time.Interval interval22 = property21.toInterval();
        boolean boolean23 = calendar0.before((java.lang.Object) interval22);
        org.joda.time.DateTime dateTime24 = interval22.getStart();
        org.joda.time.MutableInterval mutableInterval25 = interval22.toMutableInterval();
        org.joda.time.Period period26 = interval22.toPeriod();
        int int27 = period26.getDays();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645514661527,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=19,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=21,MILLISECOND=543,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableInterval25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test12100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12100");
        java.util.Date date8 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date8);
        int int10 = localDate9.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime14 = localDate9.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.withCenturyOfEra((int) (short) 1);
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period23 = period19.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period23.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.months();
        int int27 = period25.get(durationFieldType26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight15.withPeriodAdded((org.joda.time.ReadablePeriod) period25, 0);
        org.joda.time.DateMidnight.Property property30 = dateMidnight15.monthOfYear();
        org.joda.time.DateMidnight dateMidnight31 = property30.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight33 = property30.addWrapFieldToCopy(3);
        org.joda.time.DateMidnight dateMidnight35 = property30.addToCopy((int) (short) 1);
        int int36 = property30.getMaximumValue();
        org.joda.time.DateMidnight dateMidnight37 = property30.roundCeilingCopy();
        java.util.Date date43 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate44 = org.joda.time.LocalDate.fromDateFields(date43);
        int int45 = localDate44.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        int int48 = dateTimeZone46.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime49 = localDate44.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.YearMonthDay yearMonthDay50 = new org.joda.time.YearMonthDay(dateTimeZone46);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(chronology51);
        org.joda.time.DateTime dateTime53 = dateTime52.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str56 = dateTimeZone55.getID();
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Locale locale60 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str61 = locale58.getDisplayVariant(locale60);
        java.lang.String str62 = dateTimeZone55.getName((long) 5, locale58);
        org.joda.time.DateTime dateTime63 = dateTime53.withZoneRetainFields(dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight64 = yearMonthDay50.toDateMidnight(dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight64.plusWeeks((int) ' ');
        int int67 = dateMidnight64.getWeekOfWeekyear();
        org.joda.time.Interval interval68 = dateMidnight64.toInterval();
        boolean boolean69 = dateMidnight37.isBefore((org.joda.time.ReadableInstant) dateMidnight64);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight64.withYearOfEra(462);
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod(16, (int) '#', 1899, 99);
        mutablePeriod76.add((long) 4);
        org.joda.time.DateMidnight dateMidnight79 = dateMidnight71.plus((org.joda.time.ReadablePeriod) mutablePeriod76);
        org.joda.time.DateMidnight.Property property80 = dateMidnight79.dayOfYear();
        org.joda.time.DateMidnight dateMidnight81 = property80.roundHalfCeilingCopy();
        java.lang.String str82 = property80.getAsText();
        boolean boolean83 = property80.isLeap();
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1899 + "'", int10 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1M" + "'", str22, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 12 + "'", int36 == 12);
        org.junit.Assert.assertNotNull(dateMidnight37);
// flaky:         org.junit.Assert.assertEquals(date43.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1899 + "'", int45 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 16 + "'", int48 == 16);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.016" + "'", str56, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00:00.016" + "'", str62, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 8 + "'", int67 == 8);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(dateMidnight79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "53" + "'", str82, "53");
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test12101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12101");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        date5.setTime(1645514462886L);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Feb 22 07:21:02 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test12102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12102");
        java.util.Date date8 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date8);
        int int10 = localDate9.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime14 = localDate9.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.withCenturyOfEra((int) (short) 1);
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period23 = period19.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period23.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.months();
        int int27 = period25.get(durationFieldType26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight15.withPeriodAdded((org.joda.time.ReadablePeriod) period25, 0);
        org.joda.time.DateMidnight.Property property30 = dateMidnight15.monthOfYear();
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight15.withYearOfCentury((int) (short) 0);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight15.minus(1645514274872L);
        int int35 = dateMidnight15.getEra();
        int int36 = dateMidnight15.getSecondOfMinute();
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1899 + "'", int10 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1M" + "'", str22, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test12103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12103");
        org.joda.time.Period period1 = org.joda.time.Period.millis(26324141);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Interval interval3 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period1, readableInstant2);
        org.joda.time.DateTime dateTime4 = interval3.getEnd();
        java.util.Date date13 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.fromDateFields(date13);
        int int15 = localDate14.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        int int18 = dateTimeZone16.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime19 = localDate14.toDateTimeAtCurrentTime(dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.withCenturyOfEra((int) (short) 1);
        org.joda.time.Period period24 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period26 = org.joda.time.Period.minutes(1);
        java.lang.String str27 = period26.toString();
        org.joda.time.Period period28 = period24.withFields((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period30 = period28.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.months();
        int int32 = period30.get(durationFieldType31);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight20.withPeriodAdded((org.joda.time.ReadablePeriod) period30, 0);
        org.joda.time.DateMidnight.Property property35 = dateMidnight20.monthOfYear();
        org.joda.time.DateMidnight dateMidnight36 = property35.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight38 = property35.addToCopy((int) (byte) 10);
        org.joda.time.DateMidnight dateMidnight40 = dateMidnight38.withWeekOfWeekyear((int) (short) 10);
        int int41 = dateMidnight38.getYearOfCentury();
        boolean boolean42 = interval3.isBefore((org.joda.time.ReadableInstant) dateMidnight38);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight38.withMillis(1645514540811L);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1899 + "'", int15 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT1M" + "'", str27, "PT1M");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateMidnight44);
    }

    @Test
    public void test12104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12104");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1899);
        org.joda.time.TimeOfDay timeOfDay3 = timeOfDay1.withMillisOfSecond(2);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.minusSeconds((int) '4');
        org.joda.time.Period period7 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period9 = org.joda.time.Period.minutes(1);
        java.lang.String str10 = period9.toString();
        org.joda.time.Period period11 = period7.withFields((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period13 = period11.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.months();
        int int15 = period13.get(durationFieldType14);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay5.withPeriodAdded((org.joda.time.ReadablePeriod) period13, 15);
        org.joda.time.Period period19 = period13.withYears(42583);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT1M" + "'", str10, "PT1M");
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(period19);
    }

    @Test
    public void test12105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12105");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = localDate6.getWeekyear();
        int int8 = localDate6.getCenturyOfEra();
        int int9 = localDate6.size();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1899 + "'", int7 == 1899);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 18 + "'", int8 == 18);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
    }

    @Test
    public void test12106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12106");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Period period2 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period4 = org.joda.time.Period.minutes(1);
        java.lang.String str5 = period4.toString();
        org.joda.time.Period period6 = period2.withFields((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period8 = period6.plusMillis(100);
        org.joda.time.LocalTime localTime9 = localTime0.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Period period10 = period6.toPeriod();
        org.joda.time.Period period11 = period6.toPeriod();
        int int12 = period11.getMinutes();
        int int13 = period11.getMonths();
        int int14 = period11.size();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT1M" + "'", str5, "PT1M");
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 8 + "'", int14 == 8);
    }

    @Test
    public void test12107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12107");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        int int4 = dateTimeZone2.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone2);
        org.joda.time.ReadableDuration readableDuration6 = null;
        mutableDateTime5.add(readableDuration6, 0);
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period12 = org.joda.time.Period.minutes(1);
        java.lang.String str13 = period12.toString();
        org.joda.time.Period period14 = period10.withFields((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period16 = period14.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.months();
        int int18 = period16.get(durationFieldType17);
        mutableDateTime5.add(durationFieldType17, 7);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime5.dayOfYear();
        boolean boolean22 = mutableDateTime5.isEqualNow();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime5.era();
        int int24 = mutableDateTime5.getEra();
        java.util.Date date30 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.fromDateFields(date30);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.DateTime dateTime33 = localDate31.toDateTimeAtCurrentTime(dateTimeZone32);
        org.joda.time.LocalDate localDate35 = localDate31.plusWeeks((int) (short) 0);
        int int36 = localDate31.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str39 = dateTimeZone38.getID();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight41 = localDate31.toDateMidnight(dateTimeZone38);
        java.util.Date date47 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate48 = org.joda.time.LocalDate.fromDateFields(date47);
        int int49 = localDate48.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        int int52 = dateTimeZone50.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime53 = localDate48.toDateTimeAtCurrentTime(dateTimeZone50);
        org.joda.time.YearMonthDay yearMonthDay54 = new org.joda.time.YearMonthDay(dateTimeZone50);
        org.joda.time.YearMonthDay yearMonthDay56 = yearMonthDay54.withYear(1899);
        org.joda.time.Interval interval57 = yearMonthDay54.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray58 = yearMonthDay54.getFieldTypes();
        org.joda.time.YearMonthDay.Property property59 = yearMonthDay54.year();
        org.joda.time.YearMonthDay yearMonthDay60 = property59.withMaximumValue();
        org.joda.time.Period period61 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate31, (org.joda.time.ReadablePartial) yearMonthDay60);
        org.joda.time.Chronology chronology62 = localDate31.getChronology();
        mutableDateTime5.setChronology(chronology62);
        org.joda.time.Interval interval64 = new org.joda.time.Interval((long) 2072, 1645514360150L, chronology62);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16 + "'", int4 == 16);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT1M" + "'", str13, "PT1M");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 5 + "'", int36 == 5);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00:00.016" + "'", str39, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight41);
// flaky:         org.junit.Assert.assertEquals(date47.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1899 + "'", int49 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 16 + "'", int52 == 16);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(yearMonthDay56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(chronology62);
    }

    @Test
    public void test12108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12108");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicOrdinalDateTime();
        java.io.Writer writer1 = null;
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        boolean boolean8 = timeZone4.hasSameRules(timeZone7);
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone7, locale9);
        int int11 = calendar10.getWeeksInWeekYear();
        boolean boolean12 = calendar10.isWeekDateSupported();
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromCalendarFields(calendar10);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.plusSeconds((int) 'u');
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay13.minusMillis(2922750);
        org.joda.time.TimeOfDay.Property property18 = timeOfDay17.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(writer1, (org.joda.time.ReadablePartial) timeOfDay17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645514661667,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=21,MILLISECOND=683,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test12109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12109");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = timeOfDay8.getFields();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTimeToday(dateTimeZone10);
        org.joda.time.Period period13 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period15 = org.joda.time.Period.minutes(1);
        java.lang.String str16 = period15.toString();
        org.joda.time.Period period17 = period13.withFields((org.joda.time.ReadablePeriod) period15);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period19 = period13.normalizedStandard(periodType18);
        org.joda.time.Period period20 = new org.joda.time.Period(readableDuration3, (org.joda.time.ReadableInstant) dateTime11, periodType18);
        org.joda.time.PeriodType periodType21 = periodType18.withMillisRemoved();
        org.joda.time.Period period22 = interval2.toPeriod(periodType21);
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray28 = timeOfDay27.getFields();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTimeToday(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfCentury(16);
        org.joda.time.DateTime dateTime34 = dateTime30.plusYears((-1));
        boolean boolean35 = interval2.contains((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        int int41 = dateTimeZone39.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(dateTimeZone39);
        org.joda.time.ReadableDuration readableDuration43 = null;
        mutableDateTime42.add(readableDuration43, 0);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime42.dayOfWeek();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime42.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime48 = property47.roundHalfEven();
        boolean boolean49 = interval38.isBefore((org.joda.time.ReadableInstant) mutableDateTime48);
        boolean boolean50 = interval2.overlaps((org.joda.time.ReadableInterval) interval38);
        org.joda.time.TimeOfDay timeOfDay55 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = timeOfDay55.toDateTimeToday(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.withCenturyOfEra(10);
        boolean boolean60 = interval38.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.TimeOfDay timeOfDay65 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime67 = timeOfDay65.toDateTimeToday(dateTimeZone66);
        org.joda.time.DateTime dateTime69 = dateTime67.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime71 = dateTime67.plusDays((int) (byte) -1);
        java.util.Date date72 = dateTime71.toDate();
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Interval interval74 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime71, readableDuration73);
        org.joda.time.Period period75 = interval74.toPeriod();
        boolean boolean76 = interval38.isAfter((org.joda.time.ReadableInterval) interval74);
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(chronology78);
        org.joda.time.DateTime.Property property80 = dateTime79.secondOfMinute();
        org.joda.time.Interval interval81 = new org.joda.time.Interval(readableDuration77, (org.joda.time.ReadableInstant) dateTime79);
        boolean boolean82 = interval38.contains((org.joda.time.ReadableInterval) interval81);
        java.lang.String str83 = interval38.toString();
        java.lang.Object obj84 = null;
        boolean boolean85 = interval38.equals(obj84);
        org.joda.time.Duration duration86 = interval38.toDuration();
        org.joda.time.Interval interval88 = interval38.withStartMillis((long) (-26219842));
        long long89 = interval38.getEndMillis();
        org.joda.time.Duration duration90 = interval38.toDuration();
        long long91 = interval38.toDurationMillis();
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT1M" + "'", str16, "PT1M");
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTimeFieldArray28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 16 + "'", int41 == 16);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(date72);
// flaky:         org.junit.Assert.assertEquals(date72.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "1970-01-01T00:00:00.015+00:00:00.016/1970-01-01T00:00:00.113+00:00:00.016" + "'", str83, "1970-01-01T00:00:00.015+00:00:00.016/1970-01-01T00:00:00.113+00:00:00.016");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 97L + "'", long89 == 97L);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 98L + "'", long91 == 98L);
    }

    @Test
    public void test12110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12110");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 0);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime3.dayOfWeek();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime3.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundHalfEven();
        org.joda.time.DateTimeField dateTimeField10 = property8.getField();
        org.joda.time.MutableDateTime mutableDateTime11 = property8.getMutableDateTime();
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology16 = localTime15.getChronology();
        org.joda.time.Interval interval17 = new org.joda.time.Interval((-1L), (long) 17, chronology16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTimeField dateTimeField19 = chronology16.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.yearOfCentury();
        mutableDateTime11.setChronology(chronology16);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((long) 10, chronology23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Chronology chronology26 = null;
        mutablePeriod24.setPeriod(readableDuration25, chronology26);
        mutablePeriod24.setSeconds(0);
        mutablePeriod24.setPeriod((long) (byte) 100);
        mutableDateTime11.add((org.joda.time.ReadablePeriod) mutablePeriod24, 26318644);
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray39 = timeOfDay38.getFields();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = timeOfDay38.toDateTimeToday(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.plus((long) '4');
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType45 = dateTimeFieldType44.getDurationType();
        org.joda.time.DateTime dateTime47 = dateTime43.withField(dateTimeFieldType44, 16);
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology51 = localTime50.getChronology();
        org.joda.time.DurationField durationField52 = chronology51.hours();
        org.joda.time.TimeOfDay timeOfDay53 = new org.joda.time.TimeOfDay((long) 38, chronology51);
        boolean boolean54 = dateTimeFieldType44.isSupported(chronology51);
        org.joda.time.TimeOfDay timeOfDay59 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime61 = timeOfDay59.toDateTimeToday(dateTimeZone60);
        long long63 = dateTimeZone60.previousTransition((long) 6);
        java.lang.String str65 = dateTimeZone60.getName((long) 14);
        org.joda.time.Chronology chronology66 = chronology51.withZone(dateTimeZone60);
        mutableDateTime11.setChronology(chronology51);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeFieldArray39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 6L + "'", long63 == 6L);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00:00.016" + "'", str65, "+00:00:00.016");
        org.junit.Assert.assertNotNull(chronology66);
    }

    @Test
    public void test12111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12111");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withHourOfDay(3);
        org.joda.time.DateTime dateTime5 = dateTime1.withSecondOfMinute(16);
        org.joda.time.DateTime dateTime7 = dateTime1.withDayOfYear(19);
        org.joda.time.DateTime.Property property8 = dateTime1.monthOfYear();
        java.util.Date date9 = dateTime1.toDate();
        org.joda.time.TimeOfDay timeOfDay10 = org.joda.time.TimeOfDay.fromDateFields(date9);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Feb 22 07:24:21 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(timeOfDay10);
    }

    @Test
    public void test12112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12112");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMaximumValue();
        int int7 = localDateTime6.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 50 + "'", int7 == 50);
    }

    @Test
    public void test12113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12113");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((long) 1899);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = timeOfDay1.getFieldType(1);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay1.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay5 = property4.withMaximumValue();
        java.lang.String str6 = property4.getAsText();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0" + "'", str6, "0");
    }

    @Test
    public void test12114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12114");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfSecond();
        org.joda.time.DateTime dateTime3 = property2.withMinimumValue();
        org.joda.time.DateTime dateTime4 = property2.withMaximumValue();
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis(33);
        org.joda.time.DateTime dateTime7 = dateTime4.toDateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.plusDays(26277709);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test12115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12115");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.millis();
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology7 = localTime6.getChronology();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now(chronology7);
        org.joda.time.Period period9 = new org.joda.time.Period((long) 25, (long) (-1), periodType4, chronology7);
        org.joda.time.PeriodType periodType10 = periodType4.withWeeksRemoved();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        org.joda.time.Interval interval16 = new org.joda.time.Interval((-1L), (long) 17, chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.secondOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology15.yearOfCentury();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology15);
        org.joda.time.Period period20 = new org.joda.time.Period(345600000L, (long) '#', periodType4, chronology15);
        org.joda.time.Period period22 = period20.withMillis(12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period24 = period20.withMinutes(26339772);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(period22);
    }

    @Test
    public void test12116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12116");
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.minusSeconds(3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        java.lang.String str9 = timeOfDay5.toString(dateTimeFormatter8);
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = dateTimeFormatter8.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = org.joda.time.format.ISODateTimeFormat.tTime();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.parse("59");
        int int16 = dateTimeFormatter11.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime13, "PT0S", 3);
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = dateTimeFormatter11.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter18.withPivotYear((java.lang.Integer) 52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter18.withPivotYear((int) '#');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter18.withOffsetParsed();
        java.util.Locale locale24 = dateTimeFormatter18.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter18.withZoneUTC();
        org.joda.time.format.DateTimeParser dateTimeParser26 = dateTimeFormatter18.getParser();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter17, dateTimeParser26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter28.withDefaultYear((-19354500));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.parse("257", dateTimeFormatter30);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"257\" is too short");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "00" + "'", str9, "00");
        org.junit.Assert.assertNotNull(dateTimePrinter10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-4) + "'", int16 == (-4));
        org.junit.Assert.assertNotNull(dateTimePrinter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(locale24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeParser26);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
    }

    @Test
    public void test12117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12117");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        int int4 = dateTimeZone2.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 16, dateTimeZone2);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 10, chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMinuteOfHour(0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 10, chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime11.withDurationAdded(readableDuration18, (int) (byte) 10);
        boolean boolean21 = dateTimeZone2.isLocalDateTimeGap(localDateTime11);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 12160, dateTimeZone2);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecondFraction();
        org.joda.time.format.DateTimePrinter dateTimePrinter24 = dateTimeFormatter23.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter23.withPivotYear((java.lang.Integer) 26227847);
        boolean boolean27 = mutableDateTime22.equals((java.lang.Object) dateTimeFormatter26);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime22.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16 + "'", int4 == 16);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimePrinter24);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test12118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12118");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.Period period7 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period9 = org.joda.time.Period.minutes(1);
        java.lang.String str10 = period9.toString();
        org.joda.time.Period period11 = period7.withFields((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period13 = period11.plusMillis(100);
        org.joda.time.Period period14 = period11.negated();
        org.joda.time.Period period16 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period18 = org.joda.time.Period.minutes(1);
        java.lang.String str19 = period18.toString();
        org.joda.time.Period period20 = period16.withFields((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period22 = period20.plusMillis(100);
        boolean boolean23 = period14.equals((java.lang.Object) period22);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period25 = period14.withFields((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay4.plus((org.joda.time.ReadablePeriod) period14);
        int int27 = period14.getHours();
        org.joda.time.Period period29 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period31 = org.joda.time.Period.minutes(1);
        java.lang.String str32 = period31.toString();
        org.joda.time.Period period33 = period29.withFields((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Period period35 = period33.plusMillis(100);
        org.joda.time.Period period36 = period33.negated();
        org.joda.time.Period period38 = period33.plusYears(55);
        org.joda.time.Period period40 = period33.withMonths(26207215);
        org.joda.time.Period period41 = period14.minus((org.joda.time.ReadablePeriod) period40);
        int[] intArray42 = period14.getValues();
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT1M" + "'", str10, "PT1M");
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT1M" + "'", str19, "PT1M");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT1M" + "'", str32, "PT1M");
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0, 0, 0, 0, -1, 0, 0]");
    }

    @Test
    public void test12119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12119");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 0);
        mutableDateTime3.addDays(1899);
        mutableDateTime3.addDays(2);
        mutableDateTime3.addHours(31);
        java.util.Date date21 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.fromDateFields(date21);
        int int23 = localDate22.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        int int26 = dateTimeZone24.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime27 = localDate22.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone24);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.withCenturyOfEra((int) (short) 1);
        org.joda.time.Period period32 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period34 = org.joda.time.Period.minutes(1);
        java.lang.String str35 = period34.toString();
        org.joda.time.Period period36 = period32.withFields((org.joda.time.ReadablePeriod) period34);
        org.joda.time.Period period38 = period36.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.months();
        int int40 = period38.get(durationFieldType39);
        org.joda.time.DateMidnight dateMidnight42 = dateMidnight28.withPeriodAdded((org.joda.time.ReadablePeriod) period38, 0);
        org.joda.time.DateMidnight.Property property43 = dateMidnight28.monthOfYear();
        org.joda.time.DateMidnight dateMidnight45 = property43.addToCopy(15);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.withYearOfCentury(55);
        int int48 = dateMidnight45.getDayOfWeek();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight45.minus(readablePeriod49);
        org.joda.time.DateMidnight dateMidnight52 = dateMidnight50.plusDays((-2));
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str55 = dateTimeZone54.getID();
        org.joda.time.DateMidnight dateMidnight56 = org.joda.time.DateMidnight.now(dateTimeZone54);
        int int58 = dateTimeZone54.getOffsetFromLocal(10L);
        java.lang.String str60 = dateTimeZone54.getShortName((long) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime61 = dateMidnight50.toMutableDateTime(dateTimeZone54);
        org.joda.time.MutableDateTime mutableDateTime62 = dateMidnight50.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone63 = dateMidnight50.getZone();
        mutableDateTime3.setZoneRetainFields(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1899 + "'", int23 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 16 + "'", int26 == 16);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PT1M" + "'", str35, "PT1M");
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateMidnight52);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.016" + "'", str55, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 16 + "'", int58 == 16);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00:00.016" + "'", str60, "+00:00:00.016");
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
    }

    @Test
    public void test12120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12120");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(dateTimeZone0);
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfYear();
        org.joda.time.LocalDate localDate3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate4 = property2.withMaximumValue();
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfWeek();
        org.joda.time.LocalDate localDate6 = property5.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test12121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12121");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.Period period18 = new org.joda.time.Period(7, (int) (byte) 10, 5, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime12.withPeriodAdded((org.joda.time.ReadablePeriod) period18, 1970);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusSeconds(3172000);
        int int23 = localDateTime20.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusHours(445);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 8 + "'", int23 == 8);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test12122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12122");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        int int6 = localDate4.getValue((int) (byte) 0);
        org.joda.time.LocalDate localDate8 = localDate4.withYear(7);
        org.joda.time.LocalDate.Property property9 = localDate8.yearOfEra();
        org.joda.time.LocalDate localDate11 = localDate8.withWeekyear((-42529));
        int int12 = localDate8.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test12123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12123");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 0);
        org.joda.time.Period period8 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        java.lang.String str11 = period10.toString();
        org.joda.time.Period period12 = period8.withFields((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period14 = period12.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.months();
        int int16 = period14.get(durationFieldType15);
        mutableDateTime3.add(durationFieldType15, 7);
        mutableDateTime3.setMillis((long) 100);
        mutableDateTime3.setSecondOfMinute((int) (byte) 10);
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime31 = timeOfDay29.toDateTimeToday(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.withCenturyOfEra(10);
        boolean boolean34 = dateTime33.isEqualNow();
        org.joda.time.Chronology chronology35 = dateTime33.getChronology();
        org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay(15, 5, chronology35);
        org.joda.time.DurationField durationField37 = chronology35.weeks();
        mutableDateTime3.setChronology(chronology35);
        org.joda.time.DateTimeField dateTimeField39 = chronology35.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField40 = chronology35.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT1M" + "'", str11, "PT1M");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test12124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12124");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.weekyear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.secondOfMinute();
        boolean boolean18 = localDateTime12.equals((java.lang.Object) dateTime16);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime12.withDayOfMonth(11);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusWeeks(5603523);
        org.joda.time.LocalDateTime.Property property23 = localDateTime20.yearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test12125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12125");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Period period2 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period4 = org.joda.time.Period.minutes(1);
        java.lang.String str5 = period4.toString();
        org.joda.time.Period period6 = period2.withFields((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period8 = period6.plusMillis(100);
        org.joda.time.LocalTime localTime9 = localTime0.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.LocalTime localTime11 = localTime0.minusHours((-1));
        org.joda.time.LocalTime localTime13 = localTime11.plusMinutes(8);
        org.joda.time.LocalTime localTime15 = localTime13.minusSeconds(18);
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay((long) 1899);
        int int18 = timeOfDay17.getSecondOfMinute();
        int int19 = localTime13.compareTo((org.joda.time.ReadablePartial) timeOfDay17);
        int int20 = localTime13.getMinuteOfHour();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.secondOfMinute();
        org.joda.time.Interval interval25 = new org.joda.time.Interval(readableDuration21, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology28 = localTime27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.hours();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.year();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now(chronology28);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.millisOfSecond();
        boolean boolean34 = interval25.isAfter((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Period period37 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period39 = org.joda.time.Period.minutes(1);
        java.lang.String str40 = period39.toString();
        org.joda.time.Period period41 = period37.withFields((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Period period43 = period41.plusMillis(100);
        org.joda.time.LocalTime localTime44 = localTime35.minus((org.joda.time.ReadablePeriod) period41);
        org.joda.time.LocalTime localTime46 = localTime35.minusHours((-1));
        org.joda.time.LocalTime.Property property47 = localTime46.secondOfMinute();
        org.joda.time.LocalTime localTime48 = property47.roundFloorCopy();
        org.joda.time.LocalTime localTime50 = property47.addCopy(3172000L);
        org.joda.time.LocalTime localTime52 = property47.addNoWrapToCopy(26217);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = property47.getFieldType();
        mutableDateTime32.set(dateTimeFieldType53, 40);
        java.lang.String str56 = dateTimeFieldType53.getName();
        boolean boolean57 = localTime13.isSupported(dateTimeFieldType53);
        int int58 = localTime13.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT1M" + "'", str5, "PT1M");
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT1M" + "'", str40, "PT1M");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "secondOfMinute" + "'", str56, "secondOfMinute");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 8 + "'", int58 == 8);
    }

    @Test
    public void test12126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12126");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfCentury(16);
        org.joda.time.DateTime dateTime11 = dateTime9.plus((long) 1);
        boolean boolean13 = dateTime9.isBefore((long) 22);
        org.joda.time.DateTime.Property property14 = dateTime9.millisOfSecond();
        org.joda.time.DateTime dateTime15 = property14.roundHalfCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        int int18 = dateTimeZone16.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone16);
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = timeOfDay24.toDateTimeToday(dateTimeZone25);
        mutableDateTime19.setZoneRetainFields(dateTimeZone25);
        mutableDateTime19.setSecondOfMinute((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        int int32 = dateTimeZone30.getStandardOffset((long) 100);
        mutableDateTime19.setZone(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone37 = dateTimeZone36.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone40 = dateTimeZone39.toTimeZone();
        boolean boolean41 = timeZone37.hasSameRules(timeZone40);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone40, locale42);
        java.lang.String str44 = dateTimeZone30.getShortName((long) 3172001, locale42);
        java.util.Locale locale45 = locale42.stripExtensions();
        java.lang.String str46 = locale42.getDisplayLanguage();
        java.lang.String str47 = property14.getAsShortText(locale42);
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology52 = localTime51.getChronology();
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now(chronology52);
        org.joda.time.Period period54 = new org.joda.time.Period((long) 11, (-2234643900000L), chronology52);
        org.joda.time.DurationField durationField55 = chronology52.halfdays();
        org.joda.time.DateTimeField dateTimeField56 = chronology52.halfdayOfDay();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(chronology52);
        org.joda.time.DateTimeField dateTimeField58 = chronology52.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((java.lang.Object) locale42, chronology52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 16 + "'", int32 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1645514661941,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=21,MILLISECOND=957,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.016" + "'", str44, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Korean" + "'", str46, "Korean");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "0" + "'", str47, "0");
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField58);
    }

    @Test
    public void test12127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12127");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period12 = org.joda.time.Period.minutes(1);
        java.lang.String str13 = period12.toString();
        org.joda.time.Period period14 = period10.withFields((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period16 = period14.plusMillis(100);
        org.joda.time.Period period17 = period14.negated();
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period23 = period19.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period23.plusMillis(100);
        boolean boolean26 = period17.equals((java.lang.Object) period25);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period28 = period17.withFields((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.LocalDate localDate29 = localDate8.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.LocalDate localDate31 = localDate29.withYear((int) (byte) 10);
        org.joda.time.LocalDate localDate33 = localDate29.minusWeeks(0);
        org.joda.time.LocalDate localDate35 = localDate29.withCenturyOfEra(168);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT1M" + "'", str13, "PT1M");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1M" + "'", str22, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
    }

    @Test
    public void test12128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12128");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((-5615999968L));
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.withEra(0);
        org.joda.time.DateMidnight dateMidnight5 = dateMidnight3.minusYears(26264290);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.era();
        org.joda.time.DateMidnight.Property property7 = dateMidnight5.dayOfMonth();
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test12129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12129");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = timeOfDay8.toDateTimeToday(dateTimeZone9);
        mutableDateTime3.setZoneRetainFields(dateTimeZone9);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime3.dayOfMonth();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime3.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        int int16 = dateTimeZone14.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime24 = timeOfDay22.toDateTimeToday(dateTimeZone23);
        mutableDateTime17.setZoneRetainFields(dateTimeZone23);
        mutableDateTime17.setSecondOfMinute((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        int int30 = dateTimeZone28.getStandardOffset((long) 100);
        mutableDateTime17.setZone(dateTimeZone28);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone35 = dateTimeZone34.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone38 = dateTimeZone37.toTimeZone();
        boolean boolean39 = timeZone35.hasSameRules(timeZone38);
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.util.Calendar calendar41 = java.util.Calendar.getInstance(timeZone38, locale40);
        java.lang.String str42 = dateTimeZone28.getShortName((long) 3172001, locale40);
        long long46 = dateTimeZone28.convertLocalToUTC(1645514167310L, true, (long) 10);
        mutableDateTime3.setZone(dateTimeZone28);
        java.util.Locale locale50 = new java.util.Locale("Property[weekOfWeekyear]");
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone53 = dateTimeZone52.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone56 = dateTimeZone55.toTimeZone();
        boolean boolean57 = timeZone53.hasSameRules(timeZone56);
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.util.Calendar calendar59 = java.util.Calendar.getInstance(timeZone56, locale58);
        java.lang.String str60 = locale50.getDisplayCountry(locale58);
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.lang.String str63 = locale61.getDisplayVariant(locale62);
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.lang.String str66 = locale64.getDisplayVariant(locale65);
        java.util.Locale locale67 = locale65.stripExtensions();
        java.lang.String str68 = locale61.getDisplayLanguage(locale67);
        java.lang.String str69 = locale50.getDisplayScript(locale61);
        java.lang.String str70 = dateTimeZone28.getName((long) 1899, locale61);
        java.util.Set<java.lang.String> strSet71 = locale61.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 16 + "'", int30 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=1645514661988,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=22,MILLISECOND=4,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.016" + "'", str42, "+00:00:00.016");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1645514167294L + "'", long46 == 1645514167294L);
        org.junit.Assert.assertEquals(locale50.toString(), "property[weekofweekyear]");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(timeZone56);
        org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar59);
// flaky:         org.junit.Assert.assertEquals(calendar59.toString(), "java.util.GregorianCalendar[time=1645514661989,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=22,MILLISECOND=5,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str68, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00:00.016" + "'", str70, "+00:00:00.016");
        org.junit.Assert.assertNotNull(strSet71);
    }

    @Test
    public void test12130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12130");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(chronology3);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(0L, chronology3);
        org.joda.time.DurationField durationField9 = chronology3.days();
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight(chronology3);
        int int11 = dateMidnight10.getMillisOfSecond();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test12131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12131");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMillis((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYearOfCentury(1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.millisOfSecond();
        int int10 = localDateTime6.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.minusWeeks((-292275054));
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusYears(0);
        int int15 = localDateTime14.getCenturyOfEra();
        java.util.Date date16 = localDateTime14.toDate();
        int int17 = localDateTime14.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusHours(1912);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.withMinuteOfHour((int) '#');
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 26 + "'", int10 == 26);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 56035 + "'", int15 == 56035);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Thu Jun 07 00:00:01 GMT+00:00 5603523");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5603523 + "'", int17 == 5603523);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test12132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12132");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = timeOfDay8.toDateTimeToday(dateTimeZone9);
        mutableDateTime3.setZoneRetainFields(dateTimeZone9);
        mutableDateTime3.setSecondOfMinute((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        int int16 = dateTimeZone14.getStandardOffset((long) 100);
        mutableDateTime3.setZone(dateTimeZone14);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology22 = localTime21.getChronology();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((-1L), (long) 17, chronology22);
        mutableDateTime3.setChronology(chronology22);
        java.lang.String str25 = chronology22.toString();
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = timeOfDay30.toDateTimeToday(dateTimeZone31);
        org.joda.time.Chronology chronology33 = chronology22.withZone(dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.centuryOfEra();
        long long37 = dateTimeField35.roundHalfEven((long) 12);
        int int38 = dateTimeField35.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[UTC]" + "'", str25, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 946684799984L + "'", long37 == 946684799984L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2922789 + "'", int38 == 2922789);
    }

    @Test
    public void test12133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12133");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = localDate6.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.withYear(1899);
        org.joda.time.Interval interval15 = yearMonthDay12.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = yearMonthDay12.getFieldTypes();
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay12.year();
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay12.plusDays(718);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1899 + "'", int7 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
    }

    @Test
    public void test12134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12134");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.yearMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.parse("", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
    }

    @Test
    public void test12135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12135");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.TimeZone timeZone2 = calendar1.getTimeZone();
        java.util.TimeZone timeZone3 = calendar1.getTimeZone();
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology7 = localTime6.getChronology();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) 5, chronology7);
        org.joda.time.Chronology chronology9 = chronology7.withUTC();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology9.getZone();
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        java.util.Locale locale16 = new java.util.Locale("2", "2", "55");
        java.util.Calendar calendar17 = java.util.Calendar.getInstance(timeZone11, locale16);
        int int18 = calendar1.compareTo(calendar17);
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=19,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals(locale16.toString(), "2_2_55");
        org.junit.Assert.assertNotNull(calendar17);
// flaky:         org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=1645514662092,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=22,MILLISECOND=92,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test12136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12136");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = timeOfDay8.getFields();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTimeToday(dateTimeZone10);
        org.joda.time.Period period13 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period15 = org.joda.time.Period.minutes(1);
        java.lang.String str16 = period15.toString();
        org.joda.time.Period period17 = period13.withFields((org.joda.time.ReadablePeriod) period15);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period19 = period13.normalizedStandard(periodType18);
        org.joda.time.Period period20 = new org.joda.time.Period(readableDuration3, (org.joda.time.ReadableInstant) dateTime11, periodType18);
        org.joda.time.PeriodType periodType21 = periodType18.withMillisRemoved();
        org.joda.time.Period period22 = interval2.toPeriod(periodType21);
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray28 = timeOfDay27.getFields();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTimeToday(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfCentury(16);
        org.joda.time.DateTime dateTime34 = dateTime30.plusYears((-1));
        boolean boolean35 = interval2.contains((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        int int41 = dateTimeZone39.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(dateTimeZone39);
        org.joda.time.ReadableDuration readableDuration43 = null;
        mutableDateTime42.add(readableDuration43, 0);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime42.dayOfWeek();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime42.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime48 = property47.roundHalfEven();
        boolean boolean49 = interval38.isBefore((org.joda.time.ReadableInstant) mutableDateTime48);
        boolean boolean50 = interval2.overlaps((org.joda.time.ReadableInterval) interval38);
        org.joda.time.Interval interval51 = interval2.toInterval();
        java.lang.String str52 = interval2.toString();
        org.joda.time.Interval interval53 = interval2.toInterval();
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology56 = localTime55.getChronology();
        org.joda.time.MutableDateTime mutableDateTime57 = org.joda.time.MutableDateTime.now(chronology56);
        boolean boolean58 = interval2.isBefore((org.joda.time.ReadableInstant) mutableDateTime57);
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology61 = localTime60.getChronology();
        org.joda.time.DurationField durationField62 = chronology61.hours();
        org.joda.time.MutableDateTime mutableDateTime63 = org.joda.time.MutableDateTime.now(chronology61);
        org.joda.time.DateTimeField dateTimeField64 = chronology61.centuryOfEra();
        org.joda.time.Chronology chronology65 = chronology61.withUTC();
        mutableDateTime57.setChronology(chronology61);
        org.joda.time.DateTimeField dateTimeField67 = chronology61.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            long long70 = dateTimeField67.set((long) 5452000, 61);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 61 for halfdayOfDay must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT1M" + "'", str16, "PT1M");
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTimeFieldArray28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 16 + "'", int41 == 16);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1970-01-01T00:00:00.015+00:00:00.016/1970-01-01T00:00:00.113+00:00:00.016" + "'", str52, "1970-01-01T00:00:00.015+00:00:00.016/1970-01-01T00:00:00.113+00:00:00.016");
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField67);
    }

    @Test
    public void test12137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12137");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.DurationField durationField7 = property5.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime9 = property5.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime11 = property5.addToCopy(1974);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test12138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12138");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) '4', chronology2);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.secondOfMinute();
        int int5 = property4.getMaximumValue();
        org.joda.time.TimeOfDay timeOfDay6 = property4.getTimeOfDay();
        int int7 = timeOfDay6.getSecondOfMinute();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 59 + "'", int5 == 59);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test12139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12139");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = timeOfDay8.getFields();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTimeToday(dateTimeZone10);
        org.joda.time.Period period13 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period15 = org.joda.time.Period.minutes(1);
        java.lang.String str16 = period15.toString();
        org.joda.time.Period period17 = period13.withFields((org.joda.time.ReadablePeriod) period15);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period19 = period13.normalizedStandard(periodType18);
        org.joda.time.Period period20 = new org.joda.time.Period(readableDuration3, (org.joda.time.ReadableInstant) dateTime11, periodType18);
        org.joda.time.PeriodType periodType21 = periodType18.withMillisRemoved();
        org.joda.time.Period period22 = interval2.toPeriod(periodType21);
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray28 = timeOfDay27.getFields();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTimeToday(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfCentury(16);
        org.joda.time.DateTime dateTime34 = dateTime30.plusYears((-1));
        boolean boolean35 = interval2.contains((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        int int41 = dateTimeZone39.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(dateTimeZone39);
        org.joda.time.ReadableDuration readableDuration43 = null;
        mutableDateTime42.add(readableDuration43, 0);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime42.dayOfWeek();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime42.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime48 = property47.roundHalfEven();
        boolean boolean49 = interval38.isBefore((org.joda.time.ReadableInstant) mutableDateTime48);
        boolean boolean50 = interval2.overlaps((org.joda.time.ReadableInterval) interval38);
        org.joda.time.TimeOfDay timeOfDay55 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = timeOfDay55.toDateTimeToday(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.withCenturyOfEra(10);
        boolean boolean60 = interval38.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.TimeOfDay timeOfDay65 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime67 = timeOfDay65.toDateTimeToday(dateTimeZone66);
        org.joda.time.DateTime dateTime69 = dateTime67.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime71 = dateTime67.plusDays((int) (byte) -1);
        java.util.Date date72 = dateTime71.toDate();
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Interval interval74 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime71, readableDuration73);
        org.joda.time.Period period75 = interval74.toPeriod();
        boolean boolean76 = interval38.isAfter((org.joda.time.ReadableInterval) interval74);
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(chronology78);
        org.joda.time.DateTime.Property property80 = dateTime79.secondOfMinute();
        org.joda.time.Interval interval81 = new org.joda.time.Interval(readableDuration77, (org.joda.time.ReadableInstant) dateTime79);
        boolean boolean82 = interval38.contains((org.joda.time.ReadableInterval) interval81);
        org.joda.time.Period period84 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period86 = org.joda.time.Period.minutes(1);
        java.lang.String str87 = period86.toString();
        org.joda.time.Period period88 = period84.withFields((org.joda.time.ReadablePeriod) period86);
        org.joda.time.Period period90 = period88.plusMillis(100);
        org.joda.time.Interval interval91 = interval38.withPeriodAfterStart((org.joda.time.ReadablePeriod) period90);
        org.joda.time.Period period93 = period90.withMinutes(61);
        org.joda.time.Period period95 = period90.plusDays((-292275054));
        org.joda.time.Period period97 = period90.multipliedBy(2267);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT1M" + "'", str16, "PT1M");
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTimeFieldArray28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 16 + "'", int41 == 16);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(date72);
// flaky:         org.junit.Assert.assertEquals(date72.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "PT1M" + "'", str87, "PT1M");
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertNotNull(period95);
        org.junit.Assert.assertNotNull(period97);
    }

    @Test
    public void test12140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12140");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property13.setCopy("54");
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusWeeks(0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.minusDays(18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime22 = property20.addToCopy(54);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusMillis((-82));
        int int25 = localDateTime22.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusDays(98);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime29 = localDateTime22.withDayOfYear((-78));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -78 for dayOfYear must be in the range [1,366]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test12141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12141");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicWeekDate();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone1);
        mutableDateTime4.setMillis((long) 1);
        java.lang.String str7 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) mutableDateTime4);
        mutableDateTime4.addDays(19);
        mutableDateTime4.setDate(4233600010L);
        mutableDateTime4.setDate(97L);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime4.dayOfMonth();
        java.util.Date date21 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.fromDateFields(date21);
        int int23 = localDate22.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        int int26 = dateTimeZone24.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime27 = localDate22.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(dateTimeZone24);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        org.joda.time.DateTime dateTime31 = dateTime30.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str34 = dateTimeZone33.getID();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str39 = locale36.getDisplayVariant(locale38);
        java.lang.String str40 = dateTimeZone33.getName((long) 5, locale36);
        org.joda.time.DateTime dateTime41 = dateTime31.withZoneRetainFields(dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight42 = yearMonthDay28.toDateMidnight(dateTimeZone33);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) (short) 100, dateTimeZone33);
        java.util.Date date52 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate53 = org.joda.time.LocalDate.fromDateFields(date52);
        int int54 = localDate53.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        int int57 = dateTimeZone55.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime58 = localDate53.toDateTimeAtCurrentTime(dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone55);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight59.withYearOfEra(16);
        boolean boolean63 = dateMidnight61.isEqual(82036800000L);
        boolean boolean64 = dateMidnight61.isAfterNow();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType66 = dateTimeFieldType65.getDurationType();
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight61.withFieldAdded(durationFieldType66, 48);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight68.withMillis(0L);
        org.joda.time.DateTimeZone dateTimeZone71 = dateMidnight70.getZone();
        org.joda.time.DateTime dateTime72 = localDate43.toDateTimeAtCurrentTime(dateTimeZone71);
        long long76 = dateTimeZone71.convertLocalToUTC((long) 86399999, false, (long) 26538981);
        mutableDateTime4.setZoneRetainFields(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970W014" + "'", str7, "1970W014");
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1899 + "'", int23 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 16 + "'", int26 == 16);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.016" + "'", str34, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.016" + "'", str40, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateMidnight42);
// flaky:         org.junit.Assert.assertEquals(date52.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1899 + "'", int54 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 16 + "'", int57 == 16);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 86399983L + "'", long76 == 86399983L);
    }

    @Test
    public void test12142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12142");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) '4', chronology2);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = property4.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.minusMinutes(3172001);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Period period11 = org.joda.time.Period.minutes(1);
        java.lang.String str12 = period11.toString();
        org.joda.time.LocalTime localTime13 = localTime9.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 10, chronology15);
        org.joda.time.Chronology chronology18 = null;
        mutablePeriod16.setPeriod((long) 0, chronology18);
        org.joda.time.LocalTime localTime21 = localTime13.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod16, 55);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay7.minus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay7.withMillisOfSecond(2);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay24.plusMinutes(119);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT1M" + "'", str12, "PT1M");
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(timeOfDay26);
    }

    @Test
    public void test12143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12143");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.now();
        org.joda.time.Period period2 = org.joda.time.Period.minutes(1);
        org.joda.time.LocalTime localTime4 = localTime0.withPeriodAdded((org.joda.time.ReadablePeriod) period2, (int) ' ');
        org.joda.time.Period period6 = period2.minusMonths((int) (byte) 10);
        org.joda.time.Period period8 = period2.minusMinutes(26379267);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = org.joda.time.format.ISODateTimeFormat.dateHourMinuteSecondMillis();
        java.lang.Integer int10 = dateTimeFormatter9.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter9.withPivotYear(1439);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter12.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone14 = dateTimeFormatter13.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((java.lang.Object) period8, dateTimeZone14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
    }

    @Test
    public void test12144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12144");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) '4', chronology2);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusMinutes(1899);
        org.joda.time.TimeOfDay.Property property6 = timeOfDay3.millisOfSecond();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay3.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay3.minusMinutes(26190505);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType13 = periodType12.withDaysRemoved();
        org.joda.time.Period period14 = new org.joda.time.Period(4233600010L, (long) 14, periodType13);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay3.minus((org.joda.time.ReadablePeriod) period14);
        java.lang.String str16 = timeOfDay15.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay18 = timeOfDay15.withSecondOfMinute(458);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 458 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "T00:52:00.000" + "'", str16, "T00:52:00.000");
    }

    @Test
    public void test12145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12145");
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology6 = localTime5.getChronology();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((-1L), (long) 17, chronology6);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology6);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromMillisOfDay(52254751446427999L, chronology6);
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromMillisOfDay((long) 1971, chronology6);
        org.joda.time.DurationField durationField11 = chronology6.minutes();
        boolean boolean12 = durationField11.isPrecise();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test12146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12146");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMaximumValue();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withHourOfDay(12);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withHourOfDay(17);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.minusYears(26165226);
        int int14 = localDateTime13.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        org.joda.time.DateTimeField dateTimeField17 = property15.getField();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 6 + "'", int14 == 6);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test12147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12147");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 0);
        org.joda.time.Period period8 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        java.lang.String str11 = period10.toString();
        org.joda.time.Period period12 = period8.withFields((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period14 = period12.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.months();
        int int16 = period14.get(durationFieldType15);
        mutableDateTime3.add(durationFieldType15, 7);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime3.dayOfYear();
        boolean boolean20 = mutableDateTime3.isEqualNow();
        int int21 = mutableDateTime3.getWeekOfWeekyear();
        mutableDateTime3.addHours(6);
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = timeOfDay28.toDateTimeToday(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime34 = dateTime30.plusDays((int) (byte) -1);
        java.util.Date date35 = dateTime34.toDate();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime34, readableDuration36);
        org.joda.time.Period period38 = interval37.toPeriod();
        org.joda.time.TimeOfDay timeOfDay43 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = timeOfDay43.toDateTimeToday(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime49 = dateTime45.plusDays((int) (byte) -1);
        java.util.Date date50 = dateTime49.toDate();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime49, readableDuration51);
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        int int58 = dateTimeZone56.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(dateTimeZone56);
        org.joda.time.ReadableDuration readableDuration60 = null;
        mutableDateTime59.add(readableDuration60, 0);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime59.dayOfWeek();
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime59.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime65 = property64.roundHalfEven();
        boolean boolean66 = interval55.isBefore((org.joda.time.ReadableInstant) mutableDateTime65);
        org.joda.time.TimeOfDay timeOfDay71 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray72 = timeOfDay71.getFields();
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = timeOfDay71.toDateTimeToday(dateTimeZone73);
        org.joda.time.DateTime dateTime76 = dateTime74.withYearOfCentury(16);
        boolean boolean77 = interval55.isAfter((org.joda.time.ReadableInstant) dateTime76);
        boolean boolean78 = interval52.abuts((org.joda.time.ReadableInterval) interval55);
        org.joda.time.Duration duration79 = interval55.toDuration();
        org.joda.time.Interval interval80 = interval37.withDurationAfterStart((org.joda.time.ReadableDuration) duration79);
        org.joda.time.PeriodType periodType81 = null;
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime3, (org.joda.time.ReadableDuration) duration79, periodType81);
        org.joda.time.Chronology chronology83 = mutableDateTime3.getChronology();
        org.joda.time.DateTime dateTime84 = org.joda.time.DateTime.now(chronology83);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT1M" + "'", str11, "PT1M");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 38 + "'", int21 == 38);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(date35);
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(date50);
// flaky:         org.junit.Assert.assertEquals(date50.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 16 + "'", int58 == 16);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTime84);
    }

    @Test
    public void test12148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12148");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime5 = dateTime3.plusSeconds(17);
        org.joda.time.Period period7 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period9 = org.joda.time.Period.minutes(1);
        java.lang.String str10 = period9.toString();
        org.joda.time.Period period11 = period7.withFields((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period13 = period11.plusMillis(100);
        org.joda.time.Period period15 = period11.minusMillis((int) (byte) 1);
        org.joda.time.DateTime dateTime17 = dateTime5.withPeriodAdded((org.joda.time.ReadablePeriod) period15, 15);
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfMonth(17);
        org.joda.time.DateTime.Property property20 = dateTime17.yearOfCentury();
        org.joda.time.DateTime dateTime22 = dateTime17.withYear(2025);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime22.toMutableDateTime();
        int int24 = mutableDateTime23.getMonthOfYear();
        mutableDateTime23.setDayOfYear(89);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT1M" + "'", str10, "PT1M");
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
    }

    @Test
    public void test12149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12149");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.monthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime7.minusMillis((int) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime(chronology11);
        int int13 = dateTime10.getMillisOfDay();
        org.joda.time.DateTime.Property property14 = dateTime10.monthOfYear();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((-1L), (long) 17, chronology19);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.millis();
        org.joda.time.Period period22 = interval20.toPeriod(periodType21);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((int) '4', (-1), (int) (short) 100, (-1));
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology33 = localTime32.getChronology();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((-1L), (long) 17, chronology33);
        mutablePeriod27.add((long) 26163694, chronology33);
        org.joda.time.Interval interval36 = interval20.withPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.TimeOfDay timeOfDay45 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = timeOfDay45.toDateTimeToday(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.withCenturyOfEra(10);
        boolean boolean50 = dateTime49.isEqualNow();
        org.joda.time.Chronology chronology51 = dateTime49.getChronology();
        org.joda.time.TimeOfDay timeOfDay52 = new org.joda.time.TimeOfDay(15, 5, chronology51);
        org.joda.time.DurationField durationField53 = chronology51.years();
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((long) 26164018, chronology51);
        mutablePeriod27.add((long) (short) -1, chronology51);
        org.joda.time.DateTime dateTime56 = dateTime10.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.DateTime dateTime58 = dateTime56.plus((long) 26591359);
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3172001 + "'", int13 == 3172001);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test12150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12150");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.Period period18 = new org.joda.time.Period(7, (int) (byte) 10, 5, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime12.withPeriodAdded((org.joda.time.ReadablePeriod) period18, 1970);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusSeconds(3172000);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusMinutes((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusMillis(26327881);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.weekyear();
        org.joda.time.LocalDateTime localDateTime29 = property27.setCopy((-880));
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
    }

    @Test
    public void test12151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12151");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period3 = org.joda.time.Period.minutes(1);
        java.lang.String str4 = period3.toString();
        org.joda.time.Period period5 = period1.withFields((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Period period7 = period5.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.months();
        int int9 = period7.get(durationFieldType8);
        int int10 = period7.size();
        org.joda.time.Period period12 = period7.plusMillis(26590897);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT1M" + "'", str4, "PT1M");
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    public void test12152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12152");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusWeeks(45);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes(72171);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test12153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12153");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = localDate6.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfMonth();
        org.joda.time.DateTime dateTime14 = dateTime11.plusMonths(17);
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        java.util.Date date21 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.fromDateFields(date21);
        int int23 = localDate22.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        int int26 = dateTimeZone24.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime27 = localDate22.toDateTimeAtCurrentTime(dateTimeZone24);
        org.joda.time.YearMonthDay yearMonthDay28 = new org.joda.time.YearMonthDay(dateTimeZone24);
        org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay28.withYear(1899);
        org.joda.time.Interval interval31 = yearMonthDay28.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = yearMonthDay28.getFieldTypes();
        org.joda.time.YearMonthDay.Property property33 = yearMonthDay28.year();
        org.joda.time.YearMonthDay yearMonthDay34 = property33.withMaximumValue();
        java.util.Date date40 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate41 = org.joda.time.LocalDate.fromDateFields(date40);
        int int42 = localDate41.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        int int45 = dateTimeZone43.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime46 = localDate41.toDateTimeAtCurrentTime(dateTimeZone43);
        org.joda.time.YearMonthDay yearMonthDay47 = new org.joda.time.YearMonthDay(dateTimeZone43);
        org.joda.time.Interval interval48 = yearMonthDay34.toInterval(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str52 = dateTimeZone51.getID();
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.util.Locale locale56 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str57 = locale54.getDisplayVariant(locale56);
        java.lang.String str58 = dateTimeZone51.getName((long) 5, locale54);
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.lang.String str60 = locale54.getDisplayScript(locale59);
        java.lang.String str61 = dateTimeZone43.getName((long) (-1), locale59);
        org.joda.time.DateTime dateTime62 = yearMonthDay15.toDateTimeAtMidnight(dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone65 = dateTimeZone64.toTimeZone();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) 10, chronology67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.withMinuteOfHour(0);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) 10, chronology72);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime70.withFields((org.joda.time.ReadablePartial) localDateTime73);
        boolean boolean77 = dateTimeZone64.isLocalDateTimeGap(localDateTime76);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime76.minusMonths((int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean81 = localDateTime79.isSupported(dateTimeFieldType80);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay.Property property82 = yearMonthDay15.property(dateTimeFieldType80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'yearOfEra' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1899 + "'", int7 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1899 + "'", int23 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 16 + "'", int26 == 16);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(yearMonthDay34);
// flaky:         org.junit.Assert.assertEquals(date40.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1899 + "'", int42 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 16 + "'", int45 == 16);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00:00.016" + "'", str52, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00:00.016" + "'", str58, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00:00.016" + "'", str61, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(timeZone65);
        org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(dateTimeFieldType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test12154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12154");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfCentury(16);
        org.joda.time.DateTime dateTime11 = dateTime7.plusYears((-1));
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime11.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray20 = timeOfDay19.getFields();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTimeToday(dateTimeZone21);
        org.joda.time.DateTime.Property property23 = dateTime22.monthOfYear();
        org.joda.time.DateTime dateTime25 = dateTime22.minusMillis((int) (byte) -1);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime(chronology26);
        int int28 = dateTime25.getMillisOfDay();
        org.joda.time.Interval interval29 = new org.joda.time.Interval(readablePeriod14, (org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Duration duration30 = interval29.toDuration();
        org.joda.time.Period period31 = duration30.toPeriod();
        long long32 = duration30.getMillis();
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, readableInstant33);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime12, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.Period period37 = org.joda.time.Period.months(15);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str40 = dateTimeZone39.getID();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(dateTimeZone39);
        org.joda.time.DateTime dateTime43 = dateTime41.plusSeconds(17);
        org.joda.time.DateTime dateTime45 = dateTime41.withDayOfMonth(2);
        org.joda.time.Duration duration46 = period37.toDurationTo((org.joda.time.ReadableInstant) dateTime45);
        java.lang.String str47 = duration46.toString();
        org.joda.time.Interval interval48 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime12, (org.joda.time.ReadableDuration) duration46);
        org.joda.time.Interval interval50 = interval48.withStartMillis((long) 99);
        org.joda.time.Period period52 = org.joda.time.Period.seconds(2200294);
        org.joda.time.Interval interval53 = interval48.withPeriodAfterStart((org.joda.time.ReadablePeriod) period52);
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldArray20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3172001 + "'", int28 == 3172001);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.016" + "'", str40, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PT39484800S" + "'", str47, "PT39484800S");
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(interval53);
    }

    @Test
    public void test12155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12155");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.Period period7 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period9 = org.joda.time.Period.minutes(1);
        java.lang.String str10 = period9.toString();
        org.joda.time.Period period11 = period7.withFields((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period13 = period11.plusMillis(100);
        org.joda.time.Period period14 = period11.negated();
        org.joda.time.Period period16 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period18 = org.joda.time.Period.minutes(1);
        java.lang.String str19 = period18.toString();
        org.joda.time.Period period20 = period16.withFields((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period22 = period20.plusMillis(100);
        boolean boolean23 = period14.equals((java.lang.Object) period22);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period25 = period14.withFields((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay4.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.TimeOfDay.Property property27 = timeOfDay4.secondOfMinute();
        java.lang.String str28 = property27.getAsText();
        java.lang.String str29 = property27.toString();
        java.util.Locale locale31 = new java.util.Locale("2022-02-22T07:17:09.936Z/2022-02-22T07:17:09.936Z");
        java.lang.String str32 = property27.getAsShortText(locale31);
        java.lang.String str33 = property27.getName();
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT1M" + "'", str10, "PT1M");
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT1M" + "'", str19, "PT1M");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "52" + "'", str28, "52");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Property[secondOfMinute]" + "'", str29, "Property[secondOfMinute]");
        org.junit.Assert.assertEquals(locale31.toString(), "2022-02-22t07:17:09.936z/2022-02-22t07:17:09.936z");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "52" + "'", str32, "52");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "secondOfMinute" + "'", str33, "secondOfMinute");
    }

    @Test
    public void test12156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12156");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period12 = org.joda.time.Period.minutes(1);
        java.lang.String str13 = period12.toString();
        org.joda.time.Period period14 = period10.withFields((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period16 = period14.plusMillis(100);
        org.joda.time.Period period17 = period14.negated();
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period23 = period19.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period23.plusMillis(100);
        boolean boolean26 = period17.equals((java.lang.Object) period25);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period28 = period17.withFields((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.LocalDate localDate29 = localDate8.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.Period period31 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period33 = org.joda.time.Period.minutes(1);
        java.lang.String str34 = period33.toString();
        org.joda.time.Period period35 = period31.withFields((org.joda.time.ReadablePeriod) period33);
        int int36 = period31.getMinutes();
        org.joda.time.Period period37 = period31.toPeriod();
        org.joda.time.LocalDate localDate38 = localDate29.plus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.LocalDate localDate40 = localDate29.withYearOfEra(99);
        java.util.Date date41 = localDate40.toDate();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        int int45 = dateTimeZone43.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 1899, dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone50 = dateTimeZone49.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone53 = dateTimeZone52.toTimeZone();
        boolean boolean54 = timeZone50.hasSameRules(timeZone53);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone53, locale55);
        java.lang.String str57 = dateTimeZone43.getShortName((long) 11, locale55);
        java.lang.String str58 = locale55.getDisplayName();
        boolean boolean59 = localDate40.equals((java.lang.Object) str58);
        org.joda.time.Period period61 = org.joda.time.Period.minutes(1);
        java.lang.String str62 = period61.toString();
        org.joda.time.LocalDate localDate63 = localDate40.plus((org.joda.time.ReadablePeriod) period61);
        int int64 = localDate40.getYearOfCentury();
        int int65 = localDate40.getWeekOfWeekyear();
        int int66 = localDate40.getYearOfEra();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT1M" + "'", str13, "PT1M");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1M" + "'", str22, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT1M" + "'", str34, "PT1M");
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(date41);
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Sun Mar 10 00:00:00 GMT+00:00 99");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 16 + "'", int45 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=1645514662550,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=22,MILLISECOND=566,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.016" + "'", str57, "+00:00:00.016");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Korean" + "'", str58, "Korean");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "PT1M" + "'", str62, "PT1M");
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 99 + "'", int64 == 99);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 11 + "'", int65 == 11);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 99 + "'", int66 == 99);
    }

    @Test
    public void test12157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12157");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period3 = org.joda.time.Period.minutes(1);
        java.lang.String str4 = period3.toString();
        org.joda.time.Period period5 = period1.withFields((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Period period7 = period5.plusMillis(100);
        org.joda.time.Period period9 = period5.minusMillis((int) (byte) 1);
        org.joda.time.Period period11 = period5.withMonths((int) (short) 10);
        org.joda.time.Period period12 = period5.normalizedStandard();
        org.joda.time.MutablePeriod mutablePeriod13 = period5.toMutablePeriod();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = org.joda.time.format.ISODateTimeFormat.ordinalDate();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter14.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        int int18 = dateTimeZone16.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone16);
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = timeOfDay24.toDateTimeToday(dateTimeZone25);
        mutableDateTime19.setZoneRetainFields(dateTimeZone25);
        mutableDateTime19.setSecondOfMinute((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        int int32 = dateTimeZone30.getStandardOffset((long) 100);
        mutableDateTime19.setZone(dateTimeZone30);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology38 = localTime37.getChronology();
        org.joda.time.Interval interval39 = new org.joda.time.Interval((-1L), (long) 17, chronology38);
        mutableDateTime19.setChronology(chronology38);
        org.joda.time.DateTimeField dateTimeField41 = chronology38.yearOfCentury();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(chronology38);
        org.joda.time.DateTimeField dateTimeField43 = chronology38.secondOfDay();
        org.joda.time.DurationField durationField44 = chronology38.halfdays();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter15.withChronology(chronology38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((java.lang.Object) period5, chronology38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT1M" + "'", str4, "PT1M");
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(mutablePeriod13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 16 + "'", int32 == 16);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
    }

    @Test
    public void test12158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12158");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        int int6 = date5.getSeconds();
        date5.setHours((int) (byte) 1);
        date5.setYear(32772);
        java.time.Instant instant11 = date5.toInstant();
        org.joda.time.TimeOfDay timeOfDay12 = org.joda.time.TimeOfDay.fromDateFields(date5);
        int int13 = timeOfDay12.getMinuteOfHour();
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay12.minusMinutes(26257730);
        org.joda.time.TimeOfDay.Property property16 = timeOfDay12.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay18 = property16.addToCopy(26352933);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.plusMillis(27398874);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Sun Mar 10 01:35:00 GMT+00:00 34672");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 35 + "'", int13 == 35);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
    }

    @Test
    public void test12159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12159");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now(dateTimeZone1);
        java.util.Date date12 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate13 = org.joda.time.LocalDate.fromDateFields(date12);
        int int14 = localDate13.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        int int17 = dateTimeZone15.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime18 = localDate13.toDateTimeAtCurrentTime(dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.withCenturyOfEra((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        int int24 = dateTimeZone22.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone22);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight19.withZoneRetainFields(dateTimeZone22);
        java.lang.String str28 = dateTimeZone22.getNameKey(0L);
        long long30 = dateTimeZone1.getMillisKeepLocal(dateTimeZone22, (long) 3174023);
        java.util.Date date36 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate37 = org.joda.time.LocalDate.fromDateFields(date36);
        org.joda.time.LocalDate.Property property38 = localDate37.weekOfWeekyear();
        org.joda.time.LocalDate localDate39 = property38.getLocalDate();
        org.joda.time.LocalDate localDate40 = property38.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate42 = property38.setCopy(1);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str45 = dateTimeZone44.getID();
        org.joda.time.DateMidnight dateMidnight46 = localDate42.toDateMidnight(dateTimeZone44);
        org.joda.time.LocalDate localDate47 = org.joda.time.LocalDate.now(dateTimeZone44);
        org.joda.time.YearMonthDay yearMonthDay48 = new org.joda.time.YearMonthDay(dateTimeZone44);
        long long50 = dateTimeZone44.nextTransition((long) 50);
        long long52 = dateTimeZone22.getMillisKeepLocal(dateTimeZone44, (long) 766);
        java.lang.String str53 = dateTimeZone22.getID();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight3);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1899 + "'", int14 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 16 + "'", int17 == 16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 16 + "'", int24 == 16);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3174023L + "'", long30 == 3174023L);
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.016" + "'", str45, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 50L + "'", long50 == 50L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 766L + "'", long52 == 766L);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00:00.016" + "'", str53, "+00:00:00.016");
    }

    @Test
    public void test12160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12160");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        boolean boolean6 = timeZone2.hasSameRules(timeZone5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone5, locale7);
        int int10 = timeZone5.getOffset((long) 38090);
        java.util.Calendar calendar11 = java.util.Calendar.getInstance(timeZone5);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId12 = timeZone5.toZoneId();
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for ZoneOffset, invalid format: +00:00:00.016");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514662677,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=22,MILLISECOND=693,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(calendar11);
// flaky:         org.junit.Assert.assertEquals(calendar11.toString(), "java.util.GregorianCalendar[time=1645514662677,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=22,MILLISECOND=693,ZONE_OFFSET=16,DST_OFFSET=0]");
    }

    @Test
    public void test12161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12161");
        java.util.Date date8 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date8);
        int int10 = localDate9.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime14 = localDate9.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.withCenturyOfEra((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight15.plus(readableDuration18);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight15.withDurationAdded((long) (-2), (int) (short) 100);
        org.joda.time.YearMonthDay yearMonthDay23 = dateMidnight15.toYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay23.withYear(70);
        int int26 = yearMonthDay23.getYear();
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay23.plusMonths(429);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay30 = yearMonthDay23.withMonthOfYear(26567);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26567 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1899 + "'", int10 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(yearMonthDay23);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay28);
    }

    @Test
    public void test12162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12162");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMillis((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYearOfCentury(1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plusSeconds(0);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusYears(52);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property14.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusYears(459);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
    }

    @Test
    public void test12163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12163");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) 10, chronology5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Chronology chronology8 = null;
        mutablePeriod6.setPeriod(readableDuration7, chronology8);
        mutablePeriod6.setSeconds(0);
        int[] intArray13 = chronology2.get((org.joda.time.ReadablePeriod) mutablePeriod6, (long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray19 = timeOfDay18.getFields();
        org.joda.time.DateTimeZone dateTimeZone20 = null;
        org.joda.time.DateTime dateTime21 = timeOfDay18.toDateTimeToday(dateTimeZone20);
        org.joda.time.DateTime.Property property22 = dateTime21.monthOfYear();
        org.joda.time.DateTime dateTime24 = dateTime21.minusMillis((int) (byte) -1);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = dateTime24.toDateTime(chronology25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        int int29 = dateTimeZone27.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone27);
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = timeOfDay35.toDateTimeToday(dateTimeZone36);
        mutableDateTime30.setZoneRetainFields(dateTimeZone36);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime30, readableDuration39);
        boolean boolean41 = dateTime26.isBefore((org.joda.time.ReadableInstant) mutableDateTime30);
        java.lang.Object obj42 = mutableDateTime30.clone();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        int int45 = dateTimeZone43.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime(dateTimeZone43);
        org.joda.time.ReadableDuration readableDuration47 = null;
        mutableDateTime46.add(readableDuration47, 0);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime46.dayOfWeek();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime46.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime52 = property51.roundFloor();
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime52.millisOfDay();
        int int54 = mutableDateTime52.getYearOfEra();
        mutablePeriod6.setPeriod((org.joda.time.ReadableInstant) mutableDateTime30, (org.joda.time.ReadableInstant) mutableDateTime52);
        boolean boolean57 = mutableDateTime30.isBefore((long) 1970);
        java.util.Date date63 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        date63.setMinutes(54);
        org.joda.time.TimeOfDay timeOfDay66 = org.joda.time.TimeOfDay.fromDateFields(date63);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = timeOfDay66.getFieldType(2);
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime30.property(dateTimeFieldType68);
        org.joda.time.MutableDateTime mutableDateTime71 = property69.set(6);
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime71.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime73 = property72.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime74 = property72.roundHalfFloor();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.getDefault();
        int int77 = dateTimeZone75.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime78 = new org.joda.time.MutableDateTime(dateTimeZone75);
        org.joda.time.ReadableDuration readableDuration79 = null;
        mutableDateTime78.add(readableDuration79, 0);
        org.joda.time.MutableDateTime.Property property82 = mutableDateTime78.dayOfWeek();
        mutableDateTime78.addSeconds(69);
        org.joda.time.MutableDateTime.Property property85 = mutableDateTime78.weekOfWeekyear();
        mutableDateTime78.addMinutes(26164018);
        mutableDateTime74.setMillis((org.joda.time.ReadableInstant) mutableDateTime78);
        int int89 = mutableDateTime74.getSecondOfDay();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 16 + "'", int29 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(obj42);
// flaky:         org.junit.Assert.assertEquals(obj42.toString(), "2022-02-22T07:24:22.735+00:00:00.016");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "2022-02-22T07:24:22.735+00:00:00.016");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "2022-02-22T07:24:22.735+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 16 + "'", int45 == 16);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2022 + "'", int54 == 2022);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
// flaky:         org.junit.Assert.assertEquals(date63.toString(), "Fri Mar 10 01:54:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(timeOfDay66);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(mutableDateTime73);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 16 + "'", int77 == 16);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(property85);
// flaky:         org.junit.Assert.assertTrue("'" + int89 + "' != '" + 66211 + "'", int89 == 66211);
    }

    @Test
    public void test12164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12164");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) 5, chronology4);
        org.joda.time.Chronology chronology6 = chronology4.withUTC();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) '4', chronology4);
        org.joda.time.DateTime dateTime9 = dateTime7.withDayOfYear((int) 'u');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime11 = dateTime9.withDayOfWeek(26518668);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26518668 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test12165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12165");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((-1L), (long) 17, chronology4);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.millis();
        org.joda.time.Period period7 = interval5.toPeriod(periodType6);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTime.Property property10 = dateTime9.secondOfMinute();
        java.lang.String str11 = property10.getAsString();
        java.lang.String str12 = property10.getAsShortText();
        org.joda.time.DateTime dateTime13 = property10.roundFloorCopy();
        java.lang.String str14 = property10.getAsString();
        org.joda.time.Interval interval15 = property10.toInterval();
        boolean boolean16 = interval5.isAfter((org.joda.time.ReadableInterval) interval15);
        org.joda.time.Chronology chronology17 = interval15.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.millis();
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "22" + "'", str11, "22");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "22" + "'", str12, "22");
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "22" + "'", str14, "22");
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test12166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12166");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfWeek();
        java.util.Date date16 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.fromDateFields(date16);
        int int18 = localDate17.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        int int21 = dateTimeZone19.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime22 = localDate17.toDateTimeAtCurrentTime(dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone19);
        org.joda.time.Period period25 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period27 = org.joda.time.Period.minutes(1);
        java.lang.String str28 = period27.toString();
        org.joda.time.Period period29 = period25.withFields((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Period period31 = period29.plusMillis(100);
        org.joda.time.Period period32 = period29.negated();
        org.joda.time.Period period34 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period36 = org.joda.time.Period.minutes(1);
        java.lang.String str37 = period36.toString();
        org.joda.time.Period period38 = period34.withFields((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Period period40 = period38.plusMillis(100);
        boolean boolean41 = period32.equals((java.lang.Object) period40);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period43 = period32.withFields((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Chronology chronology45 = null;
        mutablePeriod42.setPeriod(readableDuration44, chronology45);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight23.minus((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.Period period49 = org.joda.time.Period.minutes(1);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight47.withPeriodAdded((org.joda.time.ReadablePeriod) period49, (int) (short) 1);
        org.joda.time.Period period53 = period49.plusMillis((-2));
        org.joda.time.LocalDate localDate55 = localDate6.withPeriodAdded((org.joda.time.ReadablePeriod) period49, (-2026));
        org.joda.time.LocalDate.Property property56 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate58 = property56.addToCopy(1012052);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1899 + "'", int18 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 16 + "'", int21 == 16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PT1M" + "'", str28, "PT1M");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT1M" + "'", str37, "PT1M");
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDate58);
    }

    @Test
    public void test12167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12167");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(dateTimeZone0);
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfYear();
        org.joda.time.LocalDate localDate3 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate4 = property2.roundHalfFloorCopy();
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period7 = new org.joda.time.Period((-292275054L), periodType6);
        org.joda.time.LocalDate localDate8 = localDate4.plus((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Duration duration9 = period7.toStandardDuration();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(duration9);
    }

    @Test
    public void test12168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12168");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime10 = dateTime6.plusDays((int) (byte) -1);
        java.util.Date date11 = dateTime10.toDate();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, readableDuration12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        int int16 = dateTimeZone14.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime17.add(readableDuration18, 0);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        mutableDateTime17.set(dateTimeFieldType23, (int) ' ');
        boolean boolean27 = interval13.isAfter((org.joda.time.ReadableInstant) mutableDateTime17);
        java.lang.Object obj28 = null;
        boolean boolean29 = interval13.equals(obj28);
        org.joda.time.DateTime dateTime30 = interval13.getStart();
        org.joda.time.DateTime.Property property31 = dateTime30.dayOfWeek();
        int int32 = dateTime30.getDayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 21 + "'", int32 == 21);
    }

    @Test
    public void test12169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12169");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay8 = property7.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay10 = property7.addToCopy(0);
        int int11 = property7.getMinimumValueOverall();
        org.joda.time.TimeOfDay timeOfDay13 = property7.addToCopy((int) ' ');
        java.lang.String str14 = property7.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay16 = property7.addToCopy((-4));
        org.joda.time.TimeOfDay timeOfDay18 = property7.addNoWrapToCopy(12160);
        java.lang.String str19 = property7.getAsText();
        int int20 = property7.get();
        java.lang.String str21 = property7.getAsString();
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "52" + "'", str14, "52");
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "52" + "'", str19, "52");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 52 + "'", int20 == 52);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "52" + "'", str21, "52");
    }

    @Test
    public void test12170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12170");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = localDate6.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.withYear(1899);
        int int15 = yearMonthDay12.size();
        int int16 = yearMonthDay12.getDayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay12.withDayOfMonth((int) (short) 10);
        int int19 = yearMonthDay12.size();
        org.joda.time.DateMidnight dateMidnight20 = yearMonthDay12.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.withYearOfCentury(0);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1899 + "'", int7 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
    }

    @Test
    public void test12171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12171");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(1);
        java.lang.String str2 = period1.toString();
        org.joda.time.Period period4 = period1.plusWeeks(17);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(chronology9);
        org.joda.time.Period period11 = new org.joda.time.Period((long) 11, (-2234643900000L), chronology9);
        org.joda.time.Period period13 = period11.minusHours(53);
        org.joda.time.Period period15 = period11.withWeeks((int) '#');
        org.joda.time.Period period16 = period1.withFields((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Period period18 = period16.minusHours(26164018);
        org.joda.time.Period period20 = period16.withWeeks(26389852);
        int int21 = period20.getYears();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT1M" + "'", str2, "PT1M");
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-70) + "'", int21 == (-70));
    }

    @Test
    public void test12172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12172");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        int int11 = dateTimeField9.getMaximumValue((long) 26324141);
        java.util.Date date17 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.fromDateFields(date17);
        org.joda.time.DateTimeZone dateTimeZone19 = null;
        org.joda.time.DateTime dateTime20 = localDate18.toDateTimeAtCurrentTime(dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate18.plusWeeks((int) (short) 0);
        int int23 = localDate18.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str26 = dateTimeZone25.getID();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.DateMidnight dateMidnight28 = localDate18.toDateMidnight(dateTimeZone25);
        org.joda.time.LocalDate localDate30 = localDate18.withWeekOfWeekyear(10);
        org.joda.time.LocalDate localDate32 = localDate18.withDayOfMonth(13);
        org.joda.time.DateTime dateTime33 = localDate18.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property34 = localDate18.dayOfYear();
        java.util.Date date41 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate42 = org.joda.time.LocalDate.fromDateFields(date41);
        org.joda.time.LocalDate.Property property43 = localDate42.weekOfWeekyear();
        org.joda.time.LocalDate localDate44 = property43.getLocalDate();
        org.joda.time.Period period46 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period48 = org.joda.time.Period.minutes(1);
        java.lang.String str49 = period48.toString();
        org.joda.time.Period period50 = period46.withFields((org.joda.time.ReadablePeriod) period48);
        org.joda.time.Period period52 = period50.plusMillis(100);
        org.joda.time.Period period53 = period50.negated();
        org.joda.time.Period period55 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period57 = org.joda.time.Period.minutes(1);
        java.lang.String str58 = period57.toString();
        org.joda.time.Period period59 = period55.withFields((org.joda.time.ReadablePeriod) period57);
        org.joda.time.Period period61 = period59.plusMillis(100);
        boolean boolean62 = period53.equals((java.lang.Object) period61);
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period64 = period53.withFields((org.joda.time.ReadablePeriod) mutablePeriod63);
        org.joda.time.LocalDate localDate65 = localDate44.plus((org.joda.time.ReadablePeriod) mutablePeriod63);
        int int66 = mutablePeriod63.getWeeks();
        mutablePeriod63.addMonths(55);
        mutablePeriod63.addHours(3172000);
        mutablePeriod63.addWeeks(19);
        java.lang.String str73 = mutablePeriod63.toString();
        int[] intArray74 = mutablePeriod63.getValues();
        java.util.Locale locale79 = new java.util.Locale("12176", "\u4e2d\u6587\u4e2d\u56fd)", "1970W014");
        org.joda.time.LocalTime localTime81 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology82 = localTime81.getChronology();
        org.joda.time.MutableDateTime mutableDateTime83 = org.joda.time.MutableDateTime.now(chronology82);
        org.joda.time.DateTimeField dateTimeField84 = chronology82.weekyearOfCentury();
        int int86 = dateTimeField84.getMaximumValue((long) (-11));
        java.util.Locale locale87 = java.util.Locale.KOREAN;
        java.util.Locale locale88 = java.util.Locale.KOREAN;
        java.lang.String str89 = locale87.getDisplayVariant(locale88);
        java.util.Set<java.lang.String> strSet90 = locale87.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(locale87);
        int int92 = dateTimeField84.getMaximumTextLength(locale87);
        java.lang.String str93 = locale79.getDisplayLanguage(locale87);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray94 = dateTimeField9.set((org.joda.time.ReadablePartial) localDate18, 17, intArray74, "50", locale79);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.016" + "'", str26, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT1M" + "'", str49, "PT1M");
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "PT1M" + "'", str58, "PT1M");
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "P55M19WT3172000H" + "'", str73, "P55M19WT3172000H");
        org.junit.Assert.assertNotNull(intArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[0, 55, 19, 0, 3172000, 0, 0, 0]");
// flaky:         org.junit.Assert.assertEquals(locale79.toString(), "\u4e2d\u6587\u4e2d\u56fd)_1970W014");
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(mutableDateTime83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 99 + "'", int86 == 99);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "ko");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(strSet90);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 2 + "'", int92 == 2);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "12176" + "'", str93, "12176");
    }

    @Test
    public void test12173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12173");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = timeOfDay8.getFields();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTimeToday(dateTimeZone10);
        org.joda.time.Period period13 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period15 = org.joda.time.Period.minutes(1);
        java.lang.String str16 = period15.toString();
        org.joda.time.Period period17 = period13.withFields((org.joda.time.ReadablePeriod) period15);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period19 = period13.normalizedStandard(periodType18);
        org.joda.time.Period period20 = new org.joda.time.Period(readableDuration3, (org.joda.time.ReadableInstant) dateTime11, periodType18);
        org.joda.time.PeriodType periodType21 = periodType18.withMillisRemoved();
        org.joda.time.Period period22 = interval2.toPeriod(periodType21);
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray28 = timeOfDay27.getFields();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTimeToday(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfCentury(16);
        org.joda.time.DateTime dateTime34 = dateTime30.plusYears((-1));
        boolean boolean35 = interval2.contains((org.joda.time.ReadableInstant) dateTime30);
        boolean boolean36 = interval2.isBeforeNow();
        java.lang.String str37 = interval2.toString();
        org.joda.time.DateTime dateTime38 = interval2.getStart();
        boolean boolean39 = dateTime38.isEqualNow();
        org.joda.time.TimeOfDay timeOfDay40 = dateTime38.toTimeOfDay();
        org.joda.time.DateTime.Property property41 = dateTime38.weekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT1M" + "'", str16, "PT1M");
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTimeFieldArray28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970-01-01T00:00:00.015+00:00:00.016/1970-01-01T00:00:00.113+00:00:00.016" + "'", str37, "1970-01-01T00:00:00.015+00:00:00.016/1970-01-01T00:00:00.113+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(timeOfDay40);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test12174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12174");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = localDate6.getFields();
        org.joda.time.LocalDate localDate11 = localDate6.minusDays(32772);
        org.joda.time.DateTime dateTime12 = localDate11.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        int int15 = dateTimeZone13.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime16.add(readableDuration17, 0);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime16.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime16.yearOfEra();
        org.joda.time.YearMonthDay yearMonthDay22 = new org.joda.time.YearMonthDay((java.lang.Object) mutableDateTime16);
        org.joda.time.YearMonthDay yearMonthDay24 = yearMonthDay22.plusMonths(7);
        int[] intArray25 = yearMonthDay22.getValues();
        org.joda.time.YearMonthDay.Property property26 = yearMonthDay22.dayOfMonth();
        java.util.Date date33 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate34 = org.joda.time.LocalDate.fromDateFields(date33);
        int int35 = localDate34.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        int int38 = dateTimeZone36.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime39 = localDate34.toDateTimeAtCurrentTime(dateTimeZone36);
        org.joda.time.YearMonthDay yearMonthDay40 = new org.joda.time.YearMonthDay(dateTimeZone36);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(chronology41);
        org.joda.time.DateTime dateTime43 = dateTime42.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str46 = dateTimeZone45.getID();
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Locale locale50 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str51 = locale48.getDisplayVariant(locale50);
        java.lang.String str52 = dateTimeZone45.getName((long) 5, locale48);
        org.joda.time.DateTime dateTime53 = dateTime43.withZoneRetainFields(dateTimeZone45);
        org.joda.time.DateMidnight dateMidnight54 = yearMonthDay40.toDateMidnight(dateTimeZone45);
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) (short) 100, dateTimeZone45);
        org.joda.time.DateTime dateTime56 = yearMonthDay22.toDateTimeAtMidnight(dateTimeZone45);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((java.lang.Object) localDate11, dateTimeZone45);
        org.joda.time.LocalDate localDate59 = localDate57.withDayOfYear(99);
        java.util.Date date66 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate67 = org.joda.time.LocalDate.fromDateFields(date66);
        int int68 = localDate67.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        int int71 = dateTimeZone69.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime72 = localDate67.toDateTimeAtCurrentTime(dateTimeZone69);
        org.joda.time.YearMonthDay yearMonthDay73 = new org.joda.time.YearMonthDay(dateTimeZone69);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime(chronology74);
        org.joda.time.DateTime dateTime76 = dateTime75.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str79 = dateTimeZone78.getID();
        java.util.Locale locale81 = java.util.Locale.KOREAN;
        java.util.Locale locale83 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str84 = locale81.getDisplayVariant(locale83);
        java.lang.String str85 = dateTimeZone78.getName((long) 5, locale81);
        org.joda.time.DateTime dateTime86 = dateTime76.withZoneRetainFields(dateTimeZone78);
        org.joda.time.DateMidnight dateMidnight87 = yearMonthDay73.toDateMidnight(dateTimeZone78);
        org.joda.time.LocalDate localDate88 = new org.joda.time.LocalDate((long) (short) 100, dateTimeZone78);
        java.util.TimeZone timeZone89 = dateTimeZone78.toTimeZone();
        org.joda.time.DateTime dateTime90 = localDate57.toDateTimeAtStartOfDay(dateTimeZone78);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 16 + "'", int15 == 16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(property26);
// flaky:         org.junit.Assert.assertEquals(date33.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1899 + "'", int35 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 16 + "'", int38 == 16);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.016" + "'", str46, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00:00.016" + "'", str52, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDate59);
// flaky:         org.junit.Assert.assertEquals(date66.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1899 + "'", int68 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 16 + "'", int71 == 16);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+00:00:00.016" + "'", str79, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ko");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+00:00:00.016" + "'", str85, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateMidnight87);
        org.junit.Assert.assertNotNull(timeZone89);
        org.junit.Assert.assertEquals(timeZone89.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime90);
    }

    @Test
    public void test12175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12175");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(48352, 26164018, 265, 64773, 3172001);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 64773 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12176");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = timeOfDay9.toDateTimeToday(dateTimeZone10);
        mutableDateTime4.setZoneRetainFields(dateTimeZone10);
        mutableDateTime4.setSecondOfMinute((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        int int17 = dateTimeZone15.getStandardOffset((long) 100);
        mutableDateTime4.setZone(dateTimeZone15);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology23 = localTime22.getChronology();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((-1L), (long) 17, chronology23);
        mutableDateTime4.setChronology(chronology23);
        java.lang.String str26 = chronology23.toString();
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = timeOfDay31.toDateTimeToday(dateTimeZone32);
        org.joda.time.Chronology chronology34 = chronology23.withZone(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.Period period36 = new org.joda.time.Period((long) 53, chronology34);
        org.joda.time.DurationField durationField37 = chronology34.months();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.secondOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = dateTimeField38.getType();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone42 = dateTimeZone41.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone45 = dateTimeZone44.toTimeZone();
        boolean boolean46 = timeZone42.hasSameRules(timeZone45);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Calendar calendar48 = java.util.Calendar.getInstance(timeZone45, locale47);
        int int49 = calendar48.getWeeksInWeekYear();
        boolean boolean50 = calendar48.isWeekDateSupported();
        org.joda.time.TimeOfDay timeOfDay51 = org.joda.time.TimeOfDay.fromCalendarFields(calendar48);
        org.joda.time.TimeOfDay timeOfDay53 = timeOfDay51.plusSeconds((int) 'u');
        org.joda.time.TimeOfDay timeOfDay55 = timeOfDay51.minusMillis(2922750);
        int int56 = dateTimeField38.getMaximumValue((org.joda.time.ReadablePartial) timeOfDay51);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 16 + "'", int17 == 16);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[UTC]" + "'", str26, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar48);
// flaky:         org.junit.Assert.assertEquals(calendar48.toString(), "java.util.GregorianCalendar[time=1645514663011,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=23,MILLISECOND=27,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 53 + "'", int49 == 53);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(timeOfDay53);
        org.junit.Assert.assertNotNull(timeOfDay55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 86399 + "'", int56 == 86399);
    }

    @Test
    public void test12177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12177");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = localDate6.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.withYear(1899);
        org.joda.time.Interval interval15 = yearMonthDay12.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = yearMonthDay12.getFieldTypes();
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay12.year();
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period23 = period19.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period23.plusMillis(100);
        org.joda.time.Period period26 = period23.negated();
        org.joda.time.Period period28 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period30 = org.joda.time.Period.minutes(1);
        java.lang.String str31 = period30.toString();
        org.joda.time.Period period32 = period28.withFields((org.joda.time.ReadablePeriod) period30);
        org.joda.time.Period period34 = period32.plusMillis(100);
        boolean boolean35 = period26.equals((java.lang.Object) period34);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period37 = period26.withFields((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.Period period39 = period26.withYears(16);
        org.joda.time.YearMonthDay yearMonthDay40 = yearMonthDay12.plus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.YearMonthDay.Property property41 = yearMonthDay40.dayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay43 = yearMonthDay40.plusMonths((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay45 = yearMonthDay43.withYear(1969);
        org.joda.time.LocalDate localDate46 = yearMonthDay45.toLocalDate();
        int int47 = yearMonthDay45.getDayOfMonth();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1899 + "'", int7 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1M" + "'", str22, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT1M" + "'", str31, "PT1M");
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(yearMonthDay40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 22 + "'", int47 == 22);
    }

    @Test
    public void test12178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12178");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = timeOfDay8.toDateTimeToday(dateTimeZone9);
        mutableDateTime3.setZoneRetainFields(dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime3, readableDuration12);
        mutableDateTime3.setTime(10, 2, 0, 55);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime3.weekOfWeekyear();
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Period period23 = org.joda.time.Period.minutes(1);
        java.lang.String str24 = period23.toString();
        org.joda.time.LocalTime localTime25 = localTime21.plus((org.joda.time.ReadablePeriod) period23);
        boolean boolean26 = mutableDateTime3.equals((java.lang.Object) localTime25);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        org.joda.time.DateTime.Property property29 = dateTime28.millisOfSecond();
        boolean boolean30 = localTime25.equals((java.lang.Object) dateTime28);
        int int31 = dateTime28.getSecondOfMinute();
        java.util.Date date32 = dateTime28.toDate();
        date32.setMinutes(0);
        int int35 = date32.getSeconds();
        date32.setMinutes(26380612);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT1M" + "'", str24, "PT1M");
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 23 + "'", int31 == 23);
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Wed Apr 20 03:52:23 GMT+00:00 2072");
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 23 + "'", int35 == 23);
    }

    @Test
    public void test12179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12179");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay8 = property7.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay10 = property7.addToCopy(0);
        int int11 = property7.getMinimumValueOverall();
        org.joda.time.TimeOfDay timeOfDay13 = property7.addToCopy((int) ' ');
        org.joda.time.TimeOfDay timeOfDay15 = property7.addToCopy(15);
        org.joda.time.TimeOfDay.Property property16 = timeOfDay15.secondOfMinute();
        int int17 = property16.getMaximumValue();
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 59 + "'", int17 == 59);
    }

    @Test
    public void test12180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12180");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.Instant instant2 = dateTime1.toInstant();
        org.joda.time.DateTime dateTime4 = dateTime1.withCenturyOfEra(13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime6 = dateTime4.withCenturyOfEra(26650097);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26650097 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(dateTime4);
    }

    @Test
    public void test12181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12181");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = localDate6.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.withYear(1899);
        org.joda.time.Interval interval15 = yearMonthDay12.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = yearMonthDay12.getFieldTypes();
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay12.year();
        org.joda.time.YearMonthDay yearMonthDay18 = property17.getYearMonthDay();
        org.joda.time.LocalDate localDate19 = yearMonthDay18.toLocalDate();
        int int20 = localDate19.size();
        org.joda.time.LocalDate localDate22 = localDate19.minusMonths(18);
        org.joda.time.LocalDate localDate24 = localDate19.plusMonths((-26232869));
        int int25 = localDate24.getDayOfMonth();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1899 + "'", int7 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 22 + "'", int25 == 22);
    }

    @Test
    public void test12182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12182");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 0);
        org.joda.time.Period period8 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        java.lang.String str11 = period10.toString();
        org.joda.time.Period period12 = period8.withFields((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period14 = period12.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.months();
        int int16 = period14.get(durationFieldType15);
        mutableDateTime3.add(durationFieldType15, 7);
        mutableDateTime3.setMillis((long) 100);
        mutableDateTime3.setSecondOfMinute((int) (byte) 10);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime3.weekOfWeekyear();
        mutableDateTime3.add(21168000000L);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime3.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime28 = property26.addWrapField(60);
        org.joda.time.DateTimeField dateTimeField29 = mutableDateTime28.getRoundingField();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime28.minuteOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT1M" + "'", str11, "PT1M");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNull(dateTimeField29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test12183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12183");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period12 = org.joda.time.Period.minutes(1);
        java.lang.String str13 = period12.toString();
        org.joda.time.Period period14 = period10.withFields((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period16 = period14.plusMillis(100);
        org.joda.time.Period period17 = period14.negated();
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period23 = period19.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period23.plusMillis(100);
        boolean boolean26 = period17.equals((java.lang.Object) period25);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period28 = period17.withFields((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.LocalDate localDate29 = localDate8.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.LocalDate localDate31 = localDate29.withYear((int) (byte) 10);
        int int32 = localDate29.getCenturyOfEra();
        org.joda.time.Interval interval33 = localDate29.toInterval();
        org.joda.time.DateTime dateTime34 = interval33.getEnd();
        long long35 = interval33.toDurationMillis();
        org.joda.time.Duration duration36 = interval33.toDuration();
        org.joda.time.Duration duration37 = interval33.toDuration();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT1M" + "'", str13, "PT1M");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1M" + "'", str22, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 18 + "'", int32 == 18);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 86400000L + "'", long35 == 86400000L);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration37);
    }

    @Test
    public void test12184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12184");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 0);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime3.dayOfWeek();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime3.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundFloor();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.millisOfDay();
        int int11 = mutableDateTime9.getYearOfEra();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.getMutableDateTime();
        org.joda.time.DateTimeField dateTimeField14 = property12.getField();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.roundHalfEven();
        org.joda.time.Interval interval18 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        int int21 = dateTimeZone19.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone19);
        org.joda.time.ReadableDuration readableDuration23 = null;
        mutableDateTime22.add(readableDuration23, 0);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime22.dayOfWeek();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime22.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime28 = property27.roundHalfEven();
        boolean boolean29 = interval18.isBefore((org.joda.time.ReadableInstant) mutableDateTime28);
        int int30 = mutableDateTime28.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType32 = dateTimeFieldType31.getDurationType();
        mutableDateTime28.set(dateTimeFieldType31, 15);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Locale locale37 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str38 = locale35.getDisplayVariant(locale37);
        java.util.Calendar calendar39 = mutableDateTime28.toCalendar(locale35);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime28.monthOfYear();
        mutableDateTime28.addWeeks((int) ' ');
        int int43 = property12.getDifference((org.joda.time.ReadableInstant) mutableDateTime28);
        int int44 = mutableDateTime28.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 16 + "'", int21 == 16);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(calendar39);
        org.junit.Assert.assertEquals(calendar39.toString(), "java.util.GregorianCalendar[time=1645488899984,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=15,SECOND=0,MILLISECOND=0,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-19354500) + "'", int43 == (-19354500));
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2022 + "'", int44 == 2022);
    }

    @Test
    public void test12185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12185");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology5 = localTime4.getChronology();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now(chronology5);
        org.joda.time.Period period7 = new org.joda.time.Period((long) 11, (-2234643900000L), chronology5);
        org.joda.time.Period period8 = new org.joda.time.Period((long) 3, chronology5);
        org.joda.time.DateTimeField dateTimeField9 = chronology5.weekyear();
        org.joda.time.DurationField durationField10 = dateTimeField9.getDurationField();
        long long13 = durationField10.getDifferenceAsLong(100982246400000L, 1645514614744L);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 3147L + "'", long13 == 3147L);
    }

    @Test
    public void test12186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12186");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime4.withWeekyear(26165226);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 10, chronology14);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Chronology chronology17 = null;
        mutablePeriod15.setPeriod(readableDuration16, chronology17);
        mutablePeriod15.setSeconds(0);
        int int21 = mutablePeriod15.getMillis();
        int int22 = mutablePeriod15.getYears();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime4.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod15, (int) 'x');
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType25.getDurationType();
        org.joda.time.DurationFieldType[] durationFieldTypeArray27 = new org.joda.time.DurationFieldType[] { durationFieldType26 };
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.forFields(durationFieldTypeArray27);
        boolean boolean29 = localDateTime24.equals((java.lang.Object) durationFieldTypeArray27);
        org.joda.time.Chronology chronology30 = localDateTime24.getChronology();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime24.withMillisOfDay(5452);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertNotNull(durationFieldTypeArray27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localDateTime32);
    }

    @Test
    public void test12187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12187");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicWeekDate();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone1);
        mutableDateTime4.setMillis((long) 1);
        java.lang.String str7 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) mutableDateTime4);
        mutableDateTime4.addDays(19);
        mutableDateTime4.addDays(15);
        mutableDateTime4.setWeekyear(23);
        boolean boolean14 = mutableDateTime4.isAfterNow();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970W014" + "'", str7, "1970W014");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test12188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12188");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder3 = builder0.setLenient(true);
        java.util.Calendar.Builder builder8 = builder0.setTimeOfDay((-11), 26165226, 58, 12);
        java.util.Calendar.Builder builder12 = builder8.setWeekDate(26217, 32, (-2));
        java.util.Calendar.Builder builder16 = builder8.setTimeOfDay(12, 14, 86399999);
        java.util.Locale locale18 = new java.util.Locale("hi!");
        java.util.Locale.setDefault(locale18);
        java.util.Calendar.Builder builder20 = builder8.setLocale(locale18);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        boolean boolean27 = timeZone23.hasSameRules(timeZone26);
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone26, locale28);
        boolean boolean30 = timeZone26.observesDaylightTime();
        timeZone26.setID("Korean");
        int int34 = timeZone26.getOffset((-62134819200000L));
        java.util.Calendar.Builder builder35 = builder20.setTimeZone(timeZone26);
        java.util.Calendar.Builder builder37 = builder20.setLenient(false);
        java.util.Locale locale38 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder39 = builder37.setLocale(locale38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
// flaky:         org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=19,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
        org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1645514663182,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Korean,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=23,MILLISECOND=198,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 16 + "'", int34 == 16);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test12189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12189");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = localDate6.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.withYear(1899);
        org.joda.time.Interval interval15 = yearMonthDay12.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = yearMonthDay12.getFieldTypes();
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay12.year();
        org.joda.time.YearMonthDay yearMonthDay18 = property17.getYearMonthDay();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str23 = locale20.getDisplayVariant(locale22);
        org.joda.time.YearMonthDay yearMonthDay24 = property17.setCopy("6", locale22);
        org.joda.time.YearMonthDay yearMonthDay25 = property17.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField26 = property17.getField();
        org.joda.time.YearMonthDay yearMonthDay27 = property17.getYearMonthDay();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1899 + "'", int7 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(yearMonthDay24);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(yearMonthDay27);
    }

    @Test
    public void test12190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12190");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        boolean boolean7 = timeZone3.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        java.util.Calendar.Builder builder10 = builder0.setTimeZone(timeZone6);
        java.util.Calendar.Builder builder15 = builder0.setTimeOfDay(0, (int) ' ', 12, 11);
        java.util.Calendar.Builder builder19 = builder0.setTimeOfDay(278, 649, (-2026));
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder22 = builder0.set(462, 1809);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645514663255,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=23,MILLISECOND=271,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test12191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12191");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.plus((long) '4');
        org.joda.time.DateTime.Property property10 = dateTime7.yearOfCentury();
        org.joda.time.DateTime dateTime11 = property10.roundFloorCopy();
        org.joda.time.DateTime dateTime12 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property13 = dateTime12.era();
        java.util.Calendar calendar14 = java.util.Calendar.getInstance();
        int int16 = calendar14.getMaximum((int) (short) 0);
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromCalendarFields(calendar14);
        org.joda.time.LocalTime.Property property18 = localTime17.millisOfSecond();
        org.joda.time.DateTime dateTime19 = dateTime12.withFields((org.joda.time.ReadablePartial) localTime17);
        org.joda.time.ReadablePartial readablePartial20 = null;
        org.joda.time.LocalTime localTime21 = localTime17.withFields(readablePartial20);
        org.joda.time.LocalTime localTime23 = localTime21.withMinuteOfHour(43);
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=1645514663267,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=19,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=23,MILLISECOND=283,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
    }

    @Test
    public void test12192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12192");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) '4', chronology2);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.secondOfMinute();
        int int5 = property4.getMaximumValue();
        org.joda.time.TimeOfDay timeOfDay7 = property4.addWrapFieldToCopy(17);
        java.lang.String str8 = property4.getAsString();
        java.lang.String str9 = property4.getAsText();
        org.joda.time.TimeOfDay timeOfDay10 = property4.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay12 = property4.addWrapFieldToCopy(5452000);
        org.joda.time.TimeOfDay timeOfDay14 = timeOfDay12.minusMillis(14);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((java.lang.Object) timeOfDay12);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay12.plusSeconds(362);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 59 + "'", int5 == 59);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0" + "'", str8, "0");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "0" + "'", str9, "0");
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay17);
    }

    @Test
    public void test12193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12193");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.tTime();
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.parse("59");
        int int5 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime2, "PT0S", 3);
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod();
        mutablePeriod7.addWeeks((int) (byte) 100);
        org.joda.time.Chronology chronology11 = null;
        mutablePeriod7.setPeriod((long) 15, chronology11);
        mutablePeriod7.setMinutes(1970);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology20 = localTime19.getChronology();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((long) 5, chronology20);
        org.joda.time.Chronology chronology22 = chronology20.withUTC();
        mutablePeriod7.setPeriod((long) 0, (long) 1, chronology22);
        org.joda.time.LocalTime localTime24 = org.joda.time.LocalTime.now(chronology22);
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.fromMillisOfDay((-1698474537000L), chronology22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter0.withChronology(chronology22);
        org.joda.time.format.DateTimePrinter dateTimePrinter27 = dateTimeFormatter0.getPrinter();
        java.lang.StringBuffer stringBuffer28 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(stringBuffer28, (long) 26380750);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-4) + "'", int5 == (-4));
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimePrinter27);
    }

    @Test
    public void test12194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12194");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime10 = dateTime6.plusDays((int) (byte) -1);
        java.util.Date date11 = dateTime10.toDate();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, readableDuration12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        int int16 = dateTimeZone14.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime17.add(readableDuration18, 0);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        mutableDateTime17.set(dateTimeFieldType23, (int) ' ');
        boolean boolean27 = interval13.isAfter((org.joda.time.ReadableInstant) mutableDateTime17);
        boolean boolean29 = interval13.contains((long) 17);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        int int35 = dateTimeZone33.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(dateTimeZone33);
        org.joda.time.ReadableDuration readableDuration37 = null;
        mutableDateTime36.add(readableDuration37, 0);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime36.dayOfWeek();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime36.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime42 = property41.roundHalfEven();
        boolean boolean43 = interval32.isBefore((org.joda.time.ReadableInstant) mutableDateTime42);
        int int44 = mutableDateTime42.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType45.getDurationType();
        mutableDateTime42.set(dateTimeFieldType45, 15);
        boolean boolean49 = interval13.contains((org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime42.millisOfDay();
        mutableDateTime42.setDate((long) 443);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 16 + "'", int35 == 16);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test12195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12195");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = timeOfDay5.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minus((long) (short) 0);
        org.joda.time.Period period11 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period13 = org.joda.time.Period.minutes(1);
        java.lang.String str14 = period13.toString();
        org.joda.time.Period period15 = period11.withFields((org.joda.time.ReadablePeriod) period13);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period17 = period11.normalizedStandard(periodType16);
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableDuration0, (org.joda.time.ReadableInstant) dateTime9, periodType16);
        org.joda.time.DateTime dateTime20 = dateTime9.minusHours(0);
        org.joda.time.DateTime dateTime21 = dateTime9.toDateTimeISO();
        int int22 = dateTime9.getWeekyear();
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = timeOfDay27.toDateTimeToday(dateTimeZone28);
        org.joda.time.DateTime dateTime31 = dateTime29.withCenturyOfEra(10);
        org.joda.time.DateTime.Property property32 = dateTime29.hourOfDay();
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime29);
        int int34 = dateTime9.getWeekyear();
        org.joda.time.TimeOfDay timeOfDay39 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime41 = timeOfDay39.toDateTimeToday(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime45 = dateTime41.plusDays((int) (byte) -1);
        java.util.Date date46 = dateTime45.toDate();
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, readableDuration47);
        org.joda.time.Period period49 = interval48.toPeriod();
        org.joda.time.Period period51 = period49.plusMinutes((int) (short) -1);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) 22);
        org.joda.time.Period period54 = period49.minus((org.joda.time.ReadablePeriod) mutablePeriod53);
        org.joda.time.DateTime dateTime56 = dateTime9.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod53, 261925);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT1M" + "'", str14, "PT1M");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test12196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12196");
        java.util.Date date6 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromDateFields(date6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = localDate7.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = dateTime9.withZone(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withMinuteOfHour(54);
        org.joda.time.DateMidnight dateMidnight14 = dateTime13.toDateMidnight();
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.year();
        java.util.Date date22 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        int int23 = date22.getSeconds();
        date22.setHours((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay26 = org.joda.time.YearMonthDay.fromDateFields(date22);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime();
        java.util.Date date36 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate37 = org.joda.time.LocalDate.fromDateFields(date36);
        int int38 = localDate37.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        int int41 = dateTimeZone39.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime42 = localDate37.toDateTimeAtCurrentTime(dateTimeZone39);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone39);
        mutableDateTime27.setZone(dateTimeZone39);
        org.joda.time.DateTime dateTime45 = yearMonthDay26.toDateTimeAtMidnight(dateTimeZone39);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(16L, dateTimeZone39);
        org.joda.time.MutableDateTime mutableDateTime47 = dateMidnight14.toMutableDateTime(dateTimeZone39);
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) 30, dateTimeZone39);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone39);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay26);
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1899 + "'", int38 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 16 + "'", int41 == 16);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(mutableDateTime47);
    }

    @Test
    public void test12197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12197");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime10 = dateTime8.plusSeconds((int) (short) 100);
        org.joda.time.DateTime.Property property11 = dateTime10.monthOfYear();
        org.joda.time.DateTime dateTime13 = property11.addToCopy((long) 6);
        org.joda.time.DateTime dateTime15 = dateTime13.withMillisOfDay(293);
        org.joda.time.DateTime dateTime17 = dateTime13.withYearOfEra(292278993);
        org.joda.time.DateTime dateTime19 = dateTime13.minusMinutes(142);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test12198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12198");
        java.util.Date date1 = new java.util.Date("Feb 22, 2022 7:18:08 AM");
        org.joda.time.YearMonthDay yearMonthDay2 = org.joda.time.YearMonthDay.fromDateFields(date1);
        int int3 = date1.getHours();
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 07:18:08 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 7 + "'", int3 == 7);
    }

    @Test
    public void test12199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12199");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 10, chronology3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMinuteOfHour(0);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) 10, chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime6.withFields((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.millisOfDay();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.weekyear();
        org.joda.time.LocalDateTime localDateTime17 = property16.withMaximumValue();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfMonth();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.millisOfSecond();
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.secondOfMinute();
        java.util.Calendar.Builder builder21 = new java.util.Calendar.Builder();
        java.util.Calendar calendar22 = builder21.build();
        java.util.TimeZone timeZone23 = calendar22.getTimeZone();
        boolean boolean24 = localDateTime17.equals((java.lang.Object) timeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        int int27 = dateTimeZone25.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(dateTimeZone25);
        java.lang.String str29 = dateTimeZone25.toString();
        java.lang.String str30 = dateTimeZone25.toString();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime32 = localDateTime17.toDateTime(dateTimeZone25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval33 = new org.joda.time.Interval((long) 42541, (-81L), dateTimeZone25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(calendar22);
// flaky:         org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=19,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 16 + "'", int27 == 16);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.016" + "'", str29, "+00:00:00.016");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.016" + "'", str30, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test12200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12200");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(32772L);
        org.joda.time.LocalTime.Property property2 = localTime1.millisOfSecond();
        org.joda.time.LocalTime localTime4 = property2.addCopy((long) 3174023);
        org.joda.time.LocalTime localTime5 = property2.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
    }

    @Test
    public void test12201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12201");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.plus((long) '4');
        org.joda.time.DateTime.Property property10 = dateTime7.yearOfCentury();
        org.joda.time.DateTime dateTime11 = property10.withMaximumValue();
        org.joda.time.DateTime dateTime13 = dateTime11.plusWeeks(5603523);
        int int14 = dateTime13.getSecondOfMinute();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.Interval interval20 = new org.joda.time.Interval((-1L), (long) 17, chronology19);
        org.joda.time.Interval interval23 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray30 = timeOfDay29.getFields();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = timeOfDay29.toDateTimeToday(dateTimeZone31);
        org.joda.time.Period period34 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period36 = org.joda.time.Period.minutes(1);
        java.lang.String str37 = period36.toString();
        org.joda.time.Period period38 = period34.withFields((org.joda.time.ReadablePeriod) period36);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period40 = period34.normalizedStandard(periodType39);
        org.joda.time.Period period41 = new org.joda.time.Period(readableDuration24, (org.joda.time.ReadableInstant) dateTime32, periodType39);
        org.joda.time.PeriodType periodType42 = periodType39.withMillisRemoved();
        org.joda.time.Period period43 = interval23.toPeriod(periodType42);
        boolean boolean44 = interval23.isAfterNow();
        org.joda.time.MutableInterval mutableInterval45 = interval23.toMutableInterval();
        long long46 = interval23.getStartMillis();
        boolean boolean47 = interval20.isBefore((org.joda.time.ReadableInterval) interval23);
        org.joda.time.DateTime dateTime48 = interval20.getEnd();
        int int49 = dateTime48.getYearOfCentury();
        boolean boolean50 = dateTime13.isEqual((org.joda.time.ReadableInstant) dateTime48);
        int int51 = dateTime48.getWeekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod();
        mutablePeriod54.addWeeks((int) (byte) 100);
        org.joda.time.Chronology chronology58 = null;
        mutablePeriod54.setPeriod((long) 15, chronology58);
        org.joda.time.PeriodType periodType60 = mutablePeriod54.getPeriodType();
        org.joda.time.Period period61 = new org.joda.time.Period(1342464278400000L, (long) 909, periodType60);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period62 = new org.joda.time.Period((java.lang.Object) int51, periodType60);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeFieldArray30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT1M" + "'", str37, "PT1M");
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(mutableInterval45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + (-1L) + "'", long46 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 70 + "'", int49 == 70);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(periodType60);
    }

    @Test
    public void test12202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12202");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        int int5 = dateTimeZone3.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone3);
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7, 0);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime12 = property11.roundHalfEven();
        boolean boolean13 = interval2.isBefore((org.joda.time.ReadableInstant) mutableDateTime12);
        int int14 = mutableDateTime12.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType15.getDurationType();
        mutableDateTime12.set(dateTimeFieldType15, 15);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str22 = locale19.getDisplayVariant(locale21);
        java.util.Calendar calendar23 = mutableDateTime12.toCalendar(locale19);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime12.weekyear();
        org.joda.time.MutableDateTime mutableDateTime25 = property24.roundFloor();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645488899984,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=15,SECOND=0,MILLISECOND=0,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
    }

    @Test
    public void test12203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12203");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        int int6 = date5.getSeconds();
        date5.setHours((int) (byte) 1);
        date5.setYear(32772);
        java.util.Date date16 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        boolean boolean17 = date5.before(date16);
        date16.setTime((long) ' ');
        date16.setSeconds((int) ' ');
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.fromDateFields(date16);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusWeeks(31284284);
        int int25 = localDateTime24.getDayOfMonth();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Sun Mar 10 01:35:00 GMT+00:00 34672");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Thu Jan 01 00:00:32 GMT+00:00 1970");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 23 + "'", int25 == 23);
    }

    @Test
    public void test12204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12204");
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = timeOfDay8.getFields();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTimeToday(dateTimeZone10);
        org.joda.time.Period period13 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period15 = org.joda.time.Period.minutes(1);
        java.lang.String str16 = period15.toString();
        org.joda.time.Period period17 = period13.withFields((org.joda.time.ReadablePeriod) period15);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period19 = period13.normalizedStandard(periodType18);
        org.joda.time.Period period20 = new org.joda.time.Period(readableDuration3, (org.joda.time.ReadableInstant) dateTime11, periodType18);
        boolean boolean22 = periodType18.equals((java.lang.Object) 100L);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology25 = localTime24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.hours();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 26163694, (long) 2022, periodType18, chronology25);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight(21168000036L, chronology25);
        org.joda.time.DateTimeField dateTimeField31 = chronology25.yearOfEra();
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime(chronology25);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT1M" + "'", str16, "PT1M");
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField31);
    }

    @Test
    public void test12205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12205");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.LocalDate localDate10 = property7.addToCopy(100);
        org.joda.time.LocalDate localDate12 = property7.addToCopy(0);
        org.joda.time.LocalDate localDate14 = localDate12.plusYears(26163694);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfCentury(2);
        org.joda.time.DateTime dateTime17 = localDate16.toDateTimeAtCurrentTime();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test12206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12206");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay(8L);
        org.joda.time.LocalTime.Property property2 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime4 = localTime1.minusMillis(44);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        java.lang.String str7 = durationFieldType6.toString();
        boolean boolean8 = localTime1.isSupported(durationFieldType6);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "minutes" + "'", str7, "minutes");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test12207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12207");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = timeOfDay8.getFields();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTimeToday(dateTimeZone10);
        org.joda.time.Period period13 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period15 = org.joda.time.Period.minutes(1);
        java.lang.String str16 = period15.toString();
        org.joda.time.Period period17 = period13.withFields((org.joda.time.ReadablePeriod) period15);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period19 = period13.normalizedStandard(periodType18);
        org.joda.time.Period period20 = new org.joda.time.Period(readableDuration3, (org.joda.time.ReadableInstant) dateTime11, periodType18);
        org.joda.time.PeriodType periodType21 = periodType18.withMillisRemoved();
        org.joda.time.Period period22 = interval2.toPeriod(periodType21);
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray28 = timeOfDay27.getFields();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTimeToday(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfCentury(16);
        org.joda.time.DateTime dateTime34 = dateTime30.plusYears((-1));
        boolean boolean35 = interval2.contains((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology37);
        org.joda.time.DateTime.Property property39 = dateTime38.secondOfMinute();
        org.joda.time.Interval interval40 = new org.joda.time.Interval(readableDuration36, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Interval interval41 = interval2.overlap((org.joda.time.ReadableInterval) interval40);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        int int44 = dateTimeZone42.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(dateTimeZone42);
        org.joda.time.ReadableDuration readableDuration46 = null;
        mutableDateTime45.add(readableDuration46, 0);
        mutableDateTime45.setYear((int) ' ');
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod();
        mutablePeriod51.addWeeks((int) (byte) 100);
        org.joda.time.Chronology chronology55 = null;
        mutablePeriod51.setPeriod((long) 15, chronology55);
        mutablePeriod51.setMinutes(1970);
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology64 = localTime63.getChronology();
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime((long) 5, chronology64);
        org.joda.time.Chronology chronology66 = chronology64.withUTC();
        mutablePeriod51.setPeriod((long) 0, (long) 1, chronology66);
        mutableDateTime45.setChronology(chronology66);
        org.joda.time.DateTimeField dateTimeField69 = chronology66.millisOfSecond();
        org.joda.time.Period period71 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period73 = org.joda.time.Period.minutes(1);
        java.lang.String str74 = period73.toString();
        org.joda.time.Period period75 = period71.withFields((org.joda.time.ReadablePeriod) period73);
        int int76 = period71.getMinutes();
        long long79 = chronology66.add((org.joda.time.ReadablePeriod) period71, 0L, 26190505);
        org.joda.time.Interval interval80 = interval2.withChronology(chronology66);
        org.joda.time.DateTime dateTime81 = interval2.getEnd();
        org.joda.time.Period period82 = interval2.toPeriod();
        org.joda.time.Period period84 = period82.minusMonths(23);
        java.lang.Object obj85 = null;
        boolean boolean86 = period82.equals(obj85);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT1M" + "'", str16, "PT1M");
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTimeFieldArray28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNull(interval41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 16 + "'", int44 == 16);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "PT1M" + "'", str74, "PT1M");
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 1571430300000L + "'", long79 == 1571430300000L);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test12208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12208");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("\uc624\uc804 1:54:00");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.yearOfCentury();
        org.joda.time.DateTime dateTime5 = dateTime3.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime7 = dateTime3.plusMinutes(2022);
        java.util.Date date8 = dateTime3.toDate();
        int int9 = date8.getHours();
        boolean boolean10 = timeZone1.inDaylightTime(date8);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(date8);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Tue Feb 22 07:24:23 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 7 + "'", int9 == 7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test12209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12209");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = timeOfDay8.toDateTimeToday(dateTimeZone9);
        mutableDateTime3.setZoneRetainFields(dateTimeZone9);
        mutableDateTime3.setSecondOfMinute((int) (short) 0);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime3.minuteOfHour();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime3.year();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test12210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12210");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period3 = org.joda.time.Period.minutes(1);
        java.lang.String str4 = period3.toString();
        org.joda.time.Period period5 = period1.withFields((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Period period7 = period5.plusMillis(100);
        org.joda.time.Period period8 = period5.negated();
        org.joda.time.Period period9 = period8.negated();
        org.joda.time.Period period10 = period9.toPeriod();
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology14 = localTime13.getChronology();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) 5, chronology14);
        org.joda.time.Chronology chronology16 = chronology14.withUTC();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology16.getZone();
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusSeconds((int) (byte) -1);
        org.joda.time.DateTime dateTime22 = dateTime20.minusMillis(26405449);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology25 = localTime24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.hours();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.secondOfDay();
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str31 = locale28.getDisplayVariant(locale30);
        java.util.Locale locale32 = locale30.stripExtensions();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str35 = dateTimeZone34.getID();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Locale locale39 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str40 = locale37.getDisplayVariant(locale39);
        java.lang.String str41 = dateTimeZone34.getName((long) 5, locale37);
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = locale37.getDisplayScript(locale42);
        java.lang.String str44 = locale32.getDisplayName(locale37);
        int int45 = dateTimeField27.getMaximumShortTextLength(locale37);
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str49 = locale46.getDisplayVariant(locale48);
        java.util.Locale locale50 = locale48.stripExtensions();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str53 = dateTimeZone52.getID();
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Locale locale57 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str58 = locale55.getDisplayVariant(locale57);
        java.lang.String str59 = dateTimeZone52.getName((long) 5, locale55);
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.lang.String str61 = locale55.getDisplayScript(locale60);
        java.lang.String str62 = locale50.getDisplayName(locale55);
        java.lang.String str63 = locale55.getISO3Language();
        int int64 = dateTimeField27.getMaximumTextLength(locale55);
        int int65 = dateTime20.get(dateTimeField27);
        org.joda.time.Duration duration66 = period9.toDurationTo((org.joda.time.ReadableInstant) dateTime20);
        int int67 = dateTime20.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT1M" + "'", str4, "PT1M");
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.016" + "'", str35, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.016" + "'", str41, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 5 + "'", int45 == 5);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00:00.016" + "'", str53, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00:00.016" + "'", str59, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "kor" + "'", str63, "kor");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 5 + "'", int64 == 5);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 26662 + "'", int65 == 26662);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 8 + "'", int67 == 8);
    }

    @Test
    public void test12211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12211");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        org.joda.time.DurationField durationField9 = property7.getRangeDurationField();
        long long12 = durationField9.getDifferenceAsLong(159L, (long) 26163694);
        long long15 = durationField9.getMillis(42541, 1645514227847L);
        java.lang.String str16 = durationField9.getName();
        long long19 = durationField9.subtract((-2720757L), 79);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1342464278400000L + "'", long15 == 1342464278400000L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "weekyears" + "'", str16, "weekyears");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-2492988320757L) + "'", long19 == (-2492988320757L));
    }

    @Test
    public void test12212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12212");
        java.io.IOException iOException1 = new java.io.IOException("T01:56:08.000");
    }

    @Test
    public void test12213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12213");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = timeOfDay5.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minus((long) (short) 0);
        org.joda.time.Period period11 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period13 = org.joda.time.Period.minutes(1);
        java.lang.String str14 = period13.toString();
        org.joda.time.Period period15 = period11.withFields((org.joda.time.ReadablePeriod) period13);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period17 = period11.normalizedStandard(periodType16);
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableDuration0, (org.joda.time.ReadableInstant) dateTime9, periodType16);
        org.joda.time.DateTime dateTime19 = dateTime9.toDateTimeISO();
        org.joda.time.DateTime.Property property20 = dateTime19.minuteOfHour();
        org.joda.time.DateTime.Property property21 = dateTime19.dayOfMonth();
        org.joda.time.DateTime.Property property22 = dateTime19.secondOfDay();
        org.joda.time.DateTime dateTime24 = dateTime19.plusSeconds(197000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = dateTime24.withWeekOfWeekyear(86340000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86340000 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT1M" + "'", str14, "PT1M");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test12214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12214");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay8 = property7.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay10 = property7.addToCopy(0);
        int int11 = property7.getMinimumValueOverall();
        org.joda.time.TimeOfDay timeOfDay13 = property7.addToCopy((int) ' ');
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.withSecondOfMinute(17);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay15.plusHours((int) ' ');
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        int int23 = dateTimeZone21.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(dateTimeZone21);
        org.joda.time.ReadableDuration readableDuration25 = null;
        mutableDateTime24.add(readableDuration25, 0);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime24.dayOfWeek();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime24.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime30 = property29.roundHalfEven();
        boolean boolean31 = interval20.isBefore((org.joda.time.ReadableInstant) mutableDateTime30);
        int int32 = mutableDateTime30.getHourOfDay();
        org.joda.time.DateTime dateTime33 = timeOfDay17.toDateTime((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology38 = localTime37.getChronology();
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) 5, chronology38);
        org.joda.time.Chronology chronology40 = chronology38.withUTC();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((-259200000L), chronology40);
        org.joda.time.DateTimeField dateTimeField43 = chronology40.minuteOfHour();
        org.joda.time.TimeOfDay timeOfDay44 = timeOfDay17.withChronologyRetainFields(chronology40);
        org.joda.time.TimeOfDay timeOfDay46 = timeOfDay44.minusMillis(26509036);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 16 + "'", int23 == 16);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(timeOfDay44);
        org.junit.Assert.assertNotNull(timeOfDay46);
    }

    @Test
    public void test12215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12215");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 0);
        org.joda.time.Period period8 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        java.lang.String str11 = period10.toString();
        org.joda.time.Period period12 = period8.withFields((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period14 = period12.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.months();
        int int16 = period14.get(durationFieldType15);
        mutableDateTime3.add(durationFieldType15, 7);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime3.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime21 = property19.add(1439);
        org.joda.time.MutableDateTime mutableDateTime23 = property19.add(41);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT1M" + "'", str11, "PT1M");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
    }

    @Test
    public void test12216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12216");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = localDate6.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.withYear(1899);
        int int15 = yearMonthDay12.size();
        int int16 = yearMonthDay12.getDayOfMonth();
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay12.withDayOfMonth((int) (short) 10);
        org.joda.time.YearMonthDay.Property property19 = yearMonthDay18.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property19.getFieldType();
        java.util.Locale locale24 = new java.util.Locale("2", "2", "55");
        int int25 = property19.getMaximumShortTextLength(locale24);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1899 + "'", int7 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertEquals(locale24.toString(), "2_2_55");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
    }

    @Test
    public void test12217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12217");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str3 = dateTimeZone2.getID();
        java.lang.String str5 = dateTimeZone2.getShortName((long) (short) 100);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(dateTimeZone2);
        org.joda.time.DateMidnight dateMidnight7 = org.joda.time.DateMidnight.now(dateTimeZone2);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((-1974003L), dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        int int11 = dateTimeZone9.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration13 = null;
        mutableDateTime12.add(readableDuration13, 0);
        java.util.Date date24 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.fromDateFields(date24);
        int int26 = localDate25.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        int int29 = dateTimeZone27.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime30 = localDate25.toDateTimeAtCurrentTime(dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.withCenturyOfEra((int) (short) 1);
        org.joda.time.Period period35 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period37 = org.joda.time.Period.minutes(1);
        java.lang.String str38 = period37.toString();
        org.joda.time.Period period39 = period35.withFields((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period41 = period39.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.months();
        int int43 = period41.get(durationFieldType42);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight31.withPeriodAdded((org.joda.time.ReadablePeriod) period41, 0);
        org.joda.time.DateMidnight.Property property46 = dateMidnight31.monthOfYear();
        org.joda.time.DateMidnight dateMidnight47 = property46.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate48 = dateMidnight47.toLocalDate();
        mutableDateTime12.setMillis((org.joda.time.ReadableInstant) dateMidnight47);
        java.util.Date date55 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate56 = org.joda.time.LocalDate.fromDateFields(date55);
        int int57 = localDate56.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        int int60 = dateTimeZone58.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime61 = localDate56.toDateTimeAtCurrentTime(dateTimeZone58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = org.joda.time.format.ISODateTimeFormat.weekyearWeekDay();
        boolean boolean63 = dateTimeFormatter62.isParser();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone67 = dateTimeZone66.toTimeZone();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((long) (-1), dateTimeZone66);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = dateTimeFormatter62.withZone(dateTimeZone66);
        long long71 = dateTimeZone58.getMillisKeepLocal(dateTimeZone66, 0L);
        org.joda.time.DateTime dateTime72 = org.joda.time.DateTime.now(dateTimeZone66);
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight47.withZoneRetainFields(dateTimeZone66);
        org.joda.time.DateMidnight dateMidnight74 = org.joda.time.DateMidnight.now(dateTimeZone66);
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate(dateTimeZone66);
        org.joda.time.LocalDate.Property property76 = localDate75.dayOfYear();
        boolean boolean77 = dateTimeZone2.equals((java.lang.Object) property76);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:00.016" + "'", str3, "+00:00:00.016");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.016" + "'", str5, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 16 + "'", int11 == 16);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1899 + "'", int26 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 16 + "'", int29 == 16);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT1M" + "'", str38, "PT1M");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(localDate48);
// flaky:         org.junit.Assert.assertEquals(date55.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1899 + "'", int57 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 16 + "'", int60 == 16);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(timeZone67);
        org.junit.Assert.assertEquals(timeZone67.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 0L + "'", long71 == 0L);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test12218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12218");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.Period period7 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period9 = org.joda.time.Period.minutes(1);
        java.lang.String str10 = period9.toString();
        org.joda.time.Period period11 = period7.withFields((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period13 = period11.plusMillis(100);
        org.joda.time.Period period14 = period11.negated();
        org.joda.time.Period period16 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period18 = org.joda.time.Period.minutes(1);
        java.lang.String str19 = period18.toString();
        org.joda.time.Period period20 = period16.withFields((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period22 = period20.plusMillis(100);
        boolean boolean23 = period14.equals((java.lang.Object) period22);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period25 = period14.withFields((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay4.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType28 = dateTimeFieldType27.getDurationType();
        int int29 = period14.get(durationFieldType28);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((java.lang.Object) period14);
        int int31 = period14.getMonths();
        org.joda.time.Period period33 = period14.withWeeks(26301);
        org.joda.time.Period period35 = period33.withMinutes(23);
        int int36 = period35.getSeconds();
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT1M" + "'", str10, "PT1M");
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT1M" + "'", str19, "PT1M");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
    }

    @Test
    public void test12219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12219");
        java.util.Date date8 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date8);
        int int10 = localDate9.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime14 = localDate9.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.withCenturyOfEra((int) (short) 1);
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period23 = period19.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period23.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.months();
        int int27 = period25.get(durationFieldType26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight15.withPeriodAdded((org.joda.time.ReadablePeriod) period25, 0);
        org.joda.time.DateMidnight.Property property30 = dateMidnight15.monthOfYear();
        org.joda.time.DateMidnight dateMidnight32 = property30.addToCopy(15);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withYearOfCentury(55);
        int int35 = dateMidnight32.getDayOfWeek();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight32.plus((long) 13);
        int int38 = dateMidnight37.getMillisOfDay();
        java.util.Date date46 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate47 = org.joda.time.LocalDate.fromDateFields(date46);
        int int48 = localDate47.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        int int51 = dateTimeZone49.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime52 = localDate47.toDateTimeAtCurrentTime(dateTimeZone49);
        org.joda.time.YearMonthDay yearMonthDay53 = new org.joda.time.YearMonthDay(dateTimeZone49);
        org.joda.time.YearMonthDay yearMonthDay55 = yearMonthDay53.withYear(1899);
        org.joda.time.Interval interval56 = yearMonthDay53.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray57 = yearMonthDay53.getFieldTypes();
        org.joda.time.YearMonthDay.Property property58 = yearMonthDay53.year();
        org.joda.time.YearMonthDay yearMonthDay59 = property58.withMaximumValue();
        java.util.Date date65 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate66 = org.joda.time.LocalDate.fromDateFields(date65);
        int int67 = localDate66.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        int int70 = dateTimeZone68.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime71 = localDate66.toDateTimeAtCurrentTime(dateTimeZone68);
        org.joda.time.YearMonthDay yearMonthDay72 = new org.joda.time.YearMonthDay(dateTimeZone68);
        org.joda.time.Interval interval73 = yearMonthDay59.toInterval(dateTimeZone68);
        org.joda.time.Interval interval74 = new org.joda.time.Interval(1645514181308L, 52254719996827999L, dateTimeZone68);
        org.joda.time.MutableDateTime mutableDateTime75 = dateMidnight37.toMutableDateTime(dateTimeZone68);
        org.joda.time.DateMidnight dateMidnight77 = dateMidnight37.minusMonths(176);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1899 + "'", int10 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1M" + "'", str22, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1899 + "'", int48 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 16 + "'", int51 == 16);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(yearMonthDay59);
// flaky:         org.junit.Assert.assertEquals(date65.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1899 + "'", int67 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 16 + "'", int70 == 16);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(interval73);
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertNotNull(dateMidnight77);
    }

    @Test
    public void test12220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12220");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime5 = dateTime3.plusSeconds(17);
        org.joda.time.DateTime dateTime7 = dateTime3.withDayOfMonth(2);
        int int8 = dateTime3.getYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
    }

    @Test
    public void test12221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12221");
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = timeOfDay7.toDateTimeToday(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withCenturyOfEra(10);
        boolean boolean12 = dateTime11.isEqualNow();
        org.joda.time.Chronology chronology13 = dateTime11.getChronology();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(15, 5, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.clockhourOfDay();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(1L, chronology13);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(chronology13);
        org.joda.time.LocalTime.Property property18 = localTime17.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        org.joda.time.LocalTime localTime21 = property18.setCopy(0);
        java.lang.String str22 = property18.getAsShortText();
        org.joda.time.LocalTime localTime23 = property18.roundCeilingCopy();
        org.joda.time.LocalTime localTime24 = property18.withMaximumValue();
        org.joda.time.LocalTime localTime26 = property18.setCopy(31);
        org.joda.time.Interval interval30 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        int int33 = dateTimeZone31.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(dateTimeZone31);
        org.joda.time.ReadableDuration readableDuration35 = null;
        mutableDateTime34.add(readableDuration35, 0);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime34.dayOfWeek();
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime34.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime40 = property39.roundHalfEven();
        boolean boolean41 = interval30.isBefore((org.joda.time.ReadableInstant) mutableDateTime40);
        int int42 = mutableDateTime40.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType44 = dateTimeFieldType43.getDurationType();
        mutableDateTime40.set(dateTimeFieldType43, 15);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.util.Locale locale49 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str50 = locale47.getDisplayVariant(locale49);
        java.util.Calendar calendar51 = mutableDateTime40.toCalendar(locale47);
        java.lang.String str53 = locale47.getExtension('u');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str54 = localTime26.toString("PT97H1M", locale47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localTime21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "837" + "'", str22, "837");
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 16 + "'", int33 == 16);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(calendar51);
        org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1645488899984,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=15,SECOND=0,MILLISECOND=0,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertNull(str53);
    }

    @Test
    public void test12222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12222");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        org.joda.time.LocalDate localDate10 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate11 = property7.getLocalDate();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test12223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12223");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.addWeeks((int) (byte) 100);
        org.joda.time.Period period4 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period6 = org.joda.time.Period.minutes(1);
        java.lang.String str7 = period6.toString();
        org.joda.time.Period period8 = period4.withFields((org.joda.time.ReadablePeriod) period6);
        org.joda.time.Period period10 = period8.plusMillis(100);
        org.joda.time.Period period11 = period8.negated();
        org.joda.time.Period period13 = period11.withMillis(1899);
        org.joda.time.Minutes minutes14 = period13.toStandardMinutes();
        mutablePeriod0.setPeriod((org.joda.time.ReadablePeriod) period13);
        int int16 = mutablePeriod0.getMinutes();
        java.util.Date date22 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.fromDateFields(date22);
        int int24 = localDate23.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        int int27 = dateTimeZone25.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime28 = localDate23.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.YearMonthDay yearMonthDay29 = new org.joda.time.YearMonthDay(dateTimeZone25);
        org.joda.time.YearMonthDay yearMonthDay31 = yearMonthDay29.withYear(1899);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 10, chronology33);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay31.plus((org.joda.time.ReadablePeriod) mutablePeriod34);
        java.lang.Object obj36 = mutablePeriod34.clone();
        mutablePeriod0.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod34);
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.lang.String str40 = locale38.getDisplayVariant(locale39);
        java.util.Set<java.lang.String> strSet41 = locale38.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.util.Locale[] localeArray45 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList46 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList46, localeArray45);
        java.util.List<java.util.Locale> localeList48 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.util.Locale>) localeList46);
        boolean boolean49 = strSet41.removeAll((java.util.Collection<java.util.Locale>) localeList48);
        strSet41.clear();
        boolean boolean51 = strSet41.isEmpty();
        strSet41.clear();
        boolean boolean53 = mutablePeriod34.equals((java.lang.Object) strSet41);
        mutablePeriod34.setHours(86340000);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT1M" + "'", str7, "PT1M");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1899 + "'", int24 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 16 + "'", int27 == 16);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(yearMonthDay31);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "PT86340000H0.010S");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "PT86340000H0.010S");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "PT86340000H0.010S");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localeList48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test12224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12224");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 0);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime3.dayOfWeek();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime3.yearOfEra();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology12 = localTime11.getChronology();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 5, chronology12);
        org.joda.time.Chronology chronology14 = chronology12.withUTC();
        mutableDateTime3.setChronology(chronology12);
        mutableDateTime3.setDate(1371555988124L);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime3.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime20 = property18.add(26190505L);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.yearOfEra();
        org.joda.time.Instant instant22 = mutableDateTime20.toInstant();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(instant22);
    }

    @Test
    public void test12225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12225");
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.now();
        org.joda.time.Period period4 = org.joda.time.Period.minutes(1);
        org.joda.time.LocalTime localTime6 = localTime2.withPeriodAdded((org.joda.time.ReadablePeriod) period4, (int) ' ');
        org.joda.time.Period period8 = period4.minusSeconds(2000);
        org.joda.time.Period period10 = period8.minusMonths(5);
        org.joda.time.Period period11 = period8.toPeriod();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType12.getDurationType();
        org.joda.time.DurationFieldType[] durationFieldTypeArray14 = new org.joda.time.DurationFieldType[] { durationFieldType13 };
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.forFields(durationFieldTypeArray14);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.forFields(durationFieldTypeArray14);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.forFields(durationFieldTypeArray14);
        org.joda.time.PeriodType periodType18 = periodType17.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(periodType17);
        org.joda.time.Period period20 = period11.normalizedStandard(periodType17);
        org.joda.time.PeriodType periodType21 = periodType17.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(1641167999984L, 1645514528422L, periodType17);
        mutablePeriod22.addYears(0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(durationFieldTypeArray14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
    }

    @Test
    public void test12226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12226");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 0);
        org.joda.time.Period period8 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        java.lang.String str11 = period10.toString();
        org.joda.time.Period period12 = period8.withFields((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period14 = period12.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.months();
        int int16 = period14.get(durationFieldType15);
        mutableDateTime3.add(durationFieldType15, 7);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime3.dayOfYear();
        boolean boolean20 = mutableDateTime3.isEqualNow();
        int int21 = mutableDateTime3.getWeekOfWeekyear();
        mutableDateTime3.addHours(6);
        org.joda.time.TimeOfDay timeOfDay28 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime30 = timeOfDay28.toDateTimeToday(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime34 = dateTime30.plusDays((int) (byte) -1);
        java.util.Date date35 = dateTime34.toDate();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Interval interval37 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime34, readableDuration36);
        org.joda.time.Period period38 = interval37.toPeriod();
        org.joda.time.TimeOfDay timeOfDay43 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime45 = timeOfDay43.toDateTimeToday(dateTimeZone44);
        org.joda.time.DateTime dateTime47 = dateTime45.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime49 = dateTime45.plusDays((int) (byte) -1);
        java.util.Date date50 = dateTime49.toDate();
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime49, readableDuration51);
        org.joda.time.Interval interval55 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        int int58 = dateTimeZone56.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(dateTimeZone56);
        org.joda.time.ReadableDuration readableDuration60 = null;
        mutableDateTime59.add(readableDuration60, 0);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime59.dayOfWeek();
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime59.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime65 = property64.roundHalfEven();
        boolean boolean66 = interval55.isBefore((org.joda.time.ReadableInstant) mutableDateTime65);
        org.joda.time.TimeOfDay timeOfDay71 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray72 = timeOfDay71.getFields();
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = timeOfDay71.toDateTimeToday(dateTimeZone73);
        org.joda.time.DateTime dateTime76 = dateTime74.withYearOfCentury(16);
        boolean boolean77 = interval55.isAfter((org.joda.time.ReadableInstant) dateTime76);
        boolean boolean78 = interval52.abuts((org.joda.time.ReadableInterval) interval55);
        org.joda.time.Duration duration79 = interval55.toDuration();
        org.joda.time.Interval interval80 = interval37.withDurationAfterStart((org.joda.time.ReadableDuration) duration79);
        org.joda.time.PeriodType periodType81 = null;
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime3, (org.joda.time.ReadableDuration) duration79, periodType81);
        org.joda.time.Chronology chronology83 = mutableDateTime3.getChronology();
        org.joda.time.DurationField durationField84 = chronology83.minutes();
        org.joda.time.Chronology chronology85 = chronology83.withUTC();
        org.joda.time.DurationField durationField86 = chronology83.days();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT1M" + "'", str11, "PT1M");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 38 + "'", int21 == 38);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(date35);
// flaky:         org.junit.Assert.assertEquals(date35.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(date50);
// flaky:         org.junit.Assert.assertEquals(date50.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 16 + "'", int58 == 16);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(interval80);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(durationField84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(durationField86);
    }

    @Test
    public void test12227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12227");
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = timeOfDay8.getFields();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTimeToday(dateTimeZone10);
        org.joda.time.DateTime.Property property12 = dateTime11.monthOfYear();
        org.joda.time.DateTime dateTime14 = dateTime11.minusMillis((int) (byte) -1);
        boolean boolean16 = dateTime11.isAfter((long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType17.getDurationType();
        boolean boolean19 = dateTime11.isSupported(dateTimeFieldType17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTime();
        boolean boolean23 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime22);
        int int24 = dateTime11.getYearOfEra();
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Period period27 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period29 = org.joda.time.Period.minutes(1);
        java.lang.String str30 = period29.toString();
        org.joda.time.Period period31 = period27.withFields((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Period period33 = period31.plusMillis(100);
        org.joda.time.LocalTime localTime34 = localTime25.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Period period36 = period31.plusHours((int) 'a');
        org.joda.time.DateTime dateTime38 = dateTime11.withPeriodAdded((org.joda.time.ReadablePeriod) period36, 5);
        org.joda.time.Period period40 = period36.plusDays(0);
        org.joda.time.PeriodType periodType41 = period36.getPeriodType();
        org.joda.time.PeriodType periodType42 = periodType41.withSecondsRemoved();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) (byte) -1, periodType42, chronology43);
        org.joda.time.PeriodType periodType45 = periodType42.withWeeksRemoved();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        int int49 = dateTimeZone47.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(dateTimeZone47);
        org.joda.time.ReadableDuration readableDuration51 = null;
        mutableDateTime50.add(readableDuration51, 0);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime50.dayOfWeek();
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime50.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime56 = property55.roundFloor();
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime56.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.TimeOfDay timeOfDay66 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime68 = timeOfDay66.toDateTimeToday(dateTimeZone67);
        org.joda.time.DateTime dateTime70 = dateTime68.withCenturyOfEra(10);
        boolean boolean71 = dateTime70.isEqualNow();
        org.joda.time.Chronology chronology72 = dateTime70.getChronology();
        org.joda.time.TimeOfDay timeOfDay73 = new org.joda.time.TimeOfDay(15, 5, chronology72);
        org.joda.time.DateTimeField dateTimeField74 = chronology72.clockhourOfDay();
        org.joda.time.TimeOfDay timeOfDay75 = new org.joda.time.TimeOfDay(1L, chronology72);
        boolean boolean76 = dateTimeFieldType58.isSupported(chronology72);
        mutableDateTime56.setChronology(chronology72);
        org.joda.time.LocalTime localTime78 = new org.joda.time.LocalTime((long) 55, chronology72);
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod(0L, 1645514439218L, periodType42, chronology72);
        org.joda.time.TimeOfDay timeOfDay80 = new org.joda.time.TimeOfDay(chronology72);
        org.joda.time.LocalTime localTime81 = org.joda.time.LocalTime.fromMillisOfDay(26165226L, chronology72);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT1M" + "'", str30, "PT1M");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 16 + "'", int49 == 16);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(localTime81);
    }

    @Test
    public void test12228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12228");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = timeOfDay8.toDateTimeToday(dateTimeZone9);
        mutableDateTime3.setZoneRetainFields(dateTimeZone9);
        mutableDateTime3.setSecondOfMinute((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        int int16 = dateTimeZone14.getStandardOffset((long) 100);
        mutableDateTime3.setZone(dateTimeZone14);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology22 = localTime21.getChronology();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((-1L), (long) 17, chronology22);
        mutableDateTime3.setChronology(chronology22);
        java.lang.String str25 = chronology22.toString();
        org.joda.time.DateTimeField dateTimeField26 = chronology22.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(chronology22);
        org.joda.time.DateTimeField dateTimeField28 = chronology22.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField29 = chronology22.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[UTC]" + "'", str25, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
    }

    @Test
    public void test12229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12229");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicWeekDate();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone1);
        mutableDateTime4.setMillis((long) 1);
        java.lang.String str7 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatter0.withPivotYear(26188858);
        java.lang.Appendable appendable10 = null;
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray16 = timeOfDay15.getFields();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.DateTime dateTime18 = timeOfDay15.toDateTimeToday(dateTimeZone17);
        org.joda.time.DateTime dateTime20 = dateTime18.plus((long) '4');
        org.joda.time.DateTime.Property property21 = dateTime18.yearOfCentury();
        org.joda.time.DateTime dateTime22 = property21.roundFloorCopy();
        org.joda.time.DateTime dateTime23 = property21.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property24 = dateTime23.era();
        java.util.Calendar calendar25 = java.util.Calendar.getInstance();
        int int27 = calendar25.getMaximum((int) (short) 0);
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.fromCalendarFields(calendar25);
        org.joda.time.LocalTime.Property property29 = localTime28.millisOfSecond();
        org.joda.time.DateTime dateTime30 = dateTime23.withFields((org.joda.time.ReadablePartial) localTime28);
        org.joda.time.ReadablePartial readablePartial31 = null;
        org.joda.time.LocalTime localTime32 = localTime28.withFields(readablePartial31);
        org.joda.time.LocalTime localTime34 = localTime28.withMillisOfDay(15);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(17107200000L);
        int int37 = mutablePeriod36.getMonths();
        org.joda.time.LocalTime localTime38 = localTime34.plus((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.joda.time.LocalTime localTime40 = localTime34.plusMillis(26164018);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter9.printTo(appendable10, (org.joda.time.ReadablePartial) localTime40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970W014" + "'", str7, "1970W014");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFieldArray16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1645514663996,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=19,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=24,MILLISECOND=12,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime40);
    }

    @Test
    public void test12230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12230");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 0);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime3.dayOfWeek();
        mutableDateTime3.addSeconds(69);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime3.weekOfWeekyear();
        mutableDateTime3.addMinutes(26164018);
        mutableDateTime3.setDate((long) 1969);
        java.lang.String str15 = mutableDateTime3.toString();
        mutableDateTime3.addMinutes(86399);
        java.util.Date date24 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        int int25 = date24.getSeconds();
        date24.setHours((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay28 = org.joda.time.YearMonthDay.fromDateFields(date24);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime();
        java.util.Date date38 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.fromDateFields(date38);
        int int40 = localDate39.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        int int43 = dateTimeZone41.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime44 = localDate39.toDateTimeAtCurrentTime(dateTimeZone41);
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone41);
        mutableDateTime29.setZone(dateTimeZone41);
        org.joda.time.DateTime dateTime47 = yearMonthDay28.toDateTimeAtMidnight(dateTimeZone41);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(16L, dateTimeZone41);
        java.lang.String str50 = dateTimeZone41.getShortName((long) 26389852);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((java.lang.Object) mutableDateTime3, dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property10);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01T18:23:33.075+00:00:00.016" + "'", str15, "1970-01-01T18:23:33.075+00:00:00.016");
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay28);
// flaky:         org.junit.Assert.assertEquals(date38.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1899 + "'", int40 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 16 + "'", int43 == 16);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00:00.016" + "'", str50, "+00:00:00.016");
    }

    @Test
    public void test12231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12231");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        mutableDateTime3.setMillisOfDay(81);
        org.joda.time.DateTimeField dateTimeField6 = mutableDateTime3.getRoundingField();
        mutableDateTime3.addWeeks((-2));
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime3.millisOfDay();
        int int10 = property9.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNull(dateTimeField6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 86399999 + "'", int10 == 86399999);
    }

    @Test
    public void test12232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12232");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) '4', chronology2);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay5 = property4.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay5.minusMinutes(3172001);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Period period11 = org.joda.time.Period.minutes(1);
        java.lang.String str12 = period11.toString();
        org.joda.time.LocalTime localTime13 = localTime9.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 10, chronology15);
        org.joda.time.Chronology chronology18 = null;
        mutablePeriod16.setPeriod((long) 0, chronology18);
        org.joda.time.LocalTime localTime21 = localTime13.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod16, 55);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay7.minus((org.joda.time.ReadablePeriod) mutablePeriod16);
        org.joda.time.TimeOfDay timeOfDay24 = timeOfDay7.withMillisOfSecond(2);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay7.minusMillis((-111));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType28 = timeOfDay7.getFieldType(5452);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5452");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT1M" + "'", str12, "PT1M");
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(timeOfDay24);
        org.junit.Assert.assertNotNull(timeOfDay26);
    }

    @Test
    public void test12233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12233");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale[] localeArray3 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList4 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList4, localeArray3);
        java.util.List<java.util.Locale> localeList6 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList4);
        java.util.stream.Stream<java.util.Locale> localeStream7 = localeList6.stream();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str11 = locale8.getDisplayVariant(locale10);
        java.util.Locale locale12 = locale10.stripExtensions();
        boolean boolean13 = localeList6.add(locale12);
        localeList6.clear();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        java.util.Set<java.lang.String> strSet18 = locale15.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Locale[] localeArray22 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList23 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList23, localeArray22);
        java.util.List<java.util.Locale> localeList25 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.util.Locale>) localeList23);
        boolean boolean26 = strSet18.removeAll((java.util.Collection<java.util.Locale>) localeList25);
        java.util.Spliterator<java.util.Locale> localeSpliterator27 = localeList25.spliterator();
        boolean boolean28 = localeList6.removeAll((java.util.Collection<java.util.Locale>) localeList25);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray37 = timeOfDay36.getFields();
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.DateTime dateTime39 = timeOfDay36.toDateTimeToday(dateTimeZone38);
        org.joda.time.Period period41 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period43 = org.joda.time.Period.minutes(1);
        java.lang.String str44 = period43.toString();
        org.joda.time.Period period45 = period41.withFields((org.joda.time.ReadablePeriod) period43);
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period47 = period41.normalizedStandard(periodType46);
        org.joda.time.Period period48 = new org.joda.time.Period(readableDuration31, (org.joda.time.ReadableInstant) dateTime39, periodType46);
        org.joda.time.PeriodType periodType49 = periodType46.withMillisRemoved();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType50.getDurationType();
        boolean boolean52 = periodType49.isSupported(durationFieldType51);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) 'a', (long) 15, periodType49);
        boolean boolean54 = localeList6.remove((java.lang.Object) 'a');
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localeList6);
        org.junit.Assert.assertNotNull(localeStream7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localeList25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localeSpliterator27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PT1M" + "'", str44, "PT1M");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test12234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12234");
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology5 = localTime4.getChronology();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) 5, chronology5);
        org.joda.time.Chronology chronology7 = chronology5.withUTC();
        org.joda.time.DateTimeZone dateTimeZone8 = chronology7.getZone();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(chronology7);
        org.joda.time.Period period10 = new org.joda.time.Period((long) 992, (long) 26646248, chronology7);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
    }

    @Test
    public void test12235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12235");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 0);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime3.dayOfWeek();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime3.yearOfEra();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((java.lang.Object) mutableDateTime3);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.plusMonths(7);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.minusYears(69);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay13.minusYears(5603523);
        org.joda.time.YearMonthDay yearMonthDay17 = yearMonthDay13.minusDays(439);
        org.joda.time.YearMonthDay.Property property18 = yearMonthDay13.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test12236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12236");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime5 = dateTime3.plusSeconds(17);
        org.joda.time.Period period7 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period9 = org.joda.time.Period.minutes(1);
        java.lang.String str10 = period9.toString();
        org.joda.time.Period period11 = period7.withFields((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period13 = period11.plusMillis(100);
        org.joda.time.Period period15 = period11.minusMillis((int) (byte) 1);
        org.joda.time.DateTime dateTime17 = dateTime5.withPeriodAdded((org.joda.time.ReadablePeriod) period15, 15);
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfMonth(17);
        org.joda.time.DateTime.Property property20 = dateTime17.yearOfCentury();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 10, chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withMinuteOfHour(0);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 10, chronology27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime25.withFields((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withWeekyear((int) (short) 0);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 10, chronology35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime31.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod36, 15);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime31.plusMonths(12);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) 10, chronology42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.plusMillis((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = localDateTime47.getFieldType(0);
        org.joda.time.LocalDateTime.Property property50 = localDateTime40.property(dateTimeFieldType49);
        boolean boolean51 = dateTime17.isSupported(dateTimeFieldType49);
        org.joda.time.DateTime.Property property52 = dateTime17.weekyear();
        org.joda.time.DateTime dateTime53 = property52.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT1M" + "'", str10, "PT1M");
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime53);
    }

    @Test
    public void test12237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12237");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 52);
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = timeOfDay7.getFields();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTimeToday(dateTimeZone9);
        org.joda.time.DateTime.Property property11 = dateTime10.monthOfYear();
        org.joda.time.DateTime dateTime13 = dateTime10.minusMillis((int) (byte) -1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.toDateTime(chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        int int18 = dateTimeZone16.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone16);
        org.joda.time.TimeOfDay timeOfDay24 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime26 = timeOfDay24.toDateTimeToday(dateTimeZone25);
        mutableDateTime19.setZoneRetainFields(dateTimeZone25);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime19, readableDuration28);
        boolean boolean30 = dateTime15.isBefore((org.joda.time.ReadableInstant) mutableDateTime19);
        int int31 = mutableDateTime19.getYearOfCentury();
        java.lang.String str32 = dateTimeFormatter0.print((org.joda.time.ReadableInstant) mutableDateTime19);
        int int33 = dateTimeFormatter0.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter0.withZoneUTC();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 22 + "'", int31 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "20220222T072424.210+0000" + "'", str32, "20220222T072424.210+0000");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2000 + "'", int33 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
    }

    @Test
    public void test12238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12238");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate6.plusWeeks((int) (short) 0);
        int int11 = localDate6.getDayOfWeek();
        org.joda.time.LocalDate.Property property12 = localDate6.era();
        int int13 = localDate6.getDayOfYear();
        org.joda.time.DateTime dateTime14 = localDate6.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime16 = dateTime14.plusMonths(26244041);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 69 + "'", int13 == 69);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test12239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12239");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = localDate6.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.withYear(1899);
        org.joda.time.Interval interval15 = yearMonthDay12.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = yearMonthDay12.getFieldTypes();
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay12.year();
        org.joda.time.YearMonthDay yearMonthDay18 = property17.getYearMonthDay();
        org.joda.time.LocalDate localDate19 = yearMonthDay18.toLocalDate();
        int int20 = localDate19.size();
        org.joda.time.LocalDate localDate22 = localDate19.minusMonths(18);
        org.joda.time.LocalDate.Property property23 = localDate22.centuryOfEra();
        org.joda.time.DurationField durationField24 = property23.getLeapDurationField();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1899 + "'", int7 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNull(durationField24);
    }

    @Test
    public void test12240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12240");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.tTime();
        java.util.Locale locale1 = dateTimeFormatter0.getLocale();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(locale1);
    }

    @Test
    public void test12241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12241");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        boolean boolean7 = timeZone3.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        java.util.Calendar.Builder builder10 = builder0.setTimeZone(timeZone6);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTime.Property property13 = dateTime12.secondOfMinute();
        java.lang.String str14 = property13.getAsString();
        java.lang.String str15 = property13.getAsShortText();
        org.joda.time.DateTime dateTime16 = property13.roundFloorCopy();
        org.joda.time.DateTime dateTime18 = property13.addToCopy((long) (byte) 10);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay(0, (int) '4', chronology22);
        org.joda.time.TimeOfDay timeOfDay25 = timeOfDay23.plusMinutes(1899);
        org.joda.time.TimeOfDay.Property property26 = timeOfDay23.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone32 = dateTimeZone31.toTimeZone();
        boolean boolean33 = timeZone29.hasSameRules(timeZone32);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone32, locale34);
        int int36 = property26.getMaximumTextLength(locale34);
        java.lang.String str37 = dateTime18.toString("weeks", locale34);
        org.joda.time.TimeOfDay timeOfDay45 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime47 = timeOfDay45.toDateTimeToday(dateTimeZone46);
        org.joda.time.DateTime dateTime49 = dateTime47.withCenturyOfEra(10);
        boolean boolean50 = dateTime49.isEqualNow();
        org.joda.time.Chronology chronology51 = dateTime49.getChronology();
        org.joda.time.TimeOfDay timeOfDay52 = new org.joda.time.TimeOfDay(15, 5, chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.clockhourOfDay();
        org.joda.time.TimeOfDay timeOfDay54 = new org.joda.time.TimeOfDay(1L, chronology51);
        org.joda.time.TimeOfDay.Property property55 = timeOfDay54.hourOfDay();
        org.joda.time.DateTimeField dateTimeField56 = property55.getField();
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology60 = localTime59.getChronology();
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime((long) 5, chronology60);
        org.joda.time.Chronology chronology62 = chronology60.withUTC();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) 10, chronology64);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.Chronology chronology67 = null;
        mutablePeriod65.setPeriod(readableDuration66, chronology67);
        long long71 = chronology62.add((org.joda.time.ReadablePeriod) mutablePeriod65, (long) 32772, 6);
        org.joda.time.DateTimeField dateTimeField72 = chronology62.era();
        java.util.Locale locale74 = new java.util.Locale("hi!");
        int int75 = dateTimeField72.getMaximumShortTextLength(locale74);
        int int76 = dateTimeField56.getMaximumShortTextLength(locale74);
        java.lang.String str77 = locale34.getDisplayLanguage(locale74);
        java.util.Set<java.lang.Character> charSet78 = locale74.getExtensionKeys();
        java.util.Calendar.Builder builder79 = builder10.setLocale(locale74);
        java.util.Calendar.Builder builder84 = builder79.setTimeOfDay(26419302, 3172000, 0, 30);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder87 = builder79.setWeekDefinition((int) 'u', 26497427);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645514664254,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=24,MILLISECOND=270,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "24" + "'", str14, "24");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "24" + "'", str15, "24");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
        org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1645514664254,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=24,MILLISECOND=270,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "802734" + "'", str37, "802734");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 32772L + "'", long71 == 32772L);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertEquals(locale74.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2 + "'", int76 == 2);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Korean" + "'", str77, "Korean");
        org.junit.Assert.assertNotNull(charSet78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test12242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12242");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = timeOfDay5.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minus((long) (short) 0);
        org.joda.time.Period period11 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period13 = org.joda.time.Period.minutes(1);
        java.lang.String str14 = period13.toString();
        org.joda.time.Period period15 = period11.withFields((org.joda.time.ReadablePeriod) period13);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period17 = period11.normalizedStandard(periodType16);
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableDuration0, (org.joda.time.ReadableInstant) dateTime9, periodType16);
        org.joda.time.DateTime dateTime20 = dateTime9.minusHours(0);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(chronology21);
        org.joda.time.DateTime dateTime23 = dateTime9.withFields((org.joda.time.ReadablePartial) localTime22);
        org.joda.time.LocalTime localTime25 = localTime22.minusMinutes(29);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT1M" + "'", str14, "PT1M");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localTime25);
    }

    @Test
    public void test12243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12243");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMillis((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYearOfCentury(1);
        org.joda.time.Chronology chronology9 = localDateTime8.getChronology();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 10, chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.plusMillis((int) (short) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.year();
        int[] intArray19 = chronology9.get((org.joda.time.ReadablePartial) localDateTime16, (long) 26219615);
        org.joda.time.DurationField durationField20 = chronology9.millis();
        org.joda.time.Chronology chronology21 = chronology9.withUTC();
        org.joda.time.DurationField durationField22 = chronology9.months();
        org.joda.time.DateTimeField dateTimeField23 = chronology9.millisOfDay();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[1970, 1, 1, 26219615]");
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test12244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12244");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime5 = dateTime3.plusSeconds(17);
        org.joda.time.Period period7 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period9 = org.joda.time.Period.minutes(1);
        java.lang.String str10 = period9.toString();
        org.joda.time.Period period11 = period7.withFields((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period13 = period11.plusMillis(100);
        org.joda.time.Period period15 = period11.minusMillis((int) (byte) 1);
        org.joda.time.DateTime dateTime17 = dateTime5.withPeriodAdded((org.joda.time.ReadablePeriod) period15, 15);
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfMonth(17);
        org.joda.time.DateTime.Property property20 = dateTime17.yearOfCentury();
        org.joda.time.DateTime dateTime22 = dateTime17.withYear(2025);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 15, (long) 100, chronology25);
        org.joda.time.DateTime dateTime27 = dateTime22.plus((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.DateTime.Property property28 = dateTime22.era();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 10, chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.plusMillis((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withMillisOfDay(1970);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType39 = dateTimeFieldType38.getDurationType();
        boolean boolean40 = localDateTime35.isSupported(dateTimeFieldType38);
        java.lang.String str41 = dateTimeFieldType38.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = dateTime22.withField(dateTimeFieldType38, 2027);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2027 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT1M" + "'", str10, "PT1M");
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "minuteOfDay" + "'", str41, "minuteOfDay");
    }

    @Test
    public void test12245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12245");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.hour();
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayVariant(locale2);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleKeys();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withLocale(locale1);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        int int8 = dateTimeZone6.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = timeOfDay14.toDateTimeToday(dateTimeZone15);
        mutableDateTime9.setZoneRetainFields(dateTimeZone15);
        mutableDateTime9.setSecondOfMinute((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        int int22 = dateTimeZone20.getStandardOffset((long) 100);
        mutableDateTime9.setZone(dateTimeZone20);
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology28 = localTime27.getChronology();
        org.joda.time.Interval interval29 = new org.joda.time.Interval((-1L), (long) 17, chronology28);
        mutableDateTime9.setChronology(chronology28);
        java.lang.String str31 = chronology28.toString();
        org.joda.time.TimeOfDay timeOfDay36 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime38 = timeOfDay36.toDateTimeToday(dateTimeZone37);
        org.joda.time.Chronology chronology39 = chronology28.withZone(dateTimeZone37);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(chronology39);
        int int43 = dateTimeFormatter0.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime40, "weeks", 59);
        boolean boolean44 = dateTimeFormatter0.isPrinter();
        java.util.Locale locale46 = java.util.Locale.forLanguageTag("PT1M");
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str49 = dateTimeZone48.getID();
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.util.Locale locale53 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str54 = locale51.getDisplayVariant(locale53);
        java.lang.String str55 = dateTimeZone48.getName((long) 5, locale51);
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.lang.String str57 = locale51.getDisplayScript(locale56);
        java.lang.String str58 = locale46.getDisplayLanguage(locale56);
        java.lang.String str59 = locale56.getDisplayVariant();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter0.withLocale(locale56);
        java.lang.StringBuffer stringBuffer61 = null;
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime((long) 10, chronology63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withMinuteOfHour(0);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) 10, chronology68);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime66.withFields((org.joda.time.ReadablePartial) localDateTime69);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime.Property property75 = localDateTime74.millisOfDay();
        org.joda.time.LocalDateTime.Property property76 = localDateTime74.weekyear();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime(chronology77);
        org.joda.time.DateTime.Property property79 = dateTime78.secondOfMinute();
        boolean boolean80 = localDateTime74.equals((java.lang.Object) dateTime78);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime74.withDayOfMonth(11);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.minusWeeks(5603523);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter60.printTo(stringBuffer61, (org.joda.time.ReadablePartial) localDateTime82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 16 + "'", int22 == 16);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ISOChronology[UTC]" + "'", str31, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-60) + "'", int43 == (-60));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.016" + "'", str49, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.016" + "'", str55, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime84);
    }

    @Test
    public void test12246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12246");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(10, (int) (short) 10, 7);
        org.joda.time.LocalDate.Property property4 = localDate3.centuryOfEra();
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test12247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12247");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) 'u');
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test12248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12248");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMillis((int) (short) 0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withMillisOfSecond(13);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusHours(26570163);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test12249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12249");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = localDate6.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str14 = dateTimeZone13.getID();
        java.lang.String str16 = dateTimeZone13.getShortName((long) (short) 100);
        org.joda.time.DateTime dateTime17 = dateTime11.withZone(dateTimeZone13);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime17.toMutableDateTime(chronology18);
        org.joda.time.DateTime.Property property20 = dateTime17.yearOfEra();
        org.joda.time.Period period22 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period24 = org.joda.time.Period.minutes(1);
        java.lang.String str25 = period24.toString();
        org.joda.time.Period period26 = period22.withFields((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Period period28 = period24.minusSeconds((int) (short) 100);
        org.joda.time.Period period30 = period24.minusHours((int) (byte) 1);
        org.joda.time.Period period32 = period30.plusMonths(0);
        org.joda.time.Period period34 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period36 = org.joda.time.Period.minutes(1);
        java.lang.String str37 = period36.toString();
        org.joda.time.Period period38 = period34.withFields((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Period period40 = period38.plusMillis(100);
        org.joda.time.Period period41 = period38.negated();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType43 = dateTimeFieldType42.getDurationType();
        boolean boolean44 = period38.isSupported(durationFieldType43);
        org.joda.time.Weeks weeks45 = period38.toStandardWeeks();
        org.joda.time.MutablePeriod mutablePeriod46 = weeks45.toMutablePeriod();
        org.joda.time.Period period47 = period30.withFields((org.joda.time.ReadablePeriod) weeks45);
        org.joda.time.Period period48 = period47.toPeriod();
        org.joda.time.DateTime dateTime49 = dateTime17.minus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.DateMidnight dateMidnight50 = dateTime17.toDateMidnight();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1899 + "'", int7 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.016" + "'", str14, "+00:00:00.016");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.016" + "'", str16, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT1M" + "'", str25, "PT1M");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT1M" + "'", str37, "PT1M");
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(weeks45);
        org.junit.Assert.assertNotNull(mutablePeriod46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateMidnight50);
    }

    @Test
    public void test12250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12250");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = timeOfDay5.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.minus((long) (short) 0);
        org.joda.time.Period period11 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period13 = org.joda.time.Period.minutes(1);
        java.lang.String str14 = period13.toString();
        org.joda.time.Period period15 = period11.withFields((org.joda.time.ReadablePeriod) period13);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period17 = period11.normalizedStandard(periodType16);
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableDuration0, (org.joda.time.ReadableInstant) dateTime9, periodType16);
        int int19 = mutablePeriod18.getMonths();
        int int20 = mutablePeriod18.getMonths();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.seconds();
        boolean boolean22 = mutablePeriod18.isSupported(durationFieldType21);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology25 = localTime24.getChronology();
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now(chronology25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 10, chronology28);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.Chronology chronology31 = null;
        mutablePeriod29.setPeriod(readableDuration30, chronology31);
        mutablePeriod29.setSeconds(0);
        int[] intArray36 = chronology25.get((org.joda.time.ReadablePeriod) mutablePeriod29, (long) (short) -1);
        org.joda.time.TimeOfDay timeOfDay41 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray42 = timeOfDay41.getFields();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.DateTime dateTime44 = timeOfDay41.toDateTimeToday(dateTimeZone43);
        org.joda.time.DateTime.Property property45 = dateTime44.monthOfYear();
        org.joda.time.DateTime dateTime47 = dateTime44.minusMillis((int) (byte) -1);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = dateTime47.toDateTime(chronology48);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        int int52 = dateTimeZone50.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(dateTimeZone50);
        org.joda.time.TimeOfDay timeOfDay58 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime60 = timeOfDay58.toDateTimeToday(dateTimeZone59);
        mutableDateTime53.setZoneRetainFields(dateTimeZone59);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime53, readableDuration62);
        boolean boolean64 = dateTime49.isBefore((org.joda.time.ReadableInstant) mutableDateTime53);
        java.lang.Object obj65 = mutableDateTime53.clone();
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        int int68 = dateTimeZone66.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime69 = new org.joda.time.MutableDateTime(dateTimeZone66);
        org.joda.time.ReadableDuration readableDuration70 = null;
        mutableDateTime69.add(readableDuration70, 0);
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime69.dayOfWeek();
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime69.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime75 = property74.roundFloor();
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime75.millisOfDay();
        int int77 = mutableDateTime75.getYearOfEra();
        mutablePeriod29.setPeriod((org.joda.time.ReadableInstant) mutableDateTime53, (org.joda.time.ReadableInstant) mutableDateTime75);
        boolean boolean80 = mutableDateTime53.isBefore((long) 1970);
        java.util.Date date86 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        date86.setMinutes(54);
        org.joda.time.TimeOfDay timeOfDay89 = org.joda.time.TimeOfDay.fromDateFields(date86);
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = timeOfDay89.getFieldType(2);
        org.joda.time.MutableDateTime.Property property92 = mutableDateTime53.property(dateTimeFieldType91);
        org.joda.time.MutableDateTime mutableDateTime94 = property92.set(6);
        org.joda.time.Duration duration95 = mutablePeriod18.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime94);
        java.lang.String str96 = duration95.toString();
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT1M" + "'", str14, "PT1M");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(dateTimeFieldArray42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 16 + "'", int52 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(obj65);
// flaky:         org.junit.Assert.assertEquals(obj65.toString(), "2022-02-22T07:24:24.397+00:00:00.016");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "2022-02-22T07:24:24.397+00:00:00.016");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "2022-02-22T07:24:24.397+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 16 + "'", int68 == 16);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2022 + "'", int77 == 2022);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
// flaky:         org.junit.Assert.assertEquals(date86.toString(), "Fri Mar 10 01:54:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(timeOfDay89);
        org.junit.Assert.assertNotNull(dateTimeFieldType91);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(mutableDateTime94);
        org.junit.Assert.assertNotNull(duration95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "PT0S" + "'", str96, "PT0S");
    }

    @Test
    public void test12251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12251");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.era();
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight(chronology3);
        org.joda.time.TimeOfDay timeOfDay7 = org.joda.time.TimeOfDay.fromMillisOfDay(0L, chronology3);
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField9 = chronology3.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology3.getZone();
        java.util.Calendar.Builder builder12 = new java.util.Calendar.Builder();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        boolean boolean19 = timeZone15.hasSameRules(timeZone18);
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Calendar calendar21 = java.util.Calendar.getInstance(timeZone18, locale20);
        java.util.Calendar.Builder builder22 = builder12.setTimeZone(timeZone18);
        java.util.Calendar.Builder builder27 = builder12.setTimeOfDay(0, (int) ' ', 12, 11);
        java.util.Calendar.Builder builder31 = builder27.setTimeOfDay(15, 1439, 0);
        java.util.Calendar.Builder builder33 = builder31.setLenient(true);
        java.util.Calendar.Builder builder37 = builder31.setWeekDate(4, 20, 436);
        java.util.Locale locale41 = new java.util.Locale("2", "2", "55");
        java.lang.String str42 = locale41.getDisplayName();
        java.util.Calendar.Builder builder43 = builder31.setLocale(locale41);
        java.lang.String str44 = dateTimeZone10.getName((-61031145600016L), locale41);
        long long48 = dateTimeZone10.convertLocalToUTC((long) 26580, false, (long) 26557117);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar21);
// flaky:         org.junit.Assert.assertEquals(calendar21.toString(), "java.util.GregorianCalendar[time=1645514664412,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=24,MILLISECOND=428,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertEquals(locale41.toString(), "2_2_55");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2 (2,55)" + "'", str42, "2 (2,55)");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 26580L + "'", long48 == 26580L);
    }

    @Test
    public void test12252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12252");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.hours();
        org.joda.time.DateTimeField dateTimeField4 = chronology2.year();
        org.joda.time.DateTimeField dateTimeField5 = chronology2.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = org.joda.time.format.ISODateTimeFormat.hour();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.util.Set<java.lang.String> strSet10 = locale7.getUnicodeLocaleKeys();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter6.withLocale(locale7);
        int int12 = dateTimeField5.getMaximumTextLength(locale7);
        int int14 = dateTimeField5.getMinimumValue(120L);
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Period period17 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        java.lang.String str20 = period19.toString();
        org.joda.time.Period period21 = period17.withFields((org.joda.time.ReadablePeriod) period19);
        org.joda.time.Period period23 = period21.plusMillis(100);
        org.joda.time.LocalTime localTime24 = localTime15.minus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.LocalTime localTime26 = localTime15.minusHours((-1));
        org.joda.time.LocalTime.Property property27 = localTime26.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay32.minusSeconds(3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        java.lang.String str36 = timeOfDay32.toString(dateTimeFormatter35);
        int int37 = property27.compareTo((org.joda.time.ReadablePartial) timeOfDay32);
        org.joda.time.TimeOfDay timeOfDay39 = timeOfDay32.withMinuteOfHour(48);
        int int40 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) timeOfDay32);
        java.util.Locale locale41 = java.util.Locale.TAIWAN;
        int int42 = dateTimeField5.getMaximumShortTextLength(locale41);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.lang.String str44 = locale41.getDisplayCountry(locale43);
        java.lang.String str45 = locale43.toString();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT1M" + "'", str20, "PT1M");
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "00" + "'", str36, "00");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(timeOfDay39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\ub300\ub9cc" + "'", str44, "\ub300\ub9cc");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ko" + "'", str45, "ko");
    }

    @Test
    public void test12253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12253");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) '4', chronology2);
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.plusMinutes(1899);
        org.joda.time.TimeOfDay.Property property6 = timeOfDay3.millisOfSecond();
        org.joda.time.TimeOfDay.Property property7 = timeOfDay3.hourOfDay();
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay3.minusMinutes(26190505);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType13 = periodType12.withDaysRemoved();
        org.joda.time.Period period14 = new org.joda.time.Period(4233600010L, (long) 14, periodType13);
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay3.minus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.TimeOfDay.Property property16 = timeOfDay3.millisOfSecond();
        org.joda.time.TimeOfDay.Property property17 = timeOfDay3.hourOfDay();
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test12254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12254");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusWeeks(0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withWeekyear(44);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minusSeconds(5603523);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusDays((-11));
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test12255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12255");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(chronology4);
        org.joda.time.Period period6 = new org.joda.time.Period((long) 11, (-2234643900000L), chronology4);
        org.joda.time.DateTimeField dateTimeField7 = chronology4.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.secondOfMinute();
        org.joda.time.DurationField durationField9 = dateTimeField8.getRangeDurationField();
        java.lang.String str10 = durationField9.toString();
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "DurationField[minutes]" + "'", str10, "DurationField[minutes]");
    }

    @Test
    public void test12256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12256");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period12 = org.joda.time.Period.minutes(1);
        java.lang.String str13 = period12.toString();
        org.joda.time.Period period14 = period10.withFields((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period16 = period14.plusMillis(100);
        org.joda.time.Period period17 = period14.negated();
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period23 = period19.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period23.plusMillis(100);
        boolean boolean26 = period17.equals((java.lang.Object) period25);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period28 = period17.withFields((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.LocalDate localDate29 = localDate8.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.Period period31 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period33 = org.joda.time.Period.minutes(1);
        java.lang.String str34 = period33.toString();
        org.joda.time.Period period35 = period31.withFields((org.joda.time.ReadablePeriod) period33);
        int int36 = period31.getMinutes();
        org.joda.time.Period period37 = period31.toPeriod();
        org.joda.time.LocalDate localDate38 = localDate29.plus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.LocalDate localDate40 = localDate29.withYearOfEra(99);
        java.util.Date date41 = localDate40.toDate();
        org.joda.time.LocalDate.Property property42 = localDate40.monthOfYear();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT1M" + "'", str13, "PT1M");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1M" + "'", str22, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT1M" + "'", str34, "PT1M");
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(date41);
// flaky:         org.junit.Assert.assertEquals(date41.toString(), "Sun Mar 10 00:00:00 GMT+00:00 99");
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test12257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12257");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = timeOfDay8.toDateTimeToday(dateTimeZone9);
        mutableDateTime3.setZoneRetainFields(dateTimeZone9);
        mutableDateTime3.setSecondOfMinute((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        int int16 = dateTimeZone14.getStandardOffset((long) 100);
        mutableDateTime3.setZone(dateTimeZone14);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology22 = localTime21.getChronology();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((-1L), (long) 17, chronology22);
        mutableDateTime3.setChronology(chronology22);
        java.lang.String str25 = chronology22.toString();
        org.joda.time.DurationField durationField26 = chronology22.centuries();
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.now(chronology22);
        org.joda.time.DateTime dateTime28 = localTime27.toDateTimeToday();
        org.joda.time.DateTime.Property property29 = dateTime28.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[UTC]" + "'", str25, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test12258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12258");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 5, chronology3);
        org.joda.time.Chronology chronology5 = chronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone6 = chronology5.getZone();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusSeconds((int) (byte) -1);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis(26405449);
        int int12 = dateTime9.getSecondOfMinute();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 23 + "'", int12 == 23);
    }

    @Test
    public void test12259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12259");
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = timeOfDay8.getFields();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTimeToday(dateTimeZone10);
        org.joda.time.Period period13 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period15 = org.joda.time.Period.minutes(1);
        java.lang.String str16 = period15.toString();
        org.joda.time.Period period17 = period13.withFields((org.joda.time.ReadablePeriod) period15);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period19 = period13.normalizedStandard(periodType18);
        org.joda.time.Period period20 = new org.joda.time.Period(readableDuration3, (org.joda.time.ReadableInstant) dateTime11, periodType18);
        boolean boolean22 = periodType18.equals((java.lang.Object) 100L);
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology25 = localTime24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.hours();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 26163694, (long) 2022, periodType18, chronology25);
        org.joda.time.TimeOfDay timeOfDay30 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (byte) 1, chronology25);
        org.joda.time.TimeOfDay.Property property31 = timeOfDay30.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT1M" + "'", str16, "PT1M");
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test12260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12260");
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = timeOfDay7.toDateTimeToday(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withCenturyOfEra(10);
        boolean boolean12 = dateTime11.isEqualNow();
        org.joda.time.Chronology chronology13 = dateTime11.getChronology();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(15, 5, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.clockhourOfDay();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(1L, chronology13);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(chronology13);
        org.joda.time.LocalTime.Property property18 = localTime17.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str23 = locale20.getDisplayVariant(locale22);
        java.util.Locale locale24 = locale22.stripExtensions();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str27 = dateTimeZone26.getID();
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str32 = locale29.getDisplayVariant(locale31);
        java.lang.String str33 = dateTimeZone26.getName((long) 5, locale29);
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale29.getDisplayScript(locale34);
        java.lang.String str36 = locale24.getDisplayName(locale29);
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Locale locale39 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str40 = locale37.getDisplayVariant(locale39);
        java.util.Locale locale41 = locale39.stripExtensions();
        boolean boolean42 = locale39.hasExtensions();
        java.lang.String str43 = locale24.getDisplayLanguage(locale39);
        int int44 = dateTimeField19.getMaximumTextLength(locale39);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        int int48 = dateTimeZone46.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(dateTimeZone46);
        org.joda.time.TimeOfDay timeOfDay54 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = timeOfDay54.toDateTimeToday(dateTimeZone55);
        mutableDateTime49.setZoneRetainFields(dateTimeZone55);
        mutableDateTime49.setSecondOfMinute((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        int int62 = dateTimeZone60.getStandardOffset((long) 100);
        mutableDateTime49.setZone(dateTimeZone60);
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology68 = localTime67.getChronology();
        org.joda.time.Interval interval69 = new org.joda.time.Interval((-1L), (long) 17, chronology68);
        mutableDateTime49.setChronology(chronology68);
        java.lang.String str71 = chronology68.toString();
        org.joda.time.TimeOfDay timeOfDay76 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime78 = timeOfDay76.toDateTimeToday(dateTimeZone77);
        org.joda.time.Chronology chronology79 = chronology68.withZone(dateTimeZone77);
        org.joda.time.DateTimeField dateTimeField80 = chronology68.centuryOfEra();
        java.util.Calendar.Builder builder82 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder85 = builder82.set(2, 32772);
        java.util.Locale locale86 = java.util.Locale.KOREAN;
        java.util.Locale locale88 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str89 = locale86.getDisplayVariant(locale88);
        java.util.Calendar.Builder builder90 = builder82.setLocale(locale88);
        java.lang.String str91 = dateTimeField80.getAsShortText((long) 1899, locale88);
        java.lang.String str92 = locale88.getLanguage();
        java.lang.String str93 = dateTimeField19.getAsText((-264297599985L), locale88);
        org.joda.time.DurationField durationField94 = dateTimeField19.getRangeDurationField();
        boolean boolean95 = durationField94.isPrecise();
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00:00.016" + "'", str27, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.016" + "'", str33, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 16 + "'", int48 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 16 + "'", int62 == 16);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "ISOChronology[UTC]" + "'", str71, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "ko");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "19" + "'", str91, "19");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "15" + "'", str93, "15");
        org.junit.Assert.assertNotNull(durationField94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test12261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12261");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.withHourOfDay(3);
        int int4 = dateTime1.getDayOfWeek();
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 5, chronology9);
        org.joda.time.Chronology chronology11 = chronology9.withUTC();
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay((long) 2022, chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime1.toMutableDateTime(chronology11);
        int int15 = dateTime1.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
    }

    @Test
    public void test12262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12262");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = localDate6.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.LocalDate localDate13 = localDate6.plusYears(0);
        org.joda.time.LocalDate.Property property14 = localDate13.dayOfMonth();
        org.joda.time.LocalDate localDate16 = localDate13.plusWeeks(26301);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate18 = localDate16.withDayOfMonth(694);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 694 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1899 + "'", int7 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
    }

    @Test
    public void test12263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12263");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate6.plusWeeks((int) (short) 0);
        int int11 = localDate6.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = localDate6.toDateMidnight(dateTimeZone13);
        org.joda.time.LocalDate.Property property17 = localDate6.year();
        org.joda.time.LocalDate localDate18 = property17.roundFloorCopy();
        org.joda.time.LocalDate localDate19 = property17.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate21 = localDate19.withYearOfCentury(1800);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1800 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.016" + "'", str14, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
    }

    @Test
    public void test12264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12264");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(chronology4);
        org.joda.time.Period period6 = new org.joda.time.Period((long) 11, (-2234643900000L), chronology4);
        org.joda.time.DurationField durationField7 = chronology4.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.halfdayOfDay();
        org.joda.time.DurationField durationField9 = chronology4.months();
        org.joda.time.DateTimeField dateTimeField10 = chronology4.yearOfCentury();
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test12265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12265");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = localDate6.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.withYear(1899);
        org.joda.time.YearMonthDay yearMonthDay16 = yearMonthDay12.plusDays(55);
        org.joda.time.DateMidnight dateMidnight17 = yearMonthDay16.toDateMidnight();
        org.joda.time.MutableDateTime mutableDateTime18 = dateMidnight17.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.secondOfDay();
        java.util.Date date28 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.fromDateFields(date28);
        int int30 = localDate29.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        int int33 = dateTimeZone31.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime34 = localDate29.toDateTimeAtCurrentTime(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone31);
        org.joda.time.Interval interval36 = dateMidnight35.toInterval();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology37);
        org.joda.time.DateTime dateTime39 = dateTime38.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str42 = dateTimeZone41.getID();
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.util.Locale locale46 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str47 = locale44.getDisplayVariant(locale46);
        java.lang.String str48 = dateTimeZone41.getName((long) 5, locale44);
        org.joda.time.DateTime dateTime49 = dateTime39.withZoneRetainFields(dateTimeZone41);
        boolean boolean50 = dateMidnight35.isEqual((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime52 = dateTime39.withMillis((long) 2);
        org.joda.time.DateMidnight dateMidnight53 = dateTime52.toDateMidnight();
        org.joda.time.DateTime dateTime55 = dateTime52.withWeekyear(0);
        org.joda.time.Chronology chronology56 = dateTime52.getChronology();
        mutableDateTime18.setMillis((org.joda.time.ReadableInstant) dateTime52);
        java.util.GregorianCalendar gregorianCalendar58 = dateTime52.toGregorianCalendar();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1899 + "'", int7 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1899 + "'", int30 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 16 + "'", int33 == 16);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.016" + "'", str42, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00:00.016" + "'", str48, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(gregorianCalendar58);
    }

    @Test
    public void test12266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12266");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(16, (int) '#', 1899, 99);
        mutablePeriod4.add((long) 4);
        int int7 = mutablePeriod4.getYears();
        org.joda.time.MutablePeriod mutablePeriod8 = mutablePeriod4.copy();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod8);
    }

    @Test
    public void test12267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12267");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.monthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime7.minusMillis((int) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime10.minusMillis((int) 'a');
        int int15 = dateTime14.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime17 = dateTime14.plusHours(980);
        int int18 = dateTime14.getMinuteOfHour();
        org.joda.time.DateMidnight dateMidnight20 = org.joda.time.DateMidnight.parse("0032-02-22T00:00:00.003+00:00:00.016");
        org.joda.time.Period period22 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period24 = org.joda.time.Period.minutes(1);
        java.lang.String str25 = period24.toString();
        org.joda.time.Period period26 = period22.withFields((org.joda.time.ReadablePeriod) period24);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period28 = period22.normalizedStandard(periodType27);
        org.joda.time.Interval interval31 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.TimeOfDay timeOfDay37 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray38 = timeOfDay37.getFields();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = timeOfDay37.toDateTimeToday(dateTimeZone39);
        org.joda.time.Period period42 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period44 = org.joda.time.Period.minutes(1);
        java.lang.String str45 = period44.toString();
        org.joda.time.Period period46 = period42.withFields((org.joda.time.ReadablePeriod) period44);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period48 = period42.normalizedStandard(periodType47);
        org.joda.time.Period period49 = new org.joda.time.Period(readableDuration32, (org.joda.time.ReadableInstant) dateTime40, periodType47);
        org.joda.time.PeriodType periodType50 = periodType47.withMillisRemoved();
        org.joda.time.Period period51 = interval31.toPeriod(periodType50);
        org.joda.time.TimeOfDay timeOfDay56 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = timeOfDay56.toDateTimeToday(dateTimeZone57);
        boolean boolean59 = interval31.contains((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period28, (org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        int int63 = dateTimeZone61.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime(dateTimeZone61);
        org.joda.time.ReadableDuration readableDuration65 = null;
        mutableDateTime64.add(readableDuration65, 0);
        org.joda.time.Period period69 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period71 = org.joda.time.Period.minutes(1);
        java.lang.String str72 = period71.toString();
        org.joda.time.Period period73 = period69.withFields((org.joda.time.ReadablePeriod) period71);
        org.joda.time.Period period75 = period73.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType76 = org.joda.time.DurationFieldType.months();
        int int77 = period75.get(durationFieldType76);
        mutableDateTime64.add(durationFieldType76, 7);
        mutableDateTime64.addSeconds((-292275054));
        boolean boolean82 = interval60.isAfter((org.joda.time.ReadableInstant) mutableDateTime64);
        org.joda.time.MutableDateTime.Property property83 = mutableDateTime64.minuteOfHour();
        org.joda.time.Interval interval84 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableInstant) mutableDateTime64);
        boolean boolean85 = dateTime14.isBefore((org.joda.time.ReadableInstant) mutableDateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT1M" + "'", str25, "PT1M");
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(dateTimeFieldArray38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PT1M" + "'", str45, "PT1M");
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 16 + "'", int63 == 16);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "PT1M" + "'", str72, "PT1M");
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(durationFieldType76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test12268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12268");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.Period period7 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period9 = org.joda.time.Period.minutes(1);
        java.lang.String str10 = period9.toString();
        org.joda.time.Period period11 = period7.withFields((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period13 = period11.plusMillis(100);
        org.joda.time.Period period14 = period11.negated();
        org.joda.time.Period period16 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period18 = org.joda.time.Period.minutes(1);
        java.lang.String str19 = period18.toString();
        org.joda.time.Period period20 = period16.withFields((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period22 = period20.plusMillis(100);
        boolean boolean23 = period14.equals((java.lang.Object) period22);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period25 = period14.withFields((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay4.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.TimeOfDay.Property property27 = timeOfDay4.secondOfMinute();
        int int28 = property27.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay29 = property27.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay31 = property27.addWrapFieldToCopy(7);
        org.joda.time.TimeOfDay timeOfDay32 = property27.getTimeOfDay();
        org.joda.time.TimeOfDay timeOfDay34 = timeOfDay32.plusMinutes(2025);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = timeOfDay32.getFieldTypes();
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT1M" + "'", str10, "PT1M");
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT1M" + "'", str19, "PT1M");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(timeOfDay34);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
    }

    @Test
    public void test12269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12269");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.Period period7 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period9 = org.joda.time.Period.minutes(1);
        java.lang.String str10 = period9.toString();
        org.joda.time.Period period11 = period7.withFields((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period13 = period11.plusMillis(100);
        org.joda.time.Period period14 = period11.negated();
        org.joda.time.Period period16 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period18 = org.joda.time.Period.minutes(1);
        java.lang.String str19 = period18.toString();
        org.joda.time.Period period20 = period16.withFields((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period22 = period20.plusMillis(100);
        boolean boolean23 = period14.equals((java.lang.Object) period22);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period25 = period14.withFields((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay4.plus((org.joda.time.ReadablePeriod) period14);
        int int27 = timeOfDay4.getMinuteOfHour();
        int int28 = timeOfDay4.getHourOfDay();
        org.joda.time.TimeOfDay timeOfDay30 = timeOfDay4.minusHours(26219615);
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay4.minusHours(2072);
        org.joda.time.TimeOfDay timeOfDay37 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray38 = timeOfDay37.getFields();
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.DateTime dateTime40 = timeOfDay37.toDateTimeToday(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.withYearOfCentury(16);
        org.joda.time.DateTime dateTime44 = dateTime40.plusYears((-1));
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime44.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getDurationType();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime45.property(dateTimeFieldType47);
        boolean boolean50 = timeOfDay4.isSupported(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT1M" + "'", str10, "PT1M");
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT1M" + "'", str19, "PT1M");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(timeOfDay30);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertNotNull(dateTimeFieldArray38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test12270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12270");
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = timeOfDay7.toDateTimeToday(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withCenturyOfEra(10);
        boolean boolean12 = dateTime11.isEqualNow();
        org.joda.time.Chronology chronology13 = dateTime11.getChronology();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(15, 5, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.clockhourOfDay();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(1L, chronology13);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(chronology13);
        org.joda.time.LocalTime.Property property18 = localTime17.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        org.joda.time.LocalTime localTime21 = property18.setCopy(0);
        int int22 = localTime21.getMillisOfSecond();
        java.util.Date date28 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.fromDateFields(date28);
        int int30 = localDate29.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        int int33 = dateTimeZone31.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime34 = localDate29.toDateTimeAtCurrentTime(dateTimeZone31);
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay35.withYear(1899);
        org.joda.time.Interval interval38 = yearMonthDay35.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = yearMonthDay35.getFieldTypes();
        org.joda.time.YearMonthDay.Property property40 = yearMonthDay35.year();
        org.joda.time.Period period42 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period44 = org.joda.time.Period.minutes(1);
        java.lang.String str45 = period44.toString();
        org.joda.time.Period period46 = period42.withFields((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Period period48 = period46.plusMillis(100);
        org.joda.time.Period period49 = period46.negated();
        org.joda.time.Period period51 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period53 = org.joda.time.Period.minutes(1);
        java.lang.String str54 = period53.toString();
        org.joda.time.Period period55 = period51.withFields((org.joda.time.ReadablePeriod) period53);
        org.joda.time.Period period57 = period55.plusMillis(100);
        boolean boolean58 = period49.equals((java.lang.Object) period57);
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period60 = period49.withFields((org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.Period period62 = period49.withYears(16);
        org.joda.time.YearMonthDay yearMonthDay63 = yearMonthDay35.plus((org.joda.time.ReadablePeriod) period62);
        org.joda.time.YearMonthDay.Property property64 = yearMonthDay63.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime21, (org.joda.time.ReadablePartial) yearMonthDay63);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
// flaky:         org.junit.Assert.assertEquals(date28.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1899 + "'", int30 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 16 + "'", int33 == 16);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PT1M" + "'", str45, "PT1M");
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PT1M" + "'", str54, "PT1M");
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(yearMonthDay63);
        org.junit.Assert.assertNotNull(property64);
    }

    @Test
    public void test12271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12271");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay8 = property7.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay10 = property7.addToCopy(0);
        int int11 = property7.getMinimumValueOverall();
        int int12 = property7.get();
        org.joda.time.TimeOfDay timeOfDay14 = property7.addNoWrapToCopy((int) 'x');
        org.joda.time.TimeOfDay timeOfDay15 = property7.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay17 = timeOfDay15.withMillisOfSecond(26476031);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26476031 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay15);
    }

    @Test
    public void test12272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12272");
        java.io.IOException iOException3 = new java.io.IOException("55");
        java.io.IOException iOException4 = new java.io.IOException("Property[secondOfMinute]", (java.lang.Throwable) iOException3);
        java.lang.Throwable[] throwableArray5 = iOException3.getSuppressed();
        java.io.IOException iOException6 = new java.io.IOException((java.lang.Throwable) iOException3);
        java.lang.Throwable[] throwableArray7 = iOException6.getSuppressed();
        java.io.IOException iOException9 = new java.io.IOException("1022053T005432.000Z");
        java.util.Date date17 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.fromDateFields(date17);
        org.joda.time.LocalDate.Property property19 = localDate18.weekOfWeekyear();
        org.joda.time.LocalDate localDate20 = property19.getLocalDate();
        org.joda.time.DateTimeField dateTimeField21 = property19.getField();
        org.joda.time.LocalDate localDate22 = property19.withMaximumValue();
        int int23 = localDate22.size();
        int int24 = localDate22.getCenturyOfEra();
        org.joda.time.LocalDate localDate26 = localDate22.minusDays(0);
        org.joda.time.LocalDate.Property property27 = localDate22.weekOfWeekyear();
        java.lang.Throwable throwable28 = null;
        java.io.IOException iOException29 = new java.io.IOException(throwable28);
        boolean boolean30 = localDate22.equals((java.lang.Object) iOException29);
        java.io.IOException iOException31 = new java.io.IOException("", (java.lang.Throwable) iOException29);
        java.io.IOException iOException32 = new java.io.IOException("DateTimeField[millisOfSecond]", (java.lang.Throwable) iOException31);
        iOException9.addSuppressed((java.lang.Throwable) iOException31);
        iOException6.addSuppressed((java.lang.Throwable) iOException31);
        java.io.IOException iOException35 = new java.io.IOException("28887337", (java.lang.Throwable) iOException31);
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(throwableArray7);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 18 + "'", int24 == 18);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test12273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12273");
        org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("372");
        org.junit.Assert.assertNotNull(localDate1);
    }

    @Test
    public void test12274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12274");
        org.joda.time.ReadablePeriod readablePeriod0 = null;
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray6 = timeOfDay5.getFields();
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = timeOfDay5.toDateTimeToday(dateTimeZone7);
        org.joda.time.DateTime.Property property9 = dateTime8.monthOfYear();
        org.joda.time.DateTime dateTime11 = dateTime8.minusMillis((int) (byte) -1);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.toDateTime(chronology12);
        int int14 = dateTime11.getMillisOfDay();
        org.joda.time.Interval interval15 = new org.joda.time.Interval(readablePeriod0, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime17 = dateTime11.minusMinutes(18);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime20 = dateTime11.withFieldAdded(durationFieldType18, 1970);
        org.joda.time.DateTime dateTime22 = dateTime11.minusSeconds(26301);
        java.util.GregorianCalendar gregorianCalendar23 = dateTime11.toGregorianCalendar();
        org.junit.Assert.assertNotNull(dateTimeFieldArray6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3172001 + "'", int14 == 3172001);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(gregorianCalendar23);
    }

    @Test
    public void test12275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12275");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusMonths(26188548);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = property18.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.monthOfYear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test12276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12276");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) 10, chronology5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Chronology chronology8 = null;
        mutablePeriod6.setPeriod(readableDuration7, chronology8);
        mutablePeriod6.setSeconds(0);
        int[] intArray13 = chronology2.get((org.joda.time.ReadablePeriod) mutablePeriod6, (long) (short) -1);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology19 = localTime18.getChronology();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) 5, chronology19);
        org.joda.time.Chronology chronology21 = chronology19.withUTC();
        org.joda.time.TimeOfDay timeOfDay22 = new org.joda.time.TimeOfDay((long) 2022, chronology21);
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.now(chronology21);
        mutablePeriod6.add((long) (short) 10, chronology21);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        int int27 = dateTimeZone25.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(dateTimeZone25);
        org.joda.time.ReadableDuration readableDuration29 = null;
        mutableDateTime28.add(readableDuration29, 0);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology37 = localTime36.getChronology();
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) 5, chronology37);
        org.joda.time.Chronology chronology39 = chronology37.withUTC();
        org.joda.time.DateTimeZone dateTimeZone40 = chronology39.getZone();
        java.util.TimeZone timeZone41 = dateTimeZone40.toTimeZone();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone40);
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((long) 86340000, dateTimeZone40);
        mutableDateTime28.setZone(dateTimeZone40);
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology49 = localTime48.getChronology();
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime((long) 5, chronology49);
        org.joda.time.Chronology chronology51 = chronology49.withUTC();
        org.joda.time.TimeOfDay timeOfDay52 = new org.joda.time.TimeOfDay((long) 2022, chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.monthOfYear();
        org.joda.time.TimeOfDay timeOfDay55 = new org.joda.time.TimeOfDay((java.lang.Object) mutableDateTime28, chronology51);
        long long57 = chronology21.set((org.joda.time.ReadablePartial) timeOfDay55, (-2234649599991L));
        java.lang.Class<?> wildcardClass58 = timeOfDay55.getClass();
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0, 0, 0, 0, 0, 0, -1]");
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 16 + "'", int27 == 16);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
// flaky:         org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-2234622935111L) + "'", long57 == (-2234622935111L));
        org.junit.Assert.assertNotNull(wildcardClass58);
    }

    @Test
    public void test12277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12277");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.Period period7 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period9 = org.joda.time.Period.minutes(1);
        java.lang.String str10 = period9.toString();
        org.joda.time.Period period11 = period7.withFields((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period13 = period11.plusMillis(100);
        org.joda.time.Period period14 = period11.negated();
        org.joda.time.Period period16 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period18 = org.joda.time.Period.minutes(1);
        java.lang.String str19 = period18.toString();
        org.joda.time.Period period20 = period16.withFields((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period22 = period20.plusMillis(100);
        boolean boolean23 = period14.equals((java.lang.Object) period22);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period25 = period14.withFields((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay4.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.TimeOfDay.Property property27 = timeOfDay4.secondOfMinute();
        java.lang.String str28 = property27.getAsText();
        java.lang.String str29 = property27.toString();
        java.util.Locale locale31 = new java.util.Locale("2022-02-22T07:17:09.936Z/2022-02-22T07:17:09.936Z");
        java.lang.String str32 = property27.getAsShortText(locale31);
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Locale locale35 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str36 = locale33.getDisplayVariant(locale35);
        java.util.Locale locale37 = locale35.stripExtensions();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str40 = dateTimeZone39.getID();
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.util.Locale locale44 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str45 = locale42.getDisplayVariant(locale44);
        java.lang.String str46 = dateTimeZone39.getName((long) 5, locale42);
        java.util.Locale locale47 = java.util.Locale.KOREAN;
        java.lang.String str48 = locale42.getDisplayScript(locale47);
        java.lang.String str49 = locale37.getDisplayName(locale42);
        int int50 = property27.getMaximumTextLength(locale37);
        org.joda.time.TimeOfDay timeOfDay51 = property27.withMaximumValue();
        int int52 = property27.getMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT1M" + "'", str10, "PT1M");
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT1M" + "'", str19, "PT1M");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "52" + "'", str28, "52");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Property[secondOfMinute]" + "'", str29, "Property[secondOfMinute]");
        org.junit.Assert.assertEquals(locale31.toString(), "2022-02-22t07:17:09.936z/2022-02-22t07:17:09.936z");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "52" + "'", str32, "52");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.016" + "'", str40, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.016" + "'", str46, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test12278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12278");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.Period period8 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        java.lang.String str11 = period10.toString();
        org.joda.time.Period period12 = period8.withFields((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period14 = period12.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.months();
        int int16 = period14.get(durationFieldType15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime6.withFieldAdded(durationFieldType15, 8);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime6.withMillisOfSecond(109);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withYearOfEra((int) ' ');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.plusYears(26324141);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime26 = localDateTime20.withDayOfYear(26650097);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26650097 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT1M" + "'", str11, "PT1M");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test12279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12279");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.weekyear();
        org.joda.time.LocalDateTime localDateTime15 = property14.withMaximumValue();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfMonth();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField18 = property17.getField();
        org.joda.time.LocalDateTime localDateTime19 = property17.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.dayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test12280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12280");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = localDate6.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.withYear(1899);
        org.joda.time.Interval interval15 = yearMonthDay12.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = yearMonthDay12.getFieldTypes();
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay12.year();
        org.joda.time.YearMonthDay yearMonthDay19 = property17.addToCopy((int) (short) -1);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.plusYears(4);
        org.joda.time.YearMonthDay yearMonthDay23 = yearMonthDay21.minusMonths(4);
        java.util.Date date29 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate30 = org.joda.time.LocalDate.fromDateFields(date29);
        int int31 = localDate30.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        int int34 = dateTimeZone32.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime35 = localDate30.toDateTimeAtCurrentTime(dateTimeZone32);
        org.joda.time.YearMonthDay yearMonthDay36 = new org.joda.time.YearMonthDay(dateTimeZone32);
        org.joda.time.YearMonthDay yearMonthDay38 = yearMonthDay36.withYear(1899);
        java.util.Date date47 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate48 = org.joda.time.LocalDate.fromDateFields(date47);
        int int49 = localDate48.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        int int52 = dateTimeZone50.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime53 = localDate48.toDateTimeAtCurrentTime(dateTimeZone50);
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone50);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.withCenturyOfEra((int) (short) 1);
        org.joda.time.Period period58 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period60 = org.joda.time.Period.minutes(1);
        java.lang.String str61 = period60.toString();
        org.joda.time.Period period62 = period58.withFields((org.joda.time.ReadablePeriod) period60);
        org.joda.time.Period period64 = period62.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType65 = org.joda.time.DurationFieldType.months();
        int int66 = period64.get(durationFieldType65);
        org.joda.time.DateMidnight dateMidnight68 = dateMidnight54.withPeriodAdded((org.joda.time.ReadablePeriod) period64, 0);
        org.joda.time.YearMonthDay yearMonthDay69 = yearMonthDay36.plus((org.joda.time.ReadablePeriod) period64);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType71 = dateTimeFieldType70.getDurationType();
        boolean boolean72 = period64.isSupported(durationFieldType71);
        org.joda.time.YearMonthDay yearMonthDay74 = yearMonthDay21.withPeriodAdded((org.joda.time.ReadablePeriod) period64, 81);
        java.lang.String str75 = yearMonthDay74.toString();
        org.joda.time.YearMonthDay.Property property76 = yearMonthDay74.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.getDefault();
        int int79 = dateTimeZone77.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime80 = new org.joda.time.MutableDateTime(dateTimeZone77);
        boolean boolean82 = dateTimeZone77.isStandardOffset((long) 10);
        org.joda.time.DateTime dateTime83 = yearMonthDay74.toDateTimeAtCurrentTime(dateTimeZone77);
        org.joda.time.DateTimeZone dateTimeZone84 = dateTime83.getZone();
        org.joda.time.DateTime dateTime86 = dateTime83.minus((long) (byte) 10);
        org.joda.time.DateTime dateTime88 = dateTime83.minus((long) (-26188859));
        org.joda.time.DateTime.Property property89 = dateTime83.era();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1899 + "'", int7 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(yearMonthDay23);
// flaky:         org.junit.Assert.assertEquals(date29.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1899 + "'", int31 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 16 + "'", int34 == 16);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(yearMonthDay38);
// flaky:         org.junit.Assert.assertEquals(date47.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1899 + "'", int49 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 16 + "'", int52 == 16);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "PT1M" + "'", str61, "PT1M");
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(dateMidnight68);
        org.junit.Assert.assertNotNull(yearMonthDay69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(yearMonthDay74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "2025-02-22" + "'", str75, "2025-02-22");
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 16 + "'", int79 == 16);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTimeZone84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(property89);
    }

    @Test
    public void test12281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12281");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = timeOfDay8.getFields();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTimeToday(dateTimeZone10);
        org.joda.time.Period period13 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period15 = org.joda.time.Period.minutes(1);
        java.lang.String str16 = period15.toString();
        org.joda.time.Period period17 = period13.withFields((org.joda.time.ReadablePeriod) period15);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period19 = period13.normalizedStandard(periodType18);
        org.joda.time.Period period20 = new org.joda.time.Period(readableDuration3, (org.joda.time.ReadableInstant) dateTime11, periodType18);
        org.joda.time.PeriodType periodType21 = periodType18.withMillisRemoved();
        org.joda.time.Period period22 = interval2.toPeriod(periodType21);
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray28 = timeOfDay27.getFields();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTimeToday(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfCentury(16);
        org.joda.time.DateTime dateTime34 = dateTime30.plusYears((-1));
        boolean boolean35 = interval2.contains((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        int int41 = dateTimeZone39.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(dateTimeZone39);
        org.joda.time.ReadableDuration readableDuration43 = null;
        mutableDateTime42.add(readableDuration43, 0);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime42.dayOfWeek();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime42.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime48 = property47.roundHalfEven();
        boolean boolean49 = interval38.isBefore((org.joda.time.ReadableInstant) mutableDateTime48);
        boolean boolean50 = interval2.overlaps((org.joda.time.ReadableInterval) interval38);
        org.joda.time.TimeOfDay timeOfDay55 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = timeOfDay55.toDateTimeToday(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.withCenturyOfEra(10);
        boolean boolean60 = interval38.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.TimeOfDay timeOfDay65 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime67 = timeOfDay65.toDateTimeToday(dateTimeZone66);
        org.joda.time.DateTime dateTime69 = dateTime67.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime71 = dateTime67.plusDays((int) (byte) -1);
        java.util.Date date72 = dateTime71.toDate();
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Interval interval74 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime71, readableDuration73);
        org.joda.time.Period period75 = interval74.toPeriod();
        boolean boolean76 = interval38.isAfter((org.joda.time.ReadableInterval) interval74);
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(chronology78);
        org.joda.time.DateTime.Property property80 = dateTime79.secondOfMinute();
        org.joda.time.Interval interval81 = new org.joda.time.Interval(readableDuration77, (org.joda.time.ReadableInstant) dateTime79);
        boolean boolean82 = interval38.contains((org.joda.time.ReadableInterval) interval81);
        java.lang.String str83 = interval38.toString();
        java.lang.Object obj84 = null;
        boolean boolean85 = interval38.equals(obj84);
        org.joda.time.Duration duration86 = interval38.toDuration();
        org.joda.time.Interval interval88 = interval38.withStartMillis((long) (-26219842));
        long long89 = interval38.getEndMillis();
        org.joda.time.Duration duration90 = interval38.toDuration();
        long long91 = duration90.getMillis();
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT1M" + "'", str16, "PT1M");
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTimeFieldArray28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 16 + "'", int41 == 16);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(date72);
// flaky:         org.junit.Assert.assertEquals(date72.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "1970-01-01T00:00:00.015+00:00:00.016/1970-01-01T00:00:00.113+00:00:00.016" + "'", str83, "1970-01-01T00:00:00.015+00:00:00.016/1970-01-01T00:00:00.113+00:00:00.016");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(interval88);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 97L + "'", long89 == 97L);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 98L + "'", long91 == 98L);
    }

    @Test
    public void test12282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12282");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        int int5 = dateTimeZone3.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone3);
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7, 0);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime12 = property11.roundHalfEven();
        boolean boolean13 = interval2.isBefore((org.joda.time.ReadableInstant) mutableDateTime12);
        int int14 = mutableDateTime12.getHourOfDay();
        java.util.Date date23 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.fromDateFields(date23);
        int int25 = localDate24.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        int int28 = dateTimeZone26.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime29 = localDate24.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.withCenturyOfEra((int) (short) 1);
        org.joda.time.Period period34 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period36 = org.joda.time.Period.minutes(1);
        java.lang.String str37 = period36.toString();
        org.joda.time.Period period38 = period34.withFields((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Period period40 = period38.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.months();
        int int42 = period40.get(durationFieldType41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight30.withPeriodAdded((org.joda.time.ReadablePeriod) period40, 0);
        org.joda.time.DateMidnight.Property property45 = dateMidnight30.monthOfYear();
        org.joda.time.DateMidnight dateMidnight46 = property45.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight48 = property45.addToCopy((int) (byte) 10);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateMidnight.Property property51 = dateMidnight50.weekyear();
        org.joda.time.DateMidnight dateMidnight53 = property51.setCopy(1899);
        boolean boolean54 = mutableDateTime12.isBefore((org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight53.minusYears(20);
        int int57 = dateMidnight53.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight53.minus((long) 41);
        org.joda.time.Chronology chronology60 = dateMidnight59.getChronology();
        org.joda.time.MutableDateTime mutableDateTime61 = org.joda.time.MutableDateTime.now(chronology60);
        org.joda.time.DurationField durationField62 = chronology60.centuries();
        boolean boolean63 = durationField62.isPrecise();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
// flaky:         org.junit.Assert.assertEquals(date23.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1899 + "'", int25 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 16 + "'", int28 == 16);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT1M" + "'", str37, "PT1M");
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 11 + "'", int57 == 11);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test12283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12283");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.LocalDate localDate10 = property7.addToCopy(100);
        org.joda.time.LocalDate localDate12 = property7.addToCopy(0);
        int int13 = localDate12.getDayOfYear();
        int int14 = localDate12.getMonthOfYear();
        org.joda.time.LocalDate localDate16 = localDate12.plusYears(2022);
        org.joda.time.LocalDate.Property property17 = localDate16.year();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 69 + "'", int13 == 69);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test12284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12284");
        org.joda.time.Period period9 = org.joda.time.Period.millis(26389852);
        org.joda.time.Period period11 = period9.withHours(29);
        org.joda.time.PeriodType periodType12 = period11.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(26426361, 456, (-880), 26324141, 10745, 436, 8, 37, periodType12);
        org.joda.time.PeriodType periodType14 = periodType12.withSecondsRemoved();
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType14);
    }

    @Test
    public void test12285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12285");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        int int6 = date5.getSeconds();
        date5.setHours((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromDateFields(date5);
        org.joda.time.Period period11 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period13 = org.joda.time.Period.minutes(1);
        java.lang.String str14 = period13.toString();
        org.joda.time.Period period15 = period11.withFields((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period17 = period15.plusMillis(100);
        org.joda.time.Period period18 = period15.negated();
        org.joda.time.Period period19 = period18.toPeriod();
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay9.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Days days21 = period18.toStandardDays();
        org.joda.time.Period period23 = period18.minusMonths((-2022));
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT1M" + "'", str14, "PT1M");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(period23);
    }

    @Test
    public void test12286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12286");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        org.joda.time.LocalDate localDate10 = property7.withMaximumValue();
        int int11 = localDate10.size();
        java.util.Date date17 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.fromDateFields(date17);
        int int19 = localDate18.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        int int22 = dateTimeZone20.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime23 = localDate18.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(dateTimeZone20);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay24.withYear(1899);
        org.joda.time.Interval interval27 = yearMonthDay24.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = yearMonthDay24.getFieldTypes();
        org.joda.time.YearMonthDay.Property property29 = yearMonthDay24.year();
        org.joda.time.YearMonthDay yearMonthDay30 = property29.withMaximumValue();
        java.util.Date date36 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate37 = org.joda.time.LocalDate.fromDateFields(date36);
        int int38 = localDate37.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        int int41 = dateTimeZone39.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime42 = localDate37.toDateTimeAtCurrentTime(dateTimeZone39);
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay(dateTimeZone39);
        org.joda.time.Interval interval44 = yearMonthDay30.toInterval(dateTimeZone39);
        org.joda.time.DateTime dateTime45 = localDate10.toDateTimeAtMidnight(dateTimeZone39);
        org.joda.time.Chronology chronology46 = dateTime45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.seconds();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1899 + "'", int19 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 16 + "'", int22 == 16);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(yearMonthDay30);
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1899 + "'", int38 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 16 + "'", int41 == 16);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
    }

    @Test
    public void test12287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12287");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 10);
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = timeOfDay6.toDateTimeToday(dateTimeZone8);
        org.joda.time.DateTime.Property property10 = dateTime9.monthOfYear();
        org.joda.time.DateTime dateTime12 = dateTime9.minusMillis((int) (byte) -1);
        boolean boolean14 = dateTime9.isAfter((long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType15.getDurationType();
        boolean boolean17 = dateTime9.isSupported(dateTimeFieldType15);
        boolean boolean18 = dateTime1.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property19 = dateTime9.millisOfDay();
        org.joda.time.DateTime dateTime21 = dateTime9.withMinuteOfHour(16);
        org.joda.time.DateTimeZone dateTimeZone22 = dateTime9.getZone();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str25 = dateTimeZone24.getID();
        org.joda.time.DateMidnight dateMidnight26 = org.joda.time.DateMidnight.now(dateTimeZone24);
        int int28 = dateTimeZone24.getOffsetFromLocal(10L);
        java.lang.String str30 = dateTimeZone24.getShortName((long) (short) 0);
        long long32 = dateTimeZone22.getMillisKeepLocal(dateTimeZone24, (long) 40);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str35 = dateTimeZone34.getID();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone34);
        org.joda.time.DateTime dateTime38 = dateTime36.plusSeconds(17);
        org.joda.time.Period period40 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period42 = org.joda.time.Period.minutes(1);
        java.lang.String str43 = period42.toString();
        org.joda.time.Period period44 = period40.withFields((org.joda.time.ReadablePeriod) period42);
        org.joda.time.Period period46 = period44.plusMillis(100);
        org.joda.time.Period period48 = period44.minusMillis((int) (byte) 1);
        org.joda.time.DateTime dateTime50 = dateTime38.withPeriodAdded((org.joda.time.ReadablePeriod) period48, 15);
        org.joda.time.DateTime dateTime52 = dateTime50.withDayOfMonth(17);
        org.joda.time.DateTime.Property property53 = dateTime50.yearOfCentury();
        org.joda.time.DateTime dateTime55 = dateTime50.withYear(2025);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) 15, (long) 100, chronology58);
        org.joda.time.DateTime dateTime60 = dateTime55.plus((org.joda.time.ReadablePeriod) mutablePeriod59);
        org.joda.time.DateTime.Property property61 = dateTime55.era();
        org.joda.time.DateTime dateTime63 = dateTime55.minusMonths(11951684);
        int int64 = dateTimeZone22.getOffset((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.LocalTime localTime65 = dateTime55.toLocalTime();
        org.joda.time.LocalTime.Property property66 = localTime65.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.016" + "'", str25, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 16 + "'", int28 == 16);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.016" + "'", str30, "+00:00:00.016");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 40L + "'", long32 == 40L);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.016" + "'", str35, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT1M" + "'", str43, "PT1M");
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 16 + "'", int64 == 16);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(property66);
    }

    @Test
    public void test12288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12288");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 5, chronology3);
        org.joda.time.Chronology chronology5 = chronology3.withUTC();
        org.joda.time.DateTimeZone dateTimeZone6 = chronology5.getZone();
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = timeOfDay13.getFields();
        org.joda.time.Period period16 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period18 = org.joda.time.Period.minutes(1);
        java.lang.String str19 = period18.toString();
        org.joda.time.Period period20 = period16.withFields((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period22 = period20.plusMillis(100);
        org.joda.time.Period period23 = period20.negated();
        org.joda.time.Period period25 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period27 = org.joda.time.Period.minutes(1);
        java.lang.String str28 = period27.toString();
        org.joda.time.Period period29 = period25.withFields((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Period period31 = period29.plusMillis(100);
        boolean boolean32 = period23.equals((java.lang.Object) period31);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period34 = period23.withFields((org.joda.time.ReadablePeriod) mutablePeriod33);
        org.joda.time.TimeOfDay timeOfDay35 = timeOfDay13.plus((org.joda.time.ReadablePeriod) period23);
        org.joda.time.TimeOfDay.Property property36 = timeOfDay13.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay38 = property36.addNoWrapToCopy(32772);
        java.util.Locale.Category category39 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale40 = java.util.Locale.getDefault(category39);
        java.lang.String str41 = property36.getAsText(locale40);
        java.lang.String str42 = dateTimeZone6.getShortName(3172000L, locale40);
        long long45 = dateTimeZone6.adjustOffset((long) 48, true);
        java.lang.String str46 = dateTimeZone6.toString();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT1M" + "'", str19, "PT1M");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PT1M" + "'", str28, "PT1M");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertTrue("'" + category39 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category39.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "52" + "'", str41, "52");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 48L + "'", long45 == 48L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "UTC" + "'", str46, "UTC");
    }

    @Test
    public void test12289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12289");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 10, chronology2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMinuteOfHour(0);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 10, chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withWeekyear((int) (short) 0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 10, chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod16, 15);
        org.joda.time.LocalDateTime.Property property19 = localDateTime11.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str23 = dateTimeZone22.getID();
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str28 = locale25.getDisplayVariant(locale27);
        java.lang.String str29 = dateTimeZone22.getName((long) 5, locale25);
        org.joda.time.LocalDateTime localDateTime30 = property19.setCopy("18", locale25);
        java.lang.String str33 = nameProvider0.getShortName(locale25, "Fri Mar 10 01:35:00 UTC 1899", "36");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        java.util.Locale locale38 = locale36.stripExtensions();
        java.lang.String str39 = locale38.getDisplayScript();
        java.util.Locale locale42 = new java.util.Locale("80279", "00");
        java.lang.String str43 = locale38.getDisplayScript(locale42);
        java.lang.String str46 = nameProvider0.getName(locale38, "PT1M", "2022-02-22");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.016" + "'", str23, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.016" + "'", str29, "+00:00:00.016");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals(locale42.toString(), "80279_00");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test12290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12290");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.plus((long) '4');
        org.joda.time.DateTime.Property property10 = dateTime7.yearOfCentury();
        org.joda.time.DateTime dateTime11 = property10.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        int int14 = dateTimeZone12.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime15.add(readableDuration16, 0);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime15.dayOfWeek();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime15.minuteOfDay();
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = timeOfDay25.toDateTimeToday(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime31 = dateTime27.plusDays((int) (byte) -1);
        java.util.Date date32 = dateTime31.toDate();
        org.joda.time.DateTime.Property property33 = dateTime31.dayOfMonth();
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateTime31);
        int int35 = dateTime11.compareTo((org.joda.time.ReadableInstant) mutableDateTime15);
        int int36 = dateTime11.getDayOfYear();
        org.joda.time.DateTime dateTime38 = dateTime11.minusDays((int) '#');
        org.joda.time.LocalTime localTime39 = dateTime11.toLocalTime();
        int int40 = localTime39.getMinuteOfHour();
        org.joda.time.LocalTime.Property property41 = localTime39.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 16 + "'", int14 == 16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(date32);
// flaky:         org.junit.Assert.assertEquals(date32.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test12291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12291");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        int int11 = localDateTime4.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.plusMillis(26165226);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusMonths(19);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusDays(17);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.minusMinutes(936);
        int int20 = localDateTime15.getWeekyear();
        int int21 = localDateTime15.getEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1968 + "'", int20 == 1968);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test12292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12292");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfCentury();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime5 = dateTime1.withCenturyOfEra(9);
        org.joda.time.DateTime dateTime6 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        org.joda.time.DateTime dateTime9 = property7.withMaximumValue();
        org.joda.time.DateTime.Property property10 = dateTime9.weekOfWeekyear();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test12293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12293");
        java.util.Date date7 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.fromDateFields(date7);
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = localDate8.toDateTimeAtCurrentTime(dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate8.plusWeeks((int) (short) 0);
        int int13 = localDate8.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str16 = dateTimeZone15.getID();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight18 = localDate8.toDateMidnight(dateTimeZone15);
        java.util.Date date24 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.fromDateFields(date24);
        int int26 = localDate25.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        int int29 = dateTimeZone27.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime30 = localDate25.toDateTimeAtCurrentTime(dateTimeZone27);
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight18.withZoneRetainFields(dateTimeZone27);
        java.lang.String str33 = dateTimeZone27.getID();
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight(dateTimeZone27);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(2269721001600000L, dateTimeZone27);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        java.util.Date date45 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate46 = org.joda.time.LocalDate.fromDateFields(date45);
        int int47 = localDate46.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        int int50 = dateTimeZone48.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime51 = localDate46.toDateTimeAtCurrentTime(dateTimeZone48);
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone48);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight52.withCenturyOfEra((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight52.plus(readableDuration55);
        org.joda.time.DateMidnight dateMidnight59 = dateMidnight52.withDurationAdded((long) (-2), (int) (short) 100);
        org.joda.time.DateMidnight.Property property60 = dateMidnight52.dayOfWeek();
        int int61 = dateMidnight52.getMillisOfSecond();
        int int62 = dateTimeZone27.getOffset((org.joda.time.ReadableInstant) dateMidnight52);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis((-8));
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(1645514227847L, dateTimeZone65);
        long long68 = dateTimeZone27.getMillisKeepLocal(dateTimeZone65, (long) 35);
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(933119967600000L, dateTimeZone65);
        org.joda.time.YearMonthDay yearMonthDay70 = dateTime69.toYearMonthDay();
        java.lang.String str71 = yearMonthDay70.toString();
        org.joda.time.YearMonthDay yearMonthDay73 = yearMonthDay70.plusYears(72);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 5 + "'", int13 == 5);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.016" + "'", str16, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight18);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1899 + "'", int26 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 16 + "'", int29 == 16);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.016" + "'", str33, "+00:00:00.016");
// flaky:         org.junit.Assert.assertEquals(date45.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1899 + "'", int47 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 16 + "'", int50 == 16);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 16 + "'", int62 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 59L + "'", long68 == 59L);
        org.junit.Assert.assertNotNull(yearMonthDay70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "31539-05-25" + "'", str71, "31539-05-25");
        org.junit.Assert.assertNotNull(yearMonthDay73);
    }

    @Test
    public void test12294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12294");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 10);
        org.joda.time.TimeOfDay timeOfDay6 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = timeOfDay6.getFields();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.DateTime dateTime9 = timeOfDay6.toDateTimeToday(dateTimeZone8);
        org.joda.time.DateTime.Property property10 = dateTime9.monthOfYear();
        org.joda.time.DateTime dateTime12 = dateTime9.minusMillis((int) (byte) -1);
        boolean boolean14 = dateTime9.isAfter((long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType15.getDurationType();
        boolean boolean17 = dateTime9.isSupported(dateTimeFieldType15);
        boolean boolean18 = dateTime1.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime.Property property19 = dateTime9.millisOfDay();
        org.joda.time.DateTime dateTime21 = dateTime9.withMinuteOfHour(16);
        org.joda.time.DateTime dateTime22 = dateTime21.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime dateTime24 = dateTime21.plusMillis(26296827);
        int int25 = dateTime21.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
    }

    @Test
    public void test12295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12295");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Period period2 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period4 = org.joda.time.Period.minutes(1);
        java.lang.String str5 = period4.toString();
        org.joda.time.Period period6 = period2.withFields((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period8 = period6.plusMillis(100);
        org.joda.time.LocalTime localTime9 = localTime0.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.LocalTime localTime11 = localTime0.minusHours((-1));
        org.joda.time.LocalTime.Property property12 = localTime11.secondOfMinute();
        org.joda.time.LocalTime localTime13 = property12.roundFloorCopy();
        org.joda.time.LocalTime localTime15 = property12.addCopy(3172000L);
        org.joda.time.LocalTime localTime17 = property12.addNoWrapToCopy(26217);
        org.joda.time.LocalTime.Property property18 = localTime17.millisOfDay();
        org.joda.time.LocalTime localTime19 = property18.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT1M" + "'", str5, "PT1M");
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test12296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12296");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.LocalDate localDate9 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate11 = property7.setCopy(1);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.DateMidnight dateMidnight15 = localDate11.toDateMidnight(dateTimeZone13);
        org.joda.time.DateMidnight.Property property16 = dateMidnight15.dayOfYear();
        org.joda.time.DateMidnight dateMidnight17 = property16.getDateMidnight();
        org.joda.time.DurationField durationField18 = property16.getDurationField();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.016" + "'", str14, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(durationField18);
    }

    @Test
    public void test12297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12297");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 0);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime3.dayOfWeek();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime3.yearOfEra();
        org.joda.time.YearMonthDay yearMonthDay9 = new org.joda.time.YearMonthDay((java.lang.Object) mutableDateTime3);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.plusMonths(7);
        org.joda.time.DateMidnight dateMidnight12 = yearMonthDay11.toDateMidnight();
        org.joda.time.YearMonthDay.Property property13 = yearMonthDay11.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay11.withDayOfMonth(203);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 203 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test12298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12298");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.monthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime7.minusMillis((int) (byte) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.toDateTime(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime10.minusMillis((int) 'a');
        int int15 = dateTime14.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime17 = dateTime14.withYear(55);
        org.joda.time.DateTime.Property property18 = dateTime14.monthOfYear();
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test12299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12299");
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = timeOfDay7.toDateTimeToday(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withCenturyOfEra(10);
        boolean boolean12 = dateTime11.isEqualNow();
        org.joda.time.Chronology chronology13 = dateTime11.getChronology();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(15, 5, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.clockhourOfDay();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(1L, chronology13);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(chronology13);
        org.joda.time.LocalTime.Property property18 = localTime17.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        org.joda.time.LocalTime localTime21 = property18.addWrapFieldToCopy(256);
        int int22 = localTime21.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 26665736 + "'", int22 == 26665736);
    }

    @Test
    public void test12300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12300");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("59");
        int int2 = mutableDateTime1.getMonthOfYear();
        mutableDateTime1.addMinutes((-100));
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test12301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12301");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate6.plusWeeks((int) (short) 0);
        int int11 = localDate6.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.DateMidnight dateMidnight16 = localDate6.toDateMidnight(dateTimeZone13);
        org.joda.time.LocalDate.Property property17 = localDate6.year();
        org.joda.time.LocalDate localDate18 = property17.roundFloorCopy();
        org.joda.time.LocalDate localDate19 = property17.withMinimumValue();
        org.joda.time.LocalDate localDate20 = property17.roundHalfCeilingCopy();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.016" + "'", str14, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test12302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12302");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfWeek();
        org.joda.time.Chronology chronology8 = localDate6.getChronology();
        org.joda.time.LocalDate localDate10 = localDate6.withYearOfCentury(41);
        org.joda.time.LocalDate.Property property11 = localDate10.centuryOfEra();
        org.joda.time.LocalDate localDate12 = property11.withMaximumValue();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        int int17 = dateTimeZone15.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 1899, dateTimeZone15);
        long long20 = dateTimeZone15.nextTransition((long) 0);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(10L, dateTimeZone15);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property23 = localDate22.year();
        org.joda.time.DateTimeField dateTimeField24 = property23.getField();
        org.joda.time.DurationField durationField25 = dateTimeField24.getRangeDurationField();
        int int26 = mutableDateTime21.get(dateTimeField24);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        int int29 = dateTimeZone27.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone27);
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutableDateTime30.add(readableDuration31, 0);
        org.joda.time.Period period35 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period37 = org.joda.time.Period.minutes(1);
        java.lang.String str38 = period37.toString();
        org.joda.time.Period period39 = period35.withFields((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period41 = period39.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.months();
        int int43 = period41.get(durationFieldType42);
        mutableDateTime30.add(durationFieldType42, 7);
        mutableDateTime21.add(durationFieldType42, 30);
        boolean boolean48 = localDate12.isSupported(durationFieldType42);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 16 + "'", int17 == 16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNull(durationField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1970 + "'", int26 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 16 + "'", int29 == 16);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT1M" + "'", str38, "PT1M");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test12303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12303");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((-1L), (long) 17, chronology4);
        org.joda.time.Interval interval8 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = timeOfDay14.getFields();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = timeOfDay14.toDateTimeToday(dateTimeZone16);
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period23 = period19.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period25 = period19.normalizedStandard(periodType24);
        org.joda.time.Period period26 = new org.joda.time.Period(readableDuration9, (org.joda.time.ReadableInstant) dateTime17, periodType24);
        org.joda.time.PeriodType periodType27 = periodType24.withMillisRemoved();
        org.joda.time.Period period28 = interval8.toPeriod(periodType27);
        boolean boolean29 = interval8.isAfterNow();
        org.joda.time.MutableInterval mutableInterval30 = interval8.toMutableInterval();
        long long31 = interval8.getStartMillis();
        boolean boolean32 = interval5.isBefore((org.joda.time.ReadableInterval) interval8);
        org.joda.time.Interval interval33 = interval8.toInterval();
        org.joda.time.DateTime dateTime34 = interval8.getEnd();
        org.joda.time.TimeOfDay timeOfDay39 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime41 = timeOfDay39.toDateTimeToday(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime45 = dateTime41.plusDays((int) (byte) -1);
        java.util.Date date46 = dateTime45.toDate();
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.Interval interval48 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime45, readableDuration47);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        int int54 = dateTimeZone52.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(dateTimeZone52);
        org.joda.time.ReadableDuration readableDuration56 = null;
        mutableDateTime55.add(readableDuration56, 0);
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime55.dayOfWeek();
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime55.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime61 = property60.roundHalfEven();
        boolean boolean62 = interval51.isBefore((org.joda.time.ReadableInstant) mutableDateTime61);
        org.joda.time.TimeOfDay timeOfDay67 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray68 = timeOfDay67.getFields();
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.DateTime dateTime70 = timeOfDay67.toDateTimeToday(dateTimeZone69);
        org.joda.time.DateTime dateTime72 = dateTime70.withYearOfCentury(16);
        boolean boolean73 = interval51.isAfter((org.joda.time.ReadableInstant) dateTime72);
        boolean boolean74 = interval48.abuts((org.joda.time.ReadableInterval) interval51);
        org.joda.time.TimeOfDay timeOfDay79 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray80 = timeOfDay79.getFields();
        org.joda.time.DateTimeZone dateTimeZone81 = null;
        org.joda.time.DateTime dateTime82 = timeOfDay79.toDateTimeToday(dateTimeZone81);
        org.joda.time.DateTime.Property property83 = dateTime82.monthOfYear();
        org.joda.time.DateTime dateTime85 = dateTime82.minusMillis((int) (byte) -1);
        boolean boolean86 = interval48.isAfter((org.joda.time.ReadableInstant) dateTime82);
        boolean boolean87 = interval48.isAfterNow();
        boolean boolean88 = interval48.isAfterNow();
        boolean boolean89 = interval8.overlaps((org.joda.time.ReadableInterval) interval48);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1M" + "'", str22, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(mutableInterval30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-1L) + "'", long31 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(date46);
// flaky:         org.junit.Assert.assertEquals(date46.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 16 + "'", int54 == 16);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray80);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test12304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12304");
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology6 = localTime5.getChronology();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(chronology6);
        org.joda.time.Period period8 = new org.joda.time.Period((long) 11, (-2234643900000L), chronology6);
        org.joda.time.Period period9 = new org.joda.time.Period((long) 3, chronology6);
        org.joda.time.DurationField durationField10 = chronology6.eras();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.fromMillisOfDay((long) 9, chronology6);
        org.joda.time.DateTime dateTime12 = localTime11.toDateTimeToday();
        org.joda.time.TimeOfDay timeOfDay17 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime19 = timeOfDay17.toDateTimeToday(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = dateTime19.withCenturyOfEra(10);
        boolean boolean22 = dateTime12.isAfter((org.joda.time.ReadableInstant) dateTime21);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test12305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12305");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        int int4 = dateTimeZone2.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone2);
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = timeOfDay10.toDateTimeToday(dateTimeZone11);
        mutableDateTime5.setZoneRetainFields(dateTimeZone11);
        mutableDateTime5.setSecondOfMinute((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        int int18 = dateTimeZone16.getStandardOffset((long) 100);
        mutableDateTime5.setZone(dateTimeZone16);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology24 = localTime23.getChronology();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((-1L), (long) 17, chronology24);
        mutableDateTime5.setChronology(chronology24);
        java.lang.String str27 = chronology24.toString();
        org.joda.time.DateTime dateTime28 = org.joda.time.DateTime.now(chronology24);
        org.joda.time.Period period29 = new org.joda.time.Period(8380800000L, chronology24);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(38090L, chronology24);
        int int31 = mutableDateTime30.getDayOfWeek();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime30.era();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 16 + "'", int4 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ISOChronology[UTC]" + "'", str27, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 4 + "'", int31 == 4);
        org.junit.Assert.assertNotNull(property32);
    }

    @Test
    public void test12306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12306");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period12 = org.joda.time.Period.minutes(1);
        java.lang.String str13 = period12.toString();
        org.joda.time.Period period14 = period10.withFields((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period16 = period14.plusMillis(100);
        org.joda.time.Period period17 = period14.negated();
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period23 = period19.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period23.plusMillis(100);
        boolean boolean26 = period17.equals((java.lang.Object) period25);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period28 = period17.withFields((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.LocalDate localDate29 = localDate8.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.Period period31 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period33 = org.joda.time.Period.minutes(1);
        java.lang.String str34 = period33.toString();
        org.joda.time.Period period35 = period31.withFields((org.joda.time.ReadablePeriod) period33);
        int int36 = period31.getMinutes();
        org.joda.time.Period period37 = period31.toPeriod();
        org.joda.time.LocalDate localDate38 = localDate29.plus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.LocalDate.Property property39 = localDate38.monthOfYear();
        org.joda.time.LocalDate.Property property40 = localDate38.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str43 = dateTimeZone42.getID();
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str48 = locale45.getDisplayVariant(locale47);
        java.lang.String str49 = dateTimeZone42.getName((long) 5, locale45);
        org.joda.time.DateTime dateTime50 = localDate38.toDateTimeAtMidnight(dateTimeZone42);
        java.lang.String str51 = dateTimeZone42.getID();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT1M" + "'", str13, "PT1M");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1M" + "'", str22, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT1M" + "'", str34, "PT1M");
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.016" + "'", str43, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.016" + "'", str49, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00:00.016" + "'", str51, "+00:00:00.016");
    }

    @Test
    public void test12307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12307");
        java.util.Date date6 = new java.util.Date(8, 53, (int) (byte) 0, 8, 256, 29);
        int int7 = date6.getMonth();
        java.util.Date date13 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.fromDateFields(date13);
        org.joda.time.LocalDate.Property property15 = localDate14.weekOfWeekyear();
        org.joda.time.LocalDate localDate16 = property15.getLocalDate();
        org.joda.time.Period period18 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period20 = org.joda.time.Period.minutes(1);
        java.lang.String str21 = period20.toString();
        org.joda.time.Period period22 = period18.withFields((org.joda.time.ReadablePeriod) period20);
        org.joda.time.Period period24 = period22.plusMillis(100);
        org.joda.time.Period period25 = period22.negated();
        org.joda.time.Period period27 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period29 = org.joda.time.Period.minutes(1);
        java.lang.String str30 = period29.toString();
        org.joda.time.Period period31 = period27.withFields((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Period period33 = period31.plusMillis(100);
        boolean boolean34 = period25.equals((java.lang.Object) period33);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period36 = period25.withFields((org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.LocalDate localDate37 = localDate16.plus((org.joda.time.ReadablePeriod) mutablePeriod35);
        org.joda.time.Period period39 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period41 = org.joda.time.Period.minutes(1);
        java.lang.String str42 = period41.toString();
        org.joda.time.Period period43 = period39.withFields((org.joda.time.ReadablePeriod) period41);
        int int44 = period39.getMinutes();
        org.joda.time.Period period45 = period39.toPeriod();
        org.joda.time.LocalDate localDate46 = localDate37.plus((org.joda.time.ReadablePeriod) period39);
        org.joda.time.LocalDate localDate48 = localDate37.withYearOfEra(99);
        java.util.Date date49 = localDate48.toDate();
        date49.setSeconds((int) (byte) 10);
        int int52 = date49.getDay();
        boolean boolean53 = date6.before(date49);
        date6.setDate(706379);
// flaky:         org.junit.Assert.assertEquals(date6.toString(), "Thu Apr 30 12:16:29 GMT+00:00 3846");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT1M" + "'", str21, "PT1M");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT1M" + "'", str30, "PT1M");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT1M" + "'", str42, "PT1M");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(date49);
// flaky:         org.junit.Assert.assertEquals(date49.toString(), "Sun Mar 10 00:00:10 GMT+00:00 99");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test12308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12308");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.addWeeks((int) (byte) 100);
        org.joda.time.Chronology chronology4 = null;
        mutablePeriod0.setPeriod((long) 15, chronology4);
        mutablePeriod0.setMinutes(1970);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology13 = localTime12.getChronology();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 5, chronology13);
        org.joda.time.Chronology chronology15 = chronology13.withUTC();
        mutablePeriod0.setPeriod((long) 0, (long) 1, chronology15);
        org.joda.time.PeriodType periodType17 = mutablePeriod0.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(periodType17);
        org.joda.time.Period period20 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period22 = org.joda.time.Period.minutes(1);
        java.lang.String str23 = period22.toString();
        org.joda.time.Period period24 = period20.withFields((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Period period26 = period24.plusMillis(100);
        org.joda.time.Period period28 = period24.minusMillis((int) (byte) 1);
        org.joda.time.Period period30 = period24.minusYears(0);
        mutablePeriod18.setPeriod((org.joda.time.ReadablePeriod) period24);
        mutablePeriod18.add(2720, 27339225, 0, 1977, 203, (-95289907), (-2), 42446);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT1M" + "'", str23, "PT1M");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
    }

    @Test
    public void test12309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12309");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay8 = property7.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay10 = property7.addToCopy(0);
        java.lang.String str11 = property7.toString();
        org.joda.time.DurationField durationField12 = property7.getRangeDurationField();
        java.lang.String str13 = property7.toString();
        int int14 = property7.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[secondOfMinute]" + "'", str11, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Property[secondOfMinute]" + "'", str13, "Property[secondOfMinute]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test12310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12310");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        int int5 = localDateTime4.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.dayOfYear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test12311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12311");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale[] localeArray3 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList4 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList4, localeArray3);
        java.util.List<java.util.Locale> localeList6 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList4);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale[] localeArray10 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList11 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList11, localeArray10);
        java.util.List<java.util.Locale> localeList13 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList11);
        java.util.stream.Stream<java.util.Locale> localeStream14 = localeList13.stream();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str18 = locale15.getDisplayVariant(locale17);
        java.util.Locale locale19 = locale17.stripExtensions();
        boolean boolean20 = localeList13.add(locale19);
        boolean boolean21 = localeList6.containsAll((java.util.Collection<java.util.Locale>) localeList13);
        org.joda.time.tz.NameProvider nameProvider22 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider22);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider22);
        java.util.Date date30 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.fromDateFields(date30);
        org.joda.time.LocalDate.Property property32 = localDate31.weekOfWeekyear();
        org.joda.time.LocalDate localDate33 = property32.getLocalDate();
        org.joda.time.DateTimeField dateTimeField34 = property32.getField();
        int int36 = dateTimeField34.getLeapAmount((long) '#');
        java.lang.String str38 = dateTimeField34.getAsShortText((long) 1);
        java.util.Locale locale40 = java.util.Locale.ENGLISH;
        java.lang.String str41 = dateTimeField34.getAsShortText((long) (-1), locale40);
        java.util.Locale locale43 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str44 = locale40.getDisplayVariant(locale43);
        java.lang.String str47 = nameProvider22.getShortName(locale40, "-4", "DurationField[minutes]");
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone50 = dateTimeZone49.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone53 = dateTimeZone52.toTimeZone();
        boolean boolean54 = timeZone50.hasSameRules(timeZone53);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone53, locale55);
        java.util.Locale locale57 = java.util.Locale.ITALY;
        java.lang.String str58 = locale55.getDisplayScript(locale57);
        java.lang.String str61 = nameProvider22.getShortName(locale55, "53", "PT1M-2000S");
        boolean boolean62 = localeList13.remove((java.lang.Object) "53");
        localeList13.clear();
        java.util.Spliterator<java.util.Locale> localeSpliterator64 = localeList13.spliterator();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localeList6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localeList13);
        org.junit.Assert.assertNotNull(localeStream14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(nameProvider22);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1" + "'", str38, "1");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1" + "'", str41, "1");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=1645514665680,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=25,MILLISECOND=696,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(localeSpliterator64);
    }

    @Test
    public void test12312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12312");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale[] localeArray3 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList4 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList4, localeArray3);
        java.util.List<java.util.Locale> localeList6 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList4);
        java.util.Spliterator<java.util.Locale> localeSpliterator7 = localeList6.spliterator();
        java.lang.Object[] objArray8 = localeList6.toArray();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayVariant(locale10);
        java.util.Set<java.lang.String> strSet12 = locale9.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale[] localeArray16 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList17 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList17, localeArray16);
        java.util.List<java.util.Locale> localeList19 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList17);
        boolean boolean20 = strSet12.removeAll((java.util.Collection<java.util.Locale>) localeList19);
        java.util.Spliterator<java.util.Locale> localeSpliterator21 = localeList19.spliterator();
        boolean boolean22 = localeList6.addAll((java.util.Collection<java.util.Locale>) localeList19);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayVariant(locale24);
        java.util.Set<java.lang.String> strSet26 = locale23.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Locale[] localeArray30 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList31 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList31, localeArray30);
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList31);
        boolean boolean34 = strSet26.removeAll((java.util.Collection<java.util.Locale>) localeList33);
        java.util.Iterator<java.util.Locale> localeItor35 = localeList33.iterator();
        boolean boolean36 = localeList19.retainAll((java.util.Collection<java.util.Locale>) localeList33);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localeList6);
        org.junit.Assert.assertNotNull(localeSpliterator7);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localeList19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localeSpliterator21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localeItor35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test12313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12313");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period3 = org.joda.time.Period.minutes(1);
        java.lang.String str4 = period3.toString();
        org.joda.time.Period period5 = period1.withFields((org.joda.time.ReadablePeriod) period3);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period7 = period1.normalizedStandard(periodType6);
        org.joda.time.Interval interval10 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = timeOfDay16.getFields();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = timeOfDay16.toDateTimeToday(dateTimeZone18);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period23 = org.joda.time.Period.minutes(1);
        java.lang.String str24 = period23.toString();
        org.joda.time.Period period25 = period21.withFields((org.joda.time.ReadablePeriod) period23);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period27 = period21.normalizedStandard(periodType26);
        org.joda.time.Period period28 = new org.joda.time.Period(readableDuration11, (org.joda.time.ReadableInstant) dateTime19, periodType26);
        org.joda.time.PeriodType periodType29 = periodType26.withMillisRemoved();
        org.joda.time.Period period30 = interval10.toPeriod(periodType29);
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = timeOfDay35.toDateTimeToday(dateTimeZone36);
        boolean boolean38 = interval10.contains((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Interval interval39 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) period7, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Period period41 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period43 = org.joda.time.Period.minutes(1);
        java.lang.String str44 = period43.toString();
        org.joda.time.Period period45 = period41.withFields((org.joda.time.ReadablePeriod) period43);
        org.joda.time.Period period47 = period43.minusSeconds((int) (short) 100);
        org.joda.time.Period period49 = period43.minusHours((int) (byte) 1);
        org.joda.time.Period period51 = period49.plusMonths(0);
        org.joda.time.Period period53 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period55 = org.joda.time.Period.minutes(1);
        java.lang.String str56 = period55.toString();
        org.joda.time.Period period57 = period53.withFields((org.joda.time.ReadablePeriod) period55);
        org.joda.time.Period period59 = period57.plusMillis(100);
        org.joda.time.Period period60 = period57.negated();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType62 = dateTimeFieldType61.getDurationType();
        boolean boolean63 = period57.isSupported(durationFieldType62);
        org.joda.time.Weeks weeks64 = period57.toStandardWeeks();
        org.joda.time.MutablePeriod mutablePeriod65 = weeks64.toMutablePeriod();
        org.joda.time.Period period66 = period49.withFields((org.joda.time.ReadablePeriod) weeks64);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period67 = period7.plus((org.joda.time.ReadablePeriod) period49);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT1M" + "'", str4, "PT1M");
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT1M" + "'", str24, "PT1M");
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PT1M" + "'", str44, "PT1M");
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT1M" + "'", str56, "PT1M");
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(weeks64);
        org.junit.Assert.assertNotNull(mutablePeriod65);
        org.junit.Assert.assertNotNull(period66);
    }

    @Test
    public void test12314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12314");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        int int11 = localDateTime4.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.minusMillis(2000);
        org.joda.time.LocalDateTime.Property property14 = localDateTime4.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = localDateTime4.getFieldType(0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime4.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test12315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12315");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.months();
        org.joda.time.PeriodType periodType3 = periodType2.withDaysRemoved();
        org.joda.time.Period period4 = new org.joda.time.Period(4233600010L, (long) 14, periodType3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusWeeks(45);
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.dayOfYear();
        org.joda.time.LocalDateTime localDateTime13 = property11.addToCopy((long) 26217);
        boolean boolean14 = periodType3.equals((java.lang.Object) localDateTime13);
        int int15 = periodType3.size();
        org.joda.time.PeriodType periodType16 = periodType3.withMinutesRemoved();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(periodType16);
    }

    @Test
    public void test12316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12316");
        java.util.Date date8 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date8);
        int int10 = localDate9.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime14 = localDate9.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.withCenturyOfEra((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight15.plus(readableDuration18);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight15.withDurationAdded((long) (-2), (int) (short) 100);
        org.joda.time.DateMidnight.Property property23 = dateMidnight15.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight25 = property23.addToCopy(26196);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minusWeeks(26219841);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight27.plus((long) 441);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight27.minusDays(30);
// flaky:         org.junit.Assert.assertEquals(date8.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1899 + "'", int10 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateMidnight31);
    }

    @Test
    public void test12317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12317");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 26257730, (long) 45);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        int int5 = dateTimeZone3.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone3);
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7, 0);
        org.joda.time.Period period11 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period13 = org.joda.time.Period.minutes(1);
        java.lang.String str14 = period13.toString();
        org.joda.time.Period period15 = period11.withFields((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Period period17 = period15.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.months();
        int int19 = period17.get(durationFieldType18);
        mutableDateTime6.add(durationFieldType18, 7);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime6.dayOfYear();
        boolean boolean23 = mutableDateTime6.isEqualNow();
        int int24 = mutableDateTime6.getWeekOfWeekyear();
        mutableDateTime6.addHours(6);
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = timeOfDay31.toDateTimeToday(dateTimeZone32);
        org.joda.time.DateTime dateTime35 = dateTime33.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime37 = dateTime33.plusDays((int) (byte) -1);
        java.util.Date date38 = dateTime37.toDate();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.Interval interval40 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime37, readableDuration39);
        org.joda.time.Period period41 = interval40.toPeriod();
        org.joda.time.TimeOfDay timeOfDay46 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = timeOfDay46.toDateTimeToday(dateTimeZone47);
        org.joda.time.DateTime dateTime50 = dateTime48.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime52 = dateTime48.plusDays((int) (byte) -1);
        java.util.Date date53 = dateTime52.toDate();
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.Interval interval55 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime52, readableDuration54);
        org.joda.time.Interval interval58 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        int int61 = dateTimeZone59.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(dateTimeZone59);
        org.joda.time.ReadableDuration readableDuration63 = null;
        mutableDateTime62.add(readableDuration63, 0);
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime62.dayOfWeek();
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime62.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime68 = property67.roundHalfEven();
        boolean boolean69 = interval58.isBefore((org.joda.time.ReadableInstant) mutableDateTime68);
        org.joda.time.TimeOfDay timeOfDay74 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray75 = timeOfDay74.getFields();
        org.joda.time.DateTimeZone dateTimeZone76 = null;
        org.joda.time.DateTime dateTime77 = timeOfDay74.toDateTimeToday(dateTimeZone76);
        org.joda.time.DateTime dateTime79 = dateTime77.withYearOfCentury(16);
        boolean boolean80 = interval58.isAfter((org.joda.time.ReadableInstant) dateTime79);
        boolean boolean81 = interval55.abuts((org.joda.time.ReadableInterval) interval58);
        org.joda.time.Duration duration82 = interval58.toDuration();
        org.joda.time.Interval interval83 = interval40.withDurationAfterStart((org.joda.time.ReadableDuration) duration82);
        org.joda.time.PeriodType periodType84 = null;
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime6, (org.joda.time.ReadableDuration) duration82, periodType84);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration82);
        org.joda.time.Period period87 = duration82.toPeriod();
        java.lang.String str88 = duration82.toString();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT1M" + "'", str14, "PT1M");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 38 + "'", int24 == 38);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(date38);
// flaky:         org.junit.Assert.assertEquals(date38.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(date53);
// flaky:         org.junit.Assert.assertEquals(date53.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 16 + "'", int61 == 16);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "PT0.098S" + "'", str88, "PT0.098S");
    }

    @Test
    public void test12318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12318");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime10 = dateTime6.plusDays((int) (byte) -1);
        java.util.Date date11 = dateTime10.toDate();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, readableDuration12);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        int int19 = dateTimeZone17.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21, 0);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.dayOfWeek();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime20.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime26 = property25.roundHalfEven();
        boolean boolean27 = interval16.isBefore((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray33 = timeOfDay32.getFields();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = timeOfDay32.toDateTimeToday(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.withYearOfCentury(16);
        boolean boolean38 = interval16.isAfter((org.joda.time.ReadableInstant) dateTime37);
        boolean boolean39 = interval13.abuts((org.joda.time.ReadableInterval) interval16);
        org.joda.time.TimeOfDay timeOfDay44 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray45 = timeOfDay44.getFields();
        org.joda.time.DateTimeZone dateTimeZone46 = null;
        org.joda.time.DateTime dateTime47 = timeOfDay44.toDateTimeToday(dateTimeZone46);
        org.joda.time.DateTime.Property property48 = dateTime47.monthOfYear();
        org.joda.time.DateTime dateTime50 = dateTime47.minusMillis((int) (byte) -1);
        boolean boolean51 = interval13.isAfter((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean52 = interval13.isAfterNow();
        boolean boolean53 = interval13.isAfterNow();
        org.joda.time.Duration duration54 = interval13.toDuration();
        org.joda.time.Chronology chronology55 = interval13.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 16 + "'", int19 == 16);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(chronology55);
    }

    @Test
    public void test12319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12319");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        boolean boolean6 = timeZone2.hasSameRules(timeZone5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Calendar calendar8 = java.util.Calendar.getInstance(timeZone5, locale7);
        java.util.Date date9 = calendar8.getTime();
        int int10 = calendar8.getFirstDayOfWeek();
        java.lang.String str11 = calendar8.getCalendarType();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
        org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar8);
// flaky:         org.junit.Assert.assertEquals(calendar8.toString(), "java.util.GregorianCalendar[time=1645514665878,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=25,MILLISECOND=894,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date9);
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Tue Feb 22 07:24:25 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "gregory" + "'", str11, "gregory");
    }

    @Test
    public void test12320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12320");
        java.util.Date date9 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.fromDateFields(date9);
        int int11 = localDate10.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        int int14 = dateTimeZone12.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime15 = localDate10.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone12);
        org.joda.time.DateMidnight dateMidnight18 = dateMidnight16.withCenturyOfEra((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        int int21 = dateTimeZone19.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight16.withZoneRetainFields(dateTimeZone19);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(4233600010L, dateTimeZone19);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime24.setTime(26686090, 925, 5, (-26165227));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26686090 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(date9.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1899 + "'", int11 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 16 + "'", int14 == 16);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 16 + "'", int21 == 16);
        org.junit.Assert.assertNotNull(dateMidnight23);
    }

    @Test
    public void test12321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12321");
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(4, (int) ' ', (int) '#');
        org.joda.time.TimeOfDay timeOfDay5 = timeOfDay3.minusHours((-292275054));
        org.joda.time.TimeOfDay.Property property6 = timeOfDay5.minuteOfHour();
        org.junit.Assert.assertNotNull(timeOfDay5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test12322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12322");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfWeek();
        java.util.Date date16 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.fromDateFields(date16);
        int int18 = localDate17.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        int int21 = dateTimeZone19.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime22 = localDate17.toDateTimeAtCurrentTime(dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone19);
        org.joda.time.Period period25 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period27 = org.joda.time.Period.minutes(1);
        java.lang.String str28 = period27.toString();
        org.joda.time.Period period29 = period25.withFields((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Period period31 = period29.plusMillis(100);
        org.joda.time.Period period32 = period29.negated();
        org.joda.time.Period period34 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period36 = org.joda.time.Period.minutes(1);
        java.lang.String str37 = period36.toString();
        org.joda.time.Period period38 = period34.withFields((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Period period40 = period38.plusMillis(100);
        boolean boolean41 = period32.equals((java.lang.Object) period40);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period43 = period32.withFields((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Chronology chronology45 = null;
        mutablePeriod42.setPeriod(readableDuration44, chronology45);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight23.minus((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.Period period49 = org.joda.time.Period.minutes(1);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight47.withPeriodAdded((org.joda.time.ReadablePeriod) period49, (int) (short) 1);
        org.joda.time.Period period53 = period49.plusMillis((-2));
        org.joda.time.LocalDate localDate55 = localDate6.withPeriodAdded((org.joda.time.ReadablePeriod) period49, (-2026));
        org.joda.time.DateTime dateTime56 = localDate6.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate58 = localDate6.plusDays(16);
        org.joda.time.Interval interval59 = localDate6.toInterval();
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1899 + "'", int18 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 16 + "'", int21 == 16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PT1M" + "'", str28, "PT1M");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT1M" + "'", str37, "PT1M");
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(interval59);
    }

    @Test
    public void test12323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12323");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.secondOfMinute();
        java.lang.String str3 = property2.getAsString();
        java.lang.String str4 = property2.getAsShortText();
        org.joda.time.DateTime dateTime5 = property2.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        int int8 = dateTimeZone6.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime16 = timeOfDay14.toDateTimeToday(dateTimeZone15);
        mutableDateTime9.setZoneRetainFields(dateTimeZone15);
        mutableDateTime9.setSecondOfMinute((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        int int22 = dateTimeZone20.getStandardOffset((long) 100);
        mutableDateTime9.setZone(dateTimeZone20);
        mutableDateTime9.addWeekyears(3172001);
        int int26 = mutableDateTime9.getYear();
        org.joda.time.Interval interval27 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.DateTime dateTime29 = dateTime5.withWeekyear(69);
        org.junit.Assert.assertNotNull(property2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "26" + "'", str3, "26");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "26" + "'", str4, "26");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 16 + "'", int22 == 16);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3174023 + "'", int26 == 3174023);
        org.junit.Assert.assertNotNull(dateTime29);
    }

    @Test
    public void test12324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12324");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((int) (short) 0);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.weekyear();
        org.joda.time.LocalDateTime localDateTime16 = property14.addToCopy((long) 26605689);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test12325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12325");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.plus((long) '4');
        org.joda.time.DateTime.Property property10 = dateTime7.yearOfCentury();
        org.joda.time.DateTime dateTime11 = property10.roundFloorCopy();
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(53);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology18 = localTime17.getChronology();
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(chronology18);
        org.joda.time.Period period20 = new org.joda.time.Period((long) 11, (-2234643900000L), chronology18);
        org.joda.time.Period period22 = period20.minusHours(53);
        org.joda.time.Period period23 = period20.negated();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod();
        mutablePeriod24.addWeeks((int) (byte) 100);
        int int27 = mutablePeriod24.size();
        org.joda.time.Period period28 = period20.plus((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.format.PeriodFormatter periodFormatter29 = null;
        java.lang.String str30 = mutablePeriod24.toString(periodFormatter29);
        mutablePeriod24.setSeconds(40);
        int[] intArray33 = mutablePeriod24.getValues();
        org.joda.time.DateTime dateTime34 = dateTime11.minus((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.TimeOfDay timeOfDay39 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray40 = timeOfDay39.getFields();
        org.joda.time.DateTimeZone dateTimeZone41 = null;
        org.joda.time.DateTime dateTime42 = timeOfDay39.toDateTimeToday(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusMillis(1971);
        org.joda.time.Duration duration45 = mutablePeriod24.toDurationTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Duration duration46 = duration45.toDuration();
        org.joda.time.Period period47 = duration46.toPeriod();
        org.joda.time.Period period49 = period47.withHours(50);
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 8 + "'", int27 == 8);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "P100W" + "'", str30, "P100W");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, 0, 100, 0, 0, 0, 40, 0]");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldArray40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
    }

    @Test
    public void test12326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12326");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField8 = localDateTime6.getField(0);
        int int9 = localDateTime6.getYear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plusDays(163);
        org.joda.time.LocalDateTime.Property property12 = localDateTime6.dayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1970 + "'", int9 == 1970);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test12327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12327");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = timeOfDay9.toDateTimeToday(dateTimeZone10);
        mutableDateTime4.setZoneRetainFields(dateTimeZone10);
        mutableDateTime4.setSecondOfMinute((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        int int17 = dateTimeZone15.getStandardOffset((long) 100);
        mutableDateTime4.setZone(dateTimeZone15);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology23 = localTime22.getChronology();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((-1L), (long) 17, chronology23);
        mutableDateTime4.setChronology(chronology23);
        java.lang.String str26 = chronology23.toString();
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = timeOfDay31.toDateTimeToday(dateTimeZone32);
        org.joda.time.Chronology chronology34 = chronology23.withZone(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(1645514222758L, chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.minuteOfHour();
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight(chronology34);
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight(chronology34);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 16 + "'", int17 == 16);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[UTC]" + "'", str26, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test12328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12328");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int2 = calendar0.getMaximum((int) (short) 0);
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.LocalTime.Property property7 = localTime3.property(dateTimeFieldType5);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology13 = localTime12.getChronology();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 5, chronology13);
        org.joda.time.Chronology chronology15 = chronology13.withUTC();
        org.joda.time.DateTimeZone dateTimeZone16 = chronology15.getZone();
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) (byte) 10, dateTimeZone16);
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) 86340000, dateTimeZone16);
        int int20 = localTime3.compareTo((org.joda.time.ReadablePartial) localTime19);
        org.joda.time.LocalTime localTime22 = localTime3.minusMinutes(22);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDay();
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.millis();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Period period28 = org.joda.time.Period.minutes(1);
        java.lang.String str29 = period28.toString();
        org.joda.time.LocalTime localTime30 = localTime26.plus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 10, chronology32);
        org.joda.time.Chronology chronology35 = null;
        mutablePeriod33.setPeriod((long) 0, chronology35);
        org.joda.time.LocalTime localTime38 = localTime30.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod33, 55);
        org.joda.time.Period period40 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period42 = org.joda.time.Period.minutes(1);
        java.lang.String str43 = period42.toString();
        org.joda.time.Period period44 = period40.withFields((org.joda.time.ReadablePeriod) period42);
        int int45 = period40.getMinutes();
        int int46 = period40.size();
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.TimeOfDay timeOfDay52 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray53 = timeOfDay52.getFields();
        org.joda.time.DateTimeZone dateTimeZone54 = null;
        org.joda.time.DateTime dateTime55 = timeOfDay52.toDateTimeToday(dateTimeZone54);
        org.joda.time.Period period57 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period59 = org.joda.time.Period.minutes(1);
        java.lang.String str60 = period59.toString();
        org.joda.time.Period period61 = period57.withFields((org.joda.time.ReadablePeriod) period59);
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period63 = period57.normalizedStandard(periodType62);
        org.joda.time.Period period64 = new org.joda.time.Period(readableDuration47, (org.joda.time.ReadableInstant) dateTime55, periodType62);
        org.joda.time.PeriodType periodType65 = periodType62.withMillisRemoved();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType67 = dateTimeFieldType66.getDurationType();
        boolean boolean68 = periodType65.isSupported(durationFieldType67);
        int int69 = period40.get(durationFieldType67);
        org.joda.time.LocalTime localTime71 = localTime38.withFieldAdded(durationFieldType67, 2000);
        boolean boolean72 = periodType24.isSupported(durationFieldType67);
        int int73 = periodType23.indexOf(durationFieldType67);
        boolean boolean74 = localTime3.isSupported(durationFieldType67);
        int int75 = localTime3.getMillisOfDay();
        org.joda.time.Chronology chronology76 = localTime3.getChronology();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645514666235,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=19,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=26,MILLISECOND=251,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT1M" + "'", str29, "PT1M");
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT1M" + "'", str43, "PT1M");
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 8 + "'", int46 == 8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "PT1M" + "'", str60, "PT1M");
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 26666251 + "'", int75 == 26666251);
        org.junit.Assert.assertNotNull(chronology76);
    }

    @Test
    public void test12329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12329");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) 5, chronology4);
        org.joda.time.TimeOfDay timeOfDay6 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 3172001, chronology4);
        org.joda.time.DurationField durationField7 = chronology4.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.weekOfWeekyear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.TimeOfDay timeOfDay12 = new org.joda.time.TimeOfDay(0, (int) '4', chronology11);
        org.joda.time.TimeOfDay.Property property13 = timeOfDay12.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay14 = property13.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay14.minusMinutes(3172001);
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay16.plusSeconds(16);
        int int19 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) timeOfDay18);
        java.util.Date date25 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.fromDateFields(date25);
        org.joda.time.DateTimeZone dateTimeZone27 = null;
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtCurrentTime(dateTimeZone27);
        org.joda.time.LocalDate localDate30 = localDate26.plusWeeks((int) (short) 0);
        int int31 = localDate26.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str34 = dateTimeZone33.getID();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone33);
        org.joda.time.DateMidnight dateMidnight36 = localDate26.toDateMidnight(dateTimeZone33);
        java.util.Date date42 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate43 = org.joda.time.LocalDate.fromDateFields(date42);
        int int44 = localDate43.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        int int47 = dateTimeZone45.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime48 = localDate43.toDateTimeAtCurrentTime(dateTimeZone45);
        org.joda.time.YearMonthDay yearMonthDay49 = new org.joda.time.YearMonthDay(dateTimeZone45);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay49.withYear(1899);
        org.joda.time.Interval interval52 = yearMonthDay49.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = yearMonthDay49.getFieldTypes();
        org.joda.time.YearMonthDay.Property property54 = yearMonthDay49.year();
        org.joda.time.YearMonthDay yearMonthDay55 = property54.withMaximumValue();
        org.joda.time.Period period56 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate26, (org.joda.time.ReadablePartial) yearMonthDay55);
        int int57 = localDate26.getYear();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean58 = timeOfDay18.isEqual((org.joda.time.ReadablePartial) localDate26);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 5 + "'", int31 == 5);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.016" + "'", str34, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight36);
// flaky:         org.junit.Assert.assertEquals(date42.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1899 + "'", int44 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 16 + "'", int47 == 16);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(yearMonthDay55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1899 + "'", int57 == 1899);
    }

    @Test
    public void test12330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12330");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withYearOfCentury(16);
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray15 = timeOfDay14.getFields();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = timeOfDay14.toDateTimeToday(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYearOfCentury(16);
        org.joda.time.DateTime dateTime21 = dateTime17.plusYears((-1));
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime21.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.weekOfWeekyear();
        org.joda.time.DateTime dateTime24 = mutableDateTime22.toDateTime();
        org.joda.time.DateTime dateTime26 = dateTime24.minusWeeks(19);
        org.joda.time.DateTime dateTime28 = dateTime24.plusMonths((-1));
        int int29 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime.Property property30 = dateTime7.dayOfWeek();
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray36 = timeOfDay35.getFields();
        org.joda.time.DateTimeZone dateTimeZone37 = null;
        org.joda.time.DateTime dateTime38 = timeOfDay35.toDateTimeToday(dateTimeZone37);
        org.joda.time.DateTime.Property property39 = dateTime38.monthOfYear();
        org.joda.time.DateTime dateTime41 = dateTime38.minusMillis((int) (byte) -1);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = dateTime41.toDateTime(chronology42);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        int int46 = dateTimeZone44.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(dateTimeZone44);
        org.joda.time.TimeOfDay timeOfDay52 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime54 = timeOfDay52.toDateTimeToday(dateTimeZone53);
        mutableDateTime47.setZoneRetainFields(dateTimeZone53);
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime47, readableDuration56);
        boolean boolean58 = dateTime43.isBefore((org.joda.time.ReadableInstant) mutableDateTime47);
        int int59 = mutableDateTime47.getYearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime60 = mutableDateTime47.copy();
        int int61 = dateTime7.compareTo((org.joda.time.ReadableInstant) mutableDateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldArray15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeFieldArray36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 16 + "'", int46 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 22 + "'", int59 == 22);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
    }

    @Test
    public void test12331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12331");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period3 = org.joda.time.Period.minutes(1);
        java.lang.String str4 = period3.toString();
        org.joda.time.Period period5 = period1.withFields((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Period period7 = period5.plusMillis(100);
        org.joda.time.Period period8 = period5.negated();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getDurationType();
        boolean boolean11 = period5.isSupported(durationFieldType10);
        org.joda.time.Period period13 = period5.plusMinutes((int) (short) 100);
        org.joda.time.Period period15 = period13.withMillis(26219615);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.days();
        org.joda.time.Period period18 = period13.withField(durationFieldType16, 1971);
        java.util.Date date24 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.fromDateFields(date24);
        int int26 = localDate25.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        int int29 = dateTimeZone27.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime30 = localDate25.toDateTimeAtCurrentTime(dateTimeZone27);
        org.joda.time.YearMonthDay yearMonthDay31 = new org.joda.time.YearMonthDay(dateTimeZone27);
        org.joda.time.YearMonthDay yearMonthDay33 = yearMonthDay31.withYear(1899);
        org.joda.time.Interval interval34 = yearMonthDay31.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray35 = yearMonthDay31.getFieldTypes();
        org.joda.time.YearMonthDay.Property property36 = yearMonthDay31.year();
        org.joda.time.YearMonthDay yearMonthDay37 = property36.getYearMonthDay();
        org.joda.time.LocalDate localDate38 = yearMonthDay37.toLocalDate();
        int int39 = localDate38.size();
        org.joda.time.LocalDate localDate41 = localDate38.minusMonths(18);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str44 = dateTimeZone43.getID();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        int int48 = dateTimeZone46.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) 1899, dateTimeZone46);
        int int51 = localDate49.getValue((int) (byte) 0);
        org.joda.time.DateTime dateTime52 = localDate49.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime54 = dateTime52.withDayOfYear(53);
        org.joda.time.DateTime dateTime55 = dateTime54.withEarlierOffsetAtOverlap();
        int int56 = dateTimeZone43.getOffset((org.joda.time.ReadableInstant) dateTime55);
        int int58 = dateTimeZone43.getOffsetFromLocal(21168000000L);
        org.joda.time.DateMidnight dateMidnight59 = localDate41.toDateMidnight(dateTimeZone43);
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) (short) 100, (long) 12);
        org.joda.time.format.PeriodFormatter periodFormatter63 = null;
        java.lang.String str64 = mutablePeriod62.toString(periodFormatter63);
        mutablePeriod62.addHours(16);
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod(7, (-9), 26165226, 53, 14, 2022, 2, 48);
        int int76 = mutablePeriod75.getYears();
        mutablePeriod75.addYears(1899);
        org.joda.time.Period period80 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period82 = org.joda.time.Period.minutes(1);
        java.lang.String str83 = period82.toString();
        org.joda.time.Period period84 = period80.withFields((org.joda.time.ReadablePeriod) period82);
        org.joda.time.Period period86 = period84.plusMillis(100);
        org.joda.time.Period period87 = period84.negated();
        org.joda.time.DateTimeFieldType dateTimeFieldType88 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType89 = dateTimeFieldType88.getDurationType();
        boolean boolean90 = period84.isSupported(durationFieldType89);
        int int91 = mutablePeriod75.get(durationFieldType89);
        mutablePeriod62.set(durationFieldType89, 18);
        org.joda.time.DateMidnight dateMidnight95 = dateMidnight59.withFieldAdded(durationFieldType89, (-60));
        boolean boolean96 = period18.isSupported(durationFieldType89);
        org.joda.time.Period period98 = period18.minusYears(56);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT1M" + "'", str4, "PT1M");
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(period18);
// flaky:         org.junit.Assert.assertEquals(date24.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1899 + "'", int26 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 16 + "'", int29 == 16);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.016" + "'", str44, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 16 + "'", int48 == 16);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1970 + "'", int51 == 1970);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 16 + "'", int56 == 16);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 16 + "'", int58 == 16);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "PT0.088S" + "'", str64, "PT0.088S");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 7 + "'", int76 == 7);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "PT1M" + "'", str83, "PT1M");
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(dateTimeFieldType88);
        org.junit.Assert.assertNotNull(durationFieldType89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2022 + "'", int91 == 2022);
        org.junit.Assert.assertNotNull(dateMidnight95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(period98);
    }

    @Test
    public void test12332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12332");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime10 = dateTime6.plusDays((int) (byte) -1);
        java.util.Date date11 = dateTime10.toDate();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, readableDuration12);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        int int19 = dateTimeZone17.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21, 0);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.dayOfWeek();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime20.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime26 = property25.roundHalfEven();
        boolean boolean27 = interval16.isBefore((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray33 = timeOfDay32.getFields();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = timeOfDay32.toDateTimeToday(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.withYearOfCentury(16);
        boolean boolean38 = interval16.isAfter((org.joda.time.ReadableInstant) dateTime37);
        boolean boolean39 = interval13.abuts((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Duration duration40 = interval16.toDuration();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        int int44 = dateTimeZone42.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(dateTimeZone42);
        org.joda.time.TimeOfDay timeOfDay50 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime52 = timeOfDay50.toDateTimeToday(dateTimeZone51);
        mutableDateTime45.setZoneRetainFields(dateTimeZone51);
        mutableDateTime45.setSecondOfMinute((int) (short) 0);
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.hours();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(readableDuration41, (org.joda.time.ReadableInstant) mutableDateTime45, periodType56);
        org.joda.time.PeriodType periodType58 = periodType56.withHoursRemoved();
        org.joda.time.Period period59 = interval16.toPeriod(periodType56);
        org.joda.time.TimeOfDay timeOfDay64 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray65 = timeOfDay64.getFields();
        org.joda.time.DateTimeZone dateTimeZone66 = null;
        org.joda.time.DateTime dateTime67 = timeOfDay64.toDateTimeToday(dateTimeZone66);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str70 = dateTimeZone69.getID();
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime(dateTimeZone69);
        org.joda.time.DateTime dateTime72 = timeOfDay64.toDateTimeToday(dateTimeZone69);
        org.joda.time.DateMidnight dateMidnight73 = org.joda.time.DateMidnight.now(dateTimeZone69);
        boolean boolean74 = interval16.isBefore((org.joda.time.ReadableInstant) dateMidnight73);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight73.minusYears(10745);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight78 = dateMidnight76.withMonthOfYear((-49));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -49 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 16 + "'", int19 == 16);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 16 + "'", int44 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(dateTimeFieldArray65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00:00.016" + "'", str70, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertNotNull(dateMidnight76);
    }

    @Test
    public void test12333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12333");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration5 = null;
        mutableDateTime4.add(readableDuration5, 0);
        java.util.Date date16 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.fromDateFields(date16);
        int int18 = localDate17.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        int int21 = dateTimeZone19.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime22 = localDate17.toDateTimeAtCurrentTime(dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone19);
        org.joda.time.DateMidnight dateMidnight25 = dateMidnight23.withCenturyOfEra((int) (short) 1);
        org.joda.time.Period period27 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period29 = org.joda.time.Period.minutes(1);
        java.lang.String str30 = period29.toString();
        org.joda.time.Period period31 = period27.withFields((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Period period33 = period31.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.months();
        int int35 = period33.get(durationFieldType34);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight23.withPeriodAdded((org.joda.time.ReadablePeriod) period33, 0);
        org.joda.time.DateMidnight.Property property38 = dateMidnight23.monthOfYear();
        org.joda.time.DateMidnight dateMidnight39 = property38.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate40 = dateMidnight39.toLocalDate();
        mutableDateTime4.setMillis((org.joda.time.ReadableInstant) dateMidnight39);
        java.util.Date date47 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate48 = org.joda.time.LocalDate.fromDateFields(date47);
        int int49 = localDate48.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        int int52 = dateTimeZone50.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime53 = localDate48.toDateTimeAtCurrentTime(dateTimeZone50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = org.joda.time.format.ISODateTimeFormat.weekyearWeekDay();
        boolean boolean55 = dateTimeFormatter54.isParser();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone59 = dateTimeZone58.toTimeZone();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) (-1), dateTimeZone58);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter54.withZone(dateTimeZone58);
        long long63 = dateTimeZone50.getMillisKeepLocal(dateTimeZone58, 0L);
        org.joda.time.DateTime dateTime64 = org.joda.time.DateTime.now(dateTimeZone58);
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight39.withZoneRetainFields(dateTimeZone58);
        org.joda.time.DateMidnight dateMidnight66 = org.joda.time.DateMidnight.now(dateTimeZone58);
        int int68 = dateTimeZone58.getStandardOffset(2260543248000016L);
        long long70 = dateTimeZone58.previousTransition(0L);
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight((-2240524800000L), dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1899 + "'", int18 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 16 + "'", int21 == 16);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT1M" + "'", str30, "PT1M");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(localDate40);
// flaky:         org.junit.Assert.assertEquals(date47.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1899 + "'", int49 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 16 + "'", int52 == 16);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeFormatter54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(timeZone59);
        org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 16 + "'", int68 == 16);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
    }

    @Test
    public void test12334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12334");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = timeOfDay8.toDateTimeToday(dateTimeZone9);
        mutableDateTime3.setZoneRetainFields(dateTimeZone9);
        mutableDateTime3.setSecondOfMinute((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        int int16 = dateTimeZone14.getStandardOffset((long) 100);
        mutableDateTime3.setZone(dateTimeZone14);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology22 = localTime21.getChronology();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((-1L), (long) 17, chronology22);
        mutableDateTime3.setChronology(chronology22);
        mutableDateTime3.setHourOfDay(17);
        mutableDateTime3.setSecondOfDay(22);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod();
        mutablePeriod29.addWeeks((int) (byte) 100);
        org.joda.time.Chronology chronology33 = null;
        mutablePeriod29.setPeriod((long) 15, chronology33);
        mutablePeriod29.setMinutes(1970);
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology42 = localTime41.getChronology();
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) 5, chronology42);
        org.joda.time.Chronology chronology44 = chronology42.withUTC();
        mutablePeriod29.setPeriod((long) 0, (long) 1, chronology44);
        org.joda.time.DateTimeField dateTimeField46 = chronology44.hourOfDay();
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((long) 2);
        java.util.Locale.LanguageRange[] languageRangeArray49 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList50 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList50, languageRangeArray49);
        java.util.Locale[] localeArray52 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList53 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList53, localeArray52);
        java.util.List<java.util.Locale> localeList55 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.util.Locale>) localeList53);
        java.util.Locale locale58 = new java.util.Locale("2022-02-22T07:16:11.187Z", "February");
        boolean boolean59 = localeList55.add(locale58);
        java.lang.String str60 = dateTimeField46.getAsShortText((org.joda.time.ReadablePartial) localTime48, locale58);
        int int62 = dateTimeField46.getMaximumValue(116000L);
        java.lang.String str64 = dateTimeField46.getAsText((long) 1439);
        java.lang.String str66 = dateTimeField46.getAsText((long) (short) 0);
        mutableDateTime3.setRounding(dateTimeField46, 0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(languageRangeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localeList55);
        org.junit.Assert.assertEquals(locale58.toString(), "2022-02-22t07:16:11.187z_FEBRUARY");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0" + "'", str60, "0");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 23 + "'", int62 == 23);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0" + "'", str64, "0");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "0" + "'", str66, "0");
    }

    @Test
    public void test12335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12335");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(dateTimeZone0);
        int int5 = localDate4.getEra();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str8 = dateTimeZone7.getID();
        java.lang.String str10 = dateTimeZone7.getShortName((long) (short) 100);
        org.joda.time.Interval interval11 = localDate4.toInterval(dateTimeZone7);
        org.joda.time.LocalDate.Property property12 = localDate4.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((java.lang.Object) property12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDate$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.016" + "'", str8, "+00:00:00.016");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.016" + "'", str10, "+00:00:00.016");
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test12336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12336");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        int int6 = dateTimeZone4.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 16, dateTimeZone4);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) 10, chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withMinuteOfHour(0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 10, chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.withDurationAdded(readableDuration20, (int) (byte) 10);
        boolean boolean23 = dateTimeZone4.isLocalDateTimeGap(localDateTime13);
        boolean boolean24 = dateTimeZone1.isLocalDateTimeGap(localDateTime13);
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayVariant(locale27);
        java.util.Set<java.lang.String> strSet29 = locale26.getUnicodeLocaleKeys();
        java.lang.String str30 = dateTimeZone1.getShortName((long) 15, locale26);
        java.util.TimeZone timeZone31 = dateTimeZone1.toTimeZone();
        java.util.TimeZone timeZone32 = dateTimeZone1.toTimeZone();
        timeZone32.setID("0032-02-22T00:00:00.003+00:00:00.016");
        java.util.Calendar calendar35 = java.util.Calendar.getInstance(timeZone32);
        java.util.TimeZone.setDefault(timeZone32);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16 + "'", int6 == 16);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.016" + "'", str30, "+00:00:00.016");
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(calendar35);
// flaky:         org.junit.Assert.assertEquals(calendar35.toString(), "java.util.GregorianCalendar[time=1645514666505,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=0032-02-22T00:00:00.003+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=26,MILLISECOND=521,ZONE_OFFSET=16,DST_OFFSET=0]");
    }

    @Test
    public void test12337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12337");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMillis((int) (short) 0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int9 = localDateTime2.get(dateTimeFieldType8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.minusMinutes(1899);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.monthOfYear();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.year();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.minusYears((-774));
        org.joda.time.Chronology chronology16 = localDateTime11.getChronology();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology16);
    }

    @Test
    public void test12338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12338");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfCentury();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        long long4 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property5 = dateTime1.yearOfCentury();
        org.joda.time.DateTime dateTime6 = property5.getDateTime();
        long long7 = dateTime6.getMillis();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1645514666529L + "'", long4 == 1645514666529L);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645514666529L + "'", long7 == 1645514666529L);
    }

    @Test
    public void test12339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12339");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime.Property property2 = dateTime1.yearOfCentury();
        org.joda.time.DateTime dateTime3 = dateTime1.withTimeAtStartOfDay();
        java.util.Date date9 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.fromDateFields(date9);
        int int11 = localDate10.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        int int14 = dateTimeZone12.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime15 = localDate10.toDateTimeAtCurrentTime(dateTimeZone12);
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay(dateTimeZone12);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay16.plusDays((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        int int22 = dateTimeZone20.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 1899, dateTimeZone20);
        org.joda.time.DateTime dateTime24 = yearMonthDay16.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = dateTime3.withZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTime dateTime27 = dateTime3.minusDays(1439);
        org.joda.time.DateTime.Property property28 = dateTime3.millisOfDay();
        org.joda.time.DateTime.Property property29 = dateTime3.yearOfEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertEquals(date9.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1899 + "'", int11 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 16 + "'", int14 == 16);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 16 + "'", int22 == 16);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test12340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12340");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime5 = dateTime3.plusSeconds(17);
        org.joda.time.DateTime dateTime7 = dateTime3.withDayOfMonth(2);
        org.joda.time.DateTime dateTime9 = dateTime7.withMillisOfSecond(29);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        boolean boolean11 = dateTime7.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime.Property property12 = dateTime7.dayOfWeek();
        org.joda.time.DateTime dateTime14 = property12.addWrapFieldToCopy(437);
        org.joda.time.DateTime dateTime16 = dateTime14.minusMillis(980);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 5, chronology21);
        org.joda.time.TimeOfDay timeOfDay23 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 3172001, chronology21);
        org.joda.time.DurationField durationField24 = chronology21.halfdays();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.minuteOfDay();
        org.joda.time.DateTime dateTime26 = dateTime16.withChronology(chronology21);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = org.joda.time.format.ISODateTimeFormat.basicWeekDate();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        int int30 = dateTimeZone28.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone28);
        mutableDateTime31.setMillis((long) 1);
        java.lang.String str34 = dateTimeFormatter27.print((org.joda.time.ReadableInstant) mutableDateTime31);
        mutableDateTime31.addDays(19);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime31.weekyear();
        boolean boolean38 = dateTime26.isBefore((org.joda.time.ReadableInstant) mutableDateTime31);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime31.setDateTime(26659848, 26570163, 71950, (-70), 20, 26227847, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -70 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 16 + "'", int30 == 16);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970W014" + "'", str34, "1970W014");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test12341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12341");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("24");
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(0);
        org.joda.time.DateTime dateTime5 = dateTime1.withDayOfYear(176);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
    }

    @Test
    public void test12342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12342");
        java.util.Date date8 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date8);
        int int10 = localDate9.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime14 = localDate9.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.withCenturyOfEra((int) (short) 1);
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period23 = period19.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period23.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.months();
        int int27 = period25.get(durationFieldType26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight15.withPeriodAdded((org.joda.time.ReadablePeriod) period25, 0);
        org.joda.time.DateMidnight.Property property30 = dateMidnight15.monthOfYear();
        org.joda.time.DateMidnight dateMidnight31 = property30.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight33 = property30.addWrapFieldToCopy(3);
        org.joda.time.DateMidnight dateMidnight35 = property30.addToCopy((int) (short) 1);
        int int36 = property30.getMaximumValue();
        org.joda.time.DateMidnight dateMidnight37 = property30.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight38 = property30.roundHalfEvenCopy();
        org.junit.Assert.assertEquals(date8.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1899 + "'", int10 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1M" + "'", str22, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 12 + "'", int36 == 12);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(dateMidnight38);
    }

    @Test
    public void test12343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12343");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        int int5 = dateTimeZone3.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone3);
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7, 0);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime12 = property11.roundHalfEven();
        boolean boolean13 = interval2.isBefore((org.joda.time.ReadableInstant) mutableDateTime12);
        int int14 = mutableDateTime12.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType15.getDurationType();
        mutableDateTime12.set(dateTimeFieldType15, 15);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str22 = locale19.getDisplayVariant(locale21);
        java.util.Calendar calendar23 = mutableDateTime12.toCalendar(locale19);
        calendar23.setFirstDayOfWeek(2);
        int int26 = calendar23.getWeekYear();
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.fromCalendarFields(calendar23);
        int int28 = localDate27.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645488899984,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=15,SECOND=0,MILLISECOND=0,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
    }

    @Test
    public void test12344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12344");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay8 = property7.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay10 = property7.addToCopy(0);
        int int11 = property7.getMinimumValueOverall();
        org.joda.time.TimeOfDay timeOfDay13 = property7.addToCopy((int) ' ');
        java.lang.String str14 = property7.getAsShortText();
        org.joda.time.TimeOfDay timeOfDay16 = property7.addToCopy((-4));
        org.joda.time.TimeOfDay timeOfDay18 = property7.addNoWrapToCopy(12160);
        java.lang.String str19 = property7.getAsText();
        org.joda.time.TimeOfDay timeOfDay20 = property7.getTimeOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "52" + "'", str14, "52");
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "52" + "'", str19, "52");
        org.junit.Assert.assertNotNull(timeOfDay20);
    }

    @Test
    public void test12345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12345");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        calendar0.setTimeInMillis((long) 52);
        org.joda.time.TimeOfDay timeOfDay4 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        int int5 = calendar0.getWeekYear();
        calendar0.setTimeInMillis(2612L);
        calendar0.setLenient(true);
        boolean boolean10 = calendar0.isLenient();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=2612,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=0032-02-22T00:00:00.003+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=2,MILLISECOND=628,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test12346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12346");
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology8 = localTime7.getChronology();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.Period period10 = new org.joda.time.Period((long) 11, (-2234643900000L), chronology8);
        org.joda.time.Period period11 = new org.joda.time.Period((long) 3, chronology8);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) (-1), (long) 8, chronology8);
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromMillisOfDay(5180457600000L, chronology8);
        org.joda.time.LocalTime.Property property14 = localTime13.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime16 = property14.addNoWrapToCopy(26550673);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The addition exceeded the boundaries of LocalTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test12347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12347");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime.Property property1 = localTime0.millisOfSecond();
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology6 = localTime5.getChronology();
        org.joda.time.Interval interval7 = new org.joda.time.Interval((-1L), (long) 17, chronology6);
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.millis();
        org.joda.time.Period period9 = interval7.toPeriod(periodType8);
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((int) '4', (-1), (int) (short) 100, (-1));
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology20 = localTime19.getChronology();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((-1L), (long) 17, chronology20);
        mutablePeriod14.add((long) 26163694, chronology20);
        org.joda.time.Interval interval23 = interval7.withPeriodAfterStart((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = timeOfDay32.toDateTimeToday(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime34.withCenturyOfEra(10);
        boolean boolean37 = dateTime36.isEqualNow();
        org.joda.time.Chronology chronology38 = dateTime36.getChronology();
        org.joda.time.TimeOfDay timeOfDay39 = new org.joda.time.TimeOfDay(15, 5, chronology38);
        org.joda.time.DurationField durationField40 = chronology38.years();
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) 26164018, chronology38);
        mutablePeriod14.add((long) (short) -1, chronology38);
        mutablePeriod14.setYears((int) (short) 10);
        mutablePeriod14.setYears(26321253);
        org.joda.time.LocalTime localTime47 = localTime0.plus((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(localTime47);
    }

    @Test
    public void test12348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12348");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period3 = org.joda.time.Period.minutes(1);
        java.lang.String str4 = period3.toString();
        org.joda.time.Period period5 = period1.withFields((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Period period7 = period5.plusMillis(100);
        org.joda.time.Period period8 = period5.negated();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType9.getDurationType();
        boolean boolean11 = period5.isSupported(durationFieldType10);
        org.joda.time.Weeks weeks12 = period5.toStandardWeeks();
        org.joda.time.Period period14 = period5.minusDays(3);
        int int15 = period14.getMinutes();
        org.joda.time.Period period17 = period14.withMonths(439);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        int int20 = dateTimeZone18.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(dateTimeZone18);
        org.joda.time.TimeOfDay timeOfDay26 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime28 = timeOfDay26.toDateTimeToday(dateTimeZone27);
        mutableDateTime21.setZoneRetainFields(dateTimeZone27);
        org.joda.time.Chronology chronology30 = null;
        mutableDateTime21.setChronology(chronology30);
        int int32 = mutableDateTime21.getHourOfDay();
        int int33 = mutableDateTime21.getMonthOfYear();
        org.joda.time.Duration duration34 = period14.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime21);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT1M" + "'", str4, "PT1M");
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(weeks12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 16 + "'", int20 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 7 + "'", int32 == 7);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(duration34);
    }

    @Test
    public void test12349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12349");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = localDate6.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.withYear(1899);
        org.joda.time.Interval interval15 = yearMonthDay12.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = yearMonthDay12.getFieldTypes();
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay12.year();
        org.joda.time.YearMonthDay yearMonthDay18 = property17.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay19 = property17.withMinimumValue();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.withHourOfDay(3);
        int int24 = dateTime23.getSecondOfMinute();
        int int25 = dateTime23.getMinuteOfHour();
        org.joda.time.DateTime.Property property26 = dateTime23.centuryOfEra();
        java.util.Date date35 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate36 = org.joda.time.LocalDate.fromDateFields(date35);
        int int37 = localDate36.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        int int40 = dateTimeZone38.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime41 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone38);
        org.joda.time.Period period44 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period46 = org.joda.time.Period.minutes(1);
        java.lang.String str47 = period46.toString();
        org.joda.time.Period period48 = period44.withFields((org.joda.time.ReadablePeriod) period46);
        org.joda.time.Period period50 = period48.plusMillis(100);
        org.joda.time.Period period51 = period48.negated();
        org.joda.time.Period period53 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period55 = org.joda.time.Period.minutes(1);
        java.lang.String str56 = period55.toString();
        org.joda.time.Period period57 = period53.withFields((org.joda.time.ReadablePeriod) period55);
        org.joda.time.Period period59 = period57.plusMillis(100);
        boolean boolean60 = period51.equals((java.lang.Object) period59);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period62 = period51.withFields((org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Chronology chronology64 = null;
        mutablePeriod61.setPeriod(readableDuration63, chronology64);
        org.joda.time.DateMidnight dateMidnight66 = dateMidnight42.minus((org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.Period period68 = org.joda.time.Period.minutes(1);
        org.joda.time.DateMidnight dateMidnight70 = dateMidnight66.withPeriodAdded((org.joda.time.ReadablePeriod) period68, (int) (short) 1);
        int int71 = period68.getYears();
        org.joda.time.DateTime dateTime72 = dateTime23.plus((org.joda.time.ReadablePeriod) period68);
        org.joda.time.DateTime dateTime73 = dateTime72.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime75 = dateTime73.withDayOfYear(11);
        int int76 = dateTime73.getYear();
        org.joda.time.DateTimeZone dateTimeZone77 = dateTime73.getZone();
        long long80 = dateTimeZone77.adjustOffset((long) 999, false);
        org.joda.time.DateTime dateTime81 = yearMonthDay19.toDateTimeAtMidnight(dateTimeZone77);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime83 = dateTime81.minusDays(26419302);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: -9223372012550400000 + -2282627692800000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1899 + "'", int7 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 26 + "'", int24 == 26);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 24 + "'", int25 == 24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertEquals(date35.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1899 + "'", int37 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 16 + "'", int40 == 16);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PT1M" + "'", str47, "PT1M");
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT1M" + "'", str56, "PT1M");
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(dateMidnight66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(dateMidnight70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 2022 + "'", int76 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 999L + "'", long80 == 999L);
        org.junit.Assert.assertNotNull(dateTime81);
    }

    @Test
    public void test12350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12350");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.Interval interval5 = new org.joda.time.Interval((-1L), (long) 17, chronology4);
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime12 = timeOfDay10.toDateTimeToday(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime16 = dateTime12.plusDays((int) (byte) -1);
        java.util.Date date17 = dateTime16.toDate();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Interval interval19 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime16, readableDuration18);
        org.joda.time.Period period20 = interval19.toPeriod();
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = timeOfDay25.toDateTimeToday(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime31 = dateTime27.plusDays((int) (byte) -1);
        java.util.Date date32 = dateTime31.toDate();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime31, readableDuration33);
        org.joda.time.Interval interval37 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        int int40 = dateTimeZone38.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(dateTimeZone38);
        org.joda.time.ReadableDuration readableDuration42 = null;
        mutableDateTime41.add(readableDuration42, 0);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime41.dayOfWeek();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime41.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime47 = property46.roundHalfEven();
        boolean boolean48 = interval37.isBefore((org.joda.time.ReadableInstant) mutableDateTime47);
        org.joda.time.TimeOfDay timeOfDay53 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray54 = timeOfDay53.getFields();
        org.joda.time.DateTimeZone dateTimeZone55 = null;
        org.joda.time.DateTime dateTime56 = timeOfDay53.toDateTimeToday(dateTimeZone55);
        org.joda.time.DateTime dateTime58 = dateTime56.withYearOfCentury(16);
        boolean boolean59 = interval37.isAfter((org.joda.time.ReadableInstant) dateTime58);
        boolean boolean60 = interval34.abuts((org.joda.time.ReadableInterval) interval37);
        org.joda.time.Duration duration61 = interval37.toDuration();
        org.joda.time.Interval interval62 = interval19.withDurationAfterStart((org.joda.time.ReadableDuration) duration61);
        org.joda.time.Interval interval63 = interval5.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration61);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        int int70 = dateTimeZone68.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime(dateTimeZone68);
        org.joda.time.TimeOfDay timeOfDay76 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime78 = timeOfDay76.toDateTimeToday(dateTimeZone77);
        mutableDateTime71.setZoneRetainFields(dateTimeZone77);
        mutableDateTime71.setSecondOfMinute((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.getDefault();
        int int84 = dateTimeZone82.getStandardOffset((long) 100);
        mutableDateTime71.setZone(dateTimeZone82);
        org.joda.time.LocalTime localTime89 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology90 = localTime89.getChronology();
        org.joda.time.Interval interval91 = new org.joda.time.Interval((-1L), (long) 17, chronology90);
        mutableDateTime71.setChronology(chronology90);
        org.joda.time.DateTimeField dateTimeField93 = chronology90.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField94 = chronology90.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod95 = new org.joda.time.MutablePeriod((long) (-4), (long) 31, chronology90);
        org.joda.time.MutableDateTime mutableDateTime96 = new org.joda.time.MutableDateTime(chronology90);
        org.joda.time.Period period97 = new org.joda.time.Period(5180457600000L, chronology90);
        org.joda.time.Period period98 = new org.joda.time.Period((long) 10, chronology90);
        org.joda.time.Interval interval99 = interval5.withPeriodAfterStart((org.joda.time.ReadablePeriod) period98);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 16 + "'", int40 == 16);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 16 + "'", int70 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 16 + "'", int84 == 16);
        org.junit.Assert.assertNotNull(chronology90);
        org.junit.Assert.assertNotNull(dateTimeField93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(interval99);
    }

    @Test
    public void test12351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12351");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = timeOfDay7.getFields();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.DateTime dateTime10 = timeOfDay7.toDateTimeToday(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.plus((long) '4');
        org.joda.time.DateTime.Property property13 = dateTime10.yearOfCentury();
        int int14 = property13.getMinimumValue();
        java.util.Calendar.Builder builder15 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder18 = builder15.set(2, 32772);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str22 = locale19.getDisplayVariant(locale21);
        java.util.Calendar.Builder builder23 = builder15.setLocale(locale21);
        java.lang.String str24 = property13.getAsText(locale21);
        java.lang.String str25 = locale21.getDisplayLanguage();
        java.util.Locale locale28 = new java.util.Locale("PeriodType[Weeks]", "PT-1M3172S");
        java.lang.String str29 = locale28.getScript();
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray35 = timeOfDay34.getFields();
        org.joda.time.Period period37 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period39 = org.joda.time.Period.minutes(1);
        java.lang.String str40 = period39.toString();
        org.joda.time.Period period41 = period37.withFields((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Period period43 = period41.plusMillis(100);
        org.joda.time.Period period44 = period41.negated();
        org.joda.time.Period period46 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period48 = org.joda.time.Period.minutes(1);
        java.lang.String str49 = period48.toString();
        org.joda.time.Period period50 = period46.withFields((org.joda.time.ReadablePeriod) period48);
        org.joda.time.Period period52 = period50.plusMillis(100);
        boolean boolean53 = period44.equals((java.lang.Object) period52);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period55 = period44.withFields((org.joda.time.ReadablePeriod) mutablePeriod54);
        org.joda.time.TimeOfDay timeOfDay56 = timeOfDay34.plus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.TimeOfDay.Property property57 = timeOfDay34.secondOfMinute();
        java.lang.String str58 = property57.getAsText();
        java.lang.String str59 = property57.toString();
        java.util.Locale locale61 = new java.util.Locale("2022-02-22T07:17:09.936Z/2022-02-22T07:17:09.936Z");
        java.lang.String str62 = property57.getAsShortText(locale61);
        java.lang.String str63 = locale61.getDisplayLanguage();
        java.lang.String str64 = locale28.getDisplayVariant(locale61);
        java.lang.String str65 = locale21.getDisplayName(locale61);
        java.lang.String str68 = nameProvider0.getName(locale21, "2022-02-22T07:19:40.750+00:00:00.016", "1899/03/10 1:35:00");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "22" + "'", str24, "22");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals(locale28.toString(), "periodtype[weeks]_PT-1M3172S");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(dateTimeFieldArray35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT1M" + "'", str40, "PT1M");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT1M" + "'", str49, "PT1M");
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(timeOfDay56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "52" + "'", str58, "52");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Property[secondOfMinute]" + "'", str59, "Property[secondOfMinute]");
        org.junit.Assert.assertEquals(locale61.toString(), "2022-02-22t07:17:09.936z/2022-02-22t07:17:09.936z");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "52" + "'", str62, "52");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2022-02-22t07:17:09.936z/2022-02-22t07:17:09.936z" + "'", str63, "2022-02-22t07:17:09.936z/2022-02-22t07:17:09.936z");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNull(str68);
    }

    @Test
    public void test12352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12352");
        java.util.Date date6 = new java.util.Date((int) (short) 10, 86340000, 20, 1961, 1899, 26217);
        date6.setHours(99);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date6);
        int int10 = date6.getSeconds();
        int int11 = date6.getMonth();
        org.junit.Assert.assertEquals(date6.toString(), "Thu Apr 17 03:55:57 GMT+00:00 7196910");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 57 + "'", int10 == 57);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
    }

    @Test
    public void test12353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12353");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((int) '4', (-1), (int) (short) 100, (-1));
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology13 = localTime12.getChronology();
        org.joda.time.Interval interval14 = new org.joda.time.Interval((-1L), (long) 17, chronology13);
        mutablePeriod7.add((long) 26163694, chronology13);
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 99, 4233600010L, periodType2, chronology13);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfMonth();
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test12354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12354");
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTime.Property property5 = dateTime4.secondOfMinute();
        org.joda.time.Interval interval6 = new org.joda.time.Interval(readableDuration2, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.time();
        org.joda.time.Period period8 = interval6.toPeriod(periodType7);
        org.joda.time.PeriodType periodType9 = periodType7.withMillisRemoved();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) 10, chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withMinuteOfHour(0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 10, chronology16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime14.withDurationAdded(readableDuration21, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime14.withMillisOfDay((int) ' ');
        org.joda.time.DateTime dateTime26 = localDateTime25.toDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withYearOfEra(3);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.plusMonths(26);
        org.joda.time.Chronology chronology31 = localDateTime25.getChronology();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(1645514648113L, 1034086270943L, periodType9, chronology31);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(chronology31);
    }

    @Test
    public void test12355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12355");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.Period period7 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period9 = org.joda.time.Period.minutes(1);
        java.lang.String str10 = period9.toString();
        org.joda.time.Period period11 = period7.withFields((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period13 = period11.plusMillis(100);
        org.joda.time.Period period14 = period11.negated();
        org.joda.time.Period period16 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period18 = org.joda.time.Period.minutes(1);
        java.lang.String str19 = period18.toString();
        org.joda.time.Period period20 = period16.withFields((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Period period22 = period20.plusMillis(100);
        boolean boolean23 = period14.equals((java.lang.Object) period22);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period25 = period14.withFields((org.joda.time.ReadablePeriod) mutablePeriod24);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay4.plus((org.joda.time.ReadablePeriod) period14);
        org.joda.time.TimeOfDay.Property property27 = timeOfDay4.secondOfMinute();
        int int28 = property27.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay29 = property27.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay31 = property27.addWrapFieldToCopy(7);
        org.joda.time.TimeOfDay timeOfDay32 = property27.getTimeOfDay();
        java.util.Locale locale35 = new java.util.Locale("1970W014", "PT0.018S");
        java.lang.String str36 = locale35.getDisplayScript();
        java.lang.String str37 = locale35.getCountry();
        int int38 = property27.getMaximumTextLength(locale35);
        org.joda.time.TimeOfDay timeOfDay40 = property27.addWrapFieldToCopy(26615518);
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT1M" + "'", str10, "PT1M");
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT1M" + "'", str19, "PT1M");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertEquals(locale35.toString(), "1970w014_PT0.018S");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT0.018S" + "'", str37, "PT0.018S");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(timeOfDay40);
    }

    @Test
    public void test12356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12356");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str4 = dateTimeZone3.getID();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        int int8 = dateTimeZone6.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 16, dateTimeZone6);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 10, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMinuteOfHour(0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 10, chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime15.withDurationAdded(readableDuration22, (int) (byte) 10);
        boolean boolean25 = dateTimeZone6.isLocalDateTimeGap(localDateTime15);
        boolean boolean26 = dateTimeZone3.isLocalDateTimeGap(localDateTime15);
        org.joda.time.Chronology chronology27 = localDateTime15.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval28 = new org.joda.time.Interval(1645514647984L, 81L, chronology27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.016" + "'", str4, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
    }

    @Test
    public void test12357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12357");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = org.joda.time.format.ISODateTimeFormat.dateHourMinute();
        boolean boolean2 = dateTimeFormatter1.isParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.parse("114847+0000", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"114847+0000\" is malformed at \"+0000\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test12358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12358");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.LocalDate localDate9 = property7.roundHalfEvenCopy();
        boolean boolean10 = property7.isLeap();
        org.joda.time.LocalDate localDate11 = property7.roundCeilingCopy();
        int int12 = localDate11.getDayOfWeek();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test12359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12359");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((int) (short) 0);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 10, chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod15, 15);
        org.joda.time.LocalDateTime.Property property18 = localDateTime10.dayOfYear();
        int int19 = localDateTime10.getYear();
        org.joda.time.LocalDateTime.Property property20 = localDateTime10.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withYear((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.plusWeeks(8);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusMillis((-3172002));
        int int28 = localDateTime25.getMillisOfDay();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test12360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12360");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int2 = calendar0.getMaximum((int) (short) 0);
        int int4 = calendar0.getLeastMaximum(8);
        int int5 = calendar0.getWeeksInWeekYear();
        calendar0.set((int) (short) -1, 32770, 2000, 34, (-5599659), 506);
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
        calendar0.setFirstDayOfWeek(0);
        calendar0.set(694, 0, 3172017, 89, 57, 26188548);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=0032-02-22T00:00:00.003+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=0,minimalDaysInFirstWeek=1,ERA=1,YEAR=694,MONTH=0,WEEK_OF_YEAR=38,WEEK_OF_MONTH=3,DAY_OF_MONTH=3172017,DAY_OF_YEAR=262,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=6,HOUR_OF_DAY=89,MINUTE=57,SECOND=26188548,MILLISECOND=901,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test12361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12361");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) (byte) 10, chronology1);
    }

    @Test
    public void test12362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12362");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period3 = org.joda.time.Period.minutes(1);
        java.lang.String str4 = period3.toString();
        org.joda.time.Period period5 = period1.withFields((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Period period7 = period5.plusMillis(100);
        org.joda.time.Period period9 = period5.minusMillis((int) (byte) 1);
        int int10 = period5.size();
        org.joda.time.Period period12 = period5.plusSeconds((-4));
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT1M" + "'", str4, "PT1M");
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 8 + "'", int10 == 8);
        org.junit.Assert.assertNotNull(period12);
    }

    @Test
    public void test12363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12363");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        boolean boolean1 = calendar0.isWeekDateSupported();
        calendar0.setTimeInMillis((long) 52);
        org.joda.time.TimeOfDay timeOfDay4 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
        int int5 = calendar0.getWeekYear();
        calendar0.setLenient(false);
        int int8 = calendar0.getWeekYear();
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=52,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=0032-02-22T00:00:00.003+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=68,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test12364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12364");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateMidnight dateMidnight3 = org.joda.time.DateMidnight.now(dateTimeZone1);
        org.joda.time.DateMidnight.Property property4 = dateMidnight3.era();
        int int5 = dateMidnight3.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 20 + "'", int5 == 20);
    }

    @Test
    public void test12365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12365");
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = timeOfDay7.toDateTimeToday(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withCenturyOfEra(10);
        boolean boolean12 = dateTime11.isEqualNow();
        org.joda.time.Chronology chronology13 = dateTime11.getChronology();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(15, 5, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.clockhourOfDay();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) 11, chronology13);
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime16.toMutableDateTime();
        mutableDateTime17.addDays(15);
        mutableDateTime17.addMillis(26219615);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
    }

    @Test
    public void test12366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12366");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime10 = dateTime6.plusDays((int) (byte) -1);
        java.util.Date date11 = dateTime10.toDate();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, readableDuration12);
        org.joda.time.Interval interval16 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        int int19 = dateTimeZone17.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone17);
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21, 0);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.dayOfWeek();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime20.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime26 = property25.roundHalfEven();
        boolean boolean27 = interval16.isBefore((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray33 = timeOfDay32.getFields();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = timeOfDay32.toDateTimeToday(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.withYearOfCentury(16);
        boolean boolean38 = interval16.isAfter((org.joda.time.ReadableInstant) dateTime37);
        boolean boolean39 = interval13.abuts((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Duration duration40 = interval16.toDuration();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        int int43 = dateTimeZone41.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(dateTimeZone41);
        org.joda.time.ReadableDuration readableDuration45 = null;
        mutableDateTime44.add(readableDuration45, 0);
        org.joda.time.Period period49 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period51 = org.joda.time.Period.minutes(1);
        java.lang.String str52 = period51.toString();
        org.joda.time.Period period53 = period49.withFields((org.joda.time.ReadablePeriod) period51);
        org.joda.time.Period period55 = period53.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType56 = org.joda.time.DurationFieldType.months();
        int int57 = period55.get(durationFieldType56);
        mutableDateTime44.add(durationFieldType56, 7);
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime44.dayOfYear();
        boolean boolean61 = mutableDateTime44.isEqualNow();
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime44.era();
        org.joda.time.MutableDateTime mutableDateTime63 = mutableDateTime44.toMutableDateTimeISO();
        boolean boolean64 = interval16.isBefore((org.joda.time.ReadableInstant) mutableDateTime63);
        org.joda.time.TimeOfDay timeOfDay65 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay timeOfDay67 = timeOfDay65.plusSeconds(26164018);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        int int70 = dateTimeZone68.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime(dateTimeZone68);
        org.joda.time.ReadableDuration readableDuration72 = null;
        mutableDateTime71.add(readableDuration72, 0);
        org.joda.time.MutableDateTime.Property property75 = mutableDateTime71.dayOfWeek();
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime71.yearOfEra();
        org.joda.time.LocalTime localTime79 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology80 = localTime79.getChronology();
        org.joda.time.MutableDateTime mutableDateTime81 = new org.joda.time.MutableDateTime((long) 5, chronology80);
        org.joda.time.Chronology chronology82 = chronology80.withUTC();
        mutableDateTime71.setChronology(chronology80);
        org.joda.time.DateTimeField dateTimeField84 = chronology80.millisOfSecond();
        org.joda.time.TimeOfDay timeOfDay85 = timeOfDay65.withChronologyRetainFields(chronology80);
        java.lang.String str86 = chronology80.toString();
        org.joda.time.DateTimeField dateTimeField87 = chronology80.weekyearOfCentury();
        mutableDateTime63.setRounding(dateTimeField87);
        long long90 = dateTimeField87.roundHalfFloor(835176440124323000L);
        long long92 = dateTimeField87.roundHalfEven((long) 93);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 16 + "'", int19 == 16);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldArray33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 16 + "'", int43 == 16);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PT1M" + "'", str52, "PT1M");
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(timeOfDay65);
        org.junit.Assert.assertNotNull(timeOfDay67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 16 + "'", int70 == 16);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(timeOfDay85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "ISOChronology[UTC]" + "'", str86, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 835176445920000000L + "'", long90 == 835176445920000000L);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
    }

    @Test
    public void test12367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12367");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period12 = org.joda.time.Period.minutes(1);
        java.lang.String str13 = period12.toString();
        org.joda.time.Period period14 = period10.withFields((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period16 = period14.plusMillis(100);
        org.joda.time.Period period17 = period14.negated();
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period23 = period19.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period23.plusMillis(100);
        boolean boolean26 = period17.equals((java.lang.Object) period25);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period28 = period17.withFields((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.LocalDate localDate29 = localDate8.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.Period period31 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period33 = org.joda.time.Period.minutes(1);
        java.lang.String str34 = period33.toString();
        org.joda.time.Period period35 = period31.withFields((org.joda.time.ReadablePeriod) period33);
        int int36 = period31.getMinutes();
        org.joda.time.Period period37 = period31.toPeriod();
        org.joda.time.LocalDate localDate38 = localDate29.plus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.LocalDate.Property property39 = localDate38.monthOfYear();
        org.joda.time.LocalDate.Property property40 = localDate38.yearOfEra();
        org.joda.time.LocalDate localDate41 = property40.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate42 = property40.roundHalfEvenCopy();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT1M" + "'", str13, "PT1M");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1M" + "'", str22, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT1M" + "'", str34, "PT1M");
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(localDate42);
    }

    @Test
    public void test12368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12368");
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = timeOfDay7.toDateTimeToday(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withCenturyOfEra(10);
        boolean boolean12 = dateTime11.isEqualNow();
        org.joda.time.Chronology chronology13 = dateTime11.getChronology();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(15, 5, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.clockhourOfDay();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(1L, chronology13);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(chronology13);
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Period period20 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period22 = org.joda.time.Period.minutes(1);
        java.lang.String str23 = period22.toString();
        org.joda.time.Period period24 = period20.withFields((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Period period26 = period24.plusMillis(100);
        org.joda.time.LocalTime localTime27 = localTime18.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.LocalTime localTime28 = localTime17.plus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Period period30 = period24.withMillis(5);
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray39 = timeOfDay38.getFields();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.DateTime dateTime41 = timeOfDay38.toDateTimeToday(dateTimeZone40);
        org.joda.time.Period period43 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period45 = org.joda.time.Period.minutes(1);
        java.lang.String str46 = period45.toString();
        org.joda.time.Period period47 = period43.withFields((org.joda.time.ReadablePeriod) period45);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period49 = period43.normalizedStandard(periodType48);
        org.joda.time.Period period50 = new org.joda.time.Period(readableDuration33, (org.joda.time.ReadableInstant) dateTime41, periodType48);
        boolean boolean52 = periodType48.equals((java.lang.Object) 100L);
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology55 = localTime54.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.hours();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) 26163694, (long) 2022, periodType48, chronology55);
        org.joda.time.Period period60 = period24.normalizedStandard(periodType48);
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.TimeOfDay timeOfDay64 = new org.joda.time.TimeOfDay((long) 1899);
        org.joda.time.TimeOfDay timeOfDay66 = timeOfDay64.withMillisOfSecond(2);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.TimeOfDay timeOfDay72 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray73 = timeOfDay72.getFields();
        org.joda.time.DateTimeZone dateTimeZone74 = null;
        org.joda.time.DateTime dateTime75 = timeOfDay72.toDateTimeToday(dateTimeZone74);
        org.joda.time.Period period77 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period79 = org.joda.time.Period.minutes(1);
        java.lang.String str80 = period79.toString();
        org.joda.time.Period period81 = period77.withFields((org.joda.time.ReadablePeriod) period79);
        org.joda.time.PeriodType periodType82 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period83 = period77.normalizedStandard(periodType82);
        org.joda.time.Period period84 = new org.joda.time.Period(readableDuration67, (org.joda.time.ReadableInstant) dateTime75, periodType82);
        boolean boolean86 = periodType82.equals((java.lang.Object) 100L);
        org.joda.time.Period period87 = new org.joda.time.Period((org.joda.time.ReadablePartial) localTime62, (org.joda.time.ReadablePartial) timeOfDay66, periodType82);
        org.joda.time.ReadablePeriod readablePeriod88 = null;
        org.joda.time.LocalTime localTime89 = localTime62.minus(readablePeriod88);
        org.joda.time.LocalTime.Property property90 = localTime62.secondOfMinute();
        int int91 = localTime62.getMillisOfSecond();
        org.joda.time.DurationFieldType durationFieldType92 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime94 = localTime62.withFieldAdded(durationFieldType92, 26188858);
        boolean boolean95 = periodType48.isSupported(durationFieldType92);
        org.joda.time.MutablePeriod mutablePeriod96 = new org.joda.time.MutablePeriod(periodType48);
        int int97 = mutablePeriod96.getHours();
        org.joda.time.Period period98 = mutablePeriod96.toPeriod();
        int int99 = mutablePeriod96.getDays();
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT1M" + "'", str23, "PT1M");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(dateTimeFieldArray39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT1M" + "'", str46, "PT1M");
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(timeOfDay66);
        org.junit.Assert.assertNotNull(dateTimeFieldArray73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "PT1M" + "'", str80, "PT1M");
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 116 + "'", int91 == 116);
        org.junit.Assert.assertNotNull(durationFieldType92);
        org.junit.Assert.assertNotNull(localTime94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 0 + "'", int97 == 0);
        org.junit.Assert.assertNotNull(period98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 0 + "'", int99 == 0);
    }

    @Test
    public void test12369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12369");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = localDate6.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str18 = dateTimeZone17.getID();
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str23 = locale20.getDisplayVariant(locale22);
        java.lang.String str24 = dateTimeZone17.getName((long) 5, locale20);
        org.joda.time.DateTime dateTime25 = dateTime15.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight26 = yearMonthDay12.toDateMidnight(dateTimeZone17);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.era();
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight26.minusDays(50250);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusYears(26380750);
        int int32 = dateMidnight29.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight34 = dateMidnight29.withWeekOfWeekyear(26196);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26196 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1899 + "'", int7 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.016" + "'", str18, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.016" + "'", str24, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test12370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12370");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        org.joda.time.LocalDate localDate10 = property7.withMaximumValue();
        int int11 = localDate10.size();
        java.util.Date date17 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.fromDateFields(date17);
        int int19 = localDate18.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        int int22 = dateTimeZone20.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime23 = localDate18.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.YearMonthDay yearMonthDay24 = new org.joda.time.YearMonthDay(dateTimeZone20);
        org.joda.time.YearMonthDay yearMonthDay26 = yearMonthDay24.withYear(1899);
        org.joda.time.Interval interval27 = yearMonthDay24.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = yearMonthDay24.getFieldTypes();
        org.joda.time.YearMonthDay.Property property29 = yearMonthDay24.year();
        org.joda.time.YearMonthDay yearMonthDay30 = property29.withMaximumValue();
        java.util.Date date36 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate37 = org.joda.time.LocalDate.fromDateFields(date36);
        int int38 = localDate37.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        int int41 = dateTimeZone39.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime42 = localDate37.toDateTimeAtCurrentTime(dateTimeZone39);
        org.joda.time.YearMonthDay yearMonthDay43 = new org.joda.time.YearMonthDay(dateTimeZone39);
        org.joda.time.Interval interval44 = yearMonthDay30.toInterval(dateTimeZone39);
        org.joda.time.DateTime dateTime45 = localDate10.toDateTimeAtMidnight(dateTimeZone39);
        org.joda.time.DateTime dateTime47 = dateTime45.withMillis(2000L);
        int int48 = dateTime47.getYearOfEra();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertEquals(date17.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1899 + "'", int19 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 16 + "'", int22 == 16);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(yearMonthDay26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(yearMonthDay30);
        org.junit.Assert.assertEquals(date36.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1899 + "'", int38 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 16 + "'", int41 == 16);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1970 + "'", int48 == 1970);
    }

    @Test
    public void test12371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12371");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate6.plusWeeks((int) (short) 0);
        int int11 = localDate6.getDayOfWeek();
        java.util.Date date12 = localDate6.toDate();
        java.util.Date date16 = new java.util.Date(52, 26276193, 69);
        boolean boolean17 = date12.after(date16);
        org.joda.time.YearMonthDay yearMonthDay18 = org.joda.time.YearMonthDay.fromDateFields(date16);
        org.joda.time.Period period20 = org.joda.time.Period.millis(26164018);
        org.joda.time.Period period22 = period20.minusMillis((int) (byte) 0);
        org.joda.time.Period period24 = period20.plusSeconds(26254691);
        org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay18.plus((org.joda.time.ReadablePeriod) period20);
        int int26 = yearMonthDay25.getMonthOfYear();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Fri Mar 10 00:00:00 GMT+00:00 1899");
        org.junit.Assert.assertEquals(date16.toString(), "Fri Dec 08 00:00:00 GMT+00:00 2191634");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(yearMonthDay25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 12 + "'", int26 == 12);
    }

    @Test
    public void test12372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12372");
        java.util.Date date8 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date8);
        int int10 = localDate9.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime14 = localDate9.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone11);
        org.joda.time.Interval interval16 = dateMidnight15.toInterval();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        org.joda.time.DateTime dateTime19 = dateTime18.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str22 = dateTimeZone21.getID();
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str27 = locale24.getDisplayVariant(locale26);
        java.lang.String str28 = dateTimeZone21.getName((long) 5, locale24);
        org.joda.time.DateTime dateTime29 = dateTime19.withZoneRetainFields(dateTimeZone21);
        boolean boolean30 = dateMidnight15.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime32 = dateTime19.withMillis((long) 2);
        int int33 = dateTime19.getEra();
        org.joda.time.DateTime.Property property34 = dateTime19.dayOfYear();
        org.joda.time.DateTime dateTime35 = property34.withMinimumValue();
        org.joda.time.DateTime.Property property36 = dateTime35.dayOfWeek();
        org.junit.Assert.assertEquals(date8.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1899 + "'", int10 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.016" + "'", str22, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.016" + "'", str28, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test12373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12373");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minusSeconds(3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        java.lang.String str8 = timeOfDay4.toString(dateTimeFormatter7);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = dateTimeFormatter7.getPrinter();
        int int10 = dateTimePrinter9.estimatePrintedLength();
        int int11 = dateTimePrinter9.estimatePrintedLength();
        int int12 = dateTimePrinter9.estimatePrintedLength();
        int int13 = dateTimePrinter9.estimatePrintedLength();
        java.io.Writer writer14 = null;
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = timeOfDay21.toDateTimeToday(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = dateTime23.withCenturyOfEra(10);
        boolean boolean26 = dateTime25.isEqualNow();
        org.joda.time.Chronology chronology27 = dateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.secondOfMinute();
        org.joda.time.DurationField durationField29 = chronology27.hours();
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay(1645514222758L, chronology27);
        org.joda.time.DateTimeField dateTimeField31 = chronology27.millisOfDay();
        org.joda.time.DateMidnight dateMidnight34 = org.joda.time.DateMidnight.parse("2022-02-22T07:16:08.046Z");
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        int int40 = dateTimeZone38.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(dateTimeZone38);
        boolean boolean43 = dateTimeZone38.isStandardOffset((long) 10);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) 10, chronology45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime48 = property47.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime49 = property47.withMinimumValue();
        boolean boolean50 = dateTimeZone38.isLocalDateTimeGap(localDateTime49);
        org.joda.time.Interval interval51 = new org.joda.time.Interval((-1L), (long) 47, dateTimeZone38);
        int int53 = dateTimeZone38.getStandardOffset(1371555988124L);
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(37L, dateTimeZone38);
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((java.lang.Object) dateMidnight34, dateTimeZone38);
        java.util.Locale locale56 = java.util.Locale.JAPANESE;
        java.util.Locale.setDefault(locale56);
        java.lang.String str58 = locale56.getScript();
        // The following exception was thrown during execution in test generation
        try {
            dateTimePrinter9.printTo(writer14, (long) 26605689, chronology27, 26425048, dateTimeZone38, locale56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "00" + "'", str8, "00");
        org.junit.Assert.assertNotNull(dateTimePrinter9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 16 + "'", int40 == 16);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 16 + "'", int53 == 16);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
    }

    @Test
    public void test12374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12374");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        int int11 = localDateTime4.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.minusMillis(2000);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusWeeks(1899);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.minusHours((int) '4');
        org.joda.time.LocalDateTime.Property property18 = localDateTime13.millisOfSecond();
        long long19 = property18.remainder();
        org.joda.time.LocalDateTime localDateTime20 = property18.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime21 = property18.getLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withWeekOfWeekyear(2283969);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2283969 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test12375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12375");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = localDate6.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.withYear(1899);
        org.joda.time.Interval interval15 = yearMonthDay12.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = yearMonthDay12.getFieldTypes();
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay12.year();
        org.joda.time.YearMonthDay yearMonthDay19 = property17.addToCopy((int) (short) -1);
        int int20 = property17.getMaximumValueOverall();
        org.joda.time.YearMonthDay yearMonthDay21 = property17.getYearMonthDay();
        org.joda.time.DateTimeField dateTimeField22 = property17.getField();
        org.joda.time.DateTimeField dateTimeField23 = property17.getField();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1899 + "'", int7 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 292278993 + "'", int20 == 292278993);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test12376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12376");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder3 = builder0.set(2, 32772);
        java.util.Calendar.Builder builder6 = builder0.set(3, (int) (short) 0);
        java.util.Calendar.Builder builder9 = builder6.set(6, 26214);
        java.util.Calendar.Builder builder13 = builder9.setDate(26379890, 26379890, 79);
        java.util.Calendar.Builder builder17 = builder9.setWeekDate(28239, 100, 13);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        boolean boolean24 = timeZone20.hasSameRules(timeZone23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Calendar calendar26 = java.util.Calendar.getInstance(timeZone23, locale25);
        int int28 = timeZone23.getOffset((long) 5);
        java.util.Calendar calendar29 = java.util.Calendar.getInstance(timeZone23);
        java.util.TimeZone timeZone30 = calendar29.getTimeZone();
        boolean boolean31 = timeZone30.observesDaylightTime();
        java.lang.String str32 = timeZone30.getID();
        java.util.Calendar.Builder builder33 = builder9.setTimeZone(timeZone30);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar26);
// flaky:         org.junit.Assert.assertEquals(calendar26.toString(), "java.util.GregorianCalendar[time=1645514667203,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=27,MILLISECOND=219,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 16 + "'", int28 == 16);
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1645514667203,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=27,MILLISECOND=219,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.016" + "'", str32, "+00:00:00.016");
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test12377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12377");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        java.lang.String str8 = property7.getName();
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "secondOfMinute" + "'", str8, "secondOfMinute");
    }

    @Test
    public void test12378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12378");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime10 = dateTime6.plusDays((int) (byte) -1);
        java.util.Date date11 = dateTime10.toDate();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, readableDuration12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        int int16 = dateTimeZone14.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime17.add(readableDuration18, 0);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        mutableDateTime17.set(dateTimeFieldType23, (int) ' ');
        boolean boolean27 = interval13.isAfter((org.joda.time.ReadableInstant) mutableDateTime17);
        java.lang.Object obj28 = null;
        boolean boolean29 = interval13.equals(obj28);
        org.joda.time.Interval interval31 = interval13.withStartMillis((long) 44);
        org.joda.time.MutableInterval mutableInterval32 = interval31.toMutableInterval();
        org.joda.time.Interval interval33 = mutableInterval32.toInterval();
        org.joda.time.Chronology chronology34 = mutableInterval32.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(mutableInterval32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(chronology34);
    }

    @Test
    public void test12379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12379");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.LocalDate localDate9 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate11 = property7.setCopy(1);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.DateMidnight dateMidnight15 = localDate11.toDateMidnight(dateTimeZone13);
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now(dateTimeZone13);
        org.joda.time.LocalDate.Property property17 = localDate16.yearOfEra();
        org.joda.time.LocalDate localDate19 = property17.setCopy(40);
        org.joda.time.LocalDate localDate20 = property17.withMaximumValue();
        org.joda.time.LocalDate localDate21 = property17.roundFloorCopy();
        org.joda.time.LocalDate localDate22 = property17.roundHalfFloorCopy();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.016" + "'", str14, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate22);
    }

    @Test
    public void test12380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12380");
        java.lang.Object obj2 = null;
        org.joda.time.Period period4 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period6 = org.joda.time.Period.minutes(1);
        java.lang.String str7 = period6.toString();
        org.joda.time.Period period8 = period4.withFields((org.joda.time.ReadablePeriod) period6);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period10 = period4.normalizedStandard(periodType9);
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(periodType9);
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(obj2, periodType9);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.hours();
        org.joda.time.DateTimeField dateTimeField17 = chronology15.secondOfDay();
        org.joda.time.DurationField durationField18 = chronology15.months();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(10L, 11419200000000L, periodType9, chronology15);
        org.joda.time.PeriodType periodType20 = periodType9.withWeeksRemoved();
        java.lang.String str21 = periodType9.getName();
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT1M" + "'", str7, "PT1M");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "YearDay" + "'", str21, "YearDay");
    }

    @Test
    public void test12381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12381");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMillis((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = localDateTime6.getFieldType(0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField11 = localDateTime6.getField(0);
        org.joda.time.LocalDateTime.Property property12 = localDateTime6.dayOfMonth();
        org.joda.time.LocalDateTime.Property property13 = localDateTime6.weekOfWeekyear();
        int int14 = localDateTime6.getEra();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime6.minusHours(113);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test12382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12382");
        java.util.Date date7 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.fromDateFields(date7);
        org.joda.time.LocalDate.Property property9 = localDate8.weekOfWeekyear();
        org.joda.time.LocalDate localDate10 = property9.getLocalDate();
        org.joda.time.Period period12 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period14 = org.joda.time.Period.minutes(1);
        java.lang.String str15 = period14.toString();
        org.joda.time.Period period16 = period12.withFields((org.joda.time.ReadablePeriod) period14);
        org.joda.time.Period period18 = period16.plusMillis(100);
        org.joda.time.Period period19 = period16.negated();
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period23 = org.joda.time.Period.minutes(1);
        java.lang.String str24 = period23.toString();
        org.joda.time.Period period25 = period21.withFields((org.joda.time.ReadablePeriod) period23);
        org.joda.time.Period period27 = period25.plusMillis(100);
        boolean boolean28 = period19.equals((java.lang.Object) period27);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period30 = period19.withFields((org.joda.time.ReadablePeriod) mutablePeriod29);
        org.joda.time.LocalDate localDate31 = localDate10.plus((org.joda.time.ReadablePeriod) mutablePeriod29);
        mutablePeriod29.addMillis(0);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod();
        mutablePeriod34.addWeeks((int) (byte) 100);
        mutablePeriod29.add((org.joda.time.ReadablePeriod) mutablePeriod34);
        org.joda.time.PeriodType periodType38 = mutablePeriod34.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(1645514297847L, 31556952000L, periodType38);
        java.util.Date date48 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate49 = org.joda.time.LocalDate.fromDateFields(date48);
        int int50 = localDate49.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        int int53 = dateTimeZone51.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime54 = localDate49.toDateTimeAtCurrentTime(dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone51);
        org.joda.time.DateMidnight dateMidnight57 = dateMidnight55.withCenturyOfEra((int) (short) 1);
        org.joda.time.Period period59 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period61 = org.joda.time.Period.minutes(1);
        java.lang.String str62 = period61.toString();
        org.joda.time.Period period63 = period59.withFields((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Period period65 = period63.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType66 = org.joda.time.DurationFieldType.months();
        int int67 = period65.get(durationFieldType66);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight55.withPeriodAdded((org.joda.time.ReadablePeriod) period65, 0);
        org.joda.time.DateMidnight.Property property70 = dateMidnight55.monthOfYear();
        org.joda.time.DateMidnight dateMidnight72 = property70.addToCopy(15);
        org.joda.time.DateMidnight dateMidnight73 = property70.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight74 = property70.roundHalfCeilingCopy();
        org.joda.time.DateMidnight.Property property75 = dateMidnight74.monthOfYear();
        int int76 = dateMidnight74.getYear();
        org.joda.time.Period period78 = org.joda.time.Period.years(59);
        org.joda.time.Period period80 = period78.withWeeks((int) (byte) 100);
        org.joda.time.Period period82 = period80.withWeeks(19);
        java.lang.Object obj83 = null;
        boolean boolean84 = period80.equals(obj83);
        org.joda.time.Period period85 = period80.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray86 = period80.getFieldTypes();
        org.joda.time.Interval interval87 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight74, (org.joda.time.ReadablePeriod) period80);
        mutablePeriod39.setPeriod((org.joda.time.ReadableInterval) interval87);
        org.joda.time.PeriodType periodType89 = mutablePeriod39.getPeriodType();
        org.junit.Assert.assertEquals(date7.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT1M" + "'", str15, "PT1M");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT1M" + "'", str24, "PT1M");
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertEquals(date48.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1899 + "'", int50 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 16 + "'", int53 == 16);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "PT1M" + "'", str62, "PT1M");
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(durationFieldTypeArray86);
        org.junit.Assert.assertNotNull(periodType89);
    }

    @Test
    public void test12383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12383");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((-61031145600032L));
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forOffsetMillis((-2));
        java.util.Locale locale6 = java.util.Locale.CHINA;
        java.lang.String str7 = locale6.getVariant();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology11 = localTime10.getChronology();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) 5, chronology11);
        org.joda.time.Chronology chronology13 = chronology11.withUTC();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((long) 10, chronology15);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.Chronology chronology18 = null;
        mutablePeriod16.setPeriod(readableDuration17, chronology18);
        long long22 = chronology13.add((org.joda.time.ReadablePeriod) mutablePeriod16, (long) 32772, 6);
        org.joda.time.DateTimeField dateTimeField23 = chronology13.era();
        java.util.Locale locale25 = new java.util.Locale("hi!");
        int int26 = dateTimeField23.getMaximumShortTextLength(locale25);
        java.lang.String str27 = locale6.getDisplayVariant(locale25);
        java.lang.String str28 = dateTimeZone4.getShortName(0L, locale6);
        java.lang.String str29 = locale6.getDisplayName();
        java.lang.String str30 = locale6.getDisplayVariant();
        java.lang.String str31 = mutableDateTime1.toString("12", locale6);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 32772L + "'", long22 == 32772L);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals(locale25.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-00:00:00.002" + "'", str28, "-00:00:00.002");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str29, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "12" + "'", str31, "12");
    }

    @Test
    public void test12384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12384");
        java.util.Date date8 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date8);
        int int10 = localDate9.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime14 = localDate9.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.withCenturyOfEra((int) (short) 1);
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period23 = period19.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period23.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.months();
        int int27 = period25.get(durationFieldType26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight15.withPeriodAdded((org.joda.time.ReadablePeriod) period25, 0);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.plus(0L);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight31.plusDays((-1));
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight31.withCenturyOfEra(256);
        java.util.Date date42 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate43 = org.joda.time.LocalDate.fromDateFields(date42);
        int int44 = localDate43.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        int int47 = dateTimeZone45.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime48 = localDate43.toDateTimeAtCurrentTime(dateTimeZone45);
        org.joda.time.YearMonthDay yearMonthDay49 = new org.joda.time.YearMonthDay(dateTimeZone45);
        org.joda.time.YearMonthDay yearMonthDay51 = yearMonthDay49.withYear(1899);
        org.joda.time.Chronology chronology52 = yearMonthDay49.getChronology();
        org.joda.time.MutableDateTime mutableDateTime53 = dateMidnight31.toMutableDateTime(chronology52);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1899 + "'", int10 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1M" + "'", str22, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertEquals(date42.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1899 + "'", int44 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 16 + "'", int47 == 16);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(yearMonthDay51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
    }

    @Test
    public void test12385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12385");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = localDate6.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.withYear(1899);
        org.joda.time.Interval interval15 = yearMonthDay12.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = yearMonthDay12.getFieldTypes();
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay12.year();
        org.joda.time.YearMonthDay yearMonthDay18 = property17.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay19 = property17.withMinimumValue();
        java.util.Date date25 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.fromDateFields(date25);
        org.joda.time.LocalDate.Property property27 = localDate26.weekOfWeekyear();
        org.joda.time.LocalDate localDate28 = property27.getLocalDate();
        org.joda.time.DateTimeField dateTimeField29 = property27.getField();
        int int31 = dateTimeField29.getLeapAmount((long) '#');
        java.lang.String str33 = dateTimeField29.getAsShortText((long) 1);
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.lang.String str36 = dateTimeField29.getAsShortText((long) (-1), locale35);
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.lang.String str39 = dateTimeField29.getAsShortText(3172001, locale38);
        java.lang.String str40 = locale38.getDisplayVariant();
        java.lang.String str41 = property17.getAsText(locale38);
        java.util.Date date47 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate48 = org.joda.time.LocalDate.fromDateFields(date47);
        org.joda.time.LocalDate.Property property49 = localDate48.weekOfWeekyear();
        org.joda.time.LocalDate localDate50 = property49.getLocalDate();
        org.joda.time.LocalDate localDate51 = property49.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate53 = property49.setCopy(1);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str56 = dateTimeZone55.getID();
        org.joda.time.DateMidnight dateMidnight57 = localDate53.toDateMidnight(dateTimeZone55);
        org.joda.time.LocalDate localDate58 = org.joda.time.LocalDate.now(dateTimeZone55);
        org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay(dateTimeZone55);
        long long61 = dateTimeZone55.nextTransition((long) 50);
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((java.lang.Object) str41, dateTimeZone55);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1899 + "'", int7 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1" + "'", str33, "1");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1" + "'", str36, "1");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "3172001" + "'", str39, "3172001");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022" + "'", str41, "2022");
        org.junit.Assert.assertEquals(date47.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.016" + "'", str56, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 50L + "'", long61 == 50L);
    }

    @Test
    public void test12386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12386");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.millis();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology5 = localTime4.getChronology();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now(chronology5);
        org.joda.time.Period period7 = new org.joda.time.Period((long) 25, (long) (-1), periodType2, chronology5);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.millisOfDay();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology5);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test12387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12387");
        java.util.Date date8 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date8);
        int int10 = localDate9.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime14 = localDate9.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.withCenturyOfEra((int) (short) 1);
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period23 = period19.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period23.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.months();
        int int27 = period25.get(durationFieldType26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight15.withPeriodAdded((org.joda.time.ReadablePeriod) period25, 0);
        org.joda.time.DateMidnight.Property property30 = dateMidnight15.monthOfYear();
        org.joda.time.DateMidnight dateMidnight31 = property30.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight33 = property30.addToCopy((int) (byte) 10);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight33.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateMidnight.Property property36 = dateMidnight35.weekyear();
        org.joda.time.DateMidnight dateMidnight38 = property36.setCopy(1899);
        org.joda.time.DateMidnight dateMidnight40 = property36.setCopy(26217);
        java.lang.String str41 = property36.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight43 = property36.setCopy("00:00:00.000");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"00:00:00.000\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date8.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1899 + "'", int10 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1M" + "'", str22, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "weekyear" + "'", str41, "weekyear");
    }

    @Test
    public void test12388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12388");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("59");
        org.joda.time.YearMonthDay yearMonthDay2 = dateTime1.toYearMonthDay();
        org.joda.time.LocalDate localDate3 = yearMonthDay2.toLocalDate();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertNotNull(localDate3);
    }

    @Test
    public void test12389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12389");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = timeOfDay8.toDateTimeToday(dateTimeZone9);
        mutableDateTime3.setZoneRetainFields(dateTimeZone9);
        mutableDateTime3.setSecondOfMinute((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        int int16 = dateTimeZone14.getStandardOffset((long) 100);
        mutableDateTime3.setZone(dateTimeZone14);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology22 = localTime21.getChronology();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((-1L), (long) 17, chronology22);
        mutableDateTime3.setChronology(chronology22);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.Period period27 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period29 = org.joda.time.Period.minutes(1);
        java.lang.String str30 = period29.toString();
        org.joda.time.Period period31 = period27.withFields((org.joda.time.ReadablePeriod) period29);
        org.joda.time.Period period33 = period31.plusMillis(100);
        org.joda.time.Period period34 = period31.negated();
        org.joda.time.Period period36 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period38 = org.joda.time.Period.minutes(1);
        java.lang.String str39 = period38.toString();
        org.joda.time.Period period40 = period36.withFields((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Period period42 = period40.plusMillis(100);
        boolean boolean43 = period34.equals((java.lang.Object) period42);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period45 = period34.withFields((org.joda.time.ReadablePeriod) mutablePeriod44);
        int[] intArray48 = chronology22.get((org.joda.time.ReadablePeriod) period45, 0L, 6L);
        org.joda.time.DateTimeField dateTimeField49 = chronology22.dayOfMonth();
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime(chronology22);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray51 = localTime50.getFieldTypes();
        java.lang.Object obj52 = null;
        boolean boolean53 = localTime50.equals(obj52);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT1M" + "'", str30, "PT1M");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PT1M" + "'", str39, "PT1M");
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, 0, 0, 0, 0, 0, 6]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test12390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12390");
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = timeOfDay8.toDateTimeToday(dateTimeZone9);
        org.joda.time.DateTime dateTime12 = dateTime10.withCenturyOfEra(10);
        boolean boolean13 = dateTime12.isEqualNow();
        org.joda.time.Chronology chronology14 = dateTime12.getChronology();
        org.joda.time.TimeOfDay timeOfDay15 = new org.joda.time.TimeOfDay(15, 5, chronology14);
        org.joda.time.DurationField durationField16 = chronology14.years();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) 25, (-11L), chronology14);
        org.joda.time.DateTime dateTime18 = org.joda.time.DateTime.now(chronology14);
        org.joda.time.DateTime.Property property19 = dateTime18.weekyear();
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = timeOfDay25.toDateTimeToday(dateTimeZone26);
        org.joda.time.TimeOfDay.Property property28 = timeOfDay25.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay29 = property28.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay31 = property28.addToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str34 = dateTimeZone33.getID();
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str39 = locale36.getDisplayVariant(locale38);
        java.lang.String str40 = dateTimeZone33.getName((long) 5, locale36);
        java.lang.String str41 = property28.getAsText(locale36);
        java.util.Set<java.lang.String> strSet42 = locale36.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime43 = property19.setCopy("English", locale36);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"English\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00:00.016" + "'", str34, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.016" + "'", str40, "+00:00:00.016");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "52" + "'", str41, "52");
        org.junit.Assert.assertNotNull(strSet42);
    }

    @Test
    public void test12391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12391");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 1899, dateTimeZone1);
        int int6 = localDate4.getValue((int) (byte) 0);
        org.joda.time.LocalDate localDate8 = localDate4.withYear(7);
        org.joda.time.LocalDate localDate10 = localDate4.plusDays(2000);
        org.joda.time.LocalDate.Property property11 = localDate4.year();
        org.joda.time.LocalDate.Property property12 = localDate4.era();
        org.joda.time.LocalDate.Property property13 = localDate4.era();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.LocalDate localDate15 = property13.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) ' ');
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusMonths(2022);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology24 = localTime23.getChronology();
        org.joda.time.Interval interval25 = new org.joda.time.Interval((-1L), (long) 17, chronology24);
        long long26 = interval25.getStartMillis();
        org.joda.time.Duration duration27 = interval25.toDuration();
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight17.minus((org.joda.time.ReadableDuration) duration27);
        // The following exception was thrown during execution in test generation
        try {
            int int29 = property13.getDifference((org.joda.time.ReadableInstant) dateMidnight28);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(dateMidnight28);
    }

    @Test
    public void test12392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12392");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfMonth();
        org.joda.time.LocalDateTime.Property property4 = localDateTime2.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusWeeks(32769);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minusMillis(100);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.yearOfEra();
        org.joda.time.LocalDateTime localDateTime10 = property9.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withDate(0, 442, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 442 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test12393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12393");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = localDate6.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.withYear(1899);
        org.joda.time.Interval interval15 = yearMonthDay12.toInterval();
        int int16 = yearMonthDay12.getMonthOfYear();
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay12.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay19 = yearMonthDay12.plusDays(31284284);
        org.joda.time.DurationFieldType durationFieldType20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay22 = yearMonthDay19.withFieldAdded(durationFieldType20, 26665736);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'null' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1899 + "'", int7 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay19);
    }

    @Test
    public void test12394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12394");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.secondOfMinute();
        int int6 = localDateTime2.getEra();
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = property7.addToCopy(22);
        org.joda.time.DateTimeField dateTimeField10 = property7.getField();
        long long12 = dateTimeField10.roundHalfEven((long) 110);
        int int15 = dateTimeField10.getDifference((-11056028000L), 165612585L);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 10, chronology17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime21 = property19.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime23 = property19.addToCopy(5);
        int int24 = localDateTime23.getDayOfYear();
        int int25 = localDateTime23.getWeekOfWeekyear();
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology31 = localTime30.getChronology();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 5, chronology31);
        org.joda.time.Chronology chronology33 = chronology31.withUTC();
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay((long) 2022, chronology33);
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.now();
        org.joda.time.Period period37 = org.joda.time.Period.minutes(1);
        org.joda.time.LocalTime localTime39 = localTime35.withPeriodAdded((org.joda.time.ReadablePeriod) period37, (int) ' ');
        org.joda.time.Period period41 = period37.minusSeconds(2000);
        int[] intArray44 = chronology33.get((org.joda.time.ReadablePeriod) period41, (-32908652079000L), 2177280000000000L);
        java.util.Date date51 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate52 = org.joda.time.LocalDate.fromDateFields(date51);
        int int53 = localDate52.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        int int56 = dateTimeZone54.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime57 = localDate52.toDateTimeAtCurrentTime(dateTimeZone54);
        org.joda.time.YearMonthDay yearMonthDay58 = new org.joda.time.YearMonthDay(dateTimeZone54);
        org.joda.time.YearMonthDay yearMonthDay60 = yearMonthDay58.withYear(1899);
        org.joda.time.Interval interval61 = yearMonthDay58.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray62 = yearMonthDay58.getFieldTypes();
        org.joda.time.YearMonthDay.Property property63 = yearMonthDay58.year();
        org.joda.time.YearMonthDay yearMonthDay64 = property63.getYearMonthDay();
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.util.Locale locale68 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str69 = locale66.getDisplayVariant(locale68);
        org.joda.time.YearMonthDay yearMonthDay70 = property63.setCopy("6", locale68);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        int int73 = dateTimeZone71.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime(dateTimeZone71);
        org.joda.time.ReadableDuration readableDuration75 = null;
        mutableDateTime74.add(readableDuration75, 0);
        org.joda.time.MutableDateTime.Property property78 = mutableDateTime74.dayOfWeek();
        mutableDateTime74.addSeconds(69);
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime74.weekOfWeekyear();
        java.util.Locale locale82 = java.util.Locale.CHINA;
        int int83 = property81.getMaximumShortTextLength(locale82);
        java.lang.String str84 = locale68.getDisplayCountry(locale82);
        java.lang.String str85 = locale68.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray86 = dateTimeField10.set((org.joda.time.ReadablePartial) localDateTime23, 26591359, intArray44, "20270506T071919+0000", locale68);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"20270506T071919+0000\" for weekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-259200000L) + "'", long12 == (-259200000L));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 6 + "'", int24 == 6);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[70038, 1, 0, 1, 4, 14, 39, 0]");
        org.junit.Assert.assertEquals(date51.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1899 + "'", int53 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 16 + "'", int56 == 16);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(yearMonthDay70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 16 + "'", int73 == 16);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
    }

    @Test
    public void test12395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12395");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight(1645514181308L);
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = timeOfDay9.toDateTimeToday(dateTimeZone10);
        org.joda.time.DateTime dateTime13 = dateTime11.withCenturyOfEra(10);
        boolean boolean14 = dateTime13.isEqualNow();
        org.joda.time.Chronology chronology15 = dateTime13.getChronology();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(15, 5, chronology15);
        org.joda.time.DateTimeField dateTimeField17 = chronology15.clockhourOfDay();
        org.joda.time.TimeOfDay timeOfDay18 = new org.joda.time.TimeOfDay(1L, chronology15);
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField20 = chronology15.halfdayOfDay();
        org.joda.time.DateTime dateTime21 = dateMidnight1.toDateTime(chronology15);
        org.joda.time.DateTimeField dateTimeField22 = chronology15.clockhourOfDay();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology28 = localTime27.getChronology();
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 5, chronology28);
        org.joda.time.Chronology chronology30 = chronology28.withUTC();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 10, chronology32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Chronology chronology35 = null;
        mutablePeriod33.setPeriod(readableDuration34, chronology35);
        long long39 = chronology30.add((org.joda.time.ReadablePeriod) mutablePeriod33, (long) 32772, 6);
        org.joda.time.DateTimeField dateTimeField40 = chronology30.era();
        java.util.Locale locale42 = new java.util.Locale("hi!");
        int int43 = dateTimeField40.getMaximumShortTextLength(locale42);
        // The following exception was thrown during execution in test generation
        try {
            long long44 = dateTimeField22.set((long) 4226, "26379267", locale42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26379267 for clockhourOfDay must be in the range [1,24]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 32772L + "'", long39 == 32772L);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertEquals(locale42.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
    }

    @Test
    public void test12396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12396");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.monthOfYear();
        org.joda.time.DateTime dateTime10 = dateTime7.minusMillis((int) (byte) -1);
        boolean boolean12 = dateTime7.isAfter((long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getDurationType();
        boolean boolean15 = dateTime7.isSupported(dateTimeFieldType13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTime();
        boolean boolean19 = dateTime7.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime20 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime22 = dateTime20.plus((long) 58);
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test12397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12397");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = property5.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime9 = property5.addToCopy((long) 28);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withMonthOfYear(457);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 457 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test12398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12398");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime10 = dateTime6.plusDays((int) (byte) -1);
        java.util.Date date11 = dateTime10.toDate();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, readableDuration12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        int int16 = dateTimeZone14.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime17.add(readableDuration18, 0);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        mutableDateTime17.set(dateTimeFieldType23, (int) ' ');
        boolean boolean27 = interval13.isAfter((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray33 = timeOfDay32.getFields();
        org.joda.time.Period period35 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period37 = org.joda.time.Period.minutes(1);
        java.lang.String str38 = period37.toString();
        org.joda.time.Period period39 = period35.withFields((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Period period41 = period39.plusMillis(100);
        org.joda.time.Period period42 = period39.negated();
        org.joda.time.Period period44 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period46 = org.joda.time.Period.minutes(1);
        java.lang.String str47 = period46.toString();
        org.joda.time.Period period48 = period44.withFields((org.joda.time.ReadablePeriod) period46);
        org.joda.time.Period period50 = period48.plusMillis(100);
        boolean boolean51 = period42.equals((java.lang.Object) period50);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period53 = period42.withFields((org.joda.time.ReadablePeriod) mutablePeriod52);
        org.joda.time.TimeOfDay timeOfDay54 = timeOfDay32.plus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType56 = dateTimeFieldType55.getDurationType();
        int int57 = period42.get(durationFieldType56);
        mutableDateTime17.add(durationFieldType56, 256);
        org.joda.time.MutableDateTime mutableDateTime60 = mutableDateTime17.copy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = org.joda.time.format.ISODateTimeFormat.basicTimeNoMillis();
        java.lang.String str62 = mutableDateTime60.toString(dateTimeFormatter61);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime60.era();
        org.joda.time.MutableDateTime mutableDateTime64 = property63.roundCeiling();
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT1M" + "'", str38, "PT1M");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PT1M" + "'", str47, "PT1M");
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "114827+0000" + "'", str62, "114827+0000");
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
    }

    @Test
    public void test12399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12399");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusWeeks(0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusMillis((-19354500));
        org.joda.time.LocalDateTime.Property property8 = localDateTime2.dayOfWeek();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test12400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12400");
        java.util.Date date6 = new java.util.Date((int) (byte) 1, 0, 4, 0, (-9), (int) (byte) 10);
        date6.setDate(19);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromDateFields(date6);
        org.joda.time.LocalTime.Property property10 = localTime9.millisOfSecond();
        org.joda.time.LocalTime localTime11 = property10.roundFloorCopy();
        org.junit.Assert.assertEquals(date6.toString(), "Sat Jan 19 23:51:10 GMT+00:00 1901");
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test12401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12401");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        boolean boolean5 = dateTimeZone0.isStandardOffset((long) 10);
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology11 = localTime10.getChronology();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) 5, chronology11);
        org.joda.time.Chronology chronology13 = chronology11.withUTC();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay((long) 2022, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(0L, chronology13);
        int int17 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        int int22 = dateTimeZone20.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone20);
        org.joda.time.ReadableDuration readableDuration24 = null;
        mutableDateTime23.add(readableDuration24, 0);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime23.dayOfWeek();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime23.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.roundFloor();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.TimeOfDay timeOfDay39 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime41 = timeOfDay39.toDateTimeToday(dateTimeZone40);
        org.joda.time.DateTime dateTime43 = dateTime41.withCenturyOfEra(10);
        boolean boolean44 = dateTime43.isEqualNow();
        org.joda.time.Chronology chronology45 = dateTime43.getChronology();
        org.joda.time.TimeOfDay timeOfDay46 = new org.joda.time.TimeOfDay(15, 5, chronology45);
        org.joda.time.DateTimeField dateTimeField47 = chronology45.clockhourOfDay();
        org.joda.time.TimeOfDay timeOfDay48 = new org.joda.time.TimeOfDay(1L, chronology45);
        boolean boolean49 = dateTimeFieldType31.isSupported(chronology45);
        mutableDateTime29.setChronology(chronology45);
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((-68803869717836306L), (long) 54, chronology45);
        org.joda.time.DurationField durationField52 = chronology45.eras();
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime16, chronology45);
        org.joda.time.MutableDateTime mutableDateTime54 = mutableDateTime16.copy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 16 + "'", int17 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 16 + "'", int22 == 16);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(mutableDateTime54);
    }

    @Test
    public void test12402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12402");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((int) (short) 0);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 10, chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod15, 15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime10.plusMonths(12);
        int int20 = localDateTime10.getMillisOfDay();
        org.joda.time.Period period22 = org.joda.time.Period.years(59);
        org.joda.time.Period period24 = period22.withWeeks((int) (byte) 100);
        org.joda.time.Period period26 = period24.withWeeks(19);
        boolean boolean27 = localDateTime10.equals((java.lang.Object) period24);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime10.withCenturyOfEra(53);
        org.joda.time.Chronology chronology30 = localDateTime10.getChronology();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime10.minusDays(79);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusSeconds(944);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime36 = localDateTime32.withWeekOfWeekyear(694);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 694 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 26 + "'", int20 == 26);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
    }

    @Test
    public void test12403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12403");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime5 = dateTime3.plusSeconds(17);
        org.joda.time.Period period7 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period9 = org.joda.time.Period.minutes(1);
        java.lang.String str10 = period9.toString();
        org.joda.time.Period period11 = period7.withFields((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period13 = period11.plusMillis(100);
        org.joda.time.Period period15 = period11.minusMillis((int) (byte) 1);
        org.joda.time.DateTime dateTime17 = dateTime5.withPeriodAdded((org.joda.time.ReadablePeriod) period15, 15);
        org.joda.time.DateTime dateTime19 = dateTime17.withDayOfMonth(17);
        org.joda.time.DateTime.Property property20 = dateTime17.yearOfCentury();
        org.joda.time.DateTime dateTime22 = dateTime17.withYear(2025);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime22.toMutableDateTime();
        mutableDateTime23.addYears(38);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = null;
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime23.set(dateTimeFieldType26, 293);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT1M" + "'", str10, "PT1M");
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
    }

    @Test
    public void test12404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12404");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.TimeOfDay timeOfDay3 = new org.joda.time.TimeOfDay(0, (int) '4', chronology2);
        org.joda.time.TimeOfDay.Property property4 = timeOfDay3.secondOfMinute();
        java.lang.String str5 = property4.getAsString();
        org.joda.time.TimeOfDay timeOfDay6 = property4.withMaximumValue();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay6.minus(readablePeriod7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.plusSeconds(459);
        org.joda.time.DateTime dateTime11 = timeOfDay10.toDateTimeToday();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "0" + "'", str5, "0");
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test12405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12405");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay8 = property7.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay10 = property7.addToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str13 = dateTimeZone12.getID();
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str18 = locale15.getDisplayVariant(locale17);
        java.lang.String str19 = dateTimeZone12.getName((long) 5, locale15);
        java.lang.String str20 = property7.getAsText(locale15);
        java.util.Set<java.lang.String> strSet21 = locale15.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray22 = strSet21.toArray();
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime29 = timeOfDay27.toDateTimeToday(dateTimeZone28);
        org.joda.time.TimeOfDay.Property property30 = timeOfDay27.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay31 = property30.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay33 = property30.addToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str36 = dateTimeZone35.getID();
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Locale locale40 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str41 = locale38.getDisplayVariant(locale40);
        java.lang.String str42 = dateTimeZone35.getName((long) 5, locale38);
        java.lang.String str43 = property30.getAsText(locale38);
        java.util.Set<java.lang.String> strSet44 = locale38.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray45 = strSet44.toArray();
        boolean boolean46 = strSet44.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.lang.String[] strArray53 = new java.lang.String[] { "", "1970-01-01T00:00:00.010", "Property[monthOfYear]" };
        java.util.ArrayList<java.lang.String> strList54 = new java.util.ArrayList<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList54, strArray53);
        java.util.Locale.FilteringMode filteringMode56 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.lang.String>) strList54, filteringMode56);
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.util.Locale[] localeArray61 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList62 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList62, localeArray61);
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.util.Locale>) localeList62);
        java.util.Locale locale65 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList64);
        boolean boolean66 = localeList64.isEmpty();
        boolean boolean67 = strSet44.removeAll((java.util.Collection<java.util.Locale>) localeList64);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        int int70 = dateTimeZone68.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime(dateTimeZone68);
        boolean boolean73 = dateTimeZone68.isStandardOffset((long) 10);
        long long77 = dateTimeZone68.convertLocalToUTC((long) 38, true, 1645514205352L);
        org.joda.time.TimeOfDay timeOfDay82 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray83 = timeOfDay82.getFields();
        org.joda.time.DateTimeZone dateTimeZone84 = null;
        org.joda.time.DateTime dateTime85 = timeOfDay82.toDateTimeToday(dateTimeZone84);
        org.joda.time.DateTime dateTime87 = dateTime85.plus((long) '4');
        org.joda.time.DateTime dateTime89 = dateTime87.plusSeconds(3172001);
        boolean boolean90 = dateTimeZone68.equals((java.lang.Object) dateTime87);
        boolean boolean91 = localeList64.contains((java.lang.Object) dateTimeZone68);
        boolean boolean92 = strSet21.containsAll((java.util.Collection<java.util.Locale>) localeList64);
        java.util.Spliterator<java.util.Locale> localeSpliterator93 = localeList64.spliterator();
        int int94 = localeList64.size();
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.016" + "'", str13, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.016" + "'", str19, "+00:00:00.016");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "52" + "'", str20, "52");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertNotNull(timeOfDay33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.016" + "'", str36, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.016" + "'", str42, "+00:00:00.016");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "52" + "'", str43, "52");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(objArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray45), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + filteringMode56 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode56.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertNull(locale65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 16 + "'", int70 == 16);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 22L + "'", long77 == 22L);
        org.junit.Assert.assertNotNull(dateTimeFieldArray83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(localeSpliterator93);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
    }

    @Test
    public void test12406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12406");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        int int3 = localDateTime2.getSecondOfMinute();
        int int4 = localDateTime2.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusMonths(26379890);
        int int8 = localDateTime7.getYearOfEra();
        int int9 = localDateTime7.getYearOfCentury();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 70 + "'", int4 == 70);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2200294 + "'", int8 == 2200294);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 94 + "'", int9 == 94);
    }

    @Test
    public void test12407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12407");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now(chronology2);
        org.joda.time.DateTimeField dateTimeField4 = chronology2.weekyearOfCentury();
        int int6 = dateTimeField4.getMaximumValue((long) (-11));
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.util.Set<java.lang.String> strSet10 = locale7.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(locale7);
        int int12 = dateTimeField4.getMaximumTextLength(locale7);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = dateTimeField4.add((long) 28, 1645514535393L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1645514535393");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 99 + "'", int6 == 99);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
    }

    @Test
    public void test12408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12408");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 0);
        mutableDateTime3.setYear((int) ' ');
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        mutableDateTime3.add(readablePeriod9, (int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = null;
        boolean boolean13 = mutableDateTime3.isSupported(dateTimeFieldType12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime3.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.add(26215220);
        int int17 = mutableDateTime16.getEra();
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) 5, chronology21);
        org.joda.time.Chronology chronology23 = chronology21.withUTC();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) 10, chronology25);
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Chronology chronology28 = null;
        mutablePeriod26.setPeriod(readableDuration27, chronology28);
        long long32 = chronology23.add((org.joda.time.ReadablePeriod) mutablePeriod26, (long) 32772, 6);
        org.joda.time.Period period33 = mutablePeriod26.toPeriod();
        org.joda.time.TimeOfDay timeOfDay38 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime40 = timeOfDay38.toDateTimeToday(dateTimeZone39);
        org.joda.time.DateTime dateTime42 = dateTime40.withCenturyOfEra(10);
        org.joda.time.Period period44 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period46 = org.joda.time.Period.minutes(1);
        java.lang.String str47 = period46.toString();
        org.joda.time.Period period48 = period44.withFields((org.joda.time.ReadablePeriod) period46);
        org.joda.time.Period period50 = period48.plusMillis(100);
        org.joda.time.Period period51 = period48.negated();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType53 = dateTimeFieldType52.getDurationType();
        boolean boolean54 = period48.isSupported(durationFieldType53);
        org.joda.time.Period period56 = period48.minusYears(0);
        org.joda.time.DateTime dateTime57 = dateTime42.minus((org.joda.time.ReadablePeriod) period56);
        org.joda.time.DateTime.Property property58 = dateTime42.hourOfDay();
        org.joda.time.DateTime dateTime59 = property58.roundFloorCopy();
        org.joda.time.Interval interval60 = new org.joda.time.Interval((org.joda.time.ReadablePeriod) mutablePeriod26, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.format.PeriodFormatter periodFormatter61 = null;
        java.lang.String str62 = mutablePeriod26.toString(periodFormatter61);
        org.joda.time.PeriodType periodType63 = mutablePeriod26.getPeriodType();
        mutablePeriod26.setMonths(26405449);
        mutableDateTime16.add((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 32772L + "'", long32 == 32772L);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PT1M" + "'", str47, "PT1M");
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "PT0S" + "'", str62, "PT0S");
        org.junit.Assert.assertNotNull(periodType63);
    }

    @Test
    public void test12409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12409");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = localDate6.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.withYear(1899);
        org.joda.time.Interval interval15 = yearMonthDay12.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = yearMonthDay12.getFieldTypes();
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay12.year();
        org.joda.time.YearMonthDay yearMonthDay18 = property17.getYearMonthDay();
        java.util.Date date24 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.fromDateFields(date24);
        org.joda.time.LocalDate.Property property26 = localDate25.weekOfWeekyear();
        org.joda.time.LocalDate localDate27 = property26.getLocalDate();
        org.joda.time.DateTimeField dateTimeField28 = property26.getField();
        int int30 = dateTimeField28.getLeapAmount((long) '#');
        java.lang.String str32 = dateTimeField28.getAsShortText((long) 1);
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        java.lang.String str35 = dateTimeField28.getAsShortText((long) (-1), locale34);
        java.lang.String str36 = locale34.getScript();
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.util.Locale locale39 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str40 = locale37.getDisplayVariant(locale39);
        java.util.Locale locale41 = locale39.stripExtensions();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str44 = dateTimeZone43.getID();
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str49 = locale46.getDisplayVariant(locale48);
        java.lang.String str50 = dateTimeZone43.getName((long) 5, locale46);
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.lang.String str52 = locale46.getDisplayScript(locale51);
        java.lang.String str53 = locale41.getDisplayName(locale46);
        java.lang.String str54 = locale34.getDisplayName(locale41);
        int int55 = property17.getMaximumTextLength(locale41);
        java.lang.String str56 = property17.getName();
        int int57 = property17.get();
        int int58 = property17.getMinimumValueOverall();
        org.joda.time.DurationField durationField59 = property17.getDurationField();
        boolean boolean60 = durationField59.isSupported();
        boolean boolean61 = durationField59.isPrecise();
        int int63 = durationField59.getValue((long) 2283969);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1899 + "'", int7 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertEquals(date24.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1" + "'", str35, "1");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00:00.016" + "'", str44, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "+00:00:00.016" + "'", str50, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "English" + "'", str54, "English");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 9 + "'", int55 == 9);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "year" + "'", str56, "year");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2022 + "'", int57 == 2022);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-292275054) + "'", int58 == (-292275054));
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test12410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12410");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = localDate6.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.withYear(1899);
        org.joda.time.Interval interval15 = yearMonthDay12.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = yearMonthDay12.getFieldTypes();
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay12.year();
        org.joda.time.YearMonthDay yearMonthDay18 = property17.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay20 = property17.addToCopy(3);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(26257730);
        org.joda.time.DateMidnight dateMidnight23 = yearMonthDay20.toDateMidnight(dateTimeZone22);
        long long25 = dateTimeZone22.previousTransition(100162491494426217L);
        int int27 = dateTimeZone22.getStandardOffset(1645514484816L);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1899 + "'", int7 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100162491494426217L + "'", long25 == 100162491494426217L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 26257730 + "'", int27 == 26257730);
    }

    @Test
    public void test12411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12411");
        // The following exception was thrown during execution in test generation
        try {
            long long1 = java.util.Date.parse("\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT005252");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12412");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        int int5 = dateTimeZone3.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone3);
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7, 0);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime12 = property11.roundHalfEven();
        boolean boolean13 = interval2.isBefore((org.joda.time.ReadableInstant) mutableDateTime12);
        int int14 = mutableDateTime12.getHourOfDay();
        java.util.Date date23 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.fromDateFields(date23);
        int int25 = localDate24.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        int int28 = dateTimeZone26.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime29 = localDate24.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.withCenturyOfEra((int) (short) 1);
        org.joda.time.Period period34 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period36 = org.joda.time.Period.minutes(1);
        java.lang.String str37 = period36.toString();
        org.joda.time.Period period38 = period34.withFields((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Period period40 = period38.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.months();
        int int42 = period40.get(durationFieldType41);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight30.withPeriodAdded((org.joda.time.ReadablePeriod) period40, 0);
        org.joda.time.DateMidnight.Property property45 = dateMidnight30.monthOfYear();
        org.joda.time.DateMidnight dateMidnight46 = property45.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight48 = property45.addToCopy((int) (byte) 10);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.withWeekOfWeekyear((int) (short) 10);
        org.joda.time.DateMidnight.Property property51 = dateMidnight50.weekyear();
        org.joda.time.DateMidnight dateMidnight53 = property51.setCopy(1899);
        boolean boolean54 = mutableDateTime12.isBefore((org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(chronology55);
        org.joda.time.DateTime dateTime58 = dateTime56.withHourOfDay(3);
        org.joda.time.DateTime dateTime60 = dateTime56.withSecondOfMinute(16);
        org.joda.time.Interval interval61 = new org.joda.time.Interval((org.joda.time.ReadableInstant) mutableDateTime12, (org.joda.time.ReadableInstant) dateTime56);
        mutableDateTime12.setTime((long) 59);
        mutableDateTime12.addMonths(436);
        mutableDateTime12.setDate((long) 12170);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals(date23.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1899 + "'", int25 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 16 + "'", int28 == 16);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT1M" + "'", str37, "PT1M");
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
    }

    @Test
    public void test12413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12413");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("\u4e2d\u6587\u4e2d\u56fd),1970W014)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"12176 (?? (??),1970W014)\" is malformed at \" (?? (??),1970W014)\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test12414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12414");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime.Property property8 = dateTime7.monthOfYear();
        int int9 = property8.get();
        org.joda.time.DateTime dateTime10 = property8.getDateTime();
        org.joda.time.DateTime dateTime12 = dateTime10.plusHours(10745);
        int int13 = dateTime12.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
    }

    @Test
    public void test12415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12415");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        int int2 = calendar0.getMaximum((int) (short) 0);
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.fromCalendarFields(calendar0);
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfSecond();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType6 = dateTimeFieldType5.getDurationType();
        org.joda.time.LocalTime.Property property7 = localTime3.property(dateTimeFieldType5);
        org.joda.time.LocalTime localTime8 = property7.withMaximumValue();
        org.joda.time.LocalTime.Property property9 = localTime8.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        int int12 = dateTimeZone10.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(dateTimeZone10);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime13.add(readableDuration14, 0);
        mutableDateTime13.setYear((int) ' ');
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod();
        mutablePeriod19.addWeeks((int) (byte) 100);
        org.joda.time.Chronology chronology23 = null;
        mutablePeriod19.setPeriod((long) 15, chronology23);
        mutablePeriod19.setMinutes(1970);
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) 5, chronology32);
        org.joda.time.Chronology chronology34 = chronology32.withUTC();
        mutablePeriod19.setPeriod((long) 0, (long) 1, chronology34);
        mutableDateTime13.setChronology(chronology34);
        org.joda.time.DateTimeField dateTimeField37 = chronology34.weekyear();
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime(chronology34);
        org.joda.time.LocalTime localTime40 = localTime38.plusMinutes(8);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalTime localTime42 = localTime38.minus(readablePeriod41);
        org.joda.time.LocalTime localTime44 = localTime38.plusMinutes(26295197);
        java.lang.String str45 = localTime38.toString();
        org.joda.time.Period period47 = org.joda.time.Period.minutes(1);
        java.lang.String str48 = period47.toString();
        org.joda.time.Period period50 = period47.plusWeeks(17);
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology55 = localTime54.getChronology();
        org.joda.time.MutableDateTime mutableDateTime56 = org.joda.time.MutableDateTime.now(chronology55);
        org.joda.time.Period period57 = new org.joda.time.Period((long) 11, (-2234643900000L), chronology55);
        org.joda.time.Period period59 = period57.minusHours(53);
        org.joda.time.Period period61 = period57.withWeeks((int) '#');
        org.joda.time.Period period62 = period47.withFields((org.joda.time.ReadablePeriod) period57);
        org.joda.time.Period period64 = period57.multipliedBy(29);
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        org.joda.time.TimeOfDay timeOfDay70 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray71 = timeOfDay70.getFields();
        org.joda.time.DateTimeZone dateTimeZone72 = null;
        org.joda.time.DateTime dateTime73 = timeOfDay70.toDateTimeToday(dateTimeZone72);
        org.joda.time.DateTime.Property property74 = dateTime73.monthOfYear();
        org.joda.time.DateTime dateTime76 = dateTime73.minusMillis((int) (byte) -1);
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTime dateTime78 = dateTime76.toDateTime(chronology77);
        int int79 = dateTime76.getMillisOfDay();
        org.joda.time.Interval interval80 = new org.joda.time.Interval(readablePeriod65, (org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTime dateTime82 = dateTime76.minusMinutes(18);
        org.joda.time.DurationFieldType durationFieldType83 = org.joda.time.DurationFieldType.minutes();
        org.joda.time.DateTime dateTime85 = dateTime76.withFieldAdded(durationFieldType83, 1970);
        org.joda.time.Period period87 = period57.withFieldAdded(durationFieldType83, 26344017);
        org.joda.time.LocalTime localTime89 = localTime38.withFieldAdded(durationFieldType83, 26301);
        boolean boolean90 = localTime8.isSupported(durationFieldType83);
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645514668355,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=0032-02-22T00:00:00.003+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=28,MILLISECOND=371,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 16 + "'", int12 == 16);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "07:24:28.355" + "'", str45, "07:24:28.355");
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PT1M" + "'", str48, "PT1M");
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(dateTimeFieldArray71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 3172001 + "'", int79 == 3172001);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(durationFieldType83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test12416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12416");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.LocalDate localDate9 = property7.roundHalfEvenCopy();
        int int10 = localDate9.getYearOfCentury();
        org.joda.time.LocalDate.Property property11 = localDate9.dayOfMonth();
        org.joda.time.LocalDate localDate13 = property11.addWrapFieldToCopy(8);
        org.joda.time.LocalDate localDate14 = property11.getLocalDate();
        org.joda.time.LocalDate.Property property15 = localDate14.dayOfYear();
        int int16 = localDate14.getWeekyear();
        java.lang.String str17 = localDate14.toString();
        org.joda.time.LocalTime localTime18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = localDate14.toLocalDateTime(localTime18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The time must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 99 + "'", int10 == 99);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1899 + "'", int16 == 1899);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1899-03-13" + "'", str17, "1899-03-13");
    }

    @Test
    public void test12417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12417");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 26666251);
    }

    @Test
    public void test12418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12418");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.basicDateTime();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withPivotYear((int) '#');
        java.util.Locale locale5 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Date date11 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate12 = org.joda.time.LocalDate.fromDateFields(date11);
        org.joda.time.LocalDate.Property property13 = localDate12.weekOfWeekyear();
        org.joda.time.LocalDate localDate14 = property13.getLocalDate();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        int int17 = dateTimeField15.getLeapAmount((long) '#');
        java.lang.String str19 = dateTimeField15.getAsShortText((long) 1);
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.lang.String str22 = dateTimeField15.getAsShortText((long) (-1), locale21);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        long long28 = dateTimeField15.set((long) (short) 0, "52", locale25);
        java.lang.String str29 = locale5.getDisplayVariant(locale25);
        java.util.Set<java.lang.String> strSet30 = locale5.getUnicodeLocaleKeys();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter0.withLocale(locale5);
        java.lang.Integer int32 = dateTimeFormatter0.getPivotYear();
        java.lang.Appendable appendable33 = null;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 11);
        int int36 = localDate35.size();
        org.joda.time.LocalDate.Property property37 = localDate35.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(appendable33, (org.joda.time.ReadablePartial) localDate35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_TW");
        org.junit.Assert.assertEquals(date11.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "1" + "'", str22, "1");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 30844800000L + "'", long28 == 30844800000L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNull(int32);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 3 + "'", int36 == 3);
        org.junit.Assert.assertNotNull(property37);
    }

    @Test
    public void test12419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12419");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale3 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str4 = locale1.getDisplayVariant(locale3);
        java.util.Locale locale5 = locale3.stripExtensions();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str8 = dateTimeZone7.getID();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str13 = locale10.getDisplayVariant(locale12);
        java.lang.String str14 = dateTimeZone7.getName((long) 5, locale10);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale10.getDisplayScript(locale15);
        java.lang.String str17 = locale5.getDisplayName(locale10);
        java.lang.String str18 = locale10.getISO3Language();
        java.util.Locale.Builder builder19 = builder0.setLocale(locale10);
        java.util.Locale locale20 = builder0.build();
        java.util.Date date26 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.fromDateFields(date26);
        org.joda.time.LocalDate.Property property28 = localDate27.weekOfWeekyear();
        org.joda.time.LocalDate localDate29 = property28.getLocalDate();
        org.joda.time.DateTimeField dateTimeField30 = property28.getField();
        long long33 = dateTimeField30.set((long) 15, 12);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        java.lang.String str38 = dateTimeField30.getAsText((long) 1970, locale36);
        java.lang.String str39 = locale36.getCountry();
        java.util.Locale.Builder builder40 = builder0.setLocale(locale36);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder42 = builder0.setScript("83");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 83 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.016" + "'", str8, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.016" + "'", str14, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "kor" + "'", str18, "kor");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals(date26.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 6652800015L + "'", long33 == 6652800015L);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1" + "'", str38, "1");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test12420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12420");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 0);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime3.dayOfWeek();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime3.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundHalfEven();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.centuryOfEra();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime9.millisOfSecond();
        mutableDateTime9.setMinuteOfHour(37);
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(86340000, 1, (-1), 52, 18, (int) '#', 1970, 17);
        org.joda.time.PeriodType periodType25 = mutablePeriod24.getPeriodType();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology30 = localTime29.getChronology();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) 5, chronology30);
        org.joda.time.Chronology chronology32 = chronology30.withUTC();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((-259200000L), chronology32);
        org.joda.time.DurationField durationField35 = chronology32.minutes();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 16, periodType25, chronology32);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((-61031145600032L), chronology32);
        org.joda.time.DurationField durationField38 = chronology32.weeks();
        mutableDateTime9.setChronology(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(durationField38);
    }

    @Test
    public void test12421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12421");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = localDate6.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.Chronology chronology12 = localDate6.getChronology();
        org.joda.time.Period period14 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period16 = org.joda.time.Period.minutes(1);
        java.lang.String str17 = period16.toString();
        org.joda.time.Period period18 = period14.withFields((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period20 = period18.plusMillis(100);
        org.joda.time.Period period21 = period18.negated();
        org.joda.time.Period period23 = period18.plusYears(55);
        org.joda.time.Period period25 = period23.withYears(26165226);
        org.joda.time.LocalDate localDate26 = localDate6.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period28 = period25.minusDays(5);
        org.joda.time.Period period30 = period25.plusMonths(0);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1899 + "'", int7 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT1M" + "'", str17, "PT1M");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
    }

    @Test
    public void test12422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12422");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMillis((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = localDateTime6.getFieldType(0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withWeekyear((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusYears((-438));
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plusWeeks(944);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test12423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12423");
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime9 = timeOfDay7.toDateTimeToday(dateTimeZone8);
        org.joda.time.DateTime dateTime11 = dateTime9.withCenturyOfEra(10);
        boolean boolean12 = dateTime11.isEqualNow();
        org.joda.time.Chronology chronology13 = dateTime11.getChronology();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(15, 5, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.clockhourOfDay();
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay(1L, chronology13);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(chronology13);
        org.joda.time.LocalTime.Property property18 = localTime17.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        org.joda.time.LocalTime localTime21 = property18.setCopy(0);
        java.lang.String str22 = property18.getAsShortText();
        org.joda.time.LocalTime localTime23 = property18.roundCeilingCopy();
        org.joda.time.LocalTime localTime24 = property18.withMaximumValue();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology27 = localTime26.getChronology();
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray33 = timeOfDay32.getFields();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = timeOfDay32.toDateTimeToday(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str38 = dateTimeZone37.getID();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = timeOfDay32.toDateTimeToday(dateTimeZone37);
        org.joda.time.DateTime dateTime41 = localTime26.toDateTimeToday(dateTimeZone37);
        org.joda.time.DateTime dateTime42 = localTime24.toDateTimeToday(dateTimeZone37);
        int int43 = dateTime42.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localTime21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "584" + "'", str22, "584");
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeFieldArray33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.016" + "'", str38, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 53 + "'", int43 == 53);
    }

    @Test
    public void test12424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12424");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.hour();
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayVariant(locale2);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleKeys();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter0.withLocale(locale1);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        int int8 = dateTimeZone6.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.ReadableDuration readableDuration10 = null;
        mutableDateTime9.add(readableDuration10, 0);
        org.joda.time.Period period14 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period16 = org.joda.time.Period.minutes(1);
        java.lang.String str17 = period16.toString();
        org.joda.time.Period period18 = period14.withFields((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period20 = period18.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.months();
        int int22 = period20.get(durationFieldType21);
        mutableDateTime9.add(durationFieldType21, 7);
        mutableDateTime9.setMillis((long) 100);
        mutableDateTime9.setSecondOfMinute((int) (byte) 10);
        org.joda.time.TimeOfDay timeOfDay35 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime37 = timeOfDay35.toDateTimeToday(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withCenturyOfEra(10);
        boolean boolean40 = dateTime39.isEqualNow();
        org.joda.time.Chronology chronology41 = dateTime39.getChronology();
        org.joda.time.TimeOfDay timeOfDay42 = new org.joda.time.TimeOfDay(15, 5, chronology41);
        org.joda.time.DurationField durationField43 = chronology41.weeks();
        mutableDateTime9.setChronology(chronology41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter0.withChronology(chronology41);
        org.joda.time.format.DateTimePrinter dateTimePrinter46 = dateTimeFormatter0.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = org.joda.time.format.ISODateTimeFormat.tTimeNoMillis();
        org.joda.time.format.DateTimeParser dateTimeParser48 = dateTimeFormatter47.getParser();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = null;
        int int52 = dateTimeParser48.parseInto(dateTimeParserBucket49, "+00:00:00.016", 10);
        int int53 = dateTimeParser48.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter46, dateTimeParser48);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        int int56 = dateTimeFormatter55.getDefaultYear();
        org.joda.time.format.DateTimeParser dateTimeParser57 = dateTimeFormatter55.getParser();
        int int58 = dateTimeParser57.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter46, dateTimeParser57);
        boolean boolean60 = dateTimeFormatter59.isParser();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT1M" + "'", str17, "PT1M");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeFormatter45);
        org.junit.Assert.assertNotNull(dateTimePrinter46);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNotNull(dateTimeParser48);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-11) + "'", int52 == (-11));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 16 + "'", int53 == 16);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2000 + "'", int56 == 2000);
        org.junit.Assert.assertNotNull(dateTimeParser57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 19 + "'", int58 == 19);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test12425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12425");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime10 = dateTime6.plusDays((int) (byte) -1);
        java.util.Date date11 = dateTime10.toDate();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, readableDuration12);
        org.joda.time.Period period14 = interval13.toPeriod();
        org.joda.time.Chronology chronology15 = interval13.getChronology();
        org.joda.time.ReadableInstant readableInstant16 = null;
        boolean boolean17 = interval13.contains(readableInstant16);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test12426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12426");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((int) (short) 0);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 10, chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod15, 15);
        org.joda.time.LocalDateTime.Property property18 = localDateTime10.dayOfYear();
        int int19 = localDateTime10.getYear();
        org.joda.time.LocalDateTime.Property property20 = localDateTime10.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime21 = property20.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusWeeks(4);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.hourOfDay();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1970 + "'", int19 == 1970);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test12427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12427");
        org.joda.time.LocalTime localTime0 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Period period2 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period4 = org.joda.time.Period.minutes(1);
        java.lang.String str5 = period4.toString();
        org.joda.time.Period period6 = period2.withFields((org.joda.time.ReadablePeriod) period4);
        org.joda.time.Period period8 = period6.plusMillis(100);
        org.joda.time.LocalTime localTime9 = localTime0.minus((org.joda.time.ReadablePeriod) period6);
        org.joda.time.LocalTime localTime11 = localTime0.minusHours((-1));
        org.joda.time.LocalTime.Property property12 = localTime11.secondOfMinute();
        org.joda.time.LocalTime localTime13 = property12.getLocalTime();
        org.joda.time.LocalTime localTime15 = property12.addWrapFieldToCopy(32772);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.secondOfMinute();
        boolean boolean17 = localTime15.isSupported(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT1M" + "'", str5, "PT1M");
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test12428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12428");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str2 = dateTimeZone1.getID();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime5 = dateTime3.plusSeconds(17);
        int int6 = dateTime3.getHourOfDay();
        org.joda.time.DateTime dateTime8 = dateTime3.minus((long) 9);
        java.util.Date date17 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.fromDateFields(date17);
        int int19 = localDate18.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        int int22 = dateTimeZone20.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime23 = localDate18.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight24.withCenturyOfEra((int) (short) 1);
        org.joda.time.Period period28 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period30 = org.joda.time.Period.minutes(1);
        java.lang.String str31 = period30.toString();
        org.joda.time.Period period32 = period28.withFields((org.joda.time.ReadablePeriod) period30);
        org.joda.time.Period period34 = period32.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.months();
        int int36 = period34.get(durationFieldType35);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight24.withPeriodAdded((org.joda.time.ReadablePeriod) period34, 0);
        boolean boolean39 = dateTime3.isEqual((org.joda.time.ReadableInstant) dateMidnight24);
        org.joda.time.DateMidnight.Property property40 = dateMidnight24.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight42 = property40.addWrapFieldToCopy(26605689);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "+00:00:00.016" + "'", str2, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 7 + "'", int6 == 7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertEquals(date17.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1899 + "'", int19 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 16 + "'", int22 == 16);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT1M" + "'", str31, "PT1M");
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateMidnight42);
    }

    @Test
    public void test12429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12429");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = localDate6.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.withYear(1899);
        org.joda.time.Interval interval15 = yearMonthDay12.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = yearMonthDay12.getFieldTypes();
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay12.year();
        org.joda.time.DateMidnight dateMidnight18 = yearMonthDay12.toDateMidnight();
        java.util.Date date27 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate28 = org.joda.time.LocalDate.fromDateFields(date27);
        int int29 = localDate28.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        int int32 = dateTimeZone30.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime33 = localDate28.toDateTimeAtCurrentTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.withCenturyOfEra((int) (short) 1);
        org.joda.time.Period period38 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period40 = org.joda.time.Period.minutes(1);
        java.lang.String str41 = period40.toString();
        org.joda.time.Period period42 = period38.withFields((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Period period44 = period42.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.months();
        int int46 = period44.get(durationFieldType45);
        org.joda.time.DateMidnight dateMidnight48 = dateMidnight34.withPeriodAdded((org.joda.time.ReadablePeriod) period44, 0);
        org.joda.time.DateMidnight dateMidnight50 = dateMidnight48.plus(0L);
        org.joda.time.DateMidnight.Property property51 = dateMidnight50.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight50.plusDays((-1));
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight50.withCenturyOfEra(256);
        boolean boolean56 = dateMidnight18.isAfter((org.joda.time.ReadableInstant) dateMidnight55);
        int int57 = dateMidnight55.getMonthOfYear();
        java.lang.String str58 = dateMidnight55.toString();
        int int59 = dateMidnight55.getYear();
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1899 + "'", int7 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertEquals(date27.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1899 + "'", int29 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 16 + "'", int32 == 16);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT1M" + "'", str41, "PT1M");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateMidnight48);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "25601-01-10T00:00:00.000+00:00:00.016" + "'", str58, "25601-01-10T00:00:00.000+00:00:00.016");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 25601 + "'", int59 == 25601);
    }

    @Test
    public void test12430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12430");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period12 = org.joda.time.Period.minutes(1);
        java.lang.String str13 = period12.toString();
        org.joda.time.Period period14 = period10.withFields((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period16 = period14.plusMillis(100);
        org.joda.time.Period period17 = period14.negated();
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period23 = period19.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period23.plusMillis(100);
        boolean boolean26 = period17.equals((java.lang.Object) period25);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period28 = period17.withFields((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.LocalDate localDate29 = localDate8.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.Period period31 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period33 = org.joda.time.Period.minutes(1);
        java.lang.String str34 = period33.toString();
        org.joda.time.Period period35 = period31.withFields((org.joda.time.ReadablePeriod) period33);
        int int36 = period31.getMinutes();
        org.joda.time.Period period37 = period31.toPeriod();
        org.joda.time.LocalDate localDate38 = localDate29.plus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.LocalDate localDate40 = localDate29.withYearOfEra(99);
        java.util.Date date41 = localDate40.toDate();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        int int45 = dateTimeZone43.getStandardOffset((long) 100);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 1899, dateTimeZone43);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone50 = dateTimeZone49.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone53 = dateTimeZone52.toTimeZone();
        boolean boolean54 = timeZone50.hasSameRules(timeZone53);
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(timeZone53, locale55);
        java.lang.String str57 = dateTimeZone43.getShortName((long) 11, locale55);
        java.lang.String str58 = locale55.getDisplayName();
        boolean boolean59 = localDate40.equals((java.lang.Object) str58);
        org.joda.time.LocalDate localDate61 = localDate40.withYear(61);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str66 = dateTimeZone65.getID();
        org.joda.time.DateMidnight dateMidnight67 = org.joda.time.DateMidnight.now(dateTimeZone65);
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate(0L, dateTimeZone65);
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((-61661520000000L), dateTimeZone65);
        org.joda.time.DateTime dateTime70 = localDate40.toDateTimeAtStartOfDay(dateTimeZone65);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT1M" + "'", str13, "PT1M");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1M" + "'", str22, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT1M" + "'", str34, "PT1M");
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(date41);
        org.junit.Assert.assertEquals(date41.toString(), "Sun Mar 10 00:00:00 GMT+00:00 99");
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 16 + "'", int45 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(timeZone50);
        org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(timeZone53);
        org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=1645514668757,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=28,MILLISECOND=773,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.016" + "'", str57, "+00:00:00.016");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str58, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00:00.016" + "'", str66, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight67);
        org.junit.Assert.assertNotNull(dateTime70);
    }

    @Test
    public void test12431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12431");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        int int5 = dateTimeZone3.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(dateTimeZone3);
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime6.add(readableDuration7, 0);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime12 = property11.roundHalfEven();
        boolean boolean13 = interval2.isBefore((org.joda.time.ReadableInstant) mutableDateTime12);
        int int14 = mutableDateTime12.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType15.getDurationType();
        mutableDateTime12.set(dateTimeFieldType15, 15);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str22 = locale19.getDisplayVariant(locale21);
        java.util.Calendar calendar23 = mutableDateTime12.toCalendar(locale19);
        calendar23.setFirstDayOfWeek(2);
        java.util.Date date26 = calendar23.getTime();
        java.util.Date date35 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate36 = org.joda.time.LocalDate.fromDateFields(date35);
        int int37 = localDate36.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        int int40 = dateTimeZone38.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime41 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight44 = dateMidnight42.withCenturyOfEra((int) (short) 1);
        org.joda.time.Period period46 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period48 = org.joda.time.Period.minutes(1);
        java.lang.String str49 = period48.toString();
        org.joda.time.Period period50 = period46.withFields((org.joda.time.ReadablePeriod) period48);
        org.joda.time.Period period52 = period50.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.months();
        int int54 = period52.get(durationFieldType53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight42.withPeriodAdded((org.joda.time.ReadablePeriod) period52, 0);
        org.joda.time.DateMidnight.Property property57 = dateMidnight42.monthOfYear();
        org.joda.time.DateMidnight dateMidnight58 = property57.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight60 = property57.addToCopy((int) (byte) 10);
        org.joda.time.DateMidnight dateMidnight61 = property57.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight62 = property57.withMaximumValue();
        org.joda.time.DateMidnight dateMidnight63 = property57.roundHalfEvenCopy();
        org.joda.time.DateMidnight dateMidnight64 = property57.withMaximumValue();
        boolean boolean65 = calendar23.after((java.lang.Object) property57);
        java.util.TimeZone timeZone66 = null;
        calendar23.setTimeZone(timeZone66);
        // The following exception was thrown during execution in test generation
        try {
            int int69 = calendar23.get(0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 16 + "'", int5 == 16);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(calendar23);
        org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=1645488899984,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=null,firstDayOfWeek=2,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=15,SECOND=0,MILLISECOND=0,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Tue Feb 22 00:15:00 GMT+00:00 2022");
        org.junit.Assert.assertEquals(date35.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1899 + "'", int37 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 16 + "'", int40 == 16);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT1M" + "'", str49, "PT1M");
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
    }

    @Test
    public void test12432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12432");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.LocalDate localDate9 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate11 = property7.setCopy(1);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str14 = dateTimeZone13.getID();
        org.joda.time.DateMidnight dateMidnight15 = localDate11.toDateMidnight(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = localDate11.toDateTimeAtCurrentTime();
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfWeek();
        org.joda.time.DateTime dateTime18 = property17.withMinimumValue();
        org.joda.time.DateTime dateTime19 = property17.roundFloorCopy();
        org.joda.time.DateTime dateTime21 = dateTime19.plusMinutes(5452);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.016" + "'", str14, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test12433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12433");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale[] localeArray3 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList4 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList4, localeArray3);
        java.util.List<java.util.Locale> localeList6 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList4);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayVariant(locale8);
        java.util.Set<java.lang.String> strSet10 = locale7.getUnicodeLocaleKeys();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.TimeOfDay timeOfDay16 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray17 = timeOfDay16.getFields();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.DateTime dateTime19 = timeOfDay16.toDateTimeToday(dateTimeZone18);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period23 = org.joda.time.Period.minutes(1);
        java.lang.String str24 = period23.toString();
        org.joda.time.Period period25 = period21.withFields((org.joda.time.ReadablePeriod) period23);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period27 = period21.normalizedStandard(periodType26);
        org.joda.time.Period period28 = new org.joda.time.Period(readableDuration11, (org.joda.time.ReadableInstant) dateTime19, periodType26);
        org.joda.time.PeriodType periodType29 = periodType26.withMillisRemoved();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType30.getDurationType();
        boolean boolean32 = periodType29.isSupported(durationFieldType31);
        boolean boolean33 = strSet10.remove((java.lang.Object) boolean32);
        java.lang.Object[] objArray34 = strSet10.toArray();
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        java.util.Set<java.lang.String> strSet38 = locale35.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.util.Locale[] localeArray42 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList43 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList43, localeArray42);
        java.util.List<java.util.Locale> localeList45 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.util.Locale>) localeList43);
        boolean boolean46 = strSet38.removeAll((java.util.Collection<java.util.Locale>) localeList45);
        boolean boolean47 = strSet10.retainAll((java.util.Collection<java.util.Locale>) localeList45);
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.util.Locale[] localeArray51 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList52 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList52, localeArray51);
        java.util.List<java.util.Locale> localeList54 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.util.Locale>) localeList52);
        java.util.stream.Stream<java.util.Locale> localeStream55 = localeList54.stream();
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.util.Locale locale58 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str59 = locale56.getDisplayVariant(locale58);
        java.util.Locale locale60 = locale58.stripExtensions();
        boolean boolean61 = localeList54.add(locale60);
        localeList54.clear();
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.lang.String str65 = locale63.getDisplayVariant(locale64);
        java.util.Set<java.lang.String> strSet66 = locale63.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray67 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList68 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList68, languageRangeArray67);
        java.util.Locale[] localeArray70 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList71 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList71, localeArray70);
        java.util.List<java.util.Locale> localeList73 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList68, (java.util.Collection<java.util.Locale>) localeList71);
        boolean boolean74 = strSet66.removeAll((java.util.Collection<java.util.Locale>) localeList73);
        java.util.Spliterator<java.util.Locale> localeSpliterator75 = localeList73.spliterator();
        boolean boolean76 = localeList54.removeAll((java.util.Collection<java.util.Locale>) localeList73);
        boolean boolean77 = localeList45.retainAll((java.util.Collection<java.util.Locale>) localeList73);
        java.util.List<java.util.Locale> localeList78 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList45);
        java.util.Locale.LanguageRange[] languageRangeArray79 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList80 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList80, languageRangeArray79);
        java.util.Locale[] localeArray82 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList83 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList83, localeArray82);
        java.util.List<java.util.Locale> localeList85 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList80, (java.util.Collection<java.util.Locale>) localeList83);
        java.util.Spliterator<java.util.Locale> localeSpliterator86 = localeList83.spliterator();
        boolean boolean87 = localeList45.addAll((java.util.Collection<java.util.Locale>) localeList83);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localeList6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(dateTimeFieldArray17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT1M" + "'", str24, "PT1M");
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localeList45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localeList54);
        org.junit.Assert.assertNotNull(localeStream55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertNotNull(languageRangeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(localeList73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(localeSpliterator75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localeList78);
        org.junit.Assert.assertNotNull(languageRangeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(localeArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(localeList85);
        org.junit.Assert.assertNotNull(localeSpliterator86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
    }

    @Test
    public void test12434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12434");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.fromCalendarFields(calendar1);
        // The following exception was thrown during execution in test generation
        try {
            calendar1.setWeekDate(393, 26652286, 113);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: invalid dayOfWeek: 113");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=-16,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=0032-02-22T00:00:00.003+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime2);
    }

    @Test
    public void test12435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12435");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        boolean boolean7 = timeZone3.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        java.util.Calendar.Builder builder10 = builder0.setTimeZone(timeZone6);
        java.util.Calendar.Builder builder15 = builder0.setTimeOfDay(0, (int) ' ', 12, 11);
        java.util.Calendar.Builder builder20 = builder0.setTimeOfDay(0, 99, 17, 59);
        java.util.Date date26 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.fromDateFields(date26);
        int int28 = localDate27.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        int int31 = dateTimeZone29.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime32 = localDate27.toDateTimeAtCurrentTime(dateTimeZone29);
        org.joda.time.YearMonthDay yearMonthDay33 = new org.joda.time.YearMonthDay(dateTimeZone29);
        org.joda.time.YearMonthDay yearMonthDay35 = yearMonthDay33.withYear(1899);
        org.joda.time.Interval interval36 = yearMonthDay33.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray37 = yearMonthDay33.getFieldTypes();
        org.joda.time.YearMonthDay.Property property38 = yearMonthDay33.year();
        org.joda.time.YearMonthDay yearMonthDay39 = property38.getYearMonthDay();
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.util.Locale locale43 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str44 = locale41.getDisplayVariant(locale43);
        org.joda.time.YearMonthDay yearMonthDay45 = property38.setCopy("6", locale43);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        int int48 = dateTimeZone46.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(dateTimeZone46);
        org.joda.time.ReadableDuration readableDuration50 = null;
        mutableDateTime49.add(readableDuration50, 0);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime49.dayOfWeek();
        mutableDateTime49.addSeconds(69);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime49.weekOfWeekyear();
        java.util.Locale locale57 = java.util.Locale.CHINA;
        int int58 = property56.getMaximumShortTextLength(locale57);
        java.lang.String str59 = locale43.getDisplayCountry(locale57);
        java.util.Calendar.Builder builder60 = builder20.setLocale(locale43);
        java.util.Calendar.Builder builder62 = builder60.setLenient(true);
        java.util.Calendar calendar63 = builder62.build();
        // The following exception was thrown during execution in test generation
        try {
            calendar63.set(26269919, 1894);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26269919");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645514668950,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=28,MILLISECOND=966,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals(date26.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1899 + "'", int28 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 16 + "'", int31 == 16);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(yearMonthDay35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(yearMonthDay39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(yearMonthDay45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 16 + "'", int48 == 16);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(calendar63);
        org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=5957043,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=39,SECOND=17,MILLISECOND=59,ZONE_OFFSET=16,DST_OFFSET=0]");
    }

    @Test
    public void test12436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12436");
        org.joda.time.Interval interval2 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = timeOfDay8.getFields();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.DateTime dateTime11 = timeOfDay8.toDateTimeToday(dateTimeZone10);
        org.joda.time.Period period13 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period15 = org.joda.time.Period.minutes(1);
        java.lang.String str16 = period15.toString();
        org.joda.time.Period period17 = period13.withFields((org.joda.time.ReadablePeriod) period15);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period19 = period13.normalizedStandard(periodType18);
        org.joda.time.Period period20 = new org.joda.time.Period(readableDuration3, (org.joda.time.ReadableInstant) dateTime11, periodType18);
        org.joda.time.PeriodType periodType21 = periodType18.withMillisRemoved();
        org.joda.time.Period period22 = interval2.toPeriod(periodType21);
        org.joda.time.TimeOfDay timeOfDay27 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray28 = timeOfDay27.getFields();
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.DateTime dateTime30 = timeOfDay27.toDateTimeToday(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime30.withYearOfCentury(16);
        org.joda.time.DateTime dateTime34 = dateTime30.plusYears((-1));
        boolean boolean35 = interval2.contains((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Interval interval38 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        int int41 = dateTimeZone39.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime(dateTimeZone39);
        org.joda.time.ReadableDuration readableDuration43 = null;
        mutableDateTime42.add(readableDuration43, 0);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime42.dayOfWeek();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime42.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime48 = property47.roundHalfEven();
        boolean boolean49 = interval38.isBefore((org.joda.time.ReadableInstant) mutableDateTime48);
        boolean boolean50 = interval2.overlaps((org.joda.time.ReadableInterval) interval38);
        org.joda.time.TimeOfDay timeOfDay55 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime57 = timeOfDay55.toDateTimeToday(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = dateTime57.withCenturyOfEra(10);
        boolean boolean60 = interval38.isBefore((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.TimeOfDay timeOfDay65 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime67 = timeOfDay65.toDateTimeToday(dateTimeZone66);
        org.joda.time.DateTime dateTime69 = dateTime67.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime71 = dateTime67.plusDays((int) (byte) -1);
        java.util.Date date72 = dateTime71.toDate();
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.Interval interval74 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime71, readableDuration73);
        org.joda.time.Period period75 = interval74.toPeriod();
        boolean boolean76 = interval38.isAfter((org.joda.time.ReadableInterval) interval74);
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(chronology78);
        org.joda.time.DateTime.Property property80 = dateTime79.secondOfMinute();
        org.joda.time.Interval interval81 = new org.joda.time.Interval(readableDuration77, (org.joda.time.ReadableInstant) dateTime79);
        boolean boolean82 = interval38.contains((org.joda.time.ReadableInterval) interval81);
        org.joda.time.DateTime dateTime83 = interval81.getEnd();
        org.joda.time.Period period84 = interval81.toPeriod();
        org.joda.time.Period period86 = period84.minusWeeks((-2022));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period88 = period86.multipliedBy((-26188859));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows an int: 2022 * -26188859");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT1M" + "'", str16, "PT1M");
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(dateTimeFieldArray28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 16 + "'", int41 == 16);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(date72);
        org.junit.Assert.assertEquals(date72.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(period86);
    }

    @Test
    public void test12437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12437");
        org.joda.time.DateMidnight dateMidnight1 = new org.joda.time.DateMidnight((long) ' ');
        org.joda.time.DateMidnight dateMidnight3 = dateMidnight1.minusMonths(2022);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology8 = localTime7.getChronology();
        org.joda.time.Interval interval9 = new org.joda.time.Interval((-1L), (long) 17, chronology8);
        long long10 = interval9.getStartMillis();
        org.joda.time.Duration duration11 = interval9.toDuration();
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight1.minus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight1.minus((long) 32769);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray20 = timeOfDay19.getFields();
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.DateTime dateTime22 = timeOfDay19.toDateTimeToday(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.plus((long) '4');
        org.joda.time.DateTime.Property property25 = dateTime22.yearOfCentury();
        org.joda.time.DateTime dateTime26 = property25.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        int int29 = dateTimeZone27.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(dateTimeZone27);
        org.joda.time.ReadableDuration readableDuration31 = null;
        mutableDateTime30.add(readableDuration31, 0);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime30.dayOfWeek();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime30.minuteOfDay();
        org.joda.time.TimeOfDay timeOfDay40 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime42 = timeOfDay40.toDateTimeToday(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime42.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime46 = dateTime42.plusDays((int) (byte) -1);
        java.util.Date date47 = dateTime46.toDate();
        org.joda.time.DateTime.Property property48 = dateTime46.dayOfMonth();
        mutableDateTime30.setMillis((org.joda.time.ReadableInstant) dateTime46);
        int int50 = dateTime26.compareTo((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.Period period52 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period54 = org.joda.time.Period.minutes(1);
        java.lang.String str55 = period54.toString();
        org.joda.time.Period period56 = period52.withFields((org.joda.time.ReadablePeriod) period54);
        int int57 = period52.getMinutes();
        org.joda.time.Period period58 = period52.toPeriod();
        org.joda.time.MutablePeriod mutablePeriod59 = period58.toMutablePeriod();
        mutablePeriod59.add((long) (byte) -1);
        mutableDateTime30.add((org.joda.time.ReadablePeriod) mutablePeriod59, 9);
        mutablePeriod59.setHours(26196);
        int int66 = mutablePeriod59.getMonths();
        org.joda.time.DateMidnight dateMidnight67 = dateMidnight14.minus((org.joda.time.ReadablePeriod) mutablePeriod59);
        mutablePeriod59.setYears(26188548);
        org.junit.Assert.assertNotNull(dateMidnight3);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTimeFieldArray20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 16 + "'", int29 == 16);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(date47);
        org.junit.Assert.assertEquals(date47.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "PT1M" + "'", str55, "PT1M");
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(mutablePeriod59);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(dateMidnight67);
    }

    @Test
    public void test12438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12438");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMillis((int) (short) 0);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int9 = localDateTime2.get(dateTimeFieldType8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.minusMinutes(1899);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.monthOfYear();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.plusSeconds((-11));
        int int15 = localDateTime14.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        int int18 = dateTimeZone16.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone16);
        org.joda.time.ReadableDuration readableDuration20 = null;
        mutableDateTime19.add(readableDuration20, 0);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime19.dayOfWeek();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime19.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime25 = property24.roundFloor();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.millisOfDay();
        int int27 = mutableDateTime25.getYearOfEra();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime25.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.getMutableDateTime();
        org.joda.time.DateTimeField dateTimeField30 = property28.getField();
        org.joda.time.MutableDateTime mutableDateTime31 = property28.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.lang.String str33 = dateTimeFieldType32.getName();
        java.lang.String str34 = dateTimeFieldType32.toString();
        mutableDateTime31.set(dateTimeFieldType32, (int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime38 = localDateTime14.withField(dateTimeFieldType32, 26277709);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26277709 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 26 + "'", int15 == 26);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "millisOfSecond" + "'", str33, "millisOfSecond");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "millisOfSecond" + "'", str34, "millisOfSecond");
    }

    @Test
    public void test12439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12439");
        org.joda.time.PeriodType periodType1 = null;
        java.util.Date date7 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.fromDateFields(date7);
        org.joda.time.LocalDate.Property property9 = localDate8.weekOfWeekyear();
        org.joda.time.LocalDate localDate10 = property9.getLocalDate();
        org.joda.time.LocalDate localDate12 = property9.addToCopy(100);
        org.joda.time.LocalDate.Property property13 = localDate12.weekyear();
        org.joda.time.LocalTime localTime14 = null;
        org.joda.time.DateTime dateTime15 = localDate12.toDateTime(localTime14);
        org.joda.time.Chronology chronology16 = localDate12.getChronology();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(1371555988124L, periodType1, chronology16);
        org.junit.Assert.assertEquals(date7.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
    }

    @Test
    public void test12440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12440");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMillis((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = localDateTime6.getFieldType(0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYearOfEra(32769);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withWeekyear(2068);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test12441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12441");
        java.util.Date date8 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date8);
        int int10 = localDate9.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime14 = localDate9.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.withCenturyOfEra((int) (short) 1);
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period23 = period19.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period23.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.months();
        int int27 = period25.get(durationFieldType26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight15.withPeriodAdded((org.joda.time.ReadablePeriod) period25, 0);
        org.joda.time.DateMidnight.Property property30 = dateMidnight15.monthOfYear();
        org.joda.time.DateMidnight dateMidnight32 = property30.addToCopy(15);
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight32.withYearOfCentury(55);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight32.minusMonths(12);
        org.joda.time.DateMidnight.Property property37 = dateMidnight32.monthOfYear();
        org.joda.time.DateMidnight dateMidnight39 = dateMidnight32.plusDays(2598);
        org.joda.time.DateMidnight.Property property40 = dateMidnight39.centuryOfEra();
        org.joda.time.DateMidnight dateMidnight41 = property40.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime42 = dateMidnight41.toDateTimeISO();
        org.junit.Assert.assertEquals(date8.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1899 + "'", int10 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1M" + "'", str22, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test12442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12442");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.LocalDate localDate9 = property7.roundHalfEvenCopy();
        boolean boolean10 = property7.isLeap();
        org.joda.time.DateTimeField dateTimeField11 = property7.getField();
        java.util.Date date18 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate19 = org.joda.time.LocalDate.fromDateFields(date18);
        org.joda.time.LocalDate.Property property20 = localDate19.weekOfWeekyear();
        org.joda.time.LocalDate localDate21 = property20.getLocalDate();
        org.joda.time.DateTimeField dateTimeField22 = property20.getField();
        long long24 = dateTimeField22.roundHalfFloor((long) 28);
        java.util.Locale locale26 = java.util.Locale.PRC;
        java.util.Date date32 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.fromDateFields(date32);
        org.joda.time.LocalDate.Property property34 = localDate33.weekOfWeekyear();
        org.joda.time.LocalDate localDate35 = property34.getLocalDate();
        org.joda.time.DateTimeField dateTimeField36 = property34.getField();
        int int38 = dateTimeField36.getLeapAmount((long) '#');
        java.lang.String str40 = dateTimeField36.getAsShortText((long) 1);
        java.util.Locale locale42 = java.util.Locale.ENGLISH;
        java.lang.String str43 = dateTimeField36.getAsShortText((long) (-1), locale42);
        java.lang.String str44 = locale26.getDisplayScript(locale42);
        java.lang.String str45 = dateTimeField22.getAsText((-2234642760016L), locale42);
        java.lang.String str46 = dateTimeField11.getAsText(42665, locale42);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertEquals(date18.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-259200000L) + "'", long24 == (-259200000L));
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertEquals(date32.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1" + "'", str43, "1");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "10" + "'", str45, "10");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "42665" + "'", str46, "42665");
    }

    @Test
    public void test12443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12443");
        org.joda.time.Period period1 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period3 = org.joda.time.Period.minutes(1);
        java.lang.String str4 = period3.toString();
        org.joda.time.Period period5 = period1.withFields((org.joda.time.ReadablePeriod) period3);
        int int6 = period1.getMinutes();
        org.joda.time.Period period7 = period1.toPeriod();
        org.joda.time.Period period8 = period7.negated();
        org.joda.time.Period period10 = period8.plusMillis(3172000);
        java.lang.String str11 = period10.toString();
        org.joda.time.Period period13 = period10.minusWeeks(5);
        org.joda.time.Period period15 = period13.plusMillis(1809);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT1M" + "'", str4, "PT1M");
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT-1M3172S" + "'", str11, "PT-1M3172S");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
    }

    @Test
    public void test12444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12444");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone1);
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = timeOfDay9.toDateTimeToday(dateTimeZone10);
        mutableDateTime4.setZoneRetainFields(dateTimeZone10);
        mutableDateTime4.setSecondOfMinute((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        int int17 = dateTimeZone15.getStandardOffset((long) 100);
        mutableDateTime4.setZone(dateTimeZone15);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology23 = localTime22.getChronology();
        org.joda.time.Interval interval24 = new org.joda.time.Interval((-1L), (long) 17, chronology23);
        mutableDateTime4.setChronology(chronology23);
        java.lang.String str26 = chronology23.toString();
        org.joda.time.TimeOfDay timeOfDay31 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime33 = timeOfDay31.toDateTimeToday(dateTimeZone32);
        org.joda.time.Chronology chronology34 = chronology23.withZone(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(1645514222758L, chronology34);
        org.joda.time.DateTimeField dateTimeField36 = chronology34.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField37 = chronology34.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            long long44 = chronology34.getDateTimeMillis(1645514222758L, 0, (-2073), (-1971), (-3172002));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2073 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 16 + "'", int3 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 16 + "'", int17 == 16);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[UTC]" + "'", str26, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test12445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12445");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.secondOfDay();
        org.joda.time.DurationField durationField6 = chronology3.months();
        org.joda.time.TimeOfDay timeOfDay7 = new org.joda.time.TimeOfDay(82036800000L, chronology3);
        org.joda.time.TimeOfDay timeOfDay9 = timeOfDay7.plusMinutes(2922789);
        int int10 = timeOfDay7.getHourOfDay();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 12 + "'", int10 == 12);
    }

    @Test
    public void test12446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12446");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMillis((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withMillisOfDay(1970);
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period12 = org.joda.time.Period.minutes(1);
        java.lang.String str13 = period12.toString();
        org.joda.time.Period period14 = period10.withFields((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period16 = period14.plusMillis(100);
        org.joda.time.Period period17 = period14.negated();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType18.getDurationType();
        boolean boolean20 = period14.isSupported(durationFieldType19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime8.withPeriodAdded((org.joda.time.ReadablePeriod) period14, 0);
        int int23 = localDateTime8.getWeekyear();
        org.joda.time.LocalDateTime.Property property24 = localDateTime8.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime26 = property24.addToCopy((int) '4');
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT1M" + "'", str13, "PT1M");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1970 + "'", int23 == 1970);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test12447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12447");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        boolean boolean7 = timeZone3.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        java.util.Calendar.Builder builder10 = builder0.setTimeZone(timeZone6);
        java.util.Calendar.Builder builder15 = builder0.setTimeOfDay(0, (int) ' ', 12, 11);
        java.util.Calendar.Builder builder20 = builder0.setTimeOfDay(0, 99, 17, 59);
        java.util.Calendar.Builder builder24 = builder0.setDate((int) (byte) 10, 0, 2);
        java.util.Calendar.Builder builder28 = builder0.setTimeOfDay((-1), (int) (byte) -1, 2922789);
        java.util.Calendar.Builder builder32 = builder28.setWeekDate(328, 56035, 13);
        java.util.Calendar.Builder builder34 = builder28.setLenient(false);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645514669207,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=29,MILLISECOND=223,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
    }

    @Test
    public void test12448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12448");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime10 = dateTime6.plusDays((int) (byte) -1);
        java.util.Date date11 = dateTime10.toDate();
        date11.setMinutes(3172000);
        int int14 = date11.getDate();
        org.joda.time.TimeOfDay timeOfDay15 = org.joda.time.TimeOfDay.fromDateFields(date11);
        int int16 = date11.getDay();
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Fri Mar 03 18:40:52 GMT+00:00 2028");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 5 + "'", int16 == 5);
    }

    @Test
    public void test12449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12449");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setLenient(false);
        long long3 = calendar0.getTimeInMillis();
        java.util.Date date10 = new java.util.Date(8, 53, (int) (byte) 0, 8, 256, 29);
        date10.setHours(436);
        calendar0.setTime(date10);
        calendar0.add(14, 0);
        java.util.Calendar calendar17 = java.util.Calendar.getInstance();
        boolean boolean18 = calendar17.isWeekDateSupported();
        calendar17.setTimeInMillis((long) 52);
        org.joda.time.TimeOfDay timeOfDay21 = org.joda.time.TimeOfDay.fromCalendarFields(calendar17);
        int int22 = calendar17.getWeekYear();
        java.time.Instant instant23 = calendar17.toInstant();
        java.util.TimeZone timeZone25 = java.util.TimeZone.getTimeZone("2022-02-22T07:16:28.548Z");
        calendar17.setTimeZone(timeZone25);
        timeZone25.setRawOffset(48);
        calendar0.setTimeZone(timeZone25);
        org.joda.time.TimeOfDay timeOfDay37 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime39 = timeOfDay37.toDateTimeToday(dateTimeZone38);
        org.joda.time.DateTime dateTime41 = dateTime39.withCenturyOfEra(10);
        boolean boolean42 = dateTime41.isEqualNow();
        org.joda.time.Chronology chronology43 = dateTime41.getChronology();
        org.joda.time.TimeOfDay timeOfDay44 = new org.joda.time.TimeOfDay(15, 5, chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.clockhourOfDay();
        org.joda.time.TimeOfDay timeOfDay46 = new org.joda.time.TimeOfDay(1L, chronology43);
        org.joda.time.TimeOfDay.Property property47 = timeOfDay46.hourOfDay();
        org.joda.time.DateTimeField dateTimeField48 = property47.getField();
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology52 = localTime51.getChronology();
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime((long) 5, chronology52);
        org.joda.time.Chronology chronology54 = chronology52.withUTC();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 10, chronology56);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.Chronology chronology59 = null;
        mutablePeriod57.setPeriod(readableDuration58, chronology59);
        long long63 = chronology54.add((org.joda.time.ReadablePeriod) mutablePeriod57, (long) 32772, 6);
        org.joda.time.DateTimeField dateTimeField64 = chronology54.era();
        java.util.Locale locale66 = new java.util.Locale("hi!");
        int int67 = dateTimeField64.getMaximumShortTextLength(locale66);
        int int68 = dateTimeField48.getMaximumShortTextLength(locale66);
        java.lang.String str69 = locale66.getDisplayLanguage();
        java.lang.String str70 = locale66.getDisplayLanguage();
        java.util.Calendar calendar71 = java.util.Calendar.getInstance(timeZone25, locale66);
        java.lang.String str72 = locale66.getCountry();
        org.junit.Assert.assertNotNull(calendar0);
        org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=-1815767011016,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=48,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1912,MONTH=5,WEEK_OF_YEAR=25,WEEK_OF_MONTH=4,DAY_OF_MONTH=18,DAY_OF_YEAR=170,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=4,HOUR_OF_DAY=4,MINUTE=16,SECOND=29,MILLISECOND=0,ZONE_OFFSET=16,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645514669232L + "'", long3 == 1645514669232L);
        org.junit.Assert.assertEquals(date10.toString(), "Tue Jun 18 04:16:29 GMT+00:00 1912");
        org.junit.Assert.assertNotNull(calendar17);
        org.junit.Assert.assertEquals(calendar17.toString(), "java.util.GregorianCalendar[time=52,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=48,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=68,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1970 + "'", int22 == 1970);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 32772L + "'", long63 == 32772L);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertEquals(locale66.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2 + "'", int67 == 2);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 2 + "'", int68 == 2);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "hi!" + "'", str69, "hi!");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "hi!" + "'", str70, "hi!");
        org.junit.Assert.assertNotNull(calendar71);
// flaky:         org.junit.Assert.assertEquals(calendar71.toString(), "java.util.GregorianCalendar[time=1645514669233,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=48,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=29,MILLISECOND=281,ZONE_OFFSET=48,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
    }

    @Test
    public void test12450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12450");
        org.joda.time.Interval interval4 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.TimeOfDay timeOfDay10 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray11 = timeOfDay10.getFields();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.DateTime dateTime13 = timeOfDay10.toDateTimeToday(dateTimeZone12);
        org.joda.time.Period period15 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period17 = org.joda.time.Period.minutes(1);
        java.lang.String str18 = period17.toString();
        org.joda.time.Period period19 = period15.withFields((org.joda.time.ReadablePeriod) period17);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period21 = period15.normalizedStandard(periodType20);
        org.joda.time.Period period22 = new org.joda.time.Period(readableDuration5, (org.joda.time.ReadableInstant) dateTime13, periodType20);
        org.joda.time.PeriodType periodType23 = periodType20.withMillisRemoved();
        org.joda.time.Period period24 = interval4.toPeriod(periodType23);
        org.joda.time.TimeOfDay timeOfDay29 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray30 = timeOfDay29.getFields();
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.DateTime dateTime32 = timeOfDay29.toDateTimeToday(dateTimeZone31);
        org.joda.time.DateTime dateTime34 = dateTime32.withYearOfCentury(16);
        org.joda.time.DateTime dateTime36 = dateTime32.plusYears((-1));
        boolean boolean37 = interval4.contains((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Interval interval40 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        int int43 = dateTimeZone41.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(dateTimeZone41);
        org.joda.time.ReadableDuration readableDuration45 = null;
        mutableDateTime44.add(readableDuration45, 0);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime44.dayOfWeek();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime44.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime50 = property49.roundHalfEven();
        boolean boolean51 = interval40.isBefore((org.joda.time.ReadableInstant) mutableDateTime50);
        boolean boolean52 = interval4.overlaps((org.joda.time.ReadableInterval) interval40);
        org.joda.time.Interval interval53 = interval4.toInterval();
        java.lang.String str54 = interval4.toString();
        org.joda.time.Interval interval55 = interval4.toInterval();
        org.joda.time.LocalTime localTime57 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology58 = localTime57.getChronology();
        org.joda.time.MutableDateTime mutableDateTime59 = org.joda.time.MutableDateTime.now(chronology58);
        boolean boolean60 = interval4.isBefore((org.joda.time.ReadableInstant) mutableDateTime59);
        org.joda.time.TimeOfDay timeOfDay62 = new org.joda.time.TimeOfDay((long) 1899);
        org.joda.time.LocalTime localTime63 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Period period65 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period67 = org.joda.time.Period.minutes(1);
        java.lang.String str68 = period67.toString();
        org.joda.time.Period period69 = period65.withFields((org.joda.time.ReadablePeriod) period67);
        org.joda.time.Period period71 = period69.plusMillis(100);
        org.joda.time.LocalTime localTime72 = localTime63.minus((org.joda.time.ReadablePeriod) period69);
        org.joda.time.Period period74 = period69.plusHours((int) 'a');
        org.joda.time.TimeOfDay timeOfDay75 = timeOfDay62.plus((org.joda.time.ReadablePeriod) period74);
        org.joda.time.Chronology chronology76 = timeOfDay62.getChronology();
        org.joda.time.Interval interval77 = interval4.withChronology(chronology76);
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod(32L, 2855630L, chronology76);
        org.junit.Assert.assertNotNull(dateTimeFieldArray11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT1M" + "'", str18, "PT1M");
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(dateTimeFieldArray30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 16 + "'", int43 == 16);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1970-01-01T00:00:00.015+00:00:00.016/1970-01-01T00:00:00.113+00:00:00.016" + "'", str54, "1970-01-01T00:00:00.015+00:00:00.016/1970-01-01T00:00:00.113+00:00:00.016");
        org.junit.Assert.assertNotNull(interval55);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "PT1M" + "'", str68, "PT1M");
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(timeOfDay75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(interval77);
    }

    @Test
    public void test12451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12451");
        java.util.Locale locale2 = new java.util.Locale("26215220", "hi!");
        java.util.Locale.setDefault(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "26215220_HI!");
    }

    @Test
    public void test12452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12452");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.TimeOfDay timeOfDay8 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime10 = timeOfDay8.toDateTimeToday(dateTimeZone9);
        mutableDateTime3.setZoneRetainFields(dateTimeZone9);
        mutableDateTime3.setSecondOfMinute((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        int int16 = dateTimeZone14.getStandardOffset((long) 100);
        mutableDateTime3.setZone(dateTimeZone14);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology22 = localTime21.getChronology();
        org.joda.time.Interval interval23 = new org.joda.time.Interval((-1L), (long) 17, chronology22);
        mutableDateTime3.setChronology(chronology22);
        java.lang.String str25 = chronology22.toString();
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime32 = timeOfDay30.toDateTimeToday(dateTimeZone31);
        org.joda.time.Chronology chronology33 = chronology22.withZone(dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime34.property(dateTimeFieldType35);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime34.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime38 = property37.getMutableDateTime();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[UTC]" + "'", str25, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
    }

    @Test
    public void test12453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12453");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) 5, chronology3);
        org.joda.time.Chronology chronology5 = chronology3.withUTC();
        // The following exception was thrown during execution in test generation
        try {
            long long13 = chronology5.getDateTimeMillis((int) (byte) 100, 110, 34672, 42, 19, 16, 26352933);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 42 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(chronology5);
    }

    @Test
    public void test12454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12454");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period12 = org.joda.time.Period.minutes(1);
        java.lang.String str13 = period12.toString();
        org.joda.time.Period period14 = period10.withFields((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period16 = period14.plusMillis(100);
        org.joda.time.Period period17 = period14.negated();
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period23 = period19.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period23.plusMillis(100);
        boolean boolean26 = period17.equals((java.lang.Object) period25);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period28 = period17.withFields((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.LocalDate localDate29 = localDate8.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.LocalDate.Property property30 = localDate29.weekOfWeekyear();
        java.lang.String str31 = localDate29.toString();
        org.joda.time.LocalDate.Property property32 = localDate29.yearOfCentury();
        org.joda.time.LocalDate localDate34 = property32.addToCopy(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate36 = property32.setCopy(26579925);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26579925 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT1M" + "'", str13, "PT1M");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1M" + "'", str22, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1899-03-10" + "'", str31, "1899-03-10");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDate34);
    }

    @Test
    public void test12455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12455");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 10, chronology1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Chronology chronology4 = null;
        mutablePeriod2.setPeriod(readableDuration3, chronology4);
        mutablePeriod2.setSeconds(0);
        int int8 = mutablePeriod2.getDays();
        mutablePeriod2.addMinutes(12160);
        mutablePeriod2.setHours(26207215);
        mutablePeriod2.addMillis(38);
        org.joda.time.TimeOfDay timeOfDay19 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime21 = timeOfDay19.toDateTimeToday(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = dateTime21.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime25 = dateTime21.plusDays((int) (byte) -1);
        java.util.Date date26 = dateTime25.toDate();
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Interval interval28 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime25, readableDuration27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        int int31 = dateTimeZone29.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(dateTimeZone29);
        org.joda.time.ReadableDuration readableDuration33 = null;
        mutableDateTime32.add(readableDuration33, 0);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime32.dayOfWeek();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime32.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType39 = dateTimeFieldType38.getDurationType();
        mutableDateTime32.set(dateTimeFieldType38, (int) ' ');
        boolean boolean42 = interval28.isAfter((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.TimeOfDay timeOfDay47 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray48 = timeOfDay47.getFields();
        org.joda.time.Period period50 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period52 = org.joda.time.Period.minutes(1);
        java.lang.String str53 = period52.toString();
        org.joda.time.Period period54 = period50.withFields((org.joda.time.ReadablePeriod) period52);
        org.joda.time.Period period56 = period54.plusMillis(100);
        org.joda.time.Period period57 = period54.negated();
        org.joda.time.Period period59 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period61 = org.joda.time.Period.minutes(1);
        java.lang.String str62 = period61.toString();
        org.joda.time.Period period63 = period59.withFields((org.joda.time.ReadablePeriod) period61);
        org.joda.time.Period period65 = period63.plusMillis(100);
        boolean boolean66 = period57.equals((java.lang.Object) period65);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period68 = period57.withFields((org.joda.time.ReadablePeriod) mutablePeriod67);
        org.joda.time.TimeOfDay timeOfDay69 = timeOfDay47.plus((org.joda.time.ReadablePeriod) period57);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType71 = dateTimeFieldType70.getDurationType();
        int int72 = period57.get(durationFieldType71);
        mutableDateTime32.add(durationFieldType71, 256);
        int int75 = mutablePeriod2.get(durationFieldType71);
        org.joda.time.MutablePeriod mutablePeriod76 = mutablePeriod2.copy();
        mutablePeriod2.addMonths(393);
        mutablePeriod2.addMinutes(26370786);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 16 + "'", int31 == 16);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "PT1M" + "'", str53, "PT1M");
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "PT1M" + "'", str62, "PT1M");
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(timeOfDay69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 12160 + "'", int75 == 12160);
        org.junit.Assert.assertNotNull(mutablePeriod76);
    }

    @Test
    public void test12456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12456");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = org.joda.time.format.ISODateTimeFormat.tTimeNoMillis();
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatter2.getParser();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket4 = null;
        int int7 = dateTimeParser3.parseInto(dateTimeParserBucket4, "+00:00:00.016", 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser3);
        org.joda.time.format.DateTimeParser dateTimeParser10 = dateTimeFormatter9.getParser();
        org.junit.Assert.assertNotNull(dateTimeFormatter2);
        org.junit.Assert.assertNotNull(dateTimeParser3);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-11) + "'", int7 == (-11));
        org.junit.Assert.assertNotNull(dateTimeParser10);
    }

    @Test
    public void test12457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12457");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter0 = org.joda.time.format.ISODateTimeFormat.dateHourMinute();
        org.joda.time.DateTimeZone dateTimeZone1 = dateTimeFormatter0.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = dateTimeFormatter0.withPivotYear((java.lang.Integer) 27);
        java.lang.StringBuffer stringBuffer4 = null;
        org.joda.time.Interval interval7 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.TimeOfDay timeOfDay13 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = timeOfDay13.getFields();
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.DateTime dateTime16 = timeOfDay13.toDateTimeToday(dateTimeZone15);
        org.joda.time.Period period18 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period20 = org.joda.time.Period.minutes(1);
        java.lang.String str21 = period20.toString();
        org.joda.time.Period period22 = period18.withFields((org.joda.time.ReadablePeriod) period20);
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period24 = period18.normalizedStandard(periodType23);
        org.joda.time.Period period25 = new org.joda.time.Period(readableDuration8, (org.joda.time.ReadableInstant) dateTime16, periodType23);
        org.joda.time.PeriodType periodType26 = periodType23.withMillisRemoved();
        org.joda.time.Period period27 = interval7.toPeriod(periodType26);
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray33 = timeOfDay32.getFields();
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = timeOfDay32.toDateTimeToday(dateTimeZone34);
        org.joda.time.DateTime dateTime37 = dateTime35.withYearOfCentury(16);
        org.joda.time.DateTime dateTime39 = dateTime35.plusYears((-1));
        boolean boolean40 = interval7.contains((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        int int46 = dateTimeZone44.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(dateTimeZone44);
        org.joda.time.ReadableDuration readableDuration48 = null;
        mutableDateTime47.add(readableDuration48, 0);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime47.dayOfWeek();
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime47.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime53 = property52.roundHalfEven();
        boolean boolean54 = interval43.isBefore((org.joda.time.ReadableInstant) mutableDateTime53);
        boolean boolean55 = interval7.overlaps((org.joda.time.ReadableInterval) interval43);
        org.joda.time.TimeOfDay timeOfDay60 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime62 = timeOfDay60.toDateTimeToday(dateTimeZone61);
        org.joda.time.DateTime dateTime64 = dateTime62.withCenturyOfEra(10);
        boolean boolean65 = interval43.isBefore((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.TimeOfDay timeOfDay70 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime72 = timeOfDay70.toDateTimeToday(dateTimeZone71);
        org.joda.time.DateTime dateTime74 = dateTime72.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime76 = dateTime72.plusDays((int) (byte) -1);
        java.util.Date date77 = dateTime76.toDate();
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.Interval interval79 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime76, readableDuration78);
        org.joda.time.Period period80 = interval79.toPeriod();
        boolean boolean81 = interval43.isAfter((org.joda.time.ReadableInterval) interval79);
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime(chronology83);
        org.joda.time.DateTime.Property property85 = dateTime84.secondOfMinute();
        org.joda.time.Interval interval86 = new org.joda.time.Interval(readableDuration82, (org.joda.time.ReadableInstant) dateTime84);
        boolean boolean87 = interval43.contains((org.joda.time.ReadableInterval) interval86);
        org.joda.time.Chronology chronology88 = interval43.getChronology();
        org.joda.time.DateTime dateTime89 = interval43.getEnd();
        org.joda.time.DateTime.Property property90 = dateTime89.dayOfYear();
        int int91 = dateTime89.getMillisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.printTo(stringBuffer4, (org.joda.time.ReadableInstant) dateTime89);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeFormatter3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT1M" + "'", str21, "PT1M");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(dateTimeFieldArray33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 16 + "'", int46 == 16);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(date77);
        org.junit.Assert.assertEquals(date77.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 113 + "'", int91 == 113);
    }

    @Test
    public void test12458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12458");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology2 = localTime1.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.hours();
        org.joda.time.Period period5 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period7 = org.joda.time.Period.minutes(1);
        java.lang.String str8 = period7.toString();
        org.joda.time.Period period9 = period5.withFields((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Period period11 = period9.plusMillis(100);
        org.joda.time.Period period12 = period9.negated();
        org.joda.time.Period period14 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period16 = org.joda.time.Period.minutes(1);
        java.lang.String str17 = period16.toString();
        org.joda.time.Period period18 = period14.withFields((org.joda.time.ReadablePeriod) period16);
        org.joda.time.Period period20 = period18.plusMillis(100);
        boolean boolean21 = period12.equals((java.lang.Object) period20);
        int[] intArray24 = chronology2.get((org.joda.time.ReadablePeriod) period12, (long) 100, (long) (-1));
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((long) ' ');
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusMonths(2022);
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology33 = localTime32.getChronology();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((-1L), (long) 17, chronology33);
        long long35 = interval34.getStartMillis();
        org.joda.time.Duration duration36 = interval34.toDuration();
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight26.minus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Duration duration38 = period12.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight26);
        org.joda.time.Period period40 = period12.minusSeconds(436);
        org.joda.time.Period period42 = period12.minusYears(3172001);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(durationField3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT1M" + "'", str8, "PT1M");
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT1M" + "'", str17, "PT1M");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, 0, 0, -101]");
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-1L) + "'", long35 == (-1L));
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
    }

    @Test
    public void test12459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12459");
        java.util.Date date8 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date8);
        int int10 = localDate9.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime14 = localDate9.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.withYearOfEra(16);
        int int18 = dateMidnight15.getDayOfMonth();
        int int19 = dateMidnight15.getMillisOfSecond();
        org.joda.time.DateMidnight.Property property20 = dateMidnight15.era();
        org.joda.time.DateMidnight dateMidnight21 = property20.getDateMidnight();
        org.joda.time.DateTimeField dateTimeField22 = property20.getField();
        org.joda.time.DateMidnight dateMidnight23 = property20.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight24 = property20.roundHalfEvenCopy();
        org.junit.Assert.assertEquals(date8.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1899 + "'", int10 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateMidnight24);
    }

    @Test
    public void test12460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12460");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        java.lang.Object[] objArray5 = strSet4.toArray();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(objArray5);
    }

    @Test
    public void test12461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12461");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 0);
        org.joda.time.Period period8 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        java.lang.String str11 = period10.toString();
        org.joda.time.Period period12 = period8.withFields((org.joda.time.ReadablePeriod) period10);
        org.joda.time.Period period14 = period12.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.months();
        int int16 = period14.get(durationFieldType15);
        mutableDateTime3.add(durationFieldType15, 7);
        mutableDateTime3.setMillis((long) 100);
        mutableDateTime3.setSecondOfMinute((int) (byte) 10);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime3.weekOfWeekyear();
        mutableDateTime3.add(21168000000L);
        mutableDateTime3.setDate((long) 437);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime3.weekyear();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.getMutableDateTime();
        java.util.Date date35 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate36 = org.joda.time.LocalDate.fromDateFields(date35);
        int int37 = localDate36.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        int int40 = dateTimeZone38.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime41 = localDate36.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay(dateTimeZone38);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(chronology43);
        org.joda.time.DateTime dateTime45 = dateTime44.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str48 = dateTimeZone47.getID();
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str53 = locale50.getDisplayVariant(locale52);
        java.lang.String str54 = dateTimeZone47.getName((long) 5, locale50);
        org.joda.time.DateTime dateTime55 = dateTime45.withZoneRetainFields(dateTimeZone47);
        org.joda.time.DateMidnight dateMidnight56 = yearMonthDay42.toDateMidnight(dateTimeZone47);
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight56.plusWeeks((int) ' ');
        int int59 = dateMidnight56.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight56.plusYears(9);
        org.joda.time.Interval interval62 = dateMidnight61.toInterval();
        org.joda.time.Duration duration63 = interval62.toDuration();
        long long64 = duration63.getMillis();
        mutableDateTime29.add((org.joda.time.ReadableDuration) duration63);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT1M" + "'", str11, "PT1M");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertEquals(date35.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1899 + "'", int37 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 16 + "'", int40 == 16);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00:00.016" + "'", str48, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00:00.016" + "'", str54, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 8 + "'", int59 == 8);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 86400000L + "'", long64 == 86400000L);
    }

    @Test
    public void test12462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12462");
        org.joda.time.Period period1 = org.joda.time.Period.millis(26389852);
        org.joda.time.Period period3 = period1.withHours(29);
        org.joda.time.Period period5 = period1.plusMillis(904);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
    }

    @Test
    public void test12463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12463");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 0);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime3.dayOfWeek();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime3.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundFloor();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.weekOfWeekyear();
        java.lang.String str11 = mutableDateTime9.toString();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.weekOfWeekyear();
        int int13 = mutableDateTime9.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22T00:00:00.000+00:00:00.016" + "'", str11, "2022-02-22T00:00:00.000+00:00:00.016");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2022 + "'", int13 == 2022);
    }

    @Test
    public void test12464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12464");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray6 = new java.lang.String[] { "", "1970-01-01T00:00:00.010", "Property[monthOfYear]" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        java.util.Locale.FilteringMode filteringMode9 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList10 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList7, filteringMode9);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.Locale[] localeArray14 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList15 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList15, localeArray14);
        java.util.List<java.util.Locale> localeList17 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList15);
        java.util.Locale locale18 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList17);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        java.util.Set<java.lang.String> strSet22 = locale19.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale[] localeArray26 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList27 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList27, localeArray26);
        java.util.List<java.util.Locale> localeList29 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList27);
        boolean boolean30 = strSet22.removeAll((java.util.Collection<java.util.Locale>) localeList29);
        strSet22.clear();
        boolean boolean32 = strSet22.isEmpty();
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale33.getDisplayVariant(locale34);
        java.util.Set<java.lang.String> strSet36 = locale33.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Locale[] localeArray40 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList41 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList41, localeArray40);
        java.util.List<java.util.Locale> localeList43 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList41);
        boolean boolean44 = strSet36.removeAll((java.util.Collection<java.util.Locale>) localeList43);
        java.util.Spliterator<java.util.Locale> localeSpliterator45 = localeList43.spliterator();
        boolean boolean46 = strSet22.containsAll((java.util.Collection<java.util.Locale>) localeList43);
        java.lang.String str47 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet22);
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.lang.String str50 = locale48.getDisplayVariant(locale49);
        java.util.Set<java.lang.String> strSet51 = locale48.getUnicodeLocaleKeys();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) 10, chronology53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withMinuteOfHour(0);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) 10, chronology58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime56.withFields((org.joda.time.ReadablePartial) localDateTime59);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime65 = property63.addToCopy((long) 12);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.plusDays(99);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        int int70 = dateTimeZone68.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime(dateTimeZone68);
        org.joda.time.DateTime dateTime72 = localDateTime67.toDateTime(dateTimeZone68);
        org.joda.time.DateTime dateTime74 = dateTime72.plusSeconds(5);
        boolean boolean75 = strSet51.equals((java.lang.Object) dateTime74);
        java.lang.Object[] objArray76 = strSet51.toArray();
        java.util.List<java.lang.String> strList77 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet51);
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.util.Locale locale79 = java.util.Locale.KOREAN;
        java.lang.String str80 = locale78.getDisplayVariant(locale79);
        java.util.Set<java.lang.String> strSet81 = locale78.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray82 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList83 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList83, languageRangeArray82);
        java.util.Locale[] localeArray85 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList86 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList86, localeArray85);
        java.util.List<java.util.Locale> localeList88 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList83, (java.util.Collection<java.util.Locale>) localeList86);
        boolean boolean89 = strSet81.removeAll((java.util.Collection<java.util.Locale>) localeList88);
        java.util.Spliterator<java.util.Locale> localeSpliterator90 = localeList88.spliterator();
        boolean boolean91 = strSet51.containsAll((java.util.Collection<java.util.Locale>) localeList88);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean93 = strSet51.add("20270506T071716Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + filteringMode9 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode9.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localeList17);
        org.junit.Assert.assertNull(locale18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localeList29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localeList43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localeSpliterator45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 16 + "'", int70 == 16);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(objArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray76), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray76), "[]");
        org.junit.Assert.assertNotNull(strList77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertNotNull(languageRangeArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(localeArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(localeList88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(localeSpliterator90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
    }

    @Test
    public void test12465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12465");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 0);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime3.dayOfWeek();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime3.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundFloor();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.weekOfWeekyear();
        org.joda.time.DateTime dateTime11 = mutableDateTime9.toDateTime();
        int int12 = mutableDateTime9.getMillisOfSecond();
        org.joda.time.Chronology chronology13 = mutableDateTime9.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(chronology13);
    }

    @Test
    public void test12466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12466");
        java.util.Date date8 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date8);
        int int10 = localDate9.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime14 = localDate9.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.withCenturyOfEra((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight15.plus(readableDuration18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.plus((long) 26215220);
        org.joda.time.DateMidnight.Property property22 = dateMidnight19.weekyear();
        java.util.Date date28 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.fromDateFields(date28);
        int int30 = localDate29.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        int int33 = dateTimeZone31.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime34 = localDate29.toDateTimeAtCurrentTime(dateTimeZone31);
        org.joda.time.YearMonthDay yearMonthDay35 = new org.joda.time.YearMonthDay(dateTimeZone31);
        org.joda.time.YearMonthDay yearMonthDay37 = yearMonthDay35.withYear(1899);
        org.joda.time.Interval interval38 = yearMonthDay35.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray39 = yearMonthDay35.getFieldTypes();
        org.joda.time.YearMonthDay.Property property40 = yearMonthDay35.year();
        org.joda.time.YearMonthDay yearMonthDay41 = property40.getYearMonthDay();
        org.joda.time.LocalDate localDate42 = yearMonthDay41.toLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.LocalDate.Property property44 = localDate42.property(dateTimeFieldType43);
        boolean boolean45 = dateMidnight19.isSupported(dateTimeFieldType43);
        java.util.Date date51 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate52 = org.joda.time.LocalDate.fromDateFields(date51);
        int int53 = localDate52.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        int int56 = dateTimeZone54.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime57 = localDate52.toDateTimeAtCurrentTime(dateTimeZone54);
        org.joda.time.YearMonthDay yearMonthDay58 = new org.joda.time.YearMonthDay(dateTimeZone54);
        org.joda.time.YearMonthDay yearMonthDay60 = yearMonthDay58.withYear(1899);
        org.joda.time.Interval interval61 = yearMonthDay58.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray62 = yearMonthDay58.getFieldTypes();
        org.joda.time.YearMonthDay.Property property63 = yearMonthDay58.year();
        org.joda.time.YearMonthDay yearMonthDay64 = property63.getYearMonthDay();
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.util.Locale locale68 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str69 = locale66.getDisplayVariant(locale68);
        org.joda.time.YearMonthDay yearMonthDay70 = property63.setCopy("6", locale68);
        java.lang.String str71 = property63.getAsString();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = property63.getFieldType();
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight19.withField(dateTimeFieldType72, 439);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight19.withYearOfEra(22832);
        org.junit.Assert.assertEquals(date8.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1899 + "'", int10 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertEquals(date28.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1899 + "'", int30 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 16 + "'", int33 == 16);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(yearMonthDay37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(yearMonthDay41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertEquals(date51.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1899 + "'", int53 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 16 + "'", int56 == 16);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(yearMonthDay60);
        org.junit.Assert.assertNotNull(interval61);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(yearMonthDay64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(yearMonthDay70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "2022" + "'", str71, "2022");
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(dateMidnight76);
    }

    @Test
    public void test12467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12467");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = dateTime6.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime10 = dateTime6.plusDays((int) (byte) -1);
        java.util.Date date11 = dateTime10.toDate();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Interval interval13 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime10, readableDuration12);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        int int16 = dateTimeZone14.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime17.add(readableDuration18, 0);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        mutableDateTime17.set(dateTimeFieldType23, (int) ' ');
        boolean boolean27 = interval13.isAfter((org.joda.time.ReadableInstant) mutableDateTime17);
        boolean boolean29 = interval13.contains((long) 17);
        org.joda.time.Interval interval32 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        int int35 = dateTimeZone33.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(dateTimeZone33);
        org.joda.time.ReadableDuration readableDuration37 = null;
        mutableDateTime36.add(readableDuration37, 0);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime36.dayOfWeek();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime36.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime42 = property41.roundHalfEven();
        boolean boolean43 = interval32.isBefore((org.joda.time.ReadableInstant) mutableDateTime42);
        int int44 = mutableDateTime42.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType45.getDurationType();
        mutableDateTime42.set(dateTimeFieldType45, 15);
        boolean boolean49 = interval13.contains((org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.Period period50 = interval13.toPeriod();
        org.joda.time.Period period52 = period50.withMonths(26190505);
        int[] intArray53 = period52.getValues();
        org.joda.time.Period period55 = period52.plusDays(3172);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(date11);
        org.junit.Assert.assertEquals(date11.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 16 + "'", int16 == 16);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 16 + "'", int35 == 16);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[0, 26190505, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(period55);
    }

    @Test
    public void test12468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12468");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        int int7 = localDate6.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        int int10 = dateTimeZone8.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime11 = localDate6.toDateTimeAtCurrentTime(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay12 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.withYear(1899);
        org.joda.time.Interval interval15 = yearMonthDay12.toInterval();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = yearMonthDay12.getFieldTypes();
        org.joda.time.YearMonthDay.Property property17 = yearMonthDay12.year();
        org.joda.time.YearMonthDay yearMonthDay18 = property17.getYearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay19 = property17.withMinimumValue();
        java.util.Date date25 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.fromDateFields(date25);
        org.joda.time.LocalDate.Property property27 = localDate26.weekOfWeekyear();
        org.joda.time.LocalDate localDate28 = property27.getLocalDate();
        org.joda.time.DateTimeField dateTimeField29 = property27.getField();
        int int31 = dateTimeField29.getLeapAmount((long) '#');
        java.lang.String str33 = dateTimeField29.getAsShortText((long) 1);
        java.util.Locale locale35 = java.util.Locale.ENGLISH;
        java.lang.String str36 = dateTimeField29.getAsShortText((long) (-1), locale35);
        java.util.Locale locale38 = java.util.Locale.ENGLISH;
        java.lang.String str39 = dateTimeField29.getAsShortText(3172001, locale38);
        java.lang.String str40 = locale38.getDisplayVariant();
        java.lang.String str41 = property17.getAsText(locale38);
        org.joda.time.YearMonthDay yearMonthDay43 = property17.addWrapFieldToCopy((-4));
        org.joda.time.YearMonthDay yearMonthDay45 = property17.setCopy("52");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay47 = yearMonthDay45.withMonthOfYear(26550);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26550 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1899 + "'", int7 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertEquals(date25.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1" + "'", str33, "1");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1" + "'", str36, "1");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "3172001" + "'", str39, "3172001");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022" + "'", str41, "2022");
        org.junit.Assert.assertNotNull(yearMonthDay43);
        org.junit.Assert.assertNotNull(yearMonthDay45);
    }

    @Test
    public void test12469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12469");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (short) 100);
        int int2 = localTime1.getMillisOfDay();
        org.joda.time.LocalTime localTime4 = localTime1.withMillisOfSecond((int) ' ');
        org.joda.time.LocalTime localTime6 = localTime1.withSecondOfMinute(4);
        int int8 = localTime1.getValue(3);
        org.joda.time.LocalTime localTime10 = localTime1.plusMillis(41);
        org.joda.time.LocalTime localTime12 = localTime1.plusHours(26188548);
        org.joda.time.LocalTime localTime14 = localTime1.plusHours(52);
        java.util.Date date20 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.fromDateFields(date20);
        org.joda.time.LocalDate.Property property22 = localDate21.weekOfWeekyear();
        org.joda.time.LocalDate localDate23 = property22.getLocalDate();
        org.joda.time.Period period25 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period27 = org.joda.time.Period.minutes(1);
        java.lang.String str28 = period27.toString();
        org.joda.time.Period period29 = period25.withFields((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Period period31 = period29.plusMillis(100);
        org.joda.time.Period period32 = period29.negated();
        org.joda.time.Period period34 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period36 = org.joda.time.Period.minutes(1);
        java.lang.String str37 = period36.toString();
        org.joda.time.Period period38 = period34.withFields((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Period period40 = period38.plusMillis(100);
        boolean boolean41 = period32.equals((java.lang.Object) period40);
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period43 = period32.withFields((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.LocalDate localDate44 = localDate23.plus((org.joda.time.ReadablePeriod) mutablePeriod42);
        org.joda.time.Period period46 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period48 = org.joda.time.Period.minutes(1);
        java.lang.String str49 = period48.toString();
        org.joda.time.Period period50 = period46.withFields((org.joda.time.ReadablePeriod) period48);
        int int51 = period46.getMinutes();
        org.joda.time.Period period52 = period46.toPeriod();
        org.joda.time.LocalDate localDate53 = localDate44.plus((org.joda.time.ReadablePeriod) period46);
        org.joda.time.LocalDate.Property property54 = localDate53.monthOfYear();
        org.joda.time.LocalDate.Property property55 = localDate53.yearOfEra();
        org.joda.time.LocalDate localDate56 = property55.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            int int57 = localTime1.compareTo((org.joda.time.ReadablePartial) localDate56);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 116 + "'", int2 == 116);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 116 + "'", int8 == 116);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertEquals(date20.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PT1M" + "'", str28, "PT1M");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT1M" + "'", str37, "PT1M");
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT1M" + "'", str49, "PT1M");
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDate56);
    }

    @Test
    public void test12470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12470");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.secondOfMinute();
        int int7 = localDateTime2.getHourOfDay();
        int int8 = localDateTime2.getWeekyear();
        org.joda.time.Period period10 = org.joda.time.Period.years(59);
        org.joda.time.Period period12 = period10.withWeeks((int) (byte) 100);
        org.joda.time.Period period14 = period10.multipliedBy((int) (byte) -1);
        org.joda.time.Period period15 = period10.normalizedStandard();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime2.plus((org.joda.time.ReadablePeriod) period10);
        int int17 = localDateTime2.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime2.minusMonths((int) ' ');
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test12471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12471");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay4.minusHours(54);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay8.plusMillis(40);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay8.minuteOfHour();
        int int12 = timeOfDay8.getSecondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
    }

    @Test
    public void test12472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12472");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.setLenient(false);
        long long3 = calendar0.getTimeInMillis();
        java.util.Locale locale6 = new java.util.Locale("Feb", "1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.017Z");
        boolean boolean7 = calendar0.after((java.lang.Object) locale6);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.fromCalendarFields(calendar0);
        org.joda.time.LocalDate localDate10 = localDate8.plusMonths((int) 'x');
        org.joda.time.LocalDate.Property property11 = localDate8.yearOfCentury();
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=1645514669743,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=0032-02-22T00:00:00.003+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=29,MILLISECOND=759,ZONE_OFFSET=16,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645514669743L + "'", long3 == 1645514669743L);
        org.junit.Assert.assertEquals(locale6.toString(), "feb_1969-12-31T23:59:59.999Z/1970-01-01T00:00:00.017Z");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test12473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12473");
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) 5, chronology4);
        org.joda.time.TimeOfDay timeOfDay6 = org.joda.time.TimeOfDay.fromMillisOfDay((long) 3172001, chronology4);
        org.joda.time.DurationField durationField7 = chronology4.halfdays();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.minuteOfDay();
        java.util.Calendar calendar10 = java.util.Calendar.getInstance();
        int int12 = calendar10.getMaximum((int) (short) 0);
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromCalendarFields(calendar10);
        calendar10.set(10, (int) (byte) 0, (int) '#', (int) (byte) -1, (int) ' ');
        org.joda.time.TimeOfDay timeOfDay20 = org.joda.time.TimeOfDay.fromCalendarFields(calendar10);
        org.joda.time.TimeOfDay timeOfDay22 = timeOfDay20.plusMinutes((int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        int int26 = dateTimeZone24.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone24);
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime34 = timeOfDay32.toDateTimeToday(dateTimeZone33);
        mutableDateTime27.setZoneRetainFields(dateTimeZone33);
        mutableDateTime27.setSecondOfMinute((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        int int40 = dateTimeZone38.getStandardOffset((long) 100);
        mutableDateTime27.setZone(dateTimeZone38);
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology46 = localTime45.getChronology();
        org.joda.time.Interval interval47 = new org.joda.time.Interval((-1L), (long) 17, chronology46);
        mutableDateTime27.setChronology(chronology46);
        java.lang.String str49 = chronology46.toString();
        org.joda.time.TimeOfDay timeOfDay54 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime56 = timeOfDay54.toDateTimeToday(dateTimeZone55);
        org.joda.time.Chronology chronology57 = chronology46.withZone(dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime(chronology57);
        org.joda.time.Period period59 = new org.joda.time.Period((long) 53, chronology57);
        org.joda.time.Period period61 = period59.multipliedBy(12160);
        org.joda.time.TimeOfDay timeOfDay63 = timeOfDay22.withPeriodAdded((org.joda.time.ReadablePeriod) period59, 81);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone66 = dateTimeZone65.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone69 = dateTimeZone68.toTimeZone();
        boolean boolean70 = timeZone66.hasSameRules(timeZone69);
        java.util.Locale locale71 = java.util.Locale.KOREAN;
        java.util.Calendar calendar72 = java.util.Calendar.getInstance(timeZone69, locale71);
        int int73 = calendar72.getWeeksInWeekYear();
        org.joda.time.TimeOfDay timeOfDay74 = org.joda.time.TimeOfDay.fromCalendarFields(calendar72);
        org.joda.time.TimeOfDay timeOfDay76 = timeOfDay74.minusMinutes(0);
        org.joda.time.TimeOfDay timeOfDay78 = timeOfDay76.plusHours(3);
        int[] intArray79 = timeOfDay78.getValues();
        chronology4.validate((org.joda.time.ReadablePartial) timeOfDay63, intArray79);
        org.joda.time.TimeOfDay timeOfDay82 = timeOfDay63.plusMinutes(75);
        org.joda.time.TimeOfDay timeOfDay84 = timeOfDay63.plusMillis(26277709);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=-61848836850244,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=0032-02-22T00:00:00.003+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=10,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=2,DAY_OF_MONTH=3,DAY_OF_YEAR=34,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=32,SECOND=29,MILLISECOND=772,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertNotNull(timeOfDay22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 16 + "'", int26 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 16 + "'", int40 == 16);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ISOChronology[UTC]" + "'", str49, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(timeOfDay63);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(timeZone66);
        org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(timeZone69);
        org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar72);
// flaky:         org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=1645514669756,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=29,MILLISECOND=772,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 53 + "'", int73 == 53);
        org.junit.Assert.assertNotNull(timeOfDay74);
        org.junit.Assert.assertNotNull(timeOfDay76);
        org.junit.Assert.assertNotNull(timeOfDay78);
        org.junit.Assert.assertNotNull(intArray79);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[10, 24, 29, 772]");
        org.junit.Assert.assertNotNull(timeOfDay82);
        org.junit.Assert.assertNotNull(timeOfDay84);
    }

    @Test
    public void test12474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12474");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        boolean boolean7 = timeZone3.hasSameRules(timeZone6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Calendar calendar9 = java.util.Calendar.getInstance(timeZone6, locale8);
        java.util.Calendar.Builder builder10 = builder0.setTimeZone(timeZone6);
        java.util.Calendar.Builder builder15 = builder0.setTimeOfDay(0, (int) ' ', 12, 11);
        java.util.Calendar.Builder builder20 = builder0.setTimeOfDay(0, 99, 17, 59);
        java.util.Calendar.Builder builder24 = builder0.setDate((int) (byte) 10, 0, 2);
        java.util.Calendar.Builder builder28 = builder0.setTimeOfDay((-1), (int) (byte) -1, 2922789);
        java.util.Calendar.Builder builder32 = builder0.setDate(26219841, 17, 2922789);
        java.util.Calendar.Builder builder37 = builder0.setTimeOfDay((-9), 784, 38090, 20);
        java.util.Calendar.Builder builder40 = builder37.set(14, 35);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        int int43 = dateTimeZone41.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(dateTimeZone41);
        org.joda.time.TimeOfDay timeOfDay49 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime51 = timeOfDay49.toDateTimeToday(dateTimeZone50);
        mutableDateTime44.setZoneRetainFields(dateTimeZone50);
        mutableDateTime44.setSecondOfMinute((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        int int57 = dateTimeZone55.getStandardOffset((long) 100);
        mutableDateTime44.setZone(dateTimeZone55);
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology63 = localTime62.getChronology();
        org.joda.time.Interval interval64 = new org.joda.time.Interval((-1L), (long) 17, chronology63);
        mutableDateTime44.setChronology(chronology63);
        java.lang.String str66 = chronology63.toString();
        org.joda.time.DateTimeField dateTimeField67 = chronology63.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime68 = org.joda.time.MutableDateTime.now(chronology63);
        org.joda.time.DateTimeField dateTimeField69 = chronology63.halfdayOfDay();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((long) (byte) -1, 86400000L);
        int[] intArray75 = chronology63.get((org.joda.time.ReadablePeriod) mutablePeriod72, 3172001L, (long) 180);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Calendar.Builder builder76 = builder37.setFields(intArray75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: field is invalid");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=1645514669807,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=24,SECOND=29,MILLISECOND=823,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 16 + "'", int43 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 16 + "'", int57 == 16);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ISOChronology[UTC]" + "'", str66, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(intArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[0, 0, 0, 0, 0, -52, -51, -821]");
    }

    @Test
    public void test12475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12475");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay8 = property7.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay10 = property7.addToCopy(0);
        int int11 = property7.getMinimumValueOverall();
        org.joda.time.TimeOfDay timeOfDay13 = property7.addToCopy((int) ' ');
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay13.withSecondOfMinute(17);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay15.plusHours((int) ' ');
        org.joda.time.Interval interval20 = new org.joda.time.Interval((long) (-1), 97L);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        int int23 = dateTimeZone21.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(dateTimeZone21);
        org.joda.time.ReadableDuration readableDuration25 = null;
        mutableDateTime24.add(readableDuration25, 0);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime24.dayOfWeek();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime24.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime30 = property29.roundHalfEven();
        boolean boolean31 = interval20.isBefore((org.joda.time.ReadableInstant) mutableDateTime30);
        int int32 = mutableDateTime30.getHourOfDay();
        org.joda.time.DateTime dateTime33 = timeOfDay17.toDateTime((org.joda.time.ReadableInstant) mutableDateTime30);
        int int34 = mutableDateTime30.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime30.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 16 + "'", int23 == 16);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 22 + "'", int34 == 22);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test12476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12476");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.Instant instant2 = dateTime1.toInstant();
        org.joda.time.DateTime dateTime4 = dateTime1.withWeekOfWeekyear(13);
        org.joda.time.DateTime dateTime6 = dateTime1.minusWeeks((-5599659));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime8 = dateTime6.withDayOfWeek(26428);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26428 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test12477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12477");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.DateTimeField[] dateTimeFieldArray9 = localDate6.getFields();
        org.joda.time.DateTime dateTime10 = localDate6.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate12 = localDate6.withWeekyear(20);
        org.joda.time.LocalDate localDate14 = localDate12.withDayOfYear(24);
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldArray9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test12478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12478");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(chronology0);
    }

    @Test
    public void test12479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12479");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime3.add(readableDuration4, 0);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime3.dayOfWeek();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime3.yearOfEra();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology12 = localTime11.getChronology();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 5, chronology12);
        org.joda.time.Chronology chronology14 = chronology12.withUTC();
        mutableDateTime3.setChronology(chronology12);
        org.joda.time.DateTimeField dateTimeField16 = chronology12.millisOfSecond();
        long long19 = dateTimeField16.add((long) 0, 2000);
        int int20 = dateTimeField16.getMinimumValue();
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray26 = timeOfDay25.getFields();
        org.joda.time.Period period28 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period30 = org.joda.time.Period.minutes(1);
        java.lang.String str31 = period30.toString();
        org.joda.time.Period period32 = period28.withFields((org.joda.time.ReadablePeriod) period30);
        org.joda.time.Period period34 = period32.plusMillis(100);
        org.joda.time.Period period35 = period32.negated();
        org.joda.time.Period period37 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period39 = org.joda.time.Period.minutes(1);
        java.lang.String str40 = period39.toString();
        org.joda.time.Period period41 = period37.withFields((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Period period43 = period41.plusMillis(100);
        boolean boolean44 = period35.equals((java.lang.Object) period43);
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period46 = period35.withFields((org.joda.time.ReadablePeriod) mutablePeriod45);
        org.joda.time.TimeOfDay timeOfDay47 = timeOfDay25.plus((org.joda.time.ReadablePeriod) period35);
        org.joda.time.TimeOfDay timeOfDay48 = org.joda.time.TimeOfDay.MIDNIGHT;
        org.joda.time.TimeOfDay timeOfDay50 = timeOfDay48.plusSeconds(26164018);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = timeOfDay48.getFieldType(1);
        org.joda.time.TimeOfDay.Property property53 = timeOfDay25.property(dateTimeFieldType52);
        org.joda.time.TimeOfDay.Property property54 = timeOfDay25.millisOfSecond();
        int int55 = dateTimeField16.getMaximumValue((org.joda.time.ReadablePartial) timeOfDay25);
        org.joda.time.TimeOfDay timeOfDay57 = timeOfDay25.plusMillis((-113763012));
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 16 + "'", int2 == 16);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2000L + "'", long19 == 2000L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldArray26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT1M" + "'", str31, "PT1M");
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT1M" + "'", str40, "PT1M");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(timeOfDay47);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 999 + "'", int55 == 999);
        org.junit.Assert.assertNotNull(timeOfDay57);
    }

    @Test
    public void test12480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12480");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period12 = org.joda.time.Period.minutes(1);
        java.lang.String str13 = period12.toString();
        org.joda.time.Period period14 = period10.withFields((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period16 = period14.plusMillis(100);
        org.joda.time.Period period17 = period14.negated();
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period23 = period19.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period23.plusMillis(100);
        boolean boolean26 = period17.equals((java.lang.Object) period25);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period28 = period17.withFields((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.LocalDate localDate29 = localDate8.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.Period period31 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period33 = org.joda.time.Period.minutes(1);
        java.lang.String str34 = period33.toString();
        org.joda.time.Period period35 = period31.withFields((org.joda.time.ReadablePeriod) period33);
        int int36 = period31.getMinutes();
        org.joda.time.Period period37 = period31.toPeriod();
        org.joda.time.LocalDate localDate38 = localDate29.plus((org.joda.time.ReadablePeriod) period31);
        java.util.Locale locale40 = java.util.Locale.CHINA;
        java.lang.String str41 = localDate29.toString("52", locale40);
        org.joda.time.TimeOfDay timeOfDay46 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime48 = timeOfDay46.toDateTimeToday(dateTimeZone47);
        org.joda.time.TimeOfDay.Property property49 = timeOfDay46.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay50 = property49.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = timeOfDay50.getFieldType(0);
        org.joda.time.TimeOfDay timeOfDay54 = timeOfDay50.plusMinutes((-2922751));
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray55 = timeOfDay50.getFieldTypes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate29, (org.joda.time.ReadablePartial) timeOfDay50);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT1M" + "'", str13, "PT1M");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1M" + "'", str22, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT1M" + "'", str34, "PT1M");
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "52" + "'", str41, "52");
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(timeOfDay50);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(timeOfDay54);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray55);
    }

    @Test
    public void test12481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12481");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale3 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str4 = locale1.getDisplayVariant(locale3);
        java.util.Locale locale5 = locale3.stripExtensions();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str8 = dateTimeZone7.getID();
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str13 = locale10.getDisplayVariant(locale12);
        java.lang.String str14 = dateTimeZone7.getName((long) 5, locale10);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale10.getDisplayScript(locale15);
        java.lang.String str17 = locale5.getDisplayName(locale10);
        java.lang.String str18 = locale10.getISO3Language();
        java.util.Locale.Builder builder19 = builder0.setLocale(locale10);
        java.util.Locale locale20 = builder0.build();
        java.util.Date date26 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate27 = org.joda.time.LocalDate.fromDateFields(date26);
        org.joda.time.LocalDate.Property property28 = localDate27.weekOfWeekyear();
        org.joda.time.LocalDate localDate29 = property28.getLocalDate();
        org.joda.time.DateTimeField dateTimeField30 = property28.getField();
        long long33 = dateTimeField30.set((long) 15, 12);
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        java.lang.String str38 = dateTimeField30.getAsText((long) 1970, locale36);
        java.lang.String str39 = locale36.getCountry();
        java.util.Locale.Builder builder40 = builder0.setLocale(locale36);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder42 = builder40.setScript("Etc/UTC");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: Etc/UTC [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.016" + "'", str8, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.016" + "'", str14, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "kor" + "'", str18, "kor");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals(date26.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 6652800015L + "'", long33 == 6652800015L);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1" + "'", str38, "1");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test12482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12482");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((-2));
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(obj0, dateTimeZone2);
        long long6 = dateTimeZone2.adjustOffset(1456102372001L, true);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1456102372001L + "'", long6 == 1456102372001L);
    }

    @Test
    public void test12483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12483");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str3 = dateTimeZone2.getID();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(dateTimeZone2);
        org.joda.time.DateTime dateTime6 = dateTime4.minusHours((int) ' ');
        org.joda.time.Period period7 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime9 = dateTime4.minus((-6652799968L));
        int int10 = dateTime4.getDayOfWeek();
        org.joda.time.DateTime.Property property11 = dateTime4.era();
        org.joda.time.DateTime dateTime12 = property11.roundHalfFloorCopy();
        int int13 = dateTime12.getYearOfCentury();
        org.joda.time.LocalTime localTime14 = dateTime12.toLocalTime();
        org.joda.time.LocalTime localTime16 = localTime14.minusHours(26325);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:00.016" + "'", str3, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test12484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12484");
        org.joda.time.TimeOfDay timeOfDay5 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime7 = timeOfDay5.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.withCenturyOfEra(10);
        boolean boolean10 = dateTime9.isEqualNow();
        org.joda.time.Chronology chronology11 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.secondOfMinute();
        org.joda.time.DurationField durationField13 = chronology11.hours();
        org.joda.time.TimeOfDay timeOfDay14 = new org.joda.time.TimeOfDay(1645514222758L, chronology11);
        org.joda.time.DateTimeField dateTimeField15 = chronology11.era();
        org.joda.time.TimeOfDay timeOfDay23 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime25 = timeOfDay23.toDateTimeToday(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime25.withCenturyOfEra(10);
        boolean boolean28 = dateTime27.isEqualNow();
        org.joda.time.Chronology chronology29 = dateTime27.getChronology();
        org.joda.time.TimeOfDay timeOfDay30 = new org.joda.time.TimeOfDay(15, 5, chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.clockhourOfDay();
        org.joda.time.TimeOfDay timeOfDay32 = new org.joda.time.TimeOfDay(1L, chronology29);
        org.joda.time.TimeOfDay.Property property33 = timeOfDay32.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str36 = dateTimeZone35.getID();
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.util.Locale locale40 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str41 = locale38.getDisplayVariant(locale40);
        java.lang.String str42 = dateTimeZone35.getName((long) 5, locale38);
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.lang.String str44 = locale38.getDisplayScript(locale43);
        java.lang.String str45 = property33.getAsShortText(locale43);
        int int46 = dateTimeField15.getMaximumTextLength(locale43);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.016" + "'", str36, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.016" + "'", str42, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0" + "'", str45, "0");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
    }

    @Test
    public void test12485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12485");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period12 = org.joda.time.Period.minutes(1);
        java.lang.String str13 = period12.toString();
        org.joda.time.Period period14 = period10.withFields((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period16 = period14.plusMillis(100);
        org.joda.time.Period period17 = period14.negated();
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period23 = period19.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period23.plusMillis(100);
        boolean boolean26 = period17.equals((java.lang.Object) period25);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period28 = period17.withFields((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.LocalDate localDate29 = localDate8.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.LocalDate localDate31 = localDate29.withDayOfMonth(5);
        org.joda.time.LocalDate.Property property32 = localDate29.weekyear();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        int int35 = dateTimeZone33.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(dateTimeZone33);
        org.joda.time.ReadableDuration readableDuration37 = null;
        mutableDateTime36.add(readableDuration37, 0);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime36.dayOfWeek();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime36.yearOfEra();
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay((java.lang.Object) mutableDateTime36);
        org.joda.time.YearMonthDay yearMonthDay44 = yearMonthDay42.plusMonths(7);
        int[] intArray45 = yearMonthDay42.getValues();
        org.joda.time.YearMonthDay.Property property46 = yearMonthDay42.dayOfMonth();
        int int47 = property46.get();
        org.joda.time.YearMonthDay yearMonthDay49 = property46.addWrapFieldToCopy(26286964);
        boolean boolean50 = localDate29.equals((java.lang.Object) yearMonthDay49);
        org.joda.time.YearMonthDay yearMonthDay52 = yearMonthDay49.plusMonths(2068);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField54 = yearMonthDay49.getField(726);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 726");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT1M" + "'", str13, "PT1M");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1M" + "'", str22, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 16 + "'", int35 == 16);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(yearMonthDay44);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[2022, 2, 22]");
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 22 + "'", int47 == 22);
        org.junit.Assert.assertNotNull(yearMonthDay49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(yearMonthDay52);
    }

    @Test
    public void test12486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12486");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay4.minusSeconds(3);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = org.joda.time.format.ISODateTimeFormat.localTimeParser();
        java.lang.String str8 = timeOfDay4.toString(dateTimeFormatter7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = org.joda.time.format.ISODateTimeFormat.basicDateTimeNoMillis();
        java.lang.String str10 = timeOfDay4.toString(dateTimeFormatter9);
        boolean boolean11 = dateTimeFormatter9.isOffsetParsed();
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str15 = locale12.getDisplayVariant(locale14);
        java.util.Locale locale16 = locale14.stripExtensions();
        org.joda.time.TimeOfDay timeOfDay21 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime23 = timeOfDay21.toDateTimeToday(dateTimeZone22);
        org.joda.time.TimeOfDay.Property property24 = timeOfDay21.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay25 = property24.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay27 = property24.addToCopy(0);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forOffsetMillis(16);
        java.lang.String str30 = dateTimeZone29.getID();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale34 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str35 = locale32.getDisplayVariant(locale34);
        java.lang.String str36 = dateTimeZone29.getName((long) 5, locale32);
        java.lang.String str37 = property24.getAsText(locale32);
        java.lang.String str38 = locale14.getDisplayScript(locale32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter9.withLocale(locale32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter9.withOffsetParsed();
        boolean boolean41 = dateTimeFormatter40.isParser();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        int int44 = dateTimeZone42.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone42);
        java.lang.String str46 = dateTimeZone42.toString();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter40.withZone(dateTimeZone42);
        java.util.Locale locale48 = dateTimeFormatter47.getLocale();
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "00" + "'", str8, "00");
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT005252" + "'", str10, "\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdT005252");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(timeOfDay25);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.016" + "'", str30, "+00:00:00.016");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.016" + "'", str36, "+00:00:00.016");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "52" + "'", str37, "52");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 16 + "'", int44 == 16);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.016" + "'", str46, "+00:00:00.016");
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertNull(locale48);
    }

    @Test
    public void test12487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12487");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Period period3 = org.joda.time.Period.minutes(1);
        java.lang.String str4 = period3.toString();
        org.joda.time.LocalTime localTime5 = localTime1.plus((org.joda.time.ReadablePeriod) period3);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) 10, chronology7);
        org.joda.time.Chronology chronology10 = null;
        mutablePeriod8.setPeriod((long) 0, chronology10);
        org.joda.time.LocalTime localTime13 = localTime5.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod8, 55);
        org.joda.time.LocalTime.Property property14 = localTime5.minuteOfHour();
        org.joda.time.LocalTime localTime16 = property14.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.LocalTime localTime18 = localTime16.plusMillis(292278993);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime20 = localTime16.withHourOfDay((-945));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -945 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT1M" + "'", str4, "PT1M");
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test12488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12488");
        java.util.Date date13 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        int int14 = date13.getSeconds();
        date13.setHours((int) (byte) 1);
        org.joda.time.YearMonthDay yearMonthDay17 = org.joda.time.YearMonthDay.fromDateFields(date13);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime();
        java.util.Date date27 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate28 = org.joda.time.LocalDate.fromDateFields(date27);
        int int29 = localDate28.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        int int32 = dateTimeZone30.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime33 = localDate28.toDateTimeAtCurrentTime(dateTimeZone30);
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone30);
        mutableDateTime18.setZone(dateTimeZone30);
        org.joda.time.DateTime dateTime36 = yearMonthDay17.toDateTimeAtMidnight(dateTimeZone30);
        long long38 = dateTimeZone30.nextTransition(0L);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 42541, dateTimeZone30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((-26188859), 42583, 26666251, 26276193, 86340000, (-2), 458, dateTimeZone30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26276193 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date13.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(yearMonthDay17);
        org.junit.Assert.assertEquals(date27.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1899 + "'", int29 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 16 + "'", int32 == 16);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
    }

    @Test
    public void test12489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12489");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray5 = timeOfDay4.getFields();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.DateTime dateTime7 = timeOfDay4.toDateTimeToday(dateTimeZone6);
        org.joda.time.DateTime dateTime9 = dateTime7.plus((long) '4');
        org.joda.time.DateTime.Property property10 = dateTime7.yearOfCentury();
        org.joda.time.DateTime dateTime11 = property10.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        int int14 = dateTimeZone12.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime15.add(readableDuration16, 0);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime15.dayOfWeek();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime15.minuteOfDay();
        org.joda.time.TimeOfDay timeOfDay25 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime27 = timeOfDay25.toDateTimeToday(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime27.withCenturyOfEra(10);
        org.joda.time.DateTime dateTime31 = dateTime27.plusDays((int) (byte) -1);
        java.util.Date date32 = dateTime31.toDate();
        org.joda.time.DateTime.Property property33 = dateTime31.dayOfMonth();
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateTime31);
        int int35 = dateTime11.compareTo((org.joda.time.ReadableInstant) mutableDateTime15);
        int int36 = dateTime11.getDayOfYear();
        org.joda.time.DateTime dateTime38 = dateTime11.minusDays((int) '#');
        org.joda.time.DateTime dateTime40 = dateTime11.minusMinutes(5452000);
        org.junit.Assert.assertNotNull(dateTimeFieldArray5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 16 + "'", int14 == 16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Mon Feb 21 00:52:52 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test12490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12490");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.LocalDate localDate10 = property7.addToCopy(100);
        org.joda.time.LocalDate localDate11 = property7.withMinimumValue();
        java.lang.String str12 = property7.getAsText();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = property7.setCopy(26623862);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26623862 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "10" + "'", str12, "10");
    }

    @Test
    public void test12491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12491");
        org.joda.time.TimeOfDay timeOfDay4 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime6 = timeOfDay4.toDateTimeToday(dateTimeZone5);
        org.joda.time.TimeOfDay.Property property7 = timeOfDay4.secondOfMinute();
        org.joda.time.TimeOfDay timeOfDay8 = property7.withMaximumValue();
        org.joda.time.TimeOfDay timeOfDay10 = property7.addToCopy(0);
        java.lang.String str11 = property7.toString();
        org.joda.time.DurationField durationField12 = property7.getRangeDurationField();
        org.joda.time.TimeOfDay timeOfDay13 = property7.getTimeOfDay();
        org.joda.time.DurationField durationField14 = property7.getDurationField();
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        java.util.Locale.Builder builder20 = builder17.setExtension('x', "weekyear");
        java.util.Locale.Builder builder22 = builder17.setVariant("months");
        java.util.Calendar.Builder builder23 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder26 = builder23.set(2, 32772);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("PT1M");
        java.lang.String str30 = locale27.getDisplayVariant(locale29);
        java.util.Calendar.Builder builder31 = builder23.setLocale(locale29);
        java.util.Locale.Builder builder32 = builder17.setLocale(locale29);
        boolean boolean33 = property7.equals((java.lang.Object) builder32);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder35 = builder32.setScript("935");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 935 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Property[secondOfMinute]" + "'", str11, "Property[secondOfMinute]");
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test12492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12492");
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.hours();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField6 = chronology3.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(chronology3);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(0L, chronology3);
        org.joda.time.DateTimeField dateTimeField9 = chronology3.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((java.lang.Object) dateTimeField9, dateTimeZone10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.field.PreciseDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeField9);
    }

    @Test
    public void test12493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12493");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Period period3 = org.joda.time.Period.minutes(1);
        java.lang.String str4 = period3.toString();
        org.joda.time.LocalTime localTime5 = localTime1.plus((org.joda.time.ReadablePeriod) period3);
        org.joda.time.LocalTime localTime7 = localTime5.minusMillis(7);
        org.joda.time.LocalTime.Property property8 = localTime5.secondOfMinute();
        org.joda.time.LocalTime localTime9 = property8.withMaximumValue();
        org.joda.time.LocalTime localTime11 = localTime9.plusHours(5);
        org.joda.time.LocalTime.Property property12 = localTime11.minuteOfHour();
        org.joda.time.LocalTime localTime14 = property12.addCopy(26594);
        org.joda.time.LocalTime localTime16 = property12.addNoWrapToCopy(89);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT1M" + "'", str4, "PT1M");
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test12494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12494");
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime();
        java.util.Date date17 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.fromDateFields(date17);
        int int19 = localDate18.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        int int22 = dateTimeZone20.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime23 = localDate18.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight24 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone20);
        mutableDateTime8.setZone(dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) 1975, dateTimeZone20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(4417388, 26356741, 26613, (-111), 3600000, 119, 1968, dateTimeZone20);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -111 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date17.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1899 + "'", int19 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 16 + "'", int22 == 16);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test12495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12495");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate6.plusWeeks((int) (short) 0);
        org.joda.time.LocalDate localDate12 = localDate6.minusMonths(0);
        org.joda.time.LocalDate.Property property13 = localDate12.weekyear();
        org.joda.time.LocalDate localDate14 = property13.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        org.joda.time.LocalDate localDate16 = property13.roundHalfCeilingCopy();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(7, (-9), 26165226, 53, 14, 2022, 2, 48);
        int int26 = mutablePeriod25.getYears();
        mutablePeriod25.addYears(1899);
        org.joda.time.Period period30 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period32 = org.joda.time.Period.minutes(1);
        java.lang.String str33 = period32.toString();
        org.joda.time.Period period34 = period30.withFields((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Period period36 = period34.plusMillis(100);
        org.joda.time.Period period37 = period34.negated();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType39 = dateTimeFieldType38.getDurationType();
        boolean boolean40 = period34.isSupported(durationFieldType39);
        int int41 = mutablePeriod25.get(durationFieldType39);
        java.lang.String str42 = durationFieldType39.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate44 = localDate16.withFieldAdded(durationFieldType39, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minutes' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 7 + "'", int26 == 7);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT1M" + "'", str33, "PT1M");
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2022 + "'", int41 == 2022);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "minutes" + "'", str42, "minutes");
    }

    @Test
    public void test12496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12496");
        java.util.Date date8 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date8);
        int int10 = localDate9.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) 100);
        org.joda.time.DateTime dateTime14 = localDate9.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((int) (short) 1, (int) (byte) 1, (int) (short) 10, dateTimeZone11);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.withCenturyOfEra((int) (short) 1);
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period23 = period19.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period23.plusMillis(100);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.months();
        int int27 = period25.get(durationFieldType26);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight15.withPeriodAdded((org.joda.time.ReadablePeriod) period25, 0);
        org.joda.time.DateMidnight.Property property30 = dateMidnight15.monthOfYear();
        org.joda.time.DateMidnight dateMidnight32 = property30.addToCopy(15);
        org.joda.time.DateMidnight dateMidnight33 = property30.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight35 = property30.addWrapFieldToCopy(59);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight37 = property30.setCopy("+07:17:37.730");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"+07:17:37.730\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date8.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1899 + "'", int10 == 1899);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1M" + "'", str22, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateMidnight35);
    }

    @Test
    public void test12497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12497");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 10, chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekyear((int) (short) 0);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((long) 10, chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod15, 15);
        org.joda.time.LocalDateTime.Property property18 = localDateTime10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime10.plusSeconds(11);
        int int21 = localDateTime10.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime10.minusHours(2016);
        int int24 = localDateTime23.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        int int28 = dateTimeZone26.getStandardOffset((long) 100);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone26);
        org.joda.time.TimeOfDay timeOfDay34 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime36 = timeOfDay34.toDateTimeToday(dateTimeZone35);
        mutableDateTime29.setZoneRetainFields(dateTimeZone35);
        mutableDateTime29.setSecondOfMinute((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        int int42 = dateTimeZone40.getStandardOffset((long) 100);
        mutableDateTime29.setZone(dateTimeZone40);
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((long) (short) 100);
        org.joda.time.Chronology chronology48 = localTime47.getChronology();
        org.joda.time.Interval interval49 = new org.joda.time.Interval((-1L), (long) 17, chronology48);
        mutableDateTime29.setChronology(chronology48);
        java.lang.String str51 = chronology48.toString();
        org.joda.time.TimeOfDay timeOfDay56 = new org.joda.time.TimeOfDay((int) (short) 0, (int) '4', (int) '4', 0);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime58 = timeOfDay56.toDateTimeToday(dateTimeZone57);
        org.joda.time.Chronology chronology59 = chronology48.withZone(dateTimeZone57);
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime(chronology59);
        org.joda.time.Period period61 = new org.joda.time.Period((long) 53, chronology59);
        org.joda.time.DateTimeField dateTimeField62 = chronology59.clockhourOfDay();
        org.joda.time.DurationField durationField63 = chronology59.hours();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((java.lang.Object) localDateTime23, chronology59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.LocalDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 4 + "'", int21 == 4);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9 + "'", int24 == 9);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 16 + "'", int28 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 16 + "'", int42 == 16);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ISOChronology[UTC]" + "'", str51, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
    }

    @Test
    public void test12498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12498");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 10, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMillis((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYearOfCentury(1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime6.millisOfSecond();
        int int10 = localDateTime6.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property11 = localDateTime6.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.withMinuteOfHour(6);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMonths(26665736);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 26 + "'", int10 == 26);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test12499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12499");
        java.util.Date date5 = new java.util.Date((int) (byte) -1, (-1), 100, (int) (byte) 1, (int) '#');
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekOfWeekyear();
        org.joda.time.LocalDate localDate8 = property7.getLocalDate();
        org.joda.time.Period period10 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period12 = org.joda.time.Period.minutes(1);
        java.lang.String str13 = period12.toString();
        org.joda.time.Period period14 = period10.withFields((org.joda.time.ReadablePeriod) period12);
        org.joda.time.Period period16 = period14.plusMillis(100);
        org.joda.time.Period period17 = period14.negated();
        org.joda.time.Period period19 = org.joda.time.Period.minutes(1);
        org.joda.time.Period period21 = org.joda.time.Period.minutes(1);
        java.lang.String str22 = period21.toString();
        org.joda.time.Period period23 = period19.withFields((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period23.plusMillis(100);
        boolean boolean26 = period17.equals((java.lang.Object) period25);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period28 = period17.withFields((org.joda.time.ReadablePeriod) mutablePeriod27);
        org.joda.time.LocalDate localDate29 = localDate8.plus((org.joda.time.ReadablePeriod) mutablePeriod27);
        int int30 = mutablePeriod27.getWeeks();
        mutablePeriod27.addMonths(55);
        mutablePeriod27.addHours(3172000);
        mutablePeriod27.setWeeks((int) 'a');
        mutablePeriod27.addHours((-26219842));
        org.joda.time.Period period39 = mutablePeriod27.toPeriod();
        int int40 = period39.getYears();
        // The following exception was thrown during execution in test generation
        try {
            int int42 = period39.getValue(459);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 459");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date5.toString(), "Fri Mar 10 01:35:00 GMT+00:00 1899");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT1M" + "'", str13, "PT1M");
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT1M" + "'", str22, "PT1M");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
    }

    @Test
    public void test12500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest24.test12500");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar calendar1 = builder0.build();
        java.util.Calendar.Builder builder3 = builder0.setLenient(true);
        java.util.Calendar.Builder builder8 = builder0.setTimeOfDay((-11), 26165226, 58, 12);
        java.util.Calendar.Builder builder12 = builder8.setTimeOfDay((-8), 2000, 32769);
        java.util.Calendar calendar13 = builder12.build();
        calendar13.setLenient(false);
        org.joda.time.YearMonthDay yearMonthDay16 = org.joda.time.YearMonthDay.fromCalendarFields(calendar13);
        java.util.TimeZone timeZone17 = calendar13.getTimeZone();
        java.time.Instant instant18 = calendar13.toInstant();
        java.util.Date date19 = java.util.Date.from(instant18);
        org.junit.Assert.assertNotNull(calendar1);
        org.junit.Assert.assertEquals(calendar1.toString(), "java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=0032-02-22T00:00:00.003+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(calendar13);
        org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=123968984,areFieldsSet=true,areAllFieldsSet=true,lenient=false,zone=java.util.SimpleTimeZone[id=0032-02-22T00:00:00.003+00:00:00.016,offset=16,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=2,DAY_OF_YEAR=2,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=26,SECOND=9,MILLISECOND=0,ZONE_OFFSET=16,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(date19);
        org.junit.Assert.assertEquals(date19.toString(), "Fri Jan 02 10:26:09 GMT+00:00 1970");
    }
}
